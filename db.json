{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/uploads/wechat-qcode.jpg","path":"uploads/wechat-qcode.jpg","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/uploads/avatar.png","path":"uploads/avatar.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"themes/next/.bowerrc","hash":"334da94ca6f024d60d012cc26ea655681e724ad8","modified":1514854236835},{"_id":"themes/next/.gitattributes","hash":"8454b9313cb1a97b63fb87e2d29daee497ce6249","modified":1514854236851},{"_id":"themes/next/.editorconfig","hash":"211d2c92bfdddb3e81ea946f4ca7a539f150f4da","modified":1514854236851},{"_id":"themes/next/.gitignore","hash":"de5b9b9e5b313b4a86e805b02f334d35c87bfe56","modified":1514854236851},{"_id":"themes/next/.hound.yml","hash":"289dcf5bfe92dbd680d54d6e0668f41c9c9c0c78","modified":1514854236851},{"_id":"themes/next/.javascript_ignore","hash":"74b54cf920cbbf4038a68e54b7138af8b8f45588","modified":1514854236851},{"_id":"themes/next/.stylintrc","hash":"3b7f9785e9ad0dab764e1c535b40df02f4ff5fd6","modified":1514854236851},{"_id":"themes/next/.jshintrc","hash":"b7d23f2ce8d99fa073f22f9960605f318acd7710","modified":1514854236851},{"_id":"themes/next/.travis.yml","hash":"360f38044910e74bf628b0799e19db90718b2cbe","modified":1514854236851},{"_id":"themes/next/LICENSE","hash":"ec44503d7e617144909e54533754f0147845f0c5","modified":1514854236851},{"_id":"themes/next/README.en.md","hash":"953873fe2ee79bfc567b16dcdf8f91c1410444f8","modified":1514854236851},{"_id":"themes/next/README.md","hash":"06aaf1241e9e1619956c86d8b1397a643840a9d1","modified":1514854236851},{"_id":"themes/next/_config.yml","hash":"304c886ae99e32c11f44c0487bfb971b7f9efc1b","modified":1514854236851},{"_id":"themes/next/bower.json","hash":"bd70cf5988bbfc8cbcf13adae659151a55466524","modified":1514854236851},{"_id":"themes/next/gulpfile.coffee","hash":"412defab3d93d404b7c26aaa0279e2e586e97454","modified":1514854236851},{"_id":"themes/next/package.json","hash":"a5c189d4c4e946e936d3b5e29e2d81ddaf03ff96","modified":1514854236945},{"_id":"source/about/index.md","hash":"440670978b99b5a692b4fe98ed502fbf3d31f50f","modified":1514854236835},{"_id":"source/_posts/FerryMan.md","hash":"c4675e388cdd854cf8993340d1e397af74159ad3","modified":1514854236820},{"_id":"source/_posts/LeVoleur.md","hash":"475c3682c65b5f88fd6b050cad9a9df259fa10ff","modified":1514854236820},{"_id":"source/_posts/aboutwuhan.md","hash":"ad8eee74b94be66182814f5cab7a8b40184c2e7b","modified":1514854236820},{"_id":"source/_posts/basicAlg01.md","hash":"1285a76b4a8b5623a3de61b7dc27c6091762a0d8","modified":1514854236820},{"_id":"source/_posts/basicAlg00.md","hash":"cac2bc2a80f33c3add25ba55bff619a7479a4711","modified":1514854236820},{"_id":"source/_posts/basicAlg02.md","hash":"45833b83e6e3059baaa8f97e13ae6edf0a3695a0","modified":1514854236820},{"_id":"source/_posts/decorate.md","hash":"8b6b301ea1781a3e1680f6e0c6e7115201629d2d","modified":1514854236820},{"_id":"source/_posts/goeasylearn2.md","hash":"e8a6142272924c60b7834f988c3e711604b26b63","modified":1514854236835},{"_id":"source/_posts/goeasylearn1.md","hash":"fa5c05dccc1d737ac99b4352f48d85c53dba857d","modified":1514854236835},{"_id":"source/_posts/goeasylearn3.md","hash":"6ee58b6ab7e86c7c323746f24c3a49c10c80d992","modified":1514854236835},{"_id":"source/_posts/horizondevelop1.md","hash":"bcfc759b3b373b6b5a8d16aafa34cb205c11375b","modified":1514854236835},{"_id":"source/_posts/myMemory.md","hash":"b3a4cbcfe9a592e757cd633e9eeb52f83320fe92","modified":1514854236835},{"_id":"source/_posts/markdownLearn.md","hash":"840e1e10e0978ecdad45adcfed499cbcf77123ba","modified":1514854236835},{"_id":"source/_posts/openstackauth.md","hash":"f2607da9c78900884d0a2d725c3b03f4d2deef06","modified":1514854236835},{"_id":"source/_posts/shell.md","hash":"0c13edd27e06577ff4a3eb4b1f8ca90d51e18f3d","modified":1514854236835},{"_id":"source/_posts/strategy.md","hash":"9d6c4e5428e0df38ad09e1abf545678eaf02b7fa","modified":1514854236835},{"_id":"source/_posts/vim.md","hash":"63f382c14b67529b5a4dc2fe19572c442ba5042b","modified":1514854236835},{"_id":"source/categories/index.md","hash":"01429fb2e3008c7c05ae8946f59b3c1c0050010d","modified":1514854236835},{"_id":"source/tags/index.md","hash":"a5f38c6d145564dfb820521837fee1e6dce0b7b8","modified":1514854236835},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"5adfad3ef1b870063e621bc0838268eb2c7c697a","modified":1514854236851},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"4de856de657a27f340f245eb491a1f52ceba1735","modified":1514854236851},{"_id":"themes/next/layout/_layout.swig","hash":"1dc354c74b965827bca18971ce9d3d25a57de96f","modified":1514854236866},{"_id":"themes/next/layout/archive.swig","hash":"b867a08f6b43de8b5d700c84b943df55917407ae","modified":1514854236929},{"_id":"themes/next/layout/category.swig","hash":"58cf08388901f7549b1fca95548b2c79173aa840","modified":1514854236929},{"_id":"themes/next/layout/index.swig","hash":"e5b52e04296203262a400e8e36ae12426d31fd5b","modified":1514854236929},{"_id":"themes/next/layout/page.swig","hash":"2a13804aa186f6062738d136e430870c53789bf4","modified":1514854236929},{"_id":"themes/next/layout/post.swig","hash":"b8334c479840b7724638eec71971cbd8512ae58d","modified":1514854236929},{"_id":"themes/next/layout/schedule.swig","hash":"459cd6d9887b7a2ebda9ba3a5585a718904adb02","modified":1514854236929},{"_id":"themes/next/layout/tag.swig","hash":"6f764ea3ab11eeb7c530df45528d449b14f5dc62","modified":1514854236945},{"_id":"themes/next/languages/de.yml","hash":"4be3e7d296d5592e0d111dfa6cbbff02602c972d","modified":1514854236866},{"_id":"themes/next/languages/default.yml","hash":"d912814caac150da1611c96843371a87714e52f9","modified":1514854236866},{"_id":"themes/next/languages/en.yml","hash":"b3ee45143bc014578db6b8ac0573f7c7b143a743","modified":1514854236866},{"_id":"themes/next/languages/fr-FR.yml","hash":"0d5bd8bbbeafb72506124ed35e7509debc753612","modified":1514854236866},{"_id":"themes/next/languages/id.yml","hash":"c0848e93bf33a1333ff232905b6b392b1e056dd1","modified":1514854236866},{"_id":"themes/next/languages/ja.yml","hash":"1a608dc799c0f9c36b626bac6fe3404acb45b86d","modified":1514854236866},{"_id":"themes/next/languages/ko.yml","hash":"5c811514aef401317a9ec38b95679d6d2ef0ad42","modified":1514854236866},{"_id":"themes/next/languages/pt-BR.yml","hash":"cc8b5a67ec87b0d5aec6e253bab67ec3cfe3069c","modified":1514854236866},{"_id":"themes/next/languages/ru.yml","hash":"7e19ee6f8c764a68b0b25a139ca3dc17b68d382e","modified":1514854236866},{"_id":"themes/next/languages/pt.yml","hash":"943475a7d681f37ede579cd62da9c50568ca0f8d","modified":1514854236866},{"_id":"themes/next/languages/zh-Hans.yml","hash":"3111ce4cc5f30868b3628f9f805d2aef3b75d1c1","modified":1514854236866},{"_id":"themes/next/languages/zh-hk.yml","hash":"b58c0d85daa4d62b0c9753a59de0739aa0120735","modified":1514854236866},{"_id":"themes/next/scripts/merge-configs.js","hash":"3ce1be32bb77ee19da25e8dae7dc04e2afc46ca1","modified":1514854236945},{"_id":"themes/next/languages/zh-tw.yml","hash":"8ce0a32411de111ae39d08e4bc936767dacdeb08","modified":1514854236866},{"_id":"themes/next/scripts/merge.js","hash":"39b84b937b2a9608b94e5872349a47200e1800ff","modified":1514854236945},{"_id":"themes/next/test/.jshintrc","hash":"c9fca43ae0d99718e45a6f5ce736a18ba5fc8fb6","modified":1514854237148},{"_id":"themes/next/test/helpers.js","hash":"f25e7f3265eb5a6e1ccbb5e5012fa9bebf134105","modified":1514854237148},{"_id":"themes/next/test/intern.js","hash":"db90b1063356727d72be0d77054fdc32fa882a66","modified":1514854237148},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1514854237038},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"6d40652784585d263c37b8a3723e43e04b926ca7","modified":1514854236882},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"506feb56e9b1091187d2014742f63a17758df933","modified":1514854236882},{"_id":"themes/next/layout/_macro/post.swig","hash":"79851872b6b4fbd24e4a5a946f263da85b0c265d","modified":1514854236882},{"_id":"themes/next/layout/_macro/reward.swig","hash":"b6cb171f0ed227b82b8f7601814af2df93f3a09a","modified":1514854236882},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"e7f58154ac734088372888742e0029ce7c690511","modified":1514854236882},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"c5cc0070ca7c9a8dbd4b09e0398db536c3cdbe8a","modified":1514854236882},{"_id":"themes/next/layout/_custom/header.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1514854236866},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1514854236866},{"_id":"themes/next/layout/_partials/comments.swig","hash":"5258c03149aa18e9abfeb8de10e435a406d9c924","modified":1514854236882},{"_id":"themes/next/layout/_partials/footer.swig","hash":"2608fcbd7fbad1a34951cb4f8f5fe3c103725903","modified":1514854236882},{"_id":"themes/next/layout/_partials/head.swig","hash":"376adb0c482242ef8bcad31b93b99cc5c35e92fa","modified":1514854236882},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"77c61e0baea3544df361b7338c3cd13dc84dde22","modified":1514854236882},{"_id":"themes/next/layout/_partials/header.swig","hash":"d6bf1d1554d91eaf1bfc40ba8905ae81673e5f45","modified":1514854236882},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"1634fb887842698e01ff6e632597fe03c75d2d01","modified":1514854236882},{"_id":"themes/next/layout/_partials/search.swig","hash":"b4ebe4a52a3b51efe549dd1cdee846103664f5eb","modified":1514854236882},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"c0f5a0955f69ca4ed9ee64a2d5f8aa75064935ad","modified":1514854236898},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"931808ad9b8d8390c0dcf9bdeb0954eeb9185d68","modified":1514854236898},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"bd174c8ad620da37616cad735503fc847240a3e7","modified":1514854236898},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"ba75672183d94f1de7c8bd0eeee497a58c70e889","modified":1514854236929},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"db15d7e1552aa2d2386a6b8a33b3b3a40bf9e43d","modified":1514854236929},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"8301c9600bb3e47f7fb98b0e0332ef3c51bb1688","modified":1514854236929},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"a0bd3388587fd943baae0d84ca779a707fbcad89","modified":1514854236929},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"99b66949f18398689b904907af23c013be1b978f","modified":1514854236945},{"_id":"themes/next/scripts/tags/button.js","hash":"aaf71be6b483fca7a65cd6296c2cf1c2271c26a6","modified":1514854236945},{"_id":"themes/next/scripts/tags/exturl.js","hash":"5022c0ba9f1d13192677cf1fd66005c57c3d0f53","modified":1514854236945},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"ac681b0d0d8d39ba3817336c0270c6787c2b6b70","modified":1514854236945},{"_id":"themes/next/scripts/tags/full-image.js","hash":"c9f833158c66bd72f627a0559cf96550e867aa72","modified":1514854236945},{"_id":"themes/next/scripts/tags/note.js","hash":"7dc14db08f2c74f8f1952534b424f220f5c000c6","modified":1514854236945},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1514854237038},{"_id":"themes/next/source/css/main.styl","hash":"a91dbb7ef799f0a171b5e726c801139efe545176","modified":1514854237038},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"16505f61f19ba65f629dfd033f14ee9abcf18756","modified":1514854237038},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1514854237038},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1514854237038},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1514854237038},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1514854237038},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1514854237038},{"_id":"themes/next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1514854237038},{"_id":"themes/next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1514854237038},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1514854237054},{"_id":"themes/next/source/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1514854237054},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1514854237054},{"_id":"themes/next/source/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1514854237054},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1514854237054},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1514854236898},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1514854236898},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1514854237007},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1514854237007},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1514854237007},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1514854237038},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1514854237038},{"_id":"themes/next/source/uploads/wechat-qcode.jpg","hash":"b5d4e45ac83614381007cb6babe328f6ae62744c","modified":1514854237148},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"f5e487b0d213ca0bd94aa30bc23b240d65081627","modified":1514854236882},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"a223919d2e1bf17ca4d6abb2c86f2efca9883dc1","modified":1514854236882},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"b6e4754498b5eeb470e11fd596227552d9070605","modified":1514854236898},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"a8c7f9ca7c605d039a1f3bf4e4d3183700a3dd62","modified":1514854236898},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"b25002a83cbd2ca0c4a5df87ad5bff26477c0457","modified":1514854236898},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"9e3d133ac5bcc6cb51702c83b2611a49811abad1","modified":1514854236898},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"d9e2d9282f9be6e04eae105964abb81e512bffed","modified":1514854236898},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"d4fbffd7fa8f2090eb32a871872665d90a885fac","modified":1514854236898},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"12684840de632eb16e53ffa863166306a756fd4f","modified":1514854236898},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"9b84ab576982b2c3bb0291da49143bc77fba3cc6","modified":1514854236898},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1514854236898},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"753d262911c27baf663fcaf199267133528656af","modified":1514854236898},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"71397a5823e8ec8aad3b68aace13150623b3e19d","modified":1514854236898},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"7b11eac3a0685fa1ab2ab6ecff60afc4f15f0d16","modified":1514854236913},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"a10b7f19d7b5725527514622899df413a34a89db","modified":1514854236913},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"a79e7e0d809fcf407593dd7ed9e023db21c3cbd6","modified":1514854236913},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"441f1a1b4e2f652d3b975995bd9d44ff4866f057","modified":1514854236913},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"b1e13df83fb2b1d5d513b30b7aa6158b0837daab","modified":1514854236913},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"e495aed8fb36bf8015ddbd64366270a7debad2b0","modified":1514854236913},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"8a399df90dadba5ad4e781445b58f4765aeb701e","modified":1514854236913},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"e9a0590dafde1046356620dd2b81e83b6b3b0936","modified":1514854236913},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"f9a1647a8f1866deeb94052d1f87a5df99cb1e70","modified":1514854236913},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"4c501ea0b9c494181eb3c607c5526a5754e7fbd8","modified":1514854236913},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"b83a51bbe0f1e2ded9819070840b0ea145f003a6","modified":1514854236913},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"1600f340e0225361580c44890568dc07dbcf2c89","modified":1514854236913},{"_id":"themes/next/layout/_third-party/comments/gentie.swig","hash":"0f38f053841ef77cdce56a84cfbb4dd4c3329486","modified":1514854236913},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"af7f3e43cbdc4f88c13f101f0f341af96ace3383","modified":1514854236913},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"0399bbdc524ba50930cb6f8e2d5628ff682fc612","modified":1514854236913},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"5830a52c2a555d3a1f19b67d7bf3d072376cdea9","modified":1514854236913},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"de95ec8920d1660680078451008f8bd69f14d082","modified":1514854236913},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"4a10634dba16ddf2a3cbd4908dfbc97e9aa45469","modified":1514854236929},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"34599633658f3b0ffb487728b7766e1c7b551f5a","modified":1514854236929},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"fe95dd3d166634c466e19aa756e65ad6e8254d3e","modified":1514854236929},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"d8c98938719284fa06492c114d99a1904652a555","modified":1514854236929},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"a0f23e75a137d8c996c70e2059e0074f1e97a127","modified":1514854237007},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"4590683f03d2013a7668ce0bd669b48616bea7dc","modified":1514854237007},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"531934ea21ef4dc9f0978512050f54834f0a6cff","modified":1514854237007},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"e55265c8a8a6ae0c3c08e3509de92ee62c3cb5f6","modified":1514854237038},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"09534b68bd1a708729b3cfffe17737e3af457757","modified":1514854237038},{"_id":"themes/next/source/css/_variables/base.styl","hash":"5b336489316d5efea069fe8bcea4479b53ec7545","modified":1514854237038},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1514854237054},{"_id":"themes/next/source/js/src/affix.js","hash":"1b509c3b5b290a6f4607f0f06461a0c33acb69b1","modified":1514854237054},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"cb431b54ba9c692165a1f5a12e4c564a560f8058","modified":1514854237054},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"0ec035e20d1f26bf553a79877180ba312bea885c","modified":1514854237054},{"_id":"themes/next/source/js/src/exturl.js","hash":"a2a0f0de07e46211f74942a468f42ee270aa555c","modified":1514854237054},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"b35a7dc47b634197b93487cea8671a40a9fdffce","modified":1514854237054},{"_id":"themes/next/source/js/src/motion.js","hash":"ff9ea37d05c269e3a140c4ab448af03efc4bcc76","modified":1514854237054},{"_id":"themes/next/source/js/src/post-details.js","hash":"bfaf52b69aad96566aa21b785973441a2555b4ba","modified":1514854237054},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"b7657be25fc52ec67c75ab5481bdcb483573338b","modified":1514854237054},{"_id":"themes/next/source/js/src/utils.js","hash":"988f29f78e68fa184c4412b722f5895fa78a4783","modified":1514854237054},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1514854237070},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"bf3eef9d647cd7c9b62feda3bc708c6cdd7c0877","modified":1514854237085},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1514854237085},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"68a9b9d53126405b0fa5f3324f1fb96dbcc547aa","modified":1514854237085},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"a9b3ee1e4db71a0e4ea6d5bed292d176dd68b261","modified":1514854237085},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"b4aefc910578d76b267e86dfffdd5121c8db9aec","modified":1514854237085},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"03ddbf76c1dd1afb93eed0b670d2eee747472ef1","modified":1514854237085},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"c31ff06a740955e44edd4403902e653ccabfd4db","modified":1514854237085},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1514854237085},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"71e7183634dc1b9449f590f15ebd7201add22ca7","modified":1514854237085},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"865d6c1328ab209a4376b9d2b7a7824369565f28","modified":1514854237117},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"90fa628f156d8045357ff11eaf32e61abacf10e8","modified":1514854237117},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4ded6fee668544778e97e38c2b211fc56c848e77","modified":1514854237117},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"b930297cb98b8e1dbd5abe9bc1ed9d5935d18ce8","modified":1514854237117},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"e0acf1db27b0cc16128a59c46db1db406b5c4c58","modified":1514854237117},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"f4a570908f6c89c6edfb1c74959e733eaadea4f2","modified":1514854237117},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"bf773ad48a0b9aa77681a89d7569eefc0f7b7b18","modified":1514854237117},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"b070490e0588c4625e84bcd4f847dc6275a97a81","modified":1514854237132},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"63da5e80ebb61bb66a2794d5936315ca44231f0c","modified":1514854237132},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"92d92860418c4216aa59eb4cb4a556290a7ad9c3","modified":1514854237132},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1514854237132},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"dbbfb50f6502f6b81dcc9fee7b31f1e812da3464","modified":1514854237132},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1514854237132},{"_id":"themes/next/source/lib/jquery/index.js","hash":"17a740d68a1c330876c198b6a4d9319f379f3af2","modified":1514854237117},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"2530de0f3125a912756f6c0e9090cd012134a4c5","modified":1514854236929},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"218cc936ba3518a3591b2c9eda46bc701edf7710","modified":1514854236929},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"4ba6f2a615693b9b5afc266d9c833697016085fd","modified":1514854236945},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"1dc2ed435e41ca041f43bd9633d5d95139afbb42","modified":1514854236945},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"22828f5141c0cecb9ef25a110e194cdfa3a36423","modified":1514854236945},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"ff4489cd582f518bba6909a301ac1292a38b4e96","modified":1514854236945},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"7ad4081466b397e2a6204141bb7768b7c01bd93c","modified":1514854236945},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"88559b13ce94311405b170a0506ded91273beceb","modified":1514854236960},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"6eb4bcc3056bd279d000607e8b4dad50d368ca69","modified":1514854236991},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"12662536c7a07fff548abe94171f34b768dd610f","modified":1514854237007},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"4998bedff9c84a09a294b8ef36ede2e3644d3528","modified":1514854237007},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"3f40e8a9fe8e7bd5cfc4cf4cbbbcb9539462e973","modified":1514854237007},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"1da5c800d025345f212a3bf1be035060f4e5e6ed","modified":1514854237007},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"c9218b48c56e52c06af9ce3cc8fbdae737cf16fe","modified":1514854237007},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"ea9069645696f86c5df64208490876fe150c8cae","modified":1514854237007},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"31127dcbf4c7b4ada53ffbf1638b5fe325b7cbc0","modified":1514854237023},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"748dbfbf9c08e719ddc775958003c64b00d39dab","modified":1514854237023},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"f23ac53ab901c48859dd29eee6e386b60ff956ba","modified":1514854237023},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1514854237023},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"5dbc0d0c897e46760e5dbee416530d485c747bba","modified":1514854237023},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"25d5e45a355ee2093f3b8b8eeac125ebf3905026","modified":1514854237007},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"d0bfd1bef988c76f7d7dd72d88af6f0908a8b0db","modified":1514854237007},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"b1025c421406d2c24cc92a02ae28c1915b01e240","modified":1514854237007},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"26666c1f472bf5f3fb9bc62081cca22b4de15ccb","modified":1514854237007},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"ce272226a1570f5f7c70243b751a5b0fe1671a88","modified":1514854237007},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1514854237007},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9b913b73d31d21f057f97115ffab93cfa578b884","modified":1514854237023},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"bce344d3a665b4c55230d2a91eac2ad16d6f32fd","modified":1514854237023},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"416988dca389e6e2fdfa51fa7f4ee07eb53f82fb","modified":1514854237023},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"4642e30010af8b2b037f5b43146b10a934941958","modified":1514854237023},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"1f6e2ce674735269599acc6d77b3ea18d31967fc","modified":1514854237023},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"c48d4a561d047b3705924949b3ab7b57bee94ecd","modified":1514854237023},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"86197902dfd3bededba10ba62b8f9f22e0420bde","modified":1514854237038},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"c4358416f0a116d7f4037542fa3b385947e80908","modified":1514854237054},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1514854237070},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1514854237070},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1514854237070},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1514854237070},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1514854237070},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1514854237070},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"82f33ad0842aa9c154d029e0dada2497d4eb1d57","modified":1514854237085},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"d71602cbca33b9ecdb7ab291b7f86a49530f3601","modified":1514854237085},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"ae6318aeb62ad4ce7a7e9a4cdacd93ffb004f0fb","modified":1514854237085},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"1d6aeda0480d0e4cb6198edf7719d601d4ae2ccc","modified":1514854237085},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1514854237085},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"3655f1fdf1e584c4d8e8d39026093ca306a5a341","modified":1514854237101},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1514854237101},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"88af80502c44cd52ca81ffe7dc7276b7eccb06cf","modified":1514854237101},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"41ea797c68dbcff2f6fb3aba1d1043a22e7cc0f6","modified":1514854237132},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"a817b6c158cbc5bab3582713de9fe18a18a80552","modified":1514854237132},{"_id":"themes/next/source/uploads/avatar.png","hash":"a292957eac1fb54f7844a461ca7f065506482cd4","modified":1514854237148},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1514854237117},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1514854237117},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"4237c6e9d59da349639de20e559e87c2c0218cfd","modified":1514854237132},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"4c4ef6e997d0c6e21de39c2daa0c768e12c8c6fa","modified":1514854236960},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d63e0cacc53dd375fcc113465a4328c59ff5f2c1","modified":1514854236960},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"53cde051e0337f4bf42fb8d6d7a79fa3fa6d4ef2","modified":1514854236960},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"1a0d059799a298fe17c49a44298d32cebde93785","modified":1514854236960},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"0656e753f182c9f47fef7304c847b7587a85ef0d","modified":1514854236960},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"1727702eac5d326b5c81a667944a245016668231","modified":1514854236960},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"167986d0f649516671ddf7193eebba7b421cd115","modified":1514854236960},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"b3b783511bbd94af7e941abf8ff411885db7395b","modified":1514854236960},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"7fe4d4d656e86276c17cb4e48a560cb6a4def703","modified":1514854236960},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"104b5c79cd891506e0beaf938b083685f1da8637","modified":1514854236960},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"7fb593f90d74a99c21840679933b9ef6fdc16a61","modified":1514854236960},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"f9760ecf186954cee3ba4a149be334e9ba296b89","modified":1514854236960},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"4e3838d7ac81d9ad133960f0f7ed58a44a015285","modified":1514854236960},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"8cf318644acc8b4978537c263290363e21c7f5af","modified":1514854236960},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"4783f85872bc7e218c1522a5c1c68cd27a5922db","modified":1514854236960},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"a45f5fce643eec4e1b927165229d560364bcace1","modified":1514854236976},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"caf263d1928496688c0e1419801eafd7e6919ce5","modified":1514854236976},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"a200c0a1c5a895ac9dc41e0641a5dfcd766be99b","modified":1514854236976},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"fcd89ba4f6f48269e5caa73307e8689f41019896","modified":1514854236976},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"cd9e214e502697f2f2db84eb721bac57a49b0fce","modified":1514854236976},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"61ec8a8481e8b76f2943235256c6d4f89c751c1c","modified":1514854236976},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"27deb3d3a243d30022055dac7dad851024099a8b","modified":1514854236976},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"8355b0e9375b3245508efda0e18acd069c2aa767","modified":1514854236976},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"350469437b20ecfd6f3ca45e400478f8e3f71cfb","modified":1514854236976},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"5a982d8ef3b3623ea5f59e63728990f5623c1b57","modified":1514854236976},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"01567edaea6978628aa5521a122a85434c418bfd","modified":1514854236976},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"a497ea244df7dd97d1b961412b56f94cc4031e23","modified":1514854236976},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"7f2bdd6109614d35408ee5ac3335aad4464c69c7","modified":1514854236976},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"761eba9811b050b25d548cc0854de4824b41eb08","modified":1514854236976},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"ac060861b27b764bc4012fc362a25a332df4045a","modified":1514854236976},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"61f8cea3c01acd600e90e1bc2a07def405503748","modified":1514854236976},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"1153bb71edf253765145559674390e16dd67c633","modified":1514854236976},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"394888efec32749b353292a59ec7f1b609d6325e","modified":1514854236976},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"c9f76d4f6806ef70fa2160c97afa0a0e0ae5373e","modified":1514854236991},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"702be9e57dd6ff5fa99642a1f6e3df26215b8805","modified":1514854236991},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"e71652d3216e289c8548b1ea2357822c1476a425","modified":1514854236991},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"a3bdd71237afc112b2aa255f278cab6baeb25351","modified":1514854236991},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"2fe76476432b31993338cb45cdb3b29a518b6379","modified":1514854236991},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"3159b55f35c40bd08e55b00148c523760a708c51","modified":1514854236991},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"2ad1a2a9bbf6742d1b0762c4c623b68113d1e0fe","modified":1514854236991},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"8420b4be386469337243336aee694297875bd439","modified":1514854236991},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"e3ad37f2da35e330616a044621ffa50565a20c88","modified":1514854236991},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"bba4f3bdb7517cd85376df3e1209b570c0548c69","modified":1514854236991},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"5dbeed535d63a50265d96b396a5440f9bb31e4ba","modified":1514854236991},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"a6e7d698702c2e383dde3fde2abde27951679084","modified":1514854236991},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"717cc7f82be9cc151e23a7678601ff2fd3a7fa1d","modified":1514854236991},{"_id":"themes/next/source/css/_common/components/third-party/gentie.styl","hash":"cd526e814f9323a79fe835085d64867d34b3715d","modified":1514854236991},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"15975ba7456b96916b1dbac448a1a0d2c38b8f3d","modified":1514854236991},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"6516b70ee9e44f1cf9443412cc31bcccb6cdb684","modified":1514854236991},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"dc944a01dd59f5ed2d44bb22fdb21fc3f455948f","modified":1514854237007},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1514854237023},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"a07aa12cc36ac5c819670c2a3c17d07ed7a08986","modified":1514854237023},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1514854237023},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1514854237070},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1514854237070},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"ee948b4489aedeb548a77c9e45d8c7c5732fd62d","modified":1514854237070},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"51139a4c79573d372a347ef01a493222a1eaf10a","modified":1514854237070},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1514854237085},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"d22b1629cb23a6181bebb70d0cf653ffe4b835c8","modified":1514854237085},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1514854237101},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1514854237101},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1514854237117},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"90a1b22129efc172e2dfcceeeb76bff58bc3192f","modified":1514854237070},{"_id":"themes/next/source/lib/three/three.min.js","hash":"26273b1cb4914850a89529b48091dc584f2c57b8","modified":1514854237132},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1514854237101},{"_id":"public/about/index.html","hash":"e0930dbec7c26e69659f42726fca4d1700b8e582","modified":1514854960069},{"_id":"public/categories/index.html","hash":"093dab1fad318bb1a5a98c856a0731f3089b3f0c","modified":1514854960069},{"_id":"public/tags/index.html","hash":"056d44d384ec948d4f06441481324f6ceb87f024","modified":1514854960069},{"_id":"public/archives/page/2/index.html","hash":"cc6adb3d8c6fcd5fec3da084764039007dad0eee","modified":1514854960069},{"_id":"public/archives/2017/page/2/index.html","hash":"c3d0c1d6e2a810f4f4618968f54a4a5d2e835529","modified":1514854960069},{"_id":"public/archives/2017/04/index.html","hash":"aa27ed8faefce3cc01e79c9e790e5ae2c8f44312","modified":1514854960069},{"_id":"public/archives/2017/07/index.html","hash":"672a434095854db71ef6e4fc58941171dc3ef2ec","modified":1514854960069},{"_id":"public/archives/2017/11/index.html","hash":"9d755376efee3eaa8c19fac3935c56e7549d3c8e","modified":1514854960069},{"_id":"public/archives/2017/12/index.html","hash":"39bfd1f59d3f67afad49cfc4454e6cfa109f3beb","modified":1514854960069},{"_id":"public/categories/读书笔记/index.html","hash":"a8d505e8aeadad87624df179381d8e22cdb63c03","modified":1514854960069},{"_id":"public/categories/生活小记/index.html","hash":"290866ac497e9057205d44cd994a4bb11808d5aa","modified":1514854960069},{"_id":"public/categories/初等算法/index.html","hash":"b4ce11471d4ab4ed40bec7bcd5c751bce37e305d","modified":1514854960069},{"_id":"public/categories/python学习/index.html","hash":"ac6c6c15e62e9b378dfabe59fbcd5fae4e447bd9","modified":1514854960069},{"_id":"public/categories/go语言学习笔记/index.html","hash":"83344b72b48d5b2b3531435e244d40edd6c828f2","modified":1514854960069},{"_id":"public/categories/openstack学习/index.html","hash":"eec001595877c4bac77e5b993b0a1253fac816e1","modified":1514854960069},{"_id":"public/categories/MD学习/index.html","hash":"1daa73405fac56f1457d0c87ec3364e086bf6aeb","modified":1514854960069},{"_id":"public/categories/linux/index.html","hash":"f91653e39b3ad967c5ea70a1f85c69c44f5a9531","modified":1514854960069},{"_id":"public/tags/心灵救赎/index.html","hash":"9e23358e9fa80af42441be190aa1b13d75ff3540","modified":1514854960069},{"_id":"public/tags/那些年，那些事/index.html","hash":"4989990842c8a78da94beacd94aca4279547fdc6","modified":1514854960069},{"_id":"public/tags/算法/index.html","hash":"b1b09e00ce1ce32b07c1f6791ec2d99356ad95d6","modified":1514854960069},{"_id":"public/tags/python/index.html","hash":"8fb5a9d318354c0492e3c8f993e527eb89b62bb5","modified":1514854960069},{"_id":"public/tags/go语言基础/index.html","hash":"009653b26b396cad57a6d76acb3a71225c158480","modified":1514854960069},{"_id":"public/tags/dashborad/index.html","hash":"672f81d448c6861193f18e80a69938a17844e3c3","modified":1514854960069},{"_id":"public/tags/markdown/index.html","hash":"87438425ec2b85661d02d220a77fbd6aaf13d7fc","modified":1514854960069},{"_id":"public/tags/linux/index.html","hash":"3d1a7623ef36852a7aa0545bbc9588349f6ce140","modified":1514854960069},{"_id":"public/tags/shell/index.html","hash":"816c6a30c99b02ea9fe028783e40fbeaca530215","modified":1514854960069},{"_id":"public/tags/bash/index.html","hash":"036f90709c0b00cf26554ab2a0b44f10343cafd1","modified":1514854960069},{"_id":"public/tags/vim/index.html","hash":"58ed931de2a51f7d9289a8bad2b8acad8d8b22e1","modified":1514854960069},{"_id":"public/2017/12/04/vim/index.html","hash":"d169f2a08f2daeadb33a86ec580070d612dc3cc0","modified":1514854960069},{"_id":"public/2017/12/04/shell/index.html","hash":"83f36d21fa094cddb16f55e8cf40128451ac87fb","modified":1514854960069},{"_id":"public/2017/11/13/openstackauth/index.html","hash":"e211533477f4fa27f87b5739d072bba73d4f4163","modified":1514854960069},{"_id":"public/2017/11/13/strategy/index.html","hash":"5426c1d6e8da3a6bbcc4508999418ca09b587f52","modified":1514854960069},{"_id":"public/2017/11/13/decorate/index.html","hash":"b56090acb5c979339fe05e6b0da76c2167891809","modified":1514854960069},{"_id":"public/2017/11/13/horizondevelop1/index.html","hash":"03c75ae7e66fa2c0f75225a2b94130475d0c4719","modified":1514854960069},{"_id":"public/2017/07/28/basicAlg02/index.html","hash":"3600d468d143c13f9f3a7bfd3c26417d131332b1","modified":1514854960069},{"_id":"public/2017/07/06/goeasylearn3/index.html","hash":"16c0e01a66ab6fca6f6d713cacec237274d25a9c","modified":1514854960069},{"_id":"public/2017/07/06/goeasylearn2/index.html","hash":"3fa3f2da93c65608428343256252cd60eeeced0b","modified":1514854960069},{"_id":"public/2017/07/06/goeasylearn1/index.html","hash":"be8ee9212e016a5994ca5249b107a786318b52ac","modified":1514854960069},{"_id":"public/2017/07/05/FerryMan/index.html","hash":"5f99a06d6ee15147458ee6ef7de4922f9ffa7a79","modified":1514854960069},{"_id":"public/2017/07/05/myMemory/index.html","hash":"b57ba9f4cd110f81d608f2e2a0f0c868ab2765bf","modified":1514854960069},{"_id":"public/2017/07/05/aboutwuhan/index.html","hash":"6f5175a63fa92019cc6457048db8f9f99fa08d61","modified":1514854960069},{"_id":"public/2017/04/03/basicAlg01/index.html","hash":"a658b58da8cc9d88a726af152ca018b956db1bfd","modified":1514854960069},{"_id":"public/2017/04/03/basicAlg00/index.html","hash":"afa6e014d8d6736c499219b6f5210f163cb40f8b","modified":1514854960069},{"_id":"public/2017/04/03/LeVoleur/index.html","hash":"cd14b3c2d5c5cfffe60440e750f887d6c164570d","modified":1514854960069},{"_id":"public/2017/04/03/markdownLearn/index.html","hash":"5ab9e86846cde6d3af04aec4f89e8058e25300c7","modified":1514854960069},{"_id":"public/archives/index.html","hash":"3054302e52fbba125ef9958a34801c9479489e55","modified":1514854960069},{"_id":"public/archives/2017/index.html","hash":"2944690b5f5e55738dd3999833b7eabd4a3863af","modified":1514854960069},{"_id":"public/index.html","hash":"e81215dc1cbfb126e373091fc782507118cbe195","modified":1514854960069},{"_id":"public/page/2/index.html","hash":"44664a18a600feb2a57ffbdc132b33206cf9c7f1","modified":1514854960069},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1514854960116},{"_id":"public/images/algolia_logo.svg","hash":"16505f61f19ba65f629dfd033f14ee9abcf18756","modified":1514854960116},{"_id":"public/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1514854960116},{"_id":"public/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1514854960116},{"_id":"public/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1514854960116},{"_id":"public/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1514854960116},{"_id":"public/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1514854960116},{"_id":"public/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1514854960116},{"_id":"public/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1514854960116},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1514854960116},{"_id":"public/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1514854960116},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1514854960116},{"_id":"public/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1514854960116},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1514854960116},{"_id":"public/lib/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1514854960131},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1514854960131},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1514854960131},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1514854960131},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1514854960131},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1514854960131},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1514854960131},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1514854960131},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1514854960131},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1514854960131},{"_id":"public/uploads/wechat-qcode.jpg","hash":"b5d4e45ac83614381007cb6babe328f6ae62744c","modified":1514854960814},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1514854960814},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1514854960830},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1514854960845},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1514854960845},{"_id":"public/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1514854960845},{"_id":"public/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1514854960845},{"_id":"public/js/src/bootstrap.js","hash":"aab7be0a6e2724b3faa9338db93c19556c559625","modified":1514854960845},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1514854960845},{"_id":"public/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1514854960845},{"_id":"public/js/src/post-details.js","hash":"af7a417dd1cb02465a7b98211653e7c6192e6d55","modified":1514854960845},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1514854960845},{"_id":"public/js/src/utils.js","hash":"e13c9ccf70d593bdf3b8cc1d768f595abd610e6e","modified":1514854960845},{"_id":"public/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1514854960845},{"_id":"public/lib/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1514854960845},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1514854960845},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1514854960845},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1514854960845},{"_id":"public/lib/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1514854960845},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1514854960845},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1514854960845},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1514854960845},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1514854960845},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1514854960845},{"_id":"public/js/src/schemes/pisces.js","hash":"79da92119bc246fe05d1626ac98426a83ec90a94","modified":1514854960845},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1514854960845},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1514854960845},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1514854960845},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1514854960845},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1514854960845},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1514854960845},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1514854960845},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1514854960845},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1514854960845},{"_id":"public/css/main.css","hash":"4ddd91d52b1219fc63db3e6f089c558919149dc2","modified":1514854960845},{"_id":"public/lib/three/three-waves.min.js","hash":"5b38ae00297ffc07f433c632c3dbf7bde4cdf39a","modified":1514854960845},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1514854960845},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1514854960845},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1514854960845},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1514854960845},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1514854960845},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1514854960845},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1514854960845},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1514854960845},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1514854960845},{"_id":"public/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1514854960845},{"_id":"public/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1514854960845},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1514854960845},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1514854960845},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1514854960845},{"_id":"public/uploads/avatar.png","hash":"a292957eac1fb54f7844a461ca7f065506482cd4","modified":1514854960876},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1514854960892}],"Category":[{"name":"读书笔记","_id":"cjbwxj0xy0004h0voi67tuset"},{"name":"生活小记","_id":"cjbwxj0yt000fh0vo43slj6bd"},{"name":"初等算法","_id":"cjbwxj0z8000mh0vo9jiqi61p"},{"name":"python学习","_id":"cjbwxj1040014h0vok5bxdcn4"},{"name":"go语言学习笔记","_id":"cjbwxj10j001dh0vogkedm7fq"},{"name":"openstack学习","_id":"cjbwxj10j001ph0vokeept9vm"},{"name":"MD学习","_id":"cjbwxj10j001uh0voe1bg6hdt"},{"name":"linux","_id":"cjbwxj10z0021h0vo1bcxr95q"}],"Data":[],"Page":[{"title":"此页仅供参考","date":"2017-04-02T03:07:43.000Z","_content":"### 个人资料:  \n>姓名： 刘韬（国际韬）  \n>职业： 研究生  \n>手机： 无  \n>E-mail: lt19942013@163.com  \n>QQ: 441803917  \n>微信： kusole  \n\n### 个人经历：  \n>1994-2000： 出生+幼儿园（玩泥巴）\n>2000-2006： 小学，就读于坊厢国际小学（半山腰上风景好）  \n>2006-2009： 初中，就读于江山国际贵族中学（学费超级贵）  \n>2009-2012： 高中，就读于衡阳县第一中学（成绩超级烂）  \n>2012-2016： 大学，就读于西南交通大学（铁道学院），专业为物联网工程   \n>2016- 至今： 研究生，就读于西南交通大学CIPC（网络安全，openstack）  \n\n### 个人荣誉：  \n&#160; &#160; &#160; &#160; 无\n### 个人自述：  \n&#160; &#160; &#160; &#160;我是一个二流学生，成绩一般，来自社会的草根阶层。  \n&#160; &#160; &#160; &#160;一句告诫：人的生命只有一次，不论你从什么时候开始，开始后就不要停止。一艺之成，当尽毕生之力。\n","source":"about/index.md","raw":"---\ntitle: 此页仅供参考\ndate: 2017-04-02 11:07:43\n---\n### 个人资料:  \n>姓名： 刘韬（国际韬）  \n>职业： 研究生  \n>手机： 无  \n>E-mail: lt19942013@163.com  \n>QQ: 441803917  \n>微信： kusole  \n\n### 个人经历：  \n>1994-2000： 出生+幼儿园（玩泥巴）\n>2000-2006： 小学，就读于坊厢国际小学（半山腰上风景好）  \n>2006-2009： 初中，就读于江山国际贵族中学（学费超级贵）  \n>2009-2012： 高中，就读于衡阳县第一中学（成绩超级烂）  \n>2012-2016： 大学，就读于西南交通大学（铁道学院），专业为物联网工程   \n>2016- 至今： 研究生，就读于西南交通大学CIPC（网络安全，openstack）  \n\n### 个人荣誉：  \n&#160; &#160; &#160; &#160; 无\n### 个人自述：  \n&#160; &#160; &#160; &#160;我是一个二流学生，成绩一般，来自社会的草根阶层。  \n&#160; &#160; &#160; &#160;一句告诫：人的生命只有一次，不论你从什么时候开始，开始后就不要停止。一艺之成，当尽毕生之力。\n","updated":"2018-01-02T00:50:36.835Z","path":"about/index.html","comments":1,"layout":"page","_id":"cjbwxj0xi0001h0vo5u6dq9me","content":"<h3 id=\"个人资料\"><a href=\"#个人资料\" class=\"headerlink\" title=\"个人资料:\"></a>个人资料:</h3><blockquote>\n<p>姓名： 刘韬（国际韬）<br>职业： 研究生<br>手机： 无<br>E-mail: lt19942013@163.com<br>QQ: 441803917<br>微信： kusole  </p>\n</blockquote>\n<h3 id=\"个人经历：\"><a href=\"#个人经历：\" class=\"headerlink\" title=\"个人经历：\"></a>个人经历：</h3><blockquote>\n<p>1994-2000： 出生+幼儿园（玩泥巴）<br>2000-2006： 小学，就读于坊厢国际小学（半山腰上风景好）<br>2006-2009： 初中，就读于江山国际贵族中学（学费超级贵）<br>2009-2012： 高中，就读于衡阳县第一中学（成绩超级烂）<br>2012-2016： 大学，就读于西南交通大学（铁道学院），专业为物联网工程<br>2016- 至今： 研究生，就读于西南交通大学CIPC（网络安全，openstack）  </p>\n</blockquote>\n<h3 id=\"个人荣誉：\"><a href=\"#个人荣誉：\" class=\"headerlink\" title=\"个人荣誉：\"></a>个人荣誉：</h3><p>&#160; &#160; &#160; &#160; 无</p>\n<h3 id=\"个人自述：\"><a href=\"#个人自述：\" class=\"headerlink\" title=\"个人自述：\"></a>个人自述：</h3><p>&#160; &#160; &#160; &#160;我是一个二流学生，成绩一般，来自社会的草根阶层。<br>&#160; &#160; &#160; &#160;一句告诫：人的生命只有一次，不论你从什么时候开始，开始后就不要停止。一艺之成，当尽毕生之力。</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"个人资料\"><a href=\"#个人资料\" class=\"headerlink\" title=\"个人资料:\"></a>个人资料:</h3><blockquote>\n<p>姓名： 刘韬（国际韬）<br>职业： 研究生<br>手机： 无<br>E-mail: lt19942013@163.com<br>QQ: 441803917<br>微信： kusole  </p>\n</blockquote>\n<h3 id=\"个人经历：\"><a href=\"#个人经历：\" class=\"headerlink\" title=\"个人经历：\"></a>个人经历：</h3><blockquote>\n<p>1994-2000： 出生+幼儿园（玩泥巴）<br>2000-2006： 小学，就读于坊厢国际小学（半山腰上风景好）<br>2006-2009： 初中，就读于江山国际贵族中学（学费超级贵）<br>2009-2012： 高中，就读于衡阳县第一中学（成绩超级烂）<br>2012-2016： 大学，就读于西南交通大学（铁道学院），专业为物联网工程<br>2016- 至今： 研究生，就读于西南交通大学CIPC（网络安全，openstack）  </p>\n</blockquote>\n<h3 id=\"个人荣誉：\"><a href=\"#个人荣誉：\" class=\"headerlink\" title=\"个人荣誉：\"></a>个人荣誉：</h3><p>&#160; &#160; &#160; &#160; 无</p>\n<h3 id=\"个人自述：\"><a href=\"#个人自述：\" class=\"headerlink\" title=\"个人自述：\"></a>个人自述：</h3><p>&#160; &#160; &#160; &#160;我是一个二流学生，成绩一般，来自社会的草根阶层。<br>&#160; &#160; &#160; &#160;一句告诫：人的生命只有一次，不论你从什么时候开始，开始后就不要停止。一艺之成，当尽毕生之力。</p>\n"},{"title":"","date":"2017-04-02T02:58:39.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: \ndate: 2017-04-02 10:58:39\ntype: \"categories\"\n---\n","updated":"2018-01-02T00:50:36.835Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cjbwxj0xy0003h0vo0inavuvi","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"","date":"2017-04-02T02:51:32.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: \ndate: 2017-04-02 10:51:32\ntype: \"tags\"\n---\n","updated":"2018-01-02T00:50:36.835Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cjbwxj0yd0007h0vo70y5vybb","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"摆渡人","date":"2017-07-05T06:39:16.000Z","_content":"\n《摆渡人》是英国著名实力作家—克莱儿.麦克福尔的著作，凭借此著作，她一举获得了五项世界文学大奖。故事发生在神话背景下，以穿越荒原为主线，展现了人物灵魂成长的踪迹。  \n\n<!--more-->  \n\n迪伦一个15岁单亲女孩，一直跟妈妈生活，与父亲久未谋面。她烦恼母亲的喋喋不休，厌恶学校的环境。为了逃离这一切，她踏上了去见父亲的列车。不曾想到的是，火车出事故了，她成了唯一的幸存者，或者说是唯一的遇难者。初始，迪伦还是个孩子，担忧早饭的好坏，恐惧同学的嘲笑，尤其是在选择是否带上泰迪熊上火车的时候，几次拿起，放下，取出，放进，作者细腻的笔触，充分展示了一个小女孩心理世界的脆弱，恐惧，犹疑不安。此时，她心中是一片荒原，唯有爱，可以浇灌它茂密生长。\n\n崔斯坦一个灵魂摆渡人，不知道从何时开始从事这份工作，他引领了成百上千，成千上万的灵魂。他一直认为：这是命，他没得选择。最初，他工作热情投入，后来经历了很多灵魂的自私，贪婪，工作渐渐成了例行公事。故事的开篇，他疲惫的坐在那儿，冷漠的应对。他的心，又何尝不是一片荒原呢？\n\n第一眼看到《摆渡人》的封面便被吸引，阳光照耀下，静谧的湖水，一叶小舟飘行，头顶是滚滚的乌云，湖水被金色阳光映衬着，闪着温暖的光芒，而阳光的尽头是乌黑翻滚的水波。这似乎是一个人的心灵或者是主人公迪伦的灵魂深处，身处黑暗，却总有一片光明在牵引着她不断前行，这片光明便是她心底因爱而生的倔强信念。\n\n第一章节迪伦出现在火车站，下着雨，她焦急的等着晚点的火车。她回忆这一天的倒霉事儿，却不知道其实死亡正悄悄靠近。火车钻入山洞，是的，这是事故地点。她惊恐的穿越漆黑的火车通道，费力打开车门，穿行在山洞中，恐惧布满全身。千辛万苦钻出山洞，却失望的发现，一无所有，没有想象中的人群，救护车。她渴望着，希冀有一丝文明的迹象，向四周眺望的时候，她发现了他。\n\n这是他们第一次相遇，他抱膝坐在那儿，看着迪伦没有一丝笑意。迪伦如释重负的眼含热泪，庆幸：她不再是孤单一人。此时作者重点叙述迪伦的弱小，单纯。“崔斯坦突然站起来往前走，而迪伦嘴张了几下，却一个音也发不出来，她愣在那里一动不动。他用指挥官一样的口吻命令：跟我走。”虽不是完全情愿，迪伦却像被催眠了，跟随着他移动。\n\n在这片荒原，他是她灵魂的摆渡人，他引领她回家。他们穿过树林，木丛，翻越大山，勇斗恶魔，途经一个个安全小屋。如果之前迪伦的心是干涸的河床，那么跟随他们的脚步，跟随克莱儿的叙述，爱将一点一滴的蓄满。\n\n他们白天赶路，晚上住在山中小屋，如果不及时进入安全小屋，地底的恶魔便会吞噬灵魂，使之魂飞魄散，变成恶魔。\n\n抵达第一个安全小屋的时候，迪伦仍然是恐惧，不情愿的，她只是不敢一个人面对那些未知的危险。\n\n第二个小屋，迪伦已经了然事实真相，原来她是在火车上唯一一个没有逃脱的，因为她已经死了，所以来到这片荒原，这里的一切都是她心像的投射。迪伦的平静出乎崔斯坦的预料，他开始对这个小女孩侧目。是的，迪伦很平静，似乎有着回家的安宁，因为她知道，摆渡人会引领，保护她。\n\n穿行在荒原上，共同抵抗着恶魔的侵袭，迪伦习惯于崔斯坦的陪伴，完全信任于他。她开始关心他，担心他会因为自己不经意好奇的话而受伤；崔斯坦很久以来第一次为自己的命运黯然神伤。荒原之上，有一粒种子悄然生根发芽。\n\n迪伦奋力冲进第四个安全屋时，发现崔斯坦不见了，他在跟恶魔的斗争中消失了。她撕心裂肺的哭，直到没有一丝力气，仍然执着的望着门口。“她从地上坐起来，肌肉一阵剧痛，她不由得发出一声呻吟。她仍然不敢把目光从门口挪开”。“崔斯坦，我需要你”她的嗓音嘶哑，泪花滚动。细节的描述透漏了少女的心，她已经爱上他。等到崔斯坦终于回来的时候，她忘乎所以的拥抱，沉浸在无尽的安心和喜悦中。\n\n随着时间的推移，他们离分界线越来越近，心灵也越来越煎熬。她将去到另外一个世界，而他去不了那里，他会永远消失在她的生命中。明明相爱，却没有结果，懂得规则的崔斯坦承受了更大的煎熬，他既不想伤害她，实话实说，又怕她会伤心，不忍拒绝。\n\n最后一天还是来临了，这些天在崔斯坦的保护，安慰，引领下，迪伦不再是那个脆弱的小女孩，她更加成熟，更加坚定，她可以勇敢的直面内心的恐惧。她坦率的说出：我爱你。崔斯坦回头看着她，内心矛盾纠结极了，他也一心一意的爱着她，只是不知道该不该表白。最终，他还是没能敌过自己的心：我也爱你，迪伦。“她注视他片刻，最后僵在那里。慢慢咀嚼他的话，心在欢喜的跳跃。分界线前的拥吻是那样的甜蜜和温暖，如同清澈的湖水，填满迪伦曾经匮乏的心，爱的阳光越来越明亮。因了这份明亮，她毅然的在另一个世界探索回来的路途，坚定的决定大海捞针的搜索。\n\n如果再次回到荒原，她有可能再次死亡，彻底的魂飞魄散，是留是回，迪伦也曾犹豫，只是当想到崔斯坦钴蓝色的眼睛，及带给她的浓浓温暖，她坚决选择了“时不待我“，立即出发。\n\n途径那片湖泊，水底的怪兽，合力围攻她，她就要放弃了。“崔斯坦的面庞在她脑海浮现，无比清晰，这让她又有了继续斗争的力量”。山路上行走，她摒弃一切杂念，克服本能的恐惧，低头前行，她必须这样做，不能看那些恶魔，一旦看了，就会被吞噬。恶魔轮番的偷袭，企图扰乱她的意志力。恶魔得到可乘之机时，一齐向她袭来，就在她惊慌失措的时候，崔斯坦的面容又一次浮现在眼前，迪伦变的充满斗志。\n\n在他们住过的小木屋前，迪伦终于又见到了崔斯坦，“迪伦笑了，大口吸气，好像自从他离开之后自己就没有再呼吸过。”“她欣喜若狂的奋力挥手”。崔斯坦也看到了她，惊愕，恐惧，还有欣喜，他从来不敢奢望，他们还能再见面。\n\n相逢之后的迪伦，彻彻底底的改变，她勇敢无畏。为了救助一个小女孩的灵魂，她义无反顾的冲出安全屋，机智的与恶魔搏斗，克莱儿以此展现出迪伦的涅槃蜕变。\n\n迪伦“双臂交叉放在胸口，脸上带着不达目的誓不罢休的表情”。而此时的崔斯坦却犹豫起来“我没有选择……我是说，我没有自由选择的权利，我的双腿，它们并不属于我。”迪伦不停的鼓励崔斯坦做一下尝试。为里爱，为了他们，尝试一起回到迪伦之前的世界。虽然规则一直是这样的，但是也许，也许他们还是有一线希望的。\n\n迪伦的心中有一轮太阳，一轮信念和爱的太阳。她坚持拖着崔斯坦返程。跋山涉水，他们再次回到火车事故地点。\n\n迪伦苏醒的时候，已经被救援的人发现，而让人担心的崔斯坦呢？开始，她以为他消失了，不停的自责。幸运的是，在出口，她看到了他，仍然坐在出口的左侧。他们再次相逢在新的世界。彼此打招呼“嗨，原来你在这里。”\n\n初读之下，感觉这是一部关于爱情的小说，细细咀嚼，它是一个小女孩的心灵成长史。因为爱的匮乏，她的心是一片无尽的荒原；穿越之后，因为爱的丰盛，她蜕变成一个勇敢坚强的摆渡人，将自己的爱人引领回家，脱离无形的控制。\n\n犹如书的封面，无论如何黑暗，有爱的阳光，一切都会好的。即使是荒原，也会肆意长满茂密的绿色。","source":"_posts/FerryMan.md","raw":"---\ntitle: 摆渡人\ndate: 2017-07-05 14:39:16\ntags: 心灵救赎\ncategories: 读书笔记\n---\n\n《摆渡人》是英国著名实力作家—克莱儿.麦克福尔的著作，凭借此著作，她一举获得了五项世界文学大奖。故事发生在神话背景下，以穿越荒原为主线，展现了人物灵魂成长的踪迹。  \n\n<!--more-->  \n\n迪伦一个15岁单亲女孩，一直跟妈妈生活，与父亲久未谋面。她烦恼母亲的喋喋不休，厌恶学校的环境。为了逃离这一切，她踏上了去见父亲的列车。不曾想到的是，火车出事故了，她成了唯一的幸存者，或者说是唯一的遇难者。初始，迪伦还是个孩子，担忧早饭的好坏，恐惧同学的嘲笑，尤其是在选择是否带上泰迪熊上火车的时候，几次拿起，放下，取出，放进，作者细腻的笔触，充分展示了一个小女孩心理世界的脆弱，恐惧，犹疑不安。此时，她心中是一片荒原，唯有爱，可以浇灌它茂密生长。\n\n崔斯坦一个灵魂摆渡人，不知道从何时开始从事这份工作，他引领了成百上千，成千上万的灵魂。他一直认为：这是命，他没得选择。最初，他工作热情投入，后来经历了很多灵魂的自私，贪婪，工作渐渐成了例行公事。故事的开篇，他疲惫的坐在那儿，冷漠的应对。他的心，又何尝不是一片荒原呢？\n\n第一眼看到《摆渡人》的封面便被吸引，阳光照耀下，静谧的湖水，一叶小舟飘行，头顶是滚滚的乌云，湖水被金色阳光映衬着，闪着温暖的光芒，而阳光的尽头是乌黑翻滚的水波。这似乎是一个人的心灵或者是主人公迪伦的灵魂深处，身处黑暗，却总有一片光明在牵引着她不断前行，这片光明便是她心底因爱而生的倔强信念。\n\n第一章节迪伦出现在火车站，下着雨，她焦急的等着晚点的火车。她回忆这一天的倒霉事儿，却不知道其实死亡正悄悄靠近。火车钻入山洞，是的，这是事故地点。她惊恐的穿越漆黑的火车通道，费力打开车门，穿行在山洞中，恐惧布满全身。千辛万苦钻出山洞，却失望的发现，一无所有，没有想象中的人群，救护车。她渴望着，希冀有一丝文明的迹象，向四周眺望的时候，她发现了他。\n\n这是他们第一次相遇，他抱膝坐在那儿，看着迪伦没有一丝笑意。迪伦如释重负的眼含热泪，庆幸：她不再是孤单一人。此时作者重点叙述迪伦的弱小，单纯。“崔斯坦突然站起来往前走，而迪伦嘴张了几下，却一个音也发不出来，她愣在那里一动不动。他用指挥官一样的口吻命令：跟我走。”虽不是完全情愿，迪伦却像被催眠了，跟随着他移动。\n\n在这片荒原，他是她灵魂的摆渡人，他引领她回家。他们穿过树林，木丛，翻越大山，勇斗恶魔，途经一个个安全小屋。如果之前迪伦的心是干涸的河床，那么跟随他们的脚步，跟随克莱儿的叙述，爱将一点一滴的蓄满。\n\n他们白天赶路，晚上住在山中小屋，如果不及时进入安全小屋，地底的恶魔便会吞噬灵魂，使之魂飞魄散，变成恶魔。\n\n抵达第一个安全小屋的时候，迪伦仍然是恐惧，不情愿的，她只是不敢一个人面对那些未知的危险。\n\n第二个小屋，迪伦已经了然事实真相，原来她是在火车上唯一一个没有逃脱的，因为她已经死了，所以来到这片荒原，这里的一切都是她心像的投射。迪伦的平静出乎崔斯坦的预料，他开始对这个小女孩侧目。是的，迪伦很平静，似乎有着回家的安宁，因为她知道，摆渡人会引领，保护她。\n\n穿行在荒原上，共同抵抗着恶魔的侵袭，迪伦习惯于崔斯坦的陪伴，完全信任于他。她开始关心他，担心他会因为自己不经意好奇的话而受伤；崔斯坦很久以来第一次为自己的命运黯然神伤。荒原之上，有一粒种子悄然生根发芽。\n\n迪伦奋力冲进第四个安全屋时，发现崔斯坦不见了，他在跟恶魔的斗争中消失了。她撕心裂肺的哭，直到没有一丝力气，仍然执着的望着门口。“她从地上坐起来，肌肉一阵剧痛，她不由得发出一声呻吟。她仍然不敢把目光从门口挪开”。“崔斯坦，我需要你”她的嗓音嘶哑，泪花滚动。细节的描述透漏了少女的心，她已经爱上他。等到崔斯坦终于回来的时候，她忘乎所以的拥抱，沉浸在无尽的安心和喜悦中。\n\n随着时间的推移，他们离分界线越来越近，心灵也越来越煎熬。她将去到另外一个世界，而他去不了那里，他会永远消失在她的生命中。明明相爱，却没有结果，懂得规则的崔斯坦承受了更大的煎熬，他既不想伤害她，实话实说，又怕她会伤心，不忍拒绝。\n\n最后一天还是来临了，这些天在崔斯坦的保护，安慰，引领下，迪伦不再是那个脆弱的小女孩，她更加成熟，更加坚定，她可以勇敢的直面内心的恐惧。她坦率的说出：我爱你。崔斯坦回头看着她，内心矛盾纠结极了，他也一心一意的爱着她，只是不知道该不该表白。最终，他还是没能敌过自己的心：我也爱你，迪伦。“她注视他片刻，最后僵在那里。慢慢咀嚼他的话，心在欢喜的跳跃。分界线前的拥吻是那样的甜蜜和温暖，如同清澈的湖水，填满迪伦曾经匮乏的心，爱的阳光越来越明亮。因了这份明亮，她毅然的在另一个世界探索回来的路途，坚定的决定大海捞针的搜索。\n\n如果再次回到荒原，她有可能再次死亡，彻底的魂飞魄散，是留是回，迪伦也曾犹豫，只是当想到崔斯坦钴蓝色的眼睛，及带给她的浓浓温暖，她坚决选择了“时不待我“，立即出发。\n\n途径那片湖泊，水底的怪兽，合力围攻她，她就要放弃了。“崔斯坦的面庞在她脑海浮现，无比清晰，这让她又有了继续斗争的力量”。山路上行走，她摒弃一切杂念，克服本能的恐惧，低头前行，她必须这样做，不能看那些恶魔，一旦看了，就会被吞噬。恶魔轮番的偷袭，企图扰乱她的意志力。恶魔得到可乘之机时，一齐向她袭来，就在她惊慌失措的时候，崔斯坦的面容又一次浮现在眼前，迪伦变的充满斗志。\n\n在他们住过的小木屋前，迪伦终于又见到了崔斯坦，“迪伦笑了，大口吸气，好像自从他离开之后自己就没有再呼吸过。”“她欣喜若狂的奋力挥手”。崔斯坦也看到了她，惊愕，恐惧，还有欣喜，他从来不敢奢望，他们还能再见面。\n\n相逢之后的迪伦，彻彻底底的改变，她勇敢无畏。为了救助一个小女孩的灵魂，她义无反顾的冲出安全屋，机智的与恶魔搏斗，克莱儿以此展现出迪伦的涅槃蜕变。\n\n迪伦“双臂交叉放在胸口，脸上带着不达目的誓不罢休的表情”。而此时的崔斯坦却犹豫起来“我没有选择……我是说，我没有自由选择的权利，我的双腿，它们并不属于我。”迪伦不停的鼓励崔斯坦做一下尝试。为里爱，为了他们，尝试一起回到迪伦之前的世界。虽然规则一直是这样的，但是也许，也许他们还是有一线希望的。\n\n迪伦的心中有一轮太阳，一轮信念和爱的太阳。她坚持拖着崔斯坦返程。跋山涉水，他们再次回到火车事故地点。\n\n迪伦苏醒的时候，已经被救援的人发现，而让人担心的崔斯坦呢？开始，她以为他消失了，不停的自责。幸运的是，在出口，她看到了他，仍然坐在出口的左侧。他们再次相逢在新的世界。彼此打招呼“嗨，原来你在这里。”\n\n初读之下，感觉这是一部关于爱情的小说，细细咀嚼，它是一个小女孩的心灵成长史。因为爱的匮乏，她的心是一片无尽的荒原；穿越之后，因为爱的丰盛，她蜕变成一个勇敢坚强的摆渡人，将自己的爱人引领回家，脱离无形的控制。\n\n犹如书的封面，无论如何黑暗，有爱的阳光，一切都会好的。即使是荒原，也会肆意长满茂密的绿色。","slug":"FerryMan","published":1,"updated":"2018-01-02T00:50:36.820Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjbwxj0xi0000h0vomytam622","content":"<p>《摆渡人》是英国著名实力作家—克莱儿.麦克福尔的著作，凭借此著作，她一举获得了五项世界文学大奖。故事发生在神话背景下，以穿越荒原为主线，展现了人物灵魂成长的踪迹。  </p>\n<a id=\"more\"></a>  \n<p>迪伦一个15岁单亲女孩，一直跟妈妈生活，与父亲久未谋面。她烦恼母亲的喋喋不休，厌恶学校的环境。为了逃离这一切，她踏上了去见父亲的列车。不曾想到的是，火车出事故了，她成了唯一的幸存者，或者说是唯一的遇难者。初始，迪伦还是个孩子，担忧早饭的好坏，恐惧同学的嘲笑，尤其是在选择是否带上泰迪熊上火车的时候，几次拿起，放下，取出，放进，作者细腻的笔触，充分展示了一个小女孩心理世界的脆弱，恐惧，犹疑不安。此时，她心中是一片荒原，唯有爱，可以浇灌它茂密生长。</p>\n<p>崔斯坦一个灵魂摆渡人，不知道从何时开始从事这份工作，他引领了成百上千，成千上万的灵魂。他一直认为：这是命，他没得选择。最初，他工作热情投入，后来经历了很多灵魂的自私，贪婪，工作渐渐成了例行公事。故事的开篇，他疲惫的坐在那儿，冷漠的应对。他的心，又何尝不是一片荒原呢？</p>\n<p>第一眼看到《摆渡人》的封面便被吸引，阳光照耀下，静谧的湖水，一叶小舟飘行，头顶是滚滚的乌云，湖水被金色阳光映衬着，闪着温暖的光芒，而阳光的尽头是乌黑翻滚的水波。这似乎是一个人的心灵或者是主人公迪伦的灵魂深处，身处黑暗，却总有一片光明在牵引着她不断前行，这片光明便是她心底因爱而生的倔强信念。</p>\n<p>第一章节迪伦出现在火车站，下着雨，她焦急的等着晚点的火车。她回忆这一天的倒霉事儿，却不知道其实死亡正悄悄靠近。火车钻入山洞，是的，这是事故地点。她惊恐的穿越漆黑的火车通道，费力打开车门，穿行在山洞中，恐惧布满全身。千辛万苦钻出山洞，却失望的发现，一无所有，没有想象中的人群，救护车。她渴望着，希冀有一丝文明的迹象，向四周眺望的时候，她发现了他。</p>\n<p>这是他们第一次相遇，他抱膝坐在那儿，看着迪伦没有一丝笑意。迪伦如释重负的眼含热泪，庆幸：她不再是孤单一人。此时作者重点叙述迪伦的弱小，单纯。“崔斯坦突然站起来往前走，而迪伦嘴张了几下，却一个音也发不出来，她愣在那里一动不动。他用指挥官一样的口吻命令：跟我走。”虽不是完全情愿，迪伦却像被催眠了，跟随着他移动。</p>\n<p>在这片荒原，他是她灵魂的摆渡人，他引领她回家。他们穿过树林，木丛，翻越大山，勇斗恶魔，途经一个个安全小屋。如果之前迪伦的心是干涸的河床，那么跟随他们的脚步，跟随克莱儿的叙述，爱将一点一滴的蓄满。</p>\n<p>他们白天赶路，晚上住在山中小屋，如果不及时进入安全小屋，地底的恶魔便会吞噬灵魂，使之魂飞魄散，变成恶魔。</p>\n<p>抵达第一个安全小屋的时候，迪伦仍然是恐惧，不情愿的，她只是不敢一个人面对那些未知的危险。</p>\n<p>第二个小屋，迪伦已经了然事实真相，原来她是在火车上唯一一个没有逃脱的，因为她已经死了，所以来到这片荒原，这里的一切都是她心像的投射。迪伦的平静出乎崔斯坦的预料，他开始对这个小女孩侧目。是的，迪伦很平静，似乎有着回家的安宁，因为她知道，摆渡人会引领，保护她。</p>\n<p>穿行在荒原上，共同抵抗着恶魔的侵袭，迪伦习惯于崔斯坦的陪伴，完全信任于他。她开始关心他，担心他会因为自己不经意好奇的话而受伤；崔斯坦很久以来第一次为自己的命运黯然神伤。荒原之上，有一粒种子悄然生根发芽。</p>\n<p>迪伦奋力冲进第四个安全屋时，发现崔斯坦不见了，他在跟恶魔的斗争中消失了。她撕心裂肺的哭，直到没有一丝力气，仍然执着的望着门口。“她从地上坐起来，肌肉一阵剧痛，她不由得发出一声呻吟。她仍然不敢把目光从门口挪开”。“崔斯坦，我需要你”她的嗓音嘶哑，泪花滚动。细节的描述透漏了少女的心，她已经爱上他。等到崔斯坦终于回来的时候，她忘乎所以的拥抱，沉浸在无尽的安心和喜悦中。</p>\n<p>随着时间的推移，他们离分界线越来越近，心灵也越来越煎熬。她将去到另外一个世界，而他去不了那里，他会永远消失在她的生命中。明明相爱，却没有结果，懂得规则的崔斯坦承受了更大的煎熬，他既不想伤害她，实话实说，又怕她会伤心，不忍拒绝。</p>\n<p>最后一天还是来临了，这些天在崔斯坦的保护，安慰，引领下，迪伦不再是那个脆弱的小女孩，她更加成熟，更加坚定，她可以勇敢的直面内心的恐惧。她坦率的说出：我爱你。崔斯坦回头看着她，内心矛盾纠结极了，他也一心一意的爱着她，只是不知道该不该表白。最终，他还是没能敌过自己的心：我也爱你，迪伦。“她注视他片刻，最后僵在那里。慢慢咀嚼他的话，心在欢喜的跳跃。分界线前的拥吻是那样的甜蜜和温暖，如同清澈的湖水，填满迪伦曾经匮乏的心，爱的阳光越来越明亮。因了这份明亮，她毅然的在另一个世界探索回来的路途，坚定的决定大海捞针的搜索。</p>\n<p>如果再次回到荒原，她有可能再次死亡，彻底的魂飞魄散，是留是回，迪伦也曾犹豫，只是当想到崔斯坦钴蓝色的眼睛，及带给她的浓浓温暖，她坚决选择了“时不待我“，立即出发。</p>\n<p>途径那片湖泊，水底的怪兽，合力围攻她，她就要放弃了。“崔斯坦的面庞在她脑海浮现，无比清晰，这让她又有了继续斗争的力量”。山路上行走，她摒弃一切杂念，克服本能的恐惧，低头前行，她必须这样做，不能看那些恶魔，一旦看了，就会被吞噬。恶魔轮番的偷袭，企图扰乱她的意志力。恶魔得到可乘之机时，一齐向她袭来，就在她惊慌失措的时候，崔斯坦的面容又一次浮现在眼前，迪伦变的充满斗志。</p>\n<p>在他们住过的小木屋前，迪伦终于又见到了崔斯坦，“迪伦笑了，大口吸气，好像自从他离开之后自己就没有再呼吸过。”“她欣喜若狂的奋力挥手”。崔斯坦也看到了她，惊愕，恐惧，还有欣喜，他从来不敢奢望，他们还能再见面。</p>\n<p>相逢之后的迪伦，彻彻底底的改变，她勇敢无畏。为了救助一个小女孩的灵魂，她义无反顾的冲出安全屋，机智的与恶魔搏斗，克莱儿以此展现出迪伦的涅槃蜕变。</p>\n<p>迪伦“双臂交叉放在胸口，脸上带着不达目的誓不罢休的表情”。而此时的崔斯坦却犹豫起来“我没有选择……我是说，我没有自由选择的权利，我的双腿，它们并不属于我。”迪伦不停的鼓励崔斯坦做一下尝试。为里爱，为了他们，尝试一起回到迪伦之前的世界。虽然规则一直是这样的，但是也许，也许他们还是有一线希望的。</p>\n<p>迪伦的心中有一轮太阳，一轮信念和爱的太阳。她坚持拖着崔斯坦返程。跋山涉水，他们再次回到火车事故地点。</p>\n<p>迪伦苏醒的时候，已经被救援的人发现，而让人担心的崔斯坦呢？开始，她以为他消失了，不停的自责。幸运的是，在出口，她看到了他，仍然坐在出口的左侧。他们再次相逢在新的世界。彼此打招呼“嗨，原来你在这里。”</p>\n<p>初读之下，感觉这是一部关于爱情的小说，细细咀嚼，它是一个小女孩的心灵成长史。因为爱的匮乏，她的心是一片无尽的荒原；穿越之后，因为爱的丰盛，她蜕变成一个勇敢坚强的摆渡人，将自己的爱人引领回家，脱离无形的控制。</p>\n<p>犹如书的封面，无论如何黑暗，有爱的阳光，一切都会好的。即使是荒原，也会肆意长满茂密的绿色。</p>\n","site":{"data":{}},"excerpt":"<p>《摆渡人》是英国著名实力作家—克莱儿.麦克福尔的著作，凭借此著作，她一举获得了五项世界文学大奖。故事发生在神话背景下，以穿越荒原为主线，展现了人物灵魂成长的踪迹。  </p>","more":"<p>迪伦一个15岁单亲女孩，一直跟妈妈生活，与父亲久未谋面。她烦恼母亲的喋喋不休，厌恶学校的环境。为了逃离这一切，她踏上了去见父亲的列车。不曾想到的是，火车出事故了，她成了唯一的幸存者，或者说是唯一的遇难者。初始，迪伦还是个孩子，担忧早饭的好坏，恐惧同学的嘲笑，尤其是在选择是否带上泰迪熊上火车的时候，几次拿起，放下，取出，放进，作者细腻的笔触，充分展示了一个小女孩心理世界的脆弱，恐惧，犹疑不安。此时，她心中是一片荒原，唯有爱，可以浇灌它茂密生长。</p>\n<p>崔斯坦一个灵魂摆渡人，不知道从何时开始从事这份工作，他引领了成百上千，成千上万的灵魂。他一直认为：这是命，他没得选择。最初，他工作热情投入，后来经历了很多灵魂的自私，贪婪，工作渐渐成了例行公事。故事的开篇，他疲惫的坐在那儿，冷漠的应对。他的心，又何尝不是一片荒原呢？</p>\n<p>第一眼看到《摆渡人》的封面便被吸引，阳光照耀下，静谧的湖水，一叶小舟飘行，头顶是滚滚的乌云，湖水被金色阳光映衬着，闪着温暖的光芒，而阳光的尽头是乌黑翻滚的水波。这似乎是一个人的心灵或者是主人公迪伦的灵魂深处，身处黑暗，却总有一片光明在牵引着她不断前行，这片光明便是她心底因爱而生的倔强信念。</p>\n<p>第一章节迪伦出现在火车站，下着雨，她焦急的等着晚点的火车。她回忆这一天的倒霉事儿，却不知道其实死亡正悄悄靠近。火车钻入山洞，是的，这是事故地点。她惊恐的穿越漆黑的火车通道，费力打开车门，穿行在山洞中，恐惧布满全身。千辛万苦钻出山洞，却失望的发现，一无所有，没有想象中的人群，救护车。她渴望着，希冀有一丝文明的迹象，向四周眺望的时候，她发现了他。</p>\n<p>这是他们第一次相遇，他抱膝坐在那儿，看着迪伦没有一丝笑意。迪伦如释重负的眼含热泪，庆幸：她不再是孤单一人。此时作者重点叙述迪伦的弱小，单纯。“崔斯坦突然站起来往前走，而迪伦嘴张了几下，却一个音也发不出来，她愣在那里一动不动。他用指挥官一样的口吻命令：跟我走。”虽不是完全情愿，迪伦却像被催眠了，跟随着他移动。</p>\n<p>在这片荒原，他是她灵魂的摆渡人，他引领她回家。他们穿过树林，木丛，翻越大山，勇斗恶魔，途经一个个安全小屋。如果之前迪伦的心是干涸的河床，那么跟随他们的脚步，跟随克莱儿的叙述，爱将一点一滴的蓄满。</p>\n<p>他们白天赶路，晚上住在山中小屋，如果不及时进入安全小屋，地底的恶魔便会吞噬灵魂，使之魂飞魄散，变成恶魔。</p>\n<p>抵达第一个安全小屋的时候，迪伦仍然是恐惧，不情愿的，她只是不敢一个人面对那些未知的危险。</p>\n<p>第二个小屋，迪伦已经了然事实真相，原来她是在火车上唯一一个没有逃脱的，因为她已经死了，所以来到这片荒原，这里的一切都是她心像的投射。迪伦的平静出乎崔斯坦的预料，他开始对这个小女孩侧目。是的，迪伦很平静，似乎有着回家的安宁，因为她知道，摆渡人会引领，保护她。</p>\n<p>穿行在荒原上，共同抵抗着恶魔的侵袭，迪伦习惯于崔斯坦的陪伴，完全信任于他。她开始关心他，担心他会因为自己不经意好奇的话而受伤；崔斯坦很久以来第一次为自己的命运黯然神伤。荒原之上，有一粒种子悄然生根发芽。</p>\n<p>迪伦奋力冲进第四个安全屋时，发现崔斯坦不见了，他在跟恶魔的斗争中消失了。她撕心裂肺的哭，直到没有一丝力气，仍然执着的望着门口。“她从地上坐起来，肌肉一阵剧痛，她不由得发出一声呻吟。她仍然不敢把目光从门口挪开”。“崔斯坦，我需要你”她的嗓音嘶哑，泪花滚动。细节的描述透漏了少女的心，她已经爱上他。等到崔斯坦终于回来的时候，她忘乎所以的拥抱，沉浸在无尽的安心和喜悦中。</p>\n<p>随着时间的推移，他们离分界线越来越近，心灵也越来越煎熬。她将去到另外一个世界，而他去不了那里，他会永远消失在她的生命中。明明相爱，却没有结果，懂得规则的崔斯坦承受了更大的煎熬，他既不想伤害她，实话实说，又怕她会伤心，不忍拒绝。</p>\n<p>最后一天还是来临了，这些天在崔斯坦的保护，安慰，引领下，迪伦不再是那个脆弱的小女孩，她更加成熟，更加坚定，她可以勇敢的直面内心的恐惧。她坦率的说出：我爱你。崔斯坦回头看着她，内心矛盾纠结极了，他也一心一意的爱着她，只是不知道该不该表白。最终，他还是没能敌过自己的心：我也爱你，迪伦。“她注视他片刻，最后僵在那里。慢慢咀嚼他的话，心在欢喜的跳跃。分界线前的拥吻是那样的甜蜜和温暖，如同清澈的湖水，填满迪伦曾经匮乏的心，爱的阳光越来越明亮。因了这份明亮，她毅然的在另一个世界探索回来的路途，坚定的决定大海捞针的搜索。</p>\n<p>如果再次回到荒原，她有可能再次死亡，彻底的魂飞魄散，是留是回，迪伦也曾犹豫，只是当想到崔斯坦钴蓝色的眼睛，及带给她的浓浓温暖，她坚决选择了“时不待我“，立即出发。</p>\n<p>途径那片湖泊，水底的怪兽，合力围攻她，她就要放弃了。“崔斯坦的面庞在她脑海浮现，无比清晰，这让她又有了继续斗争的力量”。山路上行走，她摒弃一切杂念，克服本能的恐惧，低头前行，她必须这样做，不能看那些恶魔，一旦看了，就会被吞噬。恶魔轮番的偷袭，企图扰乱她的意志力。恶魔得到可乘之机时，一齐向她袭来，就在她惊慌失措的时候，崔斯坦的面容又一次浮现在眼前，迪伦变的充满斗志。</p>\n<p>在他们住过的小木屋前，迪伦终于又见到了崔斯坦，“迪伦笑了，大口吸气，好像自从他离开之后自己就没有再呼吸过。”“她欣喜若狂的奋力挥手”。崔斯坦也看到了她，惊愕，恐惧，还有欣喜，他从来不敢奢望，他们还能再见面。</p>\n<p>相逢之后的迪伦，彻彻底底的改变，她勇敢无畏。为了救助一个小女孩的灵魂，她义无反顾的冲出安全屋，机智的与恶魔搏斗，克莱儿以此展现出迪伦的涅槃蜕变。</p>\n<p>迪伦“双臂交叉放在胸口，脸上带着不达目的誓不罢休的表情”。而此时的崔斯坦却犹豫起来“我没有选择……我是说，我没有自由选择的权利，我的双腿，它们并不属于我。”迪伦不停的鼓励崔斯坦做一下尝试。为里爱，为了他们，尝试一起回到迪伦之前的世界。虽然规则一直是这样的，但是也许，也许他们还是有一线希望的。</p>\n<p>迪伦的心中有一轮太阳，一轮信念和爱的太阳。她坚持拖着崔斯坦返程。跋山涉水，他们再次回到火车事故地点。</p>\n<p>迪伦苏醒的时候，已经被救援的人发现，而让人担心的崔斯坦呢？开始，她以为他消失了，不停的自责。幸运的是，在出口，她看到了他，仍然坐在出口的左侧。他们再次相逢在新的世界。彼此打招呼“嗨，原来你在这里。”</p>\n<p>初读之下，感觉这是一部关于爱情的小说，细细咀嚼，它是一个小女孩的心灵成长史。因为爱的匮乏，她的心是一片无尽的荒原；穿越之后，因为爱的丰盛，她蜕变成一个勇敢坚强的摆渡人，将自己的爱人引领回家，脱离无形的控制。</p>\n<p>犹如书的封面，无论如何黑暗，有爱的阳光，一切都会好的。即使是荒原，也会肆意长满茂密的绿色。</p>"},{"title":"偷影子的人","date":"2017-04-03T07:00:34.000Z","_content":"\n>有些人只拥吻影子，于是只拥有幸福的幻影。----莎士比亚  \n\n>爱情里面最需要的，是想象力。每个人必须要用尽全力和全部的想象力来形塑对方，并丝毫不向现实低头。那么，当双方幻想相遇......就再也没有比这更美的景象了。----罗曼.加里  \n\n&#160; &#160; &#160; &#160; 如果你能偷我的影子，那么我的影子会告诉你什么呢？  \n\n<!--more-->\n\n&#160; &#160; &#160; &#160; 在这本马克·李维的小说里面，讲述的就是这样的一个故事。一个老是受班上同学欺负的瘦弱小男孩，因为拥有一种特殊能力而强大：他能“偷别人的影子”，因而能看见他人心事，听见人们心中不愿意说出口的秘密。他开始成为需要帮助者的心灵伙伴，为每个偷来的影子找到点亮生命的小小光芒。某年灿烂的夏天，他在海边邂逅了一位又聋又哑的女孩。他该如何用自己的能力帮助她？他将如何信守与她共许的承诺？  \n\n&#160; &#160; &#160; &#160; 这是一部面向成人的童话，我们每一个人都能在里面找到自己的影子。在我们成长的青葱时光里，我们有过班级里面的死对头，一起在外面打过群架，去过脏兮兮的网吧通宵，一起去过山上摘果子，我们折过纸飞机，打过洋画，弹过弹珠。我们有吃过老干妈拌饭，去水库游泳，一起去书店买书。我们有过那些年一起追过的女孩，有那些一言不合就打架的同桌。  \n\n&#160; &#160; &#160; &#160; 我们也试过，和一个大朋友分享那些深埋在心里的小秘密，结识到一个看起来很滑稽的家伙，没想到很快成了死党。我们也记得，面对自己不能理解的感情的时候，心里那种纠结不安的情感，当家里有变故的时候，我们会想把自己缩的小小的，藏在一个别人都看不到的地方，我们不知不觉间，会把各种不属于自己的责任往自己身上背。但是又装的满不在乎，只好偷偷地在夜里，跟映在墙上的影子倾诉那些憋在心里的真心话。原来，影子在很早之前，就是我们信赖的朋友了，只是自己在长大之后，渐渐忘记了。马克•李维那一支生花妙笔，会让你想起，那些你以为遗忘了的前尘往事，和你自己不曾审视过的微妙情感。  \n\n&#160; &#160; &#160; &#160; 主人公不是拥有那些读心术语一样的特异功能。作者想告诉我们的是，只要我们用心去感受他人的情绪，设身处地的为朋友着想，我们也能够获得朋友的真心，就想读心术一样。我们也可以得到朋友的信任，用真心去换取真心。  \n\n&#160; &#160; &#160; &#160; 作者在文中对亲情的描述，可以让我们感受到一种缺憾美。在我们年轻的时候，我们哭着闹着想要离开这个名为象牙塔的地方，最终，如我们所愿，我们考上了大学，找到了一份满意的工作，我们是自由了，但是我们忘记了那个名叫老家的地方以及那里还有一个让在等着你。如果有一天，那个等你的人老了，不在了，我想你也就没有机会再回到从前了吧。我们每一个人的心中都充满这这种爱，但是我们都把它藏的密不透风，从来就没有表达出来。我们工作过后，有自己的生活，工作也很充实，更可以找到另一半。但是我们对父母的爱一直是没有挂心，我们表现的很粗心，毫不在意。从来就不关系自己的母亲的渐渐老去。我们知道很多朋友的秘密，却从来没有了解过自己父母的心。道理就是这样，我们要做的就是珍惜我们身边的人。  \n\n&#160; &#160; &#160; &#160; 爱情，是整个故事中的一抹亮色，爱情，会照亮我们每个人的生命。在很小的时候，偷影子的小男孩是怀疑爱情的，他曾经发出过疑问：“爱情，莫非像影子一样。有人踩中了，就带着离去？还是因为爱情跟影子一样怕光，又或者，情况正好相反，没有了光，爱情的影子就被拭去，最终黯然离去？”可是，当他遇到了克莱尔，遇到了苏菲。他开始涤清自己的恐惧，他的爱单纯美丽的像一个寓言。当他放弃了一个近在咫尺各方面都很般配的交往对象，去追逐一个童年就开始的梦，不再忧心得失的时候，他才领会了爱的真谛。那个让你舍弃了一切去追寻的，却充满了不确定性的人，才是你真正爱的人。无论过去了多少年，不管你已经变成了什么样子，就算所有景色都已经人事已非，我还是，最喜欢你。  \n\n&#160; &#160; &#160; &#160; 这才是真正的人生吧，在平淡的岁月里经历得失慢慢丰盈起来的人生，就好像，你我必将经历的人生一样。\n","source":"_posts/LeVoleur.md","raw":"---\ntitle: 偷影子的人\ndate: 2017-04-03 15:00:34\ntags: 心灵救赎\ncategories: 读书笔记\n---\n\n>有些人只拥吻影子，于是只拥有幸福的幻影。----莎士比亚  \n\n>爱情里面最需要的，是想象力。每个人必须要用尽全力和全部的想象力来形塑对方，并丝毫不向现实低头。那么，当双方幻想相遇......就再也没有比这更美的景象了。----罗曼.加里  \n\n&#160; &#160; &#160; &#160; 如果你能偷我的影子，那么我的影子会告诉你什么呢？  \n\n<!--more-->\n\n&#160; &#160; &#160; &#160; 在这本马克·李维的小说里面，讲述的就是这样的一个故事。一个老是受班上同学欺负的瘦弱小男孩，因为拥有一种特殊能力而强大：他能“偷别人的影子”，因而能看见他人心事，听见人们心中不愿意说出口的秘密。他开始成为需要帮助者的心灵伙伴，为每个偷来的影子找到点亮生命的小小光芒。某年灿烂的夏天，他在海边邂逅了一位又聋又哑的女孩。他该如何用自己的能力帮助她？他将如何信守与她共许的承诺？  \n\n&#160; &#160; &#160; &#160; 这是一部面向成人的童话，我们每一个人都能在里面找到自己的影子。在我们成长的青葱时光里，我们有过班级里面的死对头，一起在外面打过群架，去过脏兮兮的网吧通宵，一起去过山上摘果子，我们折过纸飞机，打过洋画，弹过弹珠。我们有吃过老干妈拌饭，去水库游泳，一起去书店买书。我们有过那些年一起追过的女孩，有那些一言不合就打架的同桌。  \n\n&#160; &#160; &#160; &#160; 我们也试过，和一个大朋友分享那些深埋在心里的小秘密，结识到一个看起来很滑稽的家伙，没想到很快成了死党。我们也记得，面对自己不能理解的感情的时候，心里那种纠结不安的情感，当家里有变故的时候，我们会想把自己缩的小小的，藏在一个别人都看不到的地方，我们不知不觉间，会把各种不属于自己的责任往自己身上背。但是又装的满不在乎，只好偷偷地在夜里，跟映在墙上的影子倾诉那些憋在心里的真心话。原来，影子在很早之前，就是我们信赖的朋友了，只是自己在长大之后，渐渐忘记了。马克•李维那一支生花妙笔，会让你想起，那些你以为遗忘了的前尘往事，和你自己不曾审视过的微妙情感。  \n\n&#160; &#160; &#160; &#160; 主人公不是拥有那些读心术语一样的特异功能。作者想告诉我们的是，只要我们用心去感受他人的情绪，设身处地的为朋友着想，我们也能够获得朋友的真心，就想读心术一样。我们也可以得到朋友的信任，用真心去换取真心。  \n\n&#160; &#160; &#160; &#160; 作者在文中对亲情的描述，可以让我们感受到一种缺憾美。在我们年轻的时候，我们哭着闹着想要离开这个名为象牙塔的地方，最终，如我们所愿，我们考上了大学，找到了一份满意的工作，我们是自由了，但是我们忘记了那个名叫老家的地方以及那里还有一个让在等着你。如果有一天，那个等你的人老了，不在了，我想你也就没有机会再回到从前了吧。我们每一个人的心中都充满这这种爱，但是我们都把它藏的密不透风，从来就没有表达出来。我们工作过后，有自己的生活，工作也很充实，更可以找到另一半。但是我们对父母的爱一直是没有挂心，我们表现的很粗心，毫不在意。从来就不关系自己的母亲的渐渐老去。我们知道很多朋友的秘密，却从来没有了解过自己父母的心。道理就是这样，我们要做的就是珍惜我们身边的人。  \n\n&#160; &#160; &#160; &#160; 爱情，是整个故事中的一抹亮色，爱情，会照亮我们每个人的生命。在很小的时候，偷影子的小男孩是怀疑爱情的，他曾经发出过疑问：“爱情，莫非像影子一样。有人踩中了，就带着离去？还是因为爱情跟影子一样怕光，又或者，情况正好相反，没有了光，爱情的影子就被拭去，最终黯然离去？”可是，当他遇到了克莱尔，遇到了苏菲。他开始涤清自己的恐惧，他的爱单纯美丽的像一个寓言。当他放弃了一个近在咫尺各方面都很般配的交往对象，去追逐一个童年就开始的梦，不再忧心得失的时候，他才领会了爱的真谛。那个让你舍弃了一切去追寻的，却充满了不确定性的人，才是你真正爱的人。无论过去了多少年，不管你已经变成了什么样子，就算所有景色都已经人事已非，我还是，最喜欢你。  \n\n&#160; &#160; &#160; &#160; 这才是真正的人生吧，在平淡的岁月里经历得失慢慢丰盈起来的人生，就好像，你我必将经历的人生一样。\n","slug":"LeVoleur","published":1,"updated":"2018-01-02T00:50:36.820Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjbwxj0xi0002h0vofi46kbqk","content":"<blockquote>\n<p>有些人只拥吻影子，于是只拥有幸福的幻影。—-莎士比亚  </p>\n<p>爱情里面最需要的，是想象力。每个人必须要用尽全力和全部的想象力来形塑对方，并丝毫不向现实低头。那么，当双方幻想相遇……就再也没有比这更美的景象了。—-罗曼.加里  </p>\n</blockquote>\n<p>&#160; &#160; &#160; &#160; 如果你能偷我的影子，那么我的影子会告诉你什么呢？  </p>\n<a id=\"more\"></a>\n<p>&#160; &#160; &#160; &#160; 在这本马克·李维的小说里面，讲述的就是这样的一个故事。一个老是受班上同学欺负的瘦弱小男孩，因为拥有一种特殊能力而强大：他能“偷别人的影子”，因而能看见他人心事，听见人们心中不愿意说出口的秘密。他开始成为需要帮助者的心灵伙伴，为每个偷来的影子找到点亮生命的小小光芒。某年灿烂的夏天，他在海边邂逅了一位又聋又哑的女孩。他该如何用自己的能力帮助她？他将如何信守与她共许的承诺？  </p>\n<p>&#160; &#160; &#160; &#160; 这是一部面向成人的童话，我们每一个人都能在里面找到自己的影子。在我们成长的青葱时光里，我们有过班级里面的死对头，一起在外面打过群架，去过脏兮兮的网吧通宵，一起去过山上摘果子，我们折过纸飞机，打过洋画，弹过弹珠。我们有吃过老干妈拌饭，去水库游泳，一起去书店买书。我们有过那些年一起追过的女孩，有那些一言不合就打架的同桌。  </p>\n<p>&#160; &#160; &#160; &#160; 我们也试过，和一个大朋友分享那些深埋在心里的小秘密，结识到一个看起来很滑稽的家伙，没想到很快成了死党。我们也记得，面对自己不能理解的感情的时候，心里那种纠结不安的情感，当家里有变故的时候，我们会想把自己缩的小小的，藏在一个别人都看不到的地方，我们不知不觉间，会把各种不属于自己的责任往自己身上背。但是又装的满不在乎，只好偷偷地在夜里，跟映在墙上的影子倾诉那些憋在心里的真心话。原来，影子在很早之前，就是我们信赖的朋友了，只是自己在长大之后，渐渐忘记了。马克•李维那一支生花妙笔，会让你想起，那些你以为遗忘了的前尘往事，和你自己不曾审视过的微妙情感。  </p>\n<p>&#160; &#160; &#160; &#160; 主人公不是拥有那些读心术语一样的特异功能。作者想告诉我们的是，只要我们用心去感受他人的情绪，设身处地的为朋友着想，我们也能够获得朋友的真心，就想读心术一样。我们也可以得到朋友的信任，用真心去换取真心。  </p>\n<p>&#160; &#160; &#160; &#160; 作者在文中对亲情的描述，可以让我们感受到一种缺憾美。在我们年轻的时候，我们哭着闹着想要离开这个名为象牙塔的地方，最终，如我们所愿，我们考上了大学，找到了一份满意的工作，我们是自由了，但是我们忘记了那个名叫老家的地方以及那里还有一个让在等着你。如果有一天，那个等你的人老了，不在了，我想你也就没有机会再回到从前了吧。我们每一个人的心中都充满这这种爱，但是我们都把它藏的密不透风，从来就没有表达出来。我们工作过后，有自己的生活，工作也很充实，更可以找到另一半。但是我们对父母的爱一直是没有挂心，我们表现的很粗心，毫不在意。从来就不关系自己的母亲的渐渐老去。我们知道很多朋友的秘密，却从来没有了解过自己父母的心。道理就是这样，我们要做的就是珍惜我们身边的人。  </p>\n<p>&#160; &#160; &#160; &#160; 爱情，是整个故事中的一抹亮色，爱情，会照亮我们每个人的生命。在很小的时候，偷影子的小男孩是怀疑爱情的，他曾经发出过疑问：“爱情，莫非像影子一样。有人踩中了，就带着离去？还是因为爱情跟影子一样怕光，又或者，情况正好相反，没有了光，爱情的影子就被拭去，最终黯然离去？”可是，当他遇到了克莱尔，遇到了苏菲。他开始涤清自己的恐惧，他的爱单纯美丽的像一个寓言。当他放弃了一个近在咫尺各方面都很般配的交往对象，去追逐一个童年就开始的梦，不再忧心得失的时候，他才领会了爱的真谛。那个让你舍弃了一切去追寻的，却充满了不确定性的人，才是你真正爱的人。无论过去了多少年，不管你已经变成了什么样子，就算所有景色都已经人事已非，我还是，最喜欢你。  </p>\n<p>&#160; &#160; &#160; &#160; 这才是真正的人生吧，在平淡的岁月里经历得失慢慢丰盈起来的人生，就好像，你我必将经历的人生一样。</p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>有些人只拥吻影子，于是只拥有幸福的幻影。—-莎士比亚  </p>\n<p>爱情里面最需要的，是想象力。每个人必须要用尽全力和全部的想象力来形塑对方，并丝毫不向现实低头。那么，当双方幻想相遇……就再也没有比这更美的景象了。—-罗曼.加里  </p>\n</blockquote>\n<p>&#160; &#160; &#160; &#160; 如果你能偷我的影子，那么我的影子会告诉你什么呢？  </p>","more":"<p>&#160; &#160; &#160; &#160; 在这本马克·李维的小说里面，讲述的就是这样的一个故事。一个老是受班上同学欺负的瘦弱小男孩，因为拥有一种特殊能力而强大：他能“偷别人的影子”，因而能看见他人心事，听见人们心中不愿意说出口的秘密。他开始成为需要帮助者的心灵伙伴，为每个偷来的影子找到点亮生命的小小光芒。某年灿烂的夏天，他在海边邂逅了一位又聋又哑的女孩。他该如何用自己的能力帮助她？他将如何信守与她共许的承诺？  </p>\n<p>&#160; &#160; &#160; &#160; 这是一部面向成人的童话，我们每一个人都能在里面找到自己的影子。在我们成长的青葱时光里，我们有过班级里面的死对头，一起在外面打过群架，去过脏兮兮的网吧通宵，一起去过山上摘果子，我们折过纸飞机，打过洋画，弹过弹珠。我们有吃过老干妈拌饭，去水库游泳，一起去书店买书。我们有过那些年一起追过的女孩，有那些一言不合就打架的同桌。  </p>\n<p>&#160; &#160; &#160; &#160; 我们也试过，和一个大朋友分享那些深埋在心里的小秘密，结识到一个看起来很滑稽的家伙，没想到很快成了死党。我们也记得，面对自己不能理解的感情的时候，心里那种纠结不安的情感，当家里有变故的时候，我们会想把自己缩的小小的，藏在一个别人都看不到的地方，我们不知不觉间，会把各种不属于自己的责任往自己身上背。但是又装的满不在乎，只好偷偷地在夜里，跟映在墙上的影子倾诉那些憋在心里的真心话。原来，影子在很早之前，就是我们信赖的朋友了，只是自己在长大之后，渐渐忘记了。马克•李维那一支生花妙笔，会让你想起，那些你以为遗忘了的前尘往事，和你自己不曾审视过的微妙情感。  </p>\n<p>&#160; &#160; &#160; &#160; 主人公不是拥有那些读心术语一样的特异功能。作者想告诉我们的是，只要我们用心去感受他人的情绪，设身处地的为朋友着想，我们也能够获得朋友的真心，就想读心术一样。我们也可以得到朋友的信任，用真心去换取真心。  </p>\n<p>&#160; &#160; &#160; &#160; 作者在文中对亲情的描述，可以让我们感受到一种缺憾美。在我们年轻的时候，我们哭着闹着想要离开这个名为象牙塔的地方，最终，如我们所愿，我们考上了大学，找到了一份满意的工作，我们是自由了，但是我们忘记了那个名叫老家的地方以及那里还有一个让在等着你。如果有一天，那个等你的人老了，不在了，我想你也就没有机会再回到从前了吧。我们每一个人的心中都充满这这种爱，但是我们都把它藏的密不透风，从来就没有表达出来。我们工作过后，有自己的生活，工作也很充实，更可以找到另一半。但是我们对父母的爱一直是没有挂心，我们表现的很粗心，毫不在意。从来就不关系自己的母亲的渐渐老去。我们知道很多朋友的秘密，却从来没有了解过自己父母的心。道理就是这样，我们要做的就是珍惜我们身边的人。  </p>\n<p>&#160; &#160; &#160; &#160; 爱情，是整个故事中的一抹亮色，爱情，会照亮我们每个人的生命。在很小的时候，偷影子的小男孩是怀疑爱情的，他曾经发出过疑问：“爱情，莫非像影子一样。有人踩中了，就带着离去？还是因为爱情跟影子一样怕光，又或者，情况正好相反，没有了光，爱情的影子就被拭去，最终黯然离去？”可是，当他遇到了克莱尔，遇到了苏菲。他开始涤清自己的恐惧，他的爱单纯美丽的像一个寓言。当他放弃了一个近在咫尺各方面都很般配的交往对象，去追逐一个童年就开始的梦，不再忧心得失的时候，他才领会了爱的真谛。那个让你舍弃了一切去追寻的，却充满了不确定性的人，才是你真正爱的人。无论过去了多少年，不管你已经变成了什么样子，就算所有景色都已经人事已非，我还是，最喜欢你。  </p>\n<p>&#160; &#160; &#160; &#160; 这才是真正的人生吧，在平淡的岁月里经历得失慢慢丰盈起来的人生，就好像，你我必将经历的人生一样。</p>"},{"title":"关于武汉的记忆","date":"2017-07-05T05:36:27.000Z","_content":">爱情的奇妙在于，说分手的那个偏偏爱着，不爱的那个用沉默回答。天天害怕失去的那个人最先离开。    \n>你是这个世界给我的情书，也是爱情的遗书。\n\n<center>\n关于武汉我知道的不多，为了爱情曾经去过那里  \n多少次火车上路过这城市，一个人悄悄的想起你\n<!--more-->\n你说你喜欢武汉冬天的阳光，巷子里飘满热干面的味道  \n江风穿过你年轻的脖子，直到今天都没有散去  \n\n关于武汉我想的全是你，想来想去都是忏悔和委屈  \n关于武汉我爱的全是你，爱来爱去不明白爱的意义  \n\n关于武汉只是经常想起，现在你的味道都在回忆里  \n每次和朋友说起过去的旅行，我不敢说我曾经去过那里  \n\n关于武汉我爱的全是你，爱到最后我们都无路可去  \n似是而非或是世事可畏，有情有义又或是无米之炊  \n\n时间改变了很多又什么都没有，让我再一次拥抱你\n</center>\n\n","source":"_posts/aboutwuhan.md","raw":"---\ntitle: 关于武汉的记忆\ndate: 2017-07-05 13:36:27\ntags: 那些年，那些事\ncategories: 生活小记\n---\n>爱情的奇妙在于，说分手的那个偏偏爱着，不爱的那个用沉默回答。天天害怕失去的那个人最先离开。    \n>你是这个世界给我的情书，也是爱情的遗书。\n\n<center>\n关于武汉我知道的不多，为了爱情曾经去过那里  \n多少次火车上路过这城市，一个人悄悄的想起你\n<!--more-->\n你说你喜欢武汉冬天的阳光，巷子里飘满热干面的味道  \n江风穿过你年轻的脖子，直到今天都没有散去  \n\n关于武汉我想的全是你，想来想去都是忏悔和委屈  \n关于武汉我爱的全是你，爱来爱去不明白爱的意义  \n\n关于武汉只是经常想起，现在你的味道都在回忆里  \n每次和朋友说起过去的旅行，我不敢说我曾经去过那里  \n\n关于武汉我爱的全是你，爱到最后我们都无路可去  \n似是而非或是世事可畏，有情有义又或是无米之炊  \n\n时间改变了很多又什么都没有，让我再一次拥抱你\n</center>\n\n","slug":"aboutwuhan","published":1,"updated":"2018-01-02T00:50:36.820Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjbwxj0xy0006h0vomatgtb4u","content":"<blockquote>\n<p>爱情的奇妙在于，说分手的那个偏偏爱着，不爱的那个用沉默回答。天天害怕失去的那个人最先离开。<br>你是这个世界给我的情书，也是爱情的遗书。</p>\n</blockquote>\n<center><br>关于武汉我知道的不多，为了爱情曾经去过那里<br>多少次火车上路过这城市，一个人悄悄的想起你<br><a id=\"more\"></a><br>你说你喜欢武汉冬天的阳光，巷子里飘满热干面的味道<br>江风穿过你年轻的脖子，直到今天都没有散去<br><br>关于武汉我想的全是你，想来想去都是忏悔和委屈<br>关于武汉我爱的全是你，爱来爱去不明白爱的意义<br><br>关于武汉只是经常想起，现在你的味道都在回忆里<br>每次和朋友说起过去的旅行，我不敢说我曾经去过那里<br><br>关于武汉我爱的全是你，爱到最后我们都无路可去<br>似是而非或是世事可畏，有情有义又或是无米之炊<br><br>时间改变了很多又什么都没有，让我再一次拥抱你<br></center>\n\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>爱情的奇妙在于，说分手的那个偏偏爱着，不爱的那个用沉默回答。天天害怕失去的那个人最先离开。<br>你是这个世界给我的情书，也是爱情的遗书。</p>\n</blockquote>\n<center><br>关于武汉我知道的不多，为了爱情曾经去过那里<br>多少次火车上路过这城市，一个人悄悄的想起你<br>","more":"<br>你说你喜欢武汉冬天的阳光，巷子里飘满热干面的味道<br>江风穿过你年轻的脖子，直到今天都没有散去<br><br>关于武汉我想的全是你，想来想去都是忏悔和委屈<br>关于武汉我爱的全是你，爱来爱去不明白爱的意义<br><br>关于武汉只是经常想起，现在你的味道都在回忆里<br>每次和朋友说起过去的旅行，我不敢说我曾经去过那里<br><br>关于武汉我爱的全是你，爱到最后我们都无路可去<br>似是而非或是世事可畏，有情有义又或是无米之炊<br><br>时间改变了很多又什么都没有，让我再一次拥抱你<br></center>"},{"title":"[初等算法]--树","date":"2017-04-03T12:08:28.000Z","_content":"\n## 二叉搜索树,数据结构中的\"hello world\"\n我们使用二叉搜索树(BST)作为数据结构中的“hello world”。Jon Bentley在他的《编程珠玑》一书中,曾给了这样一个有趣的题目:如何统计一段文字中每个单词出现的次数?下面的C++程序展示了一个解法。\n```C++\nint main(int, char∗∗ ){\n    map<string, int> dict;\n    string s;\n    while(cin>>s)\n        ++dict[s];\n    map<string, int>::iterator it=dict.begin();\n    for(; it!=dict.end(); ++it)\n        cout<<it->first<<\": \"<<it->second<<\"λn\";\n}\n```\n <!--more-->  \n \nC++标准库中提供的map是一种用平衡二叉树实现的字典数据结构。例子中用单词作为key,用单词出现的次数作为值。  \n一棵`二叉搜索树`是一棵满足下面条件的二叉树:\n- 所有左侧分支的值都小于本节点的值,\n- 本节点的值小于所有右侧分支的值。  \n![](http://otl4ekdmf.bkt.clouddn.com/BST.png)\n\n### 节点数据结构\n```c++\ntemplate<class T>\nstruct node{\n    node(T x):key(x), left(0), right(0), parent(0){}\n    ~node(){\n        delete left;\n        delete right;\n    }\n    node∗ left;\n    node∗ right;\n    node∗ parent; //Optional, it's helpful for succ and pred\n    T key;\n};\n```\n\n### 插入\n我们可以使用下述算法向一个二叉搜索树中插入一个键k(在实际应用中,有时会同时插入一对键和值):\n- 如果树为空,创建一个叶子节点,令该节点的key = k;\n- 如果k小于根节点的key,将它插入到左子树中;\n- 如果k大于根节点的key,将它插入到右子树中。\n\n### 遍历\n遍历是指依次访问二叉树中的每个元素。有三种遍历方法,分别是前序遍历、中序遍历和后序遍历。它们是按照访问根节点和子节点的先后顺序命名的。\n- 前序遍历:先访问key,然后访问左子树,最后访问右子树;\n- 中序遍历:先访问左子树,然后访问key,最后访问右子树;\n- 后序遍历:先访问左子树,然后访问右子树,最后访问key。\n\n所有的“访问”操作都是递归的。先访问根后访问子分支称为先序,在访问左右分支的中间访问根称为中序,先访问子分支后访问根称为后序。对于图中的二叉树,下面分别列出了三种遍历的结果:\n- 前序遍历:4, 3, 1, 2, 8, 7, 16, 10, 9, 14;\n- 中序遍历:1, 2, 3, 4, 7, 8, 9, 10, 14, 16;\n- 后序遍历:2, 1, 3, 7, 9, 14, 10, 16, 8, 4。  \n\n对二叉搜索树进行中序遍历,元素就会按照从小到大的顺序输出。\n中序遍历的算法可以描述为:\n- 如果树为空,则返回;\n- 否则先中序遍历左子树,然后访问key,最后再中序遍历右子树。\n\n### 搜索\n#### Look up\n二叉搜索树的定义使得它非常适合进行元素的搜索。可以按照下面描述的方法在树中搜索一个key:\n- 如果树为空,搜索失败;\n- 如果根节点的key等于待搜索的值,搜索成功,返回根节点作为结果;\n- 如果待搜索的值小于根节点的key,继续在左子树中递归搜索;\n- 否则,待搜索的值大于根节点的key,继续在右子树中递归搜索。  \n\n```c++\ntemplate<class T>\nnode<T>∗ search(node<T>∗ t, T x){\n    while(t && t->key!=x){\n    if(x < t->key) t=t->left;\n        else t=t->right;\n    }\n    return t;\n}\n```\n#### 最小元素和最大元素\n为了获取最小元素,我们可以不断向左侧前进,直到左侧分支为空。类似地,我们可以通过不断向右侧前进获取最大元素。\n#### 前驱(Successor)和后继(predecessor)\n给定元素x,它的后继元素y是满足y > x的最小值。有两种情况:如果x所在的节点有一个非空的右子树,则右子树中的最小值就是答案。如图所示,8的后继元素为9,它是元素8的右子树中的最小值。另外一种情况是,如果x没有非空的右子树,我们需要向上回溯,找到最近的一个祖先,使得该祖先的左侧孩子,也为x的祖先。元素2所在的节点没有右侧分支,我们向上回溯一步找到元素1,但是1没有左侧分支,因此需要继续向上查找,这次我们到达了元素3所在的节点。而3的左侧孩子,同样也是2的祖先。至此,我们找到了2的后继元素3。\n![](http://otl4ekdmf.bkt.clouddn.com/succpred.png)\n```python\ndef succ(x):\n    if x.right is not None: return tree_min(x.right)\n    p = x.parent\n    while p is not None and p.left != x:\n        x = p\n        p = p.parent\n    return p\ndef pred(x):\n    if x.left is not None: return tree_max(x.left)\n    p = x.parent\n    while p is not None and p.right != x:\n        x = p\n        p = p.parent\n    return p\n```\n\n### 代码如下：\n```c++\n#include <iostream>\n#include <vector>\n#include <sstream>\n//#include <boost/lambda/lambda.hpp>\n\ntemplate<class T>\nstruct node{\n    node(T x):key(x), left(0), right(0), parent(0){}\n    ~node(){ // for convinient, use functional approach\n        delete left;\n        delete right;\n    }\n\n    node* left;\n    node* right;\n    node* parent; //parent is optional, it's helpful for succ/pred\n    T key;\n};\n\n// in-order tree walk\n// easy implemented by using functional approach\ntemplate<class T, class F>\nvoid in_order_walk(node<T>* t, F f){\n    if(t){\n        in_order_walk(t->left, f);\n        f(t->key);\n        in_order_walk(t->right, f);\n    }\n}\n\ntemplate<class T>\nnode<T>* search(node<T>* t, T x){\n    while(t && t->key!=x){\n        if(x < t->key) t=t->left;\n        else t=t->right;\n    }\n    return t;\n}\n\ntemplate<class T>\nnode<T>* min(node<T>* x){\n    while(x && x->left)\n        x = x->left;\n    return x;\n}\n\ntemplate<class T>\nnode<T>* max(node<T>* x){\n    while(x && x->right)\n        x = x->right;\n    return x;\n}\n\ntemplate<class T>\nnode<T>* succ(node<T>* x){\n    if(x){\n        if(x->right) return min(x->right);\n        //find an ancestor, whose left child contains x\n        node<T>* p = x->parent;\n        while(p && p->right==x){\n            x = p;\n            p = p->parent;\n        }\n        return p;\n    }\n    return 0;\n}\n\ntemplate<class T>\nnode<T>* pred(node<T>* x){\n    if(x){\n        if(x->left) return max(x->left);\n        //find an ancestor, whose right child contains x\n        node<T>* p = x->parent;\n        while(p && p->left==x){\n            x = p;\n            p = p->parent;\n        }\n        return p;\n    }\n    return 0;\n}\n\ntemplate<class T>\nnode<T>* insert(node<T>* tree, T key){\n    node<T>* root(tree);\n    node<T>* x = new node<T>(key);\n    node<T>* parent(0);\n    while(tree){\n        parent = tree;\n        if(key < tree->key)\n            tree = tree -> left;\n        else //assert there is no duplicated key inserted.\n            tree = tree -> right;\n    }\n    x->parent = parent;\n    if( parent == 0 ) //tree is empty\n        return x;\n    else if( key < parent->key)\n        parent->left = x;\n    else\n        parent->right = x;\n    return root;\n}\n\n// cut the node off the tree, then delete it.\n// it can prevent dtor removed children of a node\ntemplate<class T>\nvoid remove_node(node<T>* x){\n    if(x)\n        x->left = x->right = 0;\n    delete x;\n}\n\n// The algorithm described in CLRS isn't used here.\n// I used the algorithm as below (refer to Annotated STL, P 235 (by Hou Jie)\n//   if x has only one child: just splice x out\n//   if x has two children: use min(right) to replace x\n// @return root of the tree\ntemplate<class T>\nnode<T>* del(node<T>* tree, node<T>* x){\n    if(!x)\n        return tree;\n\n    node<T>* root(tree);\n    node<T>* old_x(x);\n    node<T>* parent(x->parent);\n\n    if(x->left == 0)\n        x = x->right;\n    else if(x->right == 0)\n        x = x->left;\n    else{\n        node<T>* y=min(x->right);\n        x->key = y->key;\n        if(y->parent != x)\n            y->parent->left = y->right;\n        else\n            x->right = y->right;\n\n        remove_node(y);\n        return root;\n    }\n\n    if(x)\n        x->parent = parent;\n\n    if(!parent)\n        root = x; //remove node of a tree\n    else\n    if(parent->left == old_x)\n        parent->left = x;\n    else\n        parent->right = x;\n\n    remove_node(old_x);\n    return root;\n}\n\n//for testing\ntemplate<class Coll>\nnode<typename Coll::value_type>* build_tree(const Coll& coll){\n    node<typename Coll::value_type>* tree(0);\n    for(typename Coll::const_iterator it=coll.begin(); it!=coll.end(); ++it)\n        tree = insert(tree, *it);\n    return tree;\n}\n\ntemplate<class T>\nstd::string tree_to_str(const node<T>* tree){\n    if(tree){\n        std::ostringstream s;\n        s<<\"(\"<<tree_to_str(tree->left)<<\"), \"<<tree->key\n         <<\", (\"<<tree_to_str(tree->right)<<\")\";\n        return s.str();\n    }\n    return \"empty\";\n}\n\ntemplate<class T>\nnode<T>* clone_tree(const node<T>* t, node<T>* parent=0){\n    if(t){\n        node<T>* t1 = new node<T>(t->key);\n        t1->left = clone_tree(t->left, t1);\n        t1->right = clone_tree(t->right, t1);\n        t1->parent = parent;\n        return t1;\n    }\n    return static_cast<node<T>*>(0);\n}\n\n//test helper\n\nclass test{\npublic:\n    test(){\n        const int buf[]={15, 6, 18, 3, 7, 17, 20, 2, 4, 13, 9};\n        tree = build_tree(std::vector<int>(buf, buf+sizeof(buf)/sizeof(int)));\n        std::cout<<tree_to_str(tree);\n    }\n\n    ~test(){\n        delete tree;\n    }\n\n    template<class T> void assert_(std::string msg, T x, T y){\n        std::cout<<msg;\n        if(x==y)\n            std::cout<<x<<\" OK.\\n\";\n        else\n            std::cout<<x<<\"!=\"<<y<<\" Fail.\\n\";\n    }\n\n    void run(){\n        test_in_order_walk();\n        test_min_max();\n        test_search();\n        test_succ_pred();\n        test_del();\n    }\n\nprivate:\n\n    struct Print{\n        template<class T>\n        void operator()(T x){ std::cout<<x<<\", \"; }\n    };\n\n    void test_in_order_walk(){\n        std::cout<<\"\\ntest in order walk with print functor: \";\n        in_order_walk(tree, Print());\n        //this can be simplified by using boost\n        //using namespace boost::lambda;\n        //in_order_walk(tree, std::cout<<_1<<\", \");\n    }\n\n    void test_min_max(){\n        node<int>* empty(0);\n        assert_(\"min(empty)=\", min(empty), empty);\n        assert_(\"min(tree)=\", min(tree)->key, 2);\n        assert_(\"max(empty)=\",max(empty), empty);\n        assert_(\"max(tree)=\", max(tree)->key, 20);\n    }\n\n    void test_search(){\n        node<int>* empty(0);\n        assert_(\"search empty: \", search(empty, 3), empty);\n        std::cout<<\"search exist key: \"<<tree_to_str(search(tree, 18))<<\"\\n\";\n        assert_(\"search non-exist: \", search(tree, 5), empty);\n    }\n\n    void test_succ_pred(){\n        node<int>* empty(0);\n        assert_(\"succ 7: \", succ(search(tree, 7))->key, 9);\n        assert_(\"succ 13: \", succ(search(tree, 13))->key, 15);\n        assert_(\"succ 20: \", succ(search(tree, 20)), empty);\n        assert_(\"pred 6: \", pred(search(tree, 6))->key, 4);\n        assert_(\"pred 7: \", pred(search(tree, 7))->key, 6);\n        assert_(\"pred 2: \", pred(search(tree, 2)), empty);\n    }\n\n    void test_del_n(int n){\n        node<int>* empty(0);\n        node<int>* t1=clone_tree(tree);\n        t1=del(t1, search(t1, n));\n        std::cout<<\"del \"<<n<<\":\\n\"<<tree_to_str(t1)<<\"\\n\";\n        assert_(\"search after del: \", search(t1, n), empty);\n        delete t1;\n    }\n\n    void test_del(){\n        test_del_n(17);\n        test_del_n(7);\n        test_del_n(6);\n        test_del_n(15);\n        test_del_n(1); //try to del a non-exist val\n    }\nprivate:\n    node<int>* tree;\n};\n\nint main(int, char**){\n    test().run();\n}\n```\n\n\n## 插入排序的进化\n```c\nvoid isort(Key∗ xs, int n){\n    int i, j;\n    for(i=1; i<n; ++i)\n        for(j=i-1; j≥0 && xs[j+1] < xs[j]; --j)\n            swap(xs, j, j+1);\n}\n```\n### 改进一\n任何时刻,我们手中的牌都是已序的,因此我们可以用二分查找来搜索插入位置。\n```python\ndef isort(xs):\n    n = len(xs)\n    for i in range(1, n):\n        x = xs[i]\n        p = binary_search(xs[:i], x)\n        for j in range(i, p, -1):\n            xs[j] = xs[j-1]\n        xs[p] = x\n\ndef binary_search(xs, x):\n    l = 0\n    u = len(xs)\n    while l < u:\n        m = (l+u)/2\n        if xs[m] == x:\n            return m\n        elif xs[m] < x:\n            l = m + 1\n        else:\n            u = m\n    return l\n```\n### 使用二叉搜索树的最终改进\n```python\nfunction Sort(A)\n    T <- φ\n    for each x ∈ A do\n        T <- Insert-Tree(T, x)\n    return To-List(T)\n```","source":"_posts/basicAlg01.md","raw":"---\ntitle: '[初等算法]--树'\ndate: 2017-04-03 20:08:28\ntags: 算法\ncategories: 初等算法\n---\n\n## 二叉搜索树,数据结构中的\"hello world\"\n我们使用二叉搜索树(BST)作为数据结构中的“hello world”。Jon Bentley在他的《编程珠玑》一书中,曾给了这样一个有趣的题目:如何统计一段文字中每个单词出现的次数?下面的C++程序展示了一个解法。\n```C++\nint main(int, char∗∗ ){\n    map<string, int> dict;\n    string s;\n    while(cin>>s)\n        ++dict[s];\n    map<string, int>::iterator it=dict.begin();\n    for(; it!=dict.end(); ++it)\n        cout<<it->first<<\": \"<<it->second<<\"λn\";\n}\n```\n <!--more-->  \n \nC++标准库中提供的map是一种用平衡二叉树实现的字典数据结构。例子中用单词作为key,用单词出现的次数作为值。  \n一棵`二叉搜索树`是一棵满足下面条件的二叉树:\n- 所有左侧分支的值都小于本节点的值,\n- 本节点的值小于所有右侧分支的值。  \n![](http://otl4ekdmf.bkt.clouddn.com/BST.png)\n\n### 节点数据结构\n```c++\ntemplate<class T>\nstruct node{\n    node(T x):key(x), left(0), right(0), parent(0){}\n    ~node(){\n        delete left;\n        delete right;\n    }\n    node∗ left;\n    node∗ right;\n    node∗ parent; //Optional, it's helpful for succ and pred\n    T key;\n};\n```\n\n### 插入\n我们可以使用下述算法向一个二叉搜索树中插入一个键k(在实际应用中,有时会同时插入一对键和值):\n- 如果树为空,创建一个叶子节点,令该节点的key = k;\n- 如果k小于根节点的key,将它插入到左子树中;\n- 如果k大于根节点的key,将它插入到右子树中。\n\n### 遍历\n遍历是指依次访问二叉树中的每个元素。有三种遍历方法,分别是前序遍历、中序遍历和后序遍历。它们是按照访问根节点和子节点的先后顺序命名的。\n- 前序遍历:先访问key,然后访问左子树,最后访问右子树;\n- 中序遍历:先访问左子树,然后访问key,最后访问右子树;\n- 后序遍历:先访问左子树,然后访问右子树,最后访问key。\n\n所有的“访问”操作都是递归的。先访问根后访问子分支称为先序,在访问左右分支的中间访问根称为中序,先访问子分支后访问根称为后序。对于图中的二叉树,下面分别列出了三种遍历的结果:\n- 前序遍历:4, 3, 1, 2, 8, 7, 16, 10, 9, 14;\n- 中序遍历:1, 2, 3, 4, 7, 8, 9, 10, 14, 16;\n- 后序遍历:2, 1, 3, 7, 9, 14, 10, 16, 8, 4。  \n\n对二叉搜索树进行中序遍历,元素就会按照从小到大的顺序输出。\n中序遍历的算法可以描述为:\n- 如果树为空,则返回;\n- 否则先中序遍历左子树,然后访问key,最后再中序遍历右子树。\n\n### 搜索\n#### Look up\n二叉搜索树的定义使得它非常适合进行元素的搜索。可以按照下面描述的方法在树中搜索一个key:\n- 如果树为空,搜索失败;\n- 如果根节点的key等于待搜索的值,搜索成功,返回根节点作为结果;\n- 如果待搜索的值小于根节点的key,继续在左子树中递归搜索;\n- 否则,待搜索的值大于根节点的key,继续在右子树中递归搜索。  \n\n```c++\ntemplate<class T>\nnode<T>∗ search(node<T>∗ t, T x){\n    while(t && t->key!=x){\n    if(x < t->key) t=t->left;\n        else t=t->right;\n    }\n    return t;\n}\n```\n#### 最小元素和最大元素\n为了获取最小元素,我们可以不断向左侧前进,直到左侧分支为空。类似地,我们可以通过不断向右侧前进获取最大元素。\n#### 前驱(Successor)和后继(predecessor)\n给定元素x,它的后继元素y是满足y > x的最小值。有两种情况:如果x所在的节点有一个非空的右子树,则右子树中的最小值就是答案。如图所示,8的后继元素为9,它是元素8的右子树中的最小值。另外一种情况是,如果x没有非空的右子树,我们需要向上回溯,找到最近的一个祖先,使得该祖先的左侧孩子,也为x的祖先。元素2所在的节点没有右侧分支,我们向上回溯一步找到元素1,但是1没有左侧分支,因此需要继续向上查找,这次我们到达了元素3所在的节点。而3的左侧孩子,同样也是2的祖先。至此,我们找到了2的后继元素3。\n![](http://otl4ekdmf.bkt.clouddn.com/succpred.png)\n```python\ndef succ(x):\n    if x.right is not None: return tree_min(x.right)\n    p = x.parent\n    while p is not None and p.left != x:\n        x = p\n        p = p.parent\n    return p\ndef pred(x):\n    if x.left is not None: return tree_max(x.left)\n    p = x.parent\n    while p is not None and p.right != x:\n        x = p\n        p = p.parent\n    return p\n```\n\n### 代码如下：\n```c++\n#include <iostream>\n#include <vector>\n#include <sstream>\n//#include <boost/lambda/lambda.hpp>\n\ntemplate<class T>\nstruct node{\n    node(T x):key(x), left(0), right(0), parent(0){}\n    ~node(){ // for convinient, use functional approach\n        delete left;\n        delete right;\n    }\n\n    node* left;\n    node* right;\n    node* parent; //parent is optional, it's helpful for succ/pred\n    T key;\n};\n\n// in-order tree walk\n// easy implemented by using functional approach\ntemplate<class T, class F>\nvoid in_order_walk(node<T>* t, F f){\n    if(t){\n        in_order_walk(t->left, f);\n        f(t->key);\n        in_order_walk(t->right, f);\n    }\n}\n\ntemplate<class T>\nnode<T>* search(node<T>* t, T x){\n    while(t && t->key!=x){\n        if(x < t->key) t=t->left;\n        else t=t->right;\n    }\n    return t;\n}\n\ntemplate<class T>\nnode<T>* min(node<T>* x){\n    while(x && x->left)\n        x = x->left;\n    return x;\n}\n\ntemplate<class T>\nnode<T>* max(node<T>* x){\n    while(x && x->right)\n        x = x->right;\n    return x;\n}\n\ntemplate<class T>\nnode<T>* succ(node<T>* x){\n    if(x){\n        if(x->right) return min(x->right);\n        //find an ancestor, whose left child contains x\n        node<T>* p = x->parent;\n        while(p && p->right==x){\n            x = p;\n            p = p->parent;\n        }\n        return p;\n    }\n    return 0;\n}\n\ntemplate<class T>\nnode<T>* pred(node<T>* x){\n    if(x){\n        if(x->left) return max(x->left);\n        //find an ancestor, whose right child contains x\n        node<T>* p = x->parent;\n        while(p && p->left==x){\n            x = p;\n            p = p->parent;\n        }\n        return p;\n    }\n    return 0;\n}\n\ntemplate<class T>\nnode<T>* insert(node<T>* tree, T key){\n    node<T>* root(tree);\n    node<T>* x = new node<T>(key);\n    node<T>* parent(0);\n    while(tree){\n        parent = tree;\n        if(key < tree->key)\n            tree = tree -> left;\n        else //assert there is no duplicated key inserted.\n            tree = tree -> right;\n    }\n    x->parent = parent;\n    if( parent == 0 ) //tree is empty\n        return x;\n    else if( key < parent->key)\n        parent->left = x;\n    else\n        parent->right = x;\n    return root;\n}\n\n// cut the node off the tree, then delete it.\n// it can prevent dtor removed children of a node\ntemplate<class T>\nvoid remove_node(node<T>* x){\n    if(x)\n        x->left = x->right = 0;\n    delete x;\n}\n\n// The algorithm described in CLRS isn't used here.\n// I used the algorithm as below (refer to Annotated STL, P 235 (by Hou Jie)\n//   if x has only one child: just splice x out\n//   if x has two children: use min(right) to replace x\n// @return root of the tree\ntemplate<class T>\nnode<T>* del(node<T>* tree, node<T>* x){\n    if(!x)\n        return tree;\n\n    node<T>* root(tree);\n    node<T>* old_x(x);\n    node<T>* parent(x->parent);\n\n    if(x->left == 0)\n        x = x->right;\n    else if(x->right == 0)\n        x = x->left;\n    else{\n        node<T>* y=min(x->right);\n        x->key = y->key;\n        if(y->parent != x)\n            y->parent->left = y->right;\n        else\n            x->right = y->right;\n\n        remove_node(y);\n        return root;\n    }\n\n    if(x)\n        x->parent = parent;\n\n    if(!parent)\n        root = x; //remove node of a tree\n    else\n    if(parent->left == old_x)\n        parent->left = x;\n    else\n        parent->right = x;\n\n    remove_node(old_x);\n    return root;\n}\n\n//for testing\ntemplate<class Coll>\nnode<typename Coll::value_type>* build_tree(const Coll& coll){\n    node<typename Coll::value_type>* tree(0);\n    for(typename Coll::const_iterator it=coll.begin(); it!=coll.end(); ++it)\n        tree = insert(tree, *it);\n    return tree;\n}\n\ntemplate<class T>\nstd::string tree_to_str(const node<T>* tree){\n    if(tree){\n        std::ostringstream s;\n        s<<\"(\"<<tree_to_str(tree->left)<<\"), \"<<tree->key\n         <<\", (\"<<tree_to_str(tree->right)<<\")\";\n        return s.str();\n    }\n    return \"empty\";\n}\n\ntemplate<class T>\nnode<T>* clone_tree(const node<T>* t, node<T>* parent=0){\n    if(t){\n        node<T>* t1 = new node<T>(t->key);\n        t1->left = clone_tree(t->left, t1);\n        t1->right = clone_tree(t->right, t1);\n        t1->parent = parent;\n        return t1;\n    }\n    return static_cast<node<T>*>(0);\n}\n\n//test helper\n\nclass test{\npublic:\n    test(){\n        const int buf[]={15, 6, 18, 3, 7, 17, 20, 2, 4, 13, 9};\n        tree = build_tree(std::vector<int>(buf, buf+sizeof(buf)/sizeof(int)));\n        std::cout<<tree_to_str(tree);\n    }\n\n    ~test(){\n        delete tree;\n    }\n\n    template<class T> void assert_(std::string msg, T x, T y){\n        std::cout<<msg;\n        if(x==y)\n            std::cout<<x<<\" OK.\\n\";\n        else\n            std::cout<<x<<\"!=\"<<y<<\" Fail.\\n\";\n    }\n\n    void run(){\n        test_in_order_walk();\n        test_min_max();\n        test_search();\n        test_succ_pred();\n        test_del();\n    }\n\nprivate:\n\n    struct Print{\n        template<class T>\n        void operator()(T x){ std::cout<<x<<\", \"; }\n    };\n\n    void test_in_order_walk(){\n        std::cout<<\"\\ntest in order walk with print functor: \";\n        in_order_walk(tree, Print());\n        //this can be simplified by using boost\n        //using namespace boost::lambda;\n        //in_order_walk(tree, std::cout<<_1<<\", \");\n    }\n\n    void test_min_max(){\n        node<int>* empty(0);\n        assert_(\"min(empty)=\", min(empty), empty);\n        assert_(\"min(tree)=\", min(tree)->key, 2);\n        assert_(\"max(empty)=\",max(empty), empty);\n        assert_(\"max(tree)=\", max(tree)->key, 20);\n    }\n\n    void test_search(){\n        node<int>* empty(0);\n        assert_(\"search empty: \", search(empty, 3), empty);\n        std::cout<<\"search exist key: \"<<tree_to_str(search(tree, 18))<<\"\\n\";\n        assert_(\"search non-exist: \", search(tree, 5), empty);\n    }\n\n    void test_succ_pred(){\n        node<int>* empty(0);\n        assert_(\"succ 7: \", succ(search(tree, 7))->key, 9);\n        assert_(\"succ 13: \", succ(search(tree, 13))->key, 15);\n        assert_(\"succ 20: \", succ(search(tree, 20)), empty);\n        assert_(\"pred 6: \", pred(search(tree, 6))->key, 4);\n        assert_(\"pred 7: \", pred(search(tree, 7))->key, 6);\n        assert_(\"pred 2: \", pred(search(tree, 2)), empty);\n    }\n\n    void test_del_n(int n){\n        node<int>* empty(0);\n        node<int>* t1=clone_tree(tree);\n        t1=del(t1, search(t1, n));\n        std::cout<<\"del \"<<n<<\":\\n\"<<tree_to_str(t1)<<\"\\n\";\n        assert_(\"search after del: \", search(t1, n), empty);\n        delete t1;\n    }\n\n    void test_del(){\n        test_del_n(17);\n        test_del_n(7);\n        test_del_n(6);\n        test_del_n(15);\n        test_del_n(1); //try to del a non-exist val\n    }\nprivate:\n    node<int>* tree;\n};\n\nint main(int, char**){\n    test().run();\n}\n```\n\n\n## 插入排序的进化\n```c\nvoid isort(Key∗ xs, int n){\n    int i, j;\n    for(i=1; i<n; ++i)\n        for(j=i-1; j≥0 && xs[j+1] < xs[j]; --j)\n            swap(xs, j, j+1);\n}\n```\n### 改进一\n任何时刻,我们手中的牌都是已序的,因此我们可以用二分查找来搜索插入位置。\n```python\ndef isort(xs):\n    n = len(xs)\n    for i in range(1, n):\n        x = xs[i]\n        p = binary_search(xs[:i], x)\n        for j in range(i, p, -1):\n            xs[j] = xs[j-1]\n        xs[p] = x\n\ndef binary_search(xs, x):\n    l = 0\n    u = len(xs)\n    while l < u:\n        m = (l+u)/2\n        if xs[m] == x:\n            return m\n        elif xs[m] < x:\n            l = m + 1\n        else:\n            u = m\n    return l\n```\n### 使用二叉搜索树的最终改进\n```python\nfunction Sort(A)\n    T <- φ\n    for each x ∈ A do\n        T <- Insert-Tree(T, x)\n    return To-List(T)\n```","slug":"basicAlg01","published":1,"updated":"2018-01-02T00:50:36.820Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjbwxj0yd0008h0vo2nutw1mu","content":"<h2 id=\"二叉搜索树-数据结构中的”hello-world”\"><a href=\"#二叉搜索树-数据结构中的”hello-world”\" class=\"headerlink\" title=\"二叉搜索树,数据结构中的”hello world”\"></a>二叉搜索树,数据结构中的”hello world”</h2><p>我们使用二叉搜索树(BST)作为数据结构中的“hello world”。Jon Bentley在他的《编程珠玑》一书中,曾给了这样一个有趣的题目:如何统计一段文字中每个单词出现的次数?下面的C++程序展示了一个解法。<br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span>, <span class=\"keyword\">char</span>∗∗ )</span></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">map</span>&lt;<span class=\"built_in\">string</span>, <span class=\"keyword\">int</span>&gt; dict;</span><br><span class=\"line\">    <span class=\"built_in\">string</span> s;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"built_in\">cin</span>&gt;&gt;s)</span><br><span class=\"line\">        ++dict[s];</span><br><span class=\"line\">    <span class=\"built_in\">map</span>&lt;<span class=\"built_in\">string</span>, <span class=\"keyword\">int</span>&gt;::iterator it=dict.begin();</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(; it!=dict.end(); ++it)</span><br><span class=\"line\">        <span class=\"built_in\">cout</span>&lt;&lt;it-&gt;first&lt;&lt;<span class=\"string\">\": \"</span>&lt;&lt;it-&gt;second&lt;&lt;<span class=\"string\">\"λn\"</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n <a id=\"more\"></a>  \n<p>C++标准库中提供的map是一种用平衡二叉树实现的字典数据结构。例子中用单词作为key,用单词出现的次数作为值。<br>一棵<code>二叉搜索树</code>是一棵满足下面条件的二叉树:</p>\n<ul>\n<li>所有左侧分支的值都小于本节点的值,</li>\n<li>本节点的值小于所有右侧分支的值。<br><img src=\"http://otl4ekdmf.bkt.clouddn.com/BST.png\" alt=\"\"></li>\n</ul>\n<h3 id=\"节点数据结构\"><a href=\"#节点数据结构\" class=\"headerlink\" title=\"节点数据结构\"></a>节点数据结构</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">T</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">struct</span> <span class=\"title\">node</span>&#123;</span></span><br><span class=\"line\">    node(T x):key(x), left(<span class=\"number\">0</span>), right(<span class=\"number\">0</span>), parent(<span class=\"number\">0</span>)&#123;&#125;</span><br><span class=\"line\">    ~node()&#123;</span><br><span class=\"line\">        <span class=\"keyword\">delete</span> left;</span><br><span class=\"line\">        <span class=\"keyword\">delete</span> right;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    node∗ left;</span><br><span class=\"line\">    node∗ right;</span><br><span class=\"line\">    node∗ parent; <span class=\"comment\">//Optional, it's helpful for succ and pred</span></span><br><span class=\"line\">    T key;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"插入\"><a href=\"#插入\" class=\"headerlink\" title=\"插入\"></a>插入</h3><p>我们可以使用下述算法向一个二叉搜索树中插入一个键k(在实际应用中,有时会同时插入一对键和值):</p>\n<ul>\n<li>如果树为空,创建一个叶子节点,令该节点的key = k;</li>\n<li>如果k小于根节点的key,将它插入到左子树中;</li>\n<li>如果k大于根节点的key,将它插入到右子树中。</li>\n</ul>\n<h3 id=\"遍历\"><a href=\"#遍历\" class=\"headerlink\" title=\"遍历\"></a>遍历</h3><p>遍历是指依次访问二叉树中的每个元素。有三种遍历方法,分别是前序遍历、中序遍历和后序遍历。它们是按照访问根节点和子节点的先后顺序命名的。</p>\n<ul>\n<li>前序遍历:先访问key,然后访问左子树,最后访问右子树;</li>\n<li>中序遍历:先访问左子树,然后访问key,最后访问右子树;</li>\n<li>后序遍历:先访问左子树,然后访问右子树,最后访问key。</li>\n</ul>\n<p>所有的“访问”操作都是递归的。先访问根后访问子分支称为先序,在访问左右分支的中间访问根称为中序,先访问子分支后访问根称为后序。对于图中的二叉树,下面分别列出了三种遍历的结果:</p>\n<ul>\n<li>前序遍历:4, 3, 1, 2, 8, 7, 16, 10, 9, 14;</li>\n<li>中序遍历:1, 2, 3, 4, 7, 8, 9, 10, 14, 16;</li>\n<li>后序遍历:2, 1, 3, 7, 9, 14, 10, 16, 8, 4。  </li>\n</ul>\n<p>对二叉搜索树进行中序遍历,元素就会按照从小到大的顺序输出。<br>中序遍历的算法可以描述为:</p>\n<ul>\n<li>如果树为空,则返回;</li>\n<li>否则先中序遍历左子树,然后访问key,最后再中序遍历右子树。</li>\n</ul>\n<h3 id=\"搜索\"><a href=\"#搜索\" class=\"headerlink\" title=\"搜索\"></a>搜索</h3><h4 id=\"Look-up\"><a href=\"#Look-up\" class=\"headerlink\" title=\"Look up\"></a>Look up</h4><p>二叉搜索树的定义使得它非常适合进行元素的搜索。可以按照下面描述的方法在树中搜索一个key:</p>\n<ul>\n<li>如果树为空,搜索失败;</li>\n<li>如果根节点的key等于待搜索的值,搜索成功,返回根节点作为结果;</li>\n<li>如果待搜索的值小于根节点的key,继续在左子树中递归搜索;</li>\n<li>否则,待搜索的值大于根节点的key,继续在右子树中递归搜索。  </li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">T</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">node</span>&lt;T&gt;∗ <span class=\"title\">search</span>(<span class=\"title\">node</span>&lt;T&gt;∗ <span class=\"title\">t</span>, <span class=\"title\">T</span> <span class=\"title\">x</span>)&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(t &amp;&amp; t-&gt;key!=x)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x &lt; t-&gt;key) t=t-&gt;left;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> t=t-&gt;right;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> t;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"最小元素和最大元素\"><a href=\"#最小元素和最大元素\" class=\"headerlink\" title=\"最小元素和最大元素\"></a>最小元素和最大元素</h4><p>为了获取最小元素,我们可以不断向左侧前进,直到左侧分支为空。类似地,我们可以通过不断向右侧前进获取最大元素。</p>\n<h4 id=\"前驱-Successor-和后继-predecessor\"><a href=\"#前驱-Successor-和后继-predecessor\" class=\"headerlink\" title=\"前驱(Successor)和后继(predecessor)\"></a>前驱(Successor)和后继(predecessor)</h4><p>给定元素x,它的后继元素y是满足y &gt; x的最小值。有两种情况:如果x所在的节点有一个非空的右子树,则右子树中的最小值就是答案。如图所示,8的后继元素为9,它是元素8的右子树中的最小值。另外一种情况是,如果x没有非空的右子树,我们需要向上回溯,找到最近的一个祖先,使得该祖先的左侧孩子,也为x的祖先。元素2所在的节点没有右侧分支,我们向上回溯一步找到元素1,但是1没有左侧分支,因此需要继续向上查找,这次我们到达了元素3所在的节点。而3的左侧孩子,同样也是2的祖先。至此,我们找到了2的后继元素3。<br><img src=\"http://otl4ekdmf.bkt.clouddn.com/succpred.png\" alt=\"\"><br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">succ</span><span class=\"params\">(x)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> x.right <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"keyword\">None</span>: <span class=\"keyword\">return</span> tree_min(x.right)</span><br><span class=\"line\">    p = x.parent</span><br><span class=\"line\">    <span class=\"keyword\">while</span> p <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"keyword\">None</span> <span class=\"keyword\">and</span> p.left != x:</span><br><span class=\"line\">        x = p</span><br><span class=\"line\">        p = p.parent</span><br><span class=\"line\">    <span class=\"keyword\">return</span> p</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">pred</span><span class=\"params\">(x)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> x.left <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"keyword\">None</span>: <span class=\"keyword\">return</span> tree_max(x.left)</span><br><span class=\"line\">    p = x.parent</span><br><span class=\"line\">    <span class=\"keyword\">while</span> p <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"keyword\">None</span> <span class=\"keyword\">and</span> p.right != x:</span><br><span class=\"line\">        x = p</span><br><span class=\"line\">        p = p.parent</span><br><span class=\"line\">    <span class=\"keyword\">return</span> p</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"代码如下：\"><a href=\"#代码如下：\" class=\"headerlink\" title=\"代码如下：\"></a>代码如下：</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;sstream&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\">//#include &lt;boost/lambda/lambda.hpp&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">T</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">struct</span> <span class=\"title\">node</span>&#123;</span></span><br><span class=\"line\">    node(T x):key(x), left(<span class=\"number\">0</span>), right(<span class=\"number\">0</span>), parent(<span class=\"number\">0</span>)&#123;&#125;</span><br><span class=\"line\">    ~node()&#123; <span class=\"comment\">// for convinient, use functional approach</span></span><br><span class=\"line\">        <span class=\"keyword\">delete</span> left;</span><br><span class=\"line\">        <span class=\"keyword\">delete</span> right;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    node* left;</span><br><span class=\"line\">    node* right;</span><br><span class=\"line\">    node* parent; <span class=\"comment\">//parent is optional, it's helpful for succ/pred</span></span><br><span class=\"line\">    T key;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// in-order tree walk</span></span><br><span class=\"line\"><span class=\"comment\">// easy implemented by using functional approach</span></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">T</span>, <span class=\"title\">class</span> <span class=\"title\">F</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">void</span> <span class=\"title\">in_order_walk</span>(<span class=\"title\">node</span>&lt;T&gt;* <span class=\"title\">t</span>, <span class=\"title\">F</span> <span class=\"title\">f</span>)&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(t)&#123;</span><br><span class=\"line\">        in_order_walk(t-&gt;left, f);</span><br><span class=\"line\">        f(t-&gt;key);</span><br><span class=\"line\">        in_order_walk(t-&gt;right, f);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">T</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">node</span>&lt;T&gt;* <span class=\"title\">search</span>(<span class=\"title\">node</span>&lt;T&gt;* <span class=\"title\">t</span>, <span class=\"title\">T</span> <span class=\"title\">x</span>)&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(t &amp;&amp; t-&gt;key!=x)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(x &lt; t-&gt;key) t=t-&gt;left;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> t=t-&gt;right;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> t;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">T</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">node</span>&lt;T&gt;* <span class=\"title\">min</span>(<span class=\"title\">node</span>&lt;T&gt;* <span class=\"title\">x</span>)&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(x &amp;&amp; x-&gt;left)</span><br><span class=\"line\">        x = x-&gt;left;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">T</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">node</span>&lt;T&gt;* <span class=\"title\">max</span>(<span class=\"title\">node</span>&lt;T&gt;* <span class=\"title\">x</span>)&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(x &amp;&amp; x-&gt;right)</span><br><span class=\"line\">        x = x-&gt;right;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">T</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">node</span>&lt;T&gt;* <span class=\"title\">succ</span>(<span class=\"title\">node</span>&lt;T&gt;* <span class=\"title\">x</span>)&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(x-&gt;right) <span class=\"keyword\">return</span> min(x-&gt;right);</span><br><span class=\"line\">        <span class=\"comment\">//find an ancestor, whose left child contains x</span></span><br><span class=\"line\">        node&lt;T&gt;* p = x-&gt;parent;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(p &amp;&amp; p-&gt;right==x)&#123;</span><br><span class=\"line\">            x = p;</span><br><span class=\"line\">            p = p-&gt;parent;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> p;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">T</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">node</span>&lt;T&gt;* <span class=\"title\">pred</span>(<span class=\"title\">node</span>&lt;T&gt;* <span class=\"title\">x</span>)&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(x-&gt;left) <span class=\"keyword\">return</span> max(x-&gt;left);</span><br><span class=\"line\">        <span class=\"comment\">//find an ancestor, whose right child contains x</span></span><br><span class=\"line\">        node&lt;T&gt;* p = x-&gt;parent;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(p &amp;&amp; p-&gt;left==x)&#123;</span><br><span class=\"line\">            x = p;</span><br><span class=\"line\">            p = p-&gt;parent;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> p;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">T</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">node</span>&lt;T&gt;* <span class=\"title\">insert</span>(<span class=\"title\">node</span>&lt;T&gt;* <span class=\"title\">tree</span>, <span class=\"title\">T</span> <span class=\"title\">key</span>)&#123;</span></span><br><span class=\"line\">    node&lt;T&gt;* root(tree);</span><br><span class=\"line\">    node&lt;T&gt;* x = <span class=\"keyword\">new</span> node&lt;T&gt;(key);</span><br><span class=\"line\">    node&lt;T&gt;* parent(<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(tree)&#123;</span><br><span class=\"line\">        parent = tree;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(key &lt; tree-&gt;key)</span><br><span class=\"line\">            tree = tree -&gt; left;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"comment\">//assert there is no duplicated key inserted.</span></span><br><span class=\"line\">            tree = tree -&gt; right;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    x-&gt;parent = parent;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>( parent == <span class=\"number\">0</span> ) <span class=\"comment\">//tree is empty</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> x;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>( key &lt; parent-&gt;key)</span><br><span class=\"line\">        parent-&gt;left = x;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        parent-&gt;right = x;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> root;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// cut the node off the tree, then delete it.</span></span><br><span class=\"line\"><span class=\"comment\">// it can prevent dtor removed children of a node</span></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">T</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">void</span> <span class=\"title\">remove_node</span>(<span class=\"title\">node</span>&lt;T&gt;* <span class=\"title\">x</span>)&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x)</span><br><span class=\"line\">        x-&gt;left = x-&gt;right = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">delete</span> x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// The algorithm described in CLRS isn't used here.</span></span><br><span class=\"line\"><span class=\"comment\">// I used the algorithm as below (refer to Annotated STL, P 235 (by Hou Jie)</span></span><br><span class=\"line\"><span class=\"comment\">//   if x has only one child: just splice x out</span></span><br><span class=\"line\"><span class=\"comment\">//   if x has two children: use min(right) to replace x</span></span><br><span class=\"line\"><span class=\"comment\">// @return root of the tree</span></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">T</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">node</span>&lt;T&gt;* <span class=\"title\">del</span>(<span class=\"title\">node</span>&lt;T&gt;* <span class=\"title\">tree</span>, <span class=\"title\">node</span>&lt;T&gt;* <span class=\"title\">x</span>)&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!x)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> tree;</span><br><span class=\"line\"></span><br><span class=\"line\">    node&lt;T&gt;* root(tree);</span><br><span class=\"line\">    node&lt;T&gt;* old_x(x);</span><br><span class=\"line\">    node&lt;T&gt;* parent(x-&gt;parent);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x-&gt;left == <span class=\"number\">0</span>)</span><br><span class=\"line\">        x = x-&gt;right;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(x-&gt;right == <span class=\"number\">0</span>)</span><br><span class=\"line\">        x = x-&gt;left;</span><br><span class=\"line\">    <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        node&lt;T&gt;* y=min(x-&gt;right);</span><br><span class=\"line\">        x-&gt;key = y-&gt;key;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(y-&gt;parent != x)</span><br><span class=\"line\">            y-&gt;parent-&gt;left = y-&gt;right;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            x-&gt;right = y-&gt;right;</span><br><span class=\"line\"></span><br><span class=\"line\">        remove_node(y);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> root;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x)</span><br><span class=\"line\">        x-&gt;parent = parent;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!parent)</span><br><span class=\"line\">        root = x; <span class=\"comment\">//remove node of a tree</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(parent-&gt;left == old_x)</span><br><span class=\"line\">        parent-&gt;left = x;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        parent-&gt;right = x;</span><br><span class=\"line\"></span><br><span class=\"line\">    remove_node(old_x);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> root;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//for testing</span></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Coll</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">node</span>&lt;typename Coll::value_type&gt;* <span class=\"title\">build_tree</span>(<span class=\"title\">const</span> <span class=\"title\">Coll</span>&amp; <span class=\"title\">coll</span>)&#123;</span></span><br><span class=\"line\">    node&lt;<span class=\"keyword\">typename</span> Coll::value_type&gt;* tree(<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">typename</span> Coll::const_iterator it=coll.begin(); it!=coll.end(); ++it)</span><br><span class=\"line\">        tree = insert(tree, *it);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> tree;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">T</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">std</span>:</span>:<span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">tree_to_str</span><span class=\"params\">(<span class=\"keyword\">const</span> node&lt;T&gt;* tree)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(tree)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">std</span>::<span class=\"built_in\">ostringstream</span> s;</span><br><span class=\"line\">        s&lt;&lt;<span class=\"string\">\"(\"</span>&lt;&lt;tree_to_str(tree-&gt;left)&lt;&lt;<span class=\"string\">\"), \"</span>&lt;&lt;tree-&gt;key</span><br><span class=\"line\">         &lt;&lt;<span class=\"string\">\", (\"</span>&lt;&lt;tree_to_str(tree-&gt;right)&lt;&lt;<span class=\"string\">\")\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> s.str();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"empty\"</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">T</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">node</span>&lt;T&gt;* <span class=\"title\">clone_tree</span>(<span class=\"title\">const</span> <span class=\"title\">node</span>&lt;T&gt;* <span class=\"title\">t</span>, <span class=\"title\">node</span>&lt;T&gt;* <span class=\"title\">parent</span>=0)&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(t)&#123;</span><br><span class=\"line\">        node&lt;T&gt;* t1 = <span class=\"keyword\">new</span> node&lt;T&gt;(t-&gt;key);</span><br><span class=\"line\">        t1-&gt;left = clone_tree(t-&gt;left, t1);</span><br><span class=\"line\">        t1-&gt;right = clone_tree(t-&gt;right, t1);</span><br><span class=\"line\">        t1-&gt;parent = parent;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> t1;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">static_cast</span>&lt;node&lt;T&gt;*&gt;(<span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//test helper</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">test</span>&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    test()&#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> buf[]=&#123;<span class=\"number\">15</span>, <span class=\"number\">6</span>, <span class=\"number\">18</span>, <span class=\"number\">3</span>, <span class=\"number\">7</span>, <span class=\"number\">17</span>, <span class=\"number\">20</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">13</span>, <span class=\"number\">9</span>&#125;;</span><br><span class=\"line\">        tree = build_tree(<span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;(buf, buf+<span class=\"keyword\">sizeof</span>(buf)/<span class=\"keyword\">sizeof</span>(<span class=\"keyword\">int</span>)));</span><br><span class=\"line\">        <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span>&lt;&lt;tree_to_str(tree);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    ~test()&#123;</span><br><span class=\"line\">        <span class=\"keyword\">delete</span> tree;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">template</span>&lt;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">T</span>&gt; <span class=\"title\">void</span> <span class=\"title\">assert_</span>(<span class=\"title\">std</span>:</span>:<span class=\"built_in\">string</span> msg, T x, T y)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span>&lt;&lt;msg;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(x==y)</span><br><span class=\"line\">            <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span>&lt;&lt;x&lt;&lt;<span class=\"string\">\" OK.\\n\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span>&lt;&lt;x&lt;&lt;<span class=\"string\">\"!=\"</span>&lt;&lt;y&lt;&lt;<span class=\"string\">\" Fail.\\n\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        test_in_order_walk();</span><br><span class=\"line\">        test_min_max();</span><br><span class=\"line\">        test_search();</span><br><span class=\"line\">        test_succ_pred();</span><br><span class=\"line\">        test_del();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Print</span>&#123;</span></span><br><span class=\"line\">        <span class=\"keyword\">template</span>&lt;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">T</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\">        <span class=\"title\">void</span> <span class=\"title\">operator</span>()(<span class=\"title\">T</span> <span class=\"title\">x</span>)&#123;</span> <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span>&lt;&lt;x&lt;&lt;<span class=\"string\">\", \"</span>; &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test_in_order_walk</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"\\ntest in order walk with print functor: \"</span>;</span><br><span class=\"line\">        in_order_walk(tree, Print());</span><br><span class=\"line\">        <span class=\"comment\">//this can be simplified by using boost</span></span><br><span class=\"line\">        <span class=\"comment\">//using namespace boost::lambda;</span></span><br><span class=\"line\">        <span class=\"comment\">//in_order_walk(tree, std::cout&lt;&lt;_1&lt;&lt;\", \");</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test_min_max</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        node&lt;<span class=\"keyword\">int</span>&gt;* empty(<span class=\"number\">0</span>);</span><br><span class=\"line\">        assert_(<span class=\"string\">\"min(empty)=\"</span>, min(empty), empty);</span><br><span class=\"line\">        assert_(<span class=\"string\">\"min(tree)=\"</span>, min(tree)-&gt;key, <span class=\"number\">2</span>);</span><br><span class=\"line\">        assert_(<span class=\"string\">\"max(empty)=\"</span>,max(empty), empty);</span><br><span class=\"line\">        assert_(<span class=\"string\">\"max(tree)=\"</span>, max(tree)-&gt;key, <span class=\"number\">20</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test_search</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        node&lt;<span class=\"keyword\">int</span>&gt;* empty(<span class=\"number\">0</span>);</span><br><span class=\"line\">        assert_(<span class=\"string\">\"search empty: \"</span>, search(empty, <span class=\"number\">3</span>), empty);</span><br><span class=\"line\">        <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"search exist key: \"</span>&lt;&lt;tree_to_str(search(tree, <span class=\"number\">18</span>))&lt;&lt;<span class=\"string\">\"\\n\"</span>;</span><br><span class=\"line\">        assert_(<span class=\"string\">\"search non-exist: \"</span>, search(tree, <span class=\"number\">5</span>), empty);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test_succ_pred</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        node&lt;<span class=\"keyword\">int</span>&gt;* empty(<span class=\"number\">0</span>);</span><br><span class=\"line\">        assert_(<span class=\"string\">\"succ 7: \"</span>, succ(search(tree, <span class=\"number\">7</span>))-&gt;key, <span class=\"number\">9</span>);</span><br><span class=\"line\">        assert_(<span class=\"string\">\"succ 13: \"</span>, succ(search(tree, <span class=\"number\">13</span>))-&gt;key, <span class=\"number\">15</span>);</span><br><span class=\"line\">        assert_(<span class=\"string\">\"succ 20: \"</span>, succ(search(tree, <span class=\"number\">20</span>)), empty);</span><br><span class=\"line\">        assert_(<span class=\"string\">\"pred 6: \"</span>, pred(search(tree, <span class=\"number\">6</span>))-&gt;key, <span class=\"number\">4</span>);</span><br><span class=\"line\">        assert_(<span class=\"string\">\"pred 7: \"</span>, pred(search(tree, <span class=\"number\">7</span>))-&gt;key, <span class=\"number\">6</span>);</span><br><span class=\"line\">        assert_(<span class=\"string\">\"pred 2: \"</span>, pred(search(tree, <span class=\"number\">2</span>)), empty);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test_del_n</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span></span>&#123;</span><br><span class=\"line\">        node&lt;<span class=\"keyword\">int</span>&gt;* empty(<span class=\"number\">0</span>);</span><br><span class=\"line\">        node&lt;<span class=\"keyword\">int</span>&gt;* t1=clone_tree(tree);</span><br><span class=\"line\">        t1=del(t1, search(t1, n));</span><br><span class=\"line\">        <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"del \"</span>&lt;&lt;n&lt;&lt;<span class=\"string\">\":\\n\"</span>&lt;&lt;tree_to_str(t1)&lt;&lt;<span class=\"string\">\"\\n\"</span>;</span><br><span class=\"line\">        assert_(<span class=\"string\">\"search after del: \"</span>, search(t1, n), empty);</span><br><span class=\"line\">        <span class=\"keyword\">delete</span> t1;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test_del</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        test_del_n(<span class=\"number\">17</span>);</span><br><span class=\"line\">        test_del_n(<span class=\"number\">7</span>);</span><br><span class=\"line\">        test_del_n(<span class=\"number\">6</span>);</span><br><span class=\"line\">        test_del_n(<span class=\"number\">15</span>);</span><br><span class=\"line\">        test_del_n(<span class=\"number\">1</span>); <span class=\"comment\">//try to del a non-exist val</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    node&lt;<span class=\"keyword\">int</span>&gt;* tree;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span>, <span class=\"keyword\">char</span>**)</span></span>&#123;</span><br><span class=\"line\">    test().run();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"插入排序的进化\"><a href=\"#插入排序的进化\" class=\"headerlink\" title=\"插入排序的进化\"></a>插入排序的进化</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">isort</span><span class=\"params\">(Key∗ xs, <span class=\"keyword\">int</span> n)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i, j;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(i=<span class=\"number\">1</span>; i&lt;n; ++i)</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(j=i<span class=\"number\">-1</span>; j≥<span class=\"number\">0</span> &amp;&amp; xs[j+<span class=\"number\">1</span>] &lt; xs[j]; --j)</span><br><span class=\"line\">            swap(xs, j, j+<span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"改进一\"><a href=\"#改进一\" class=\"headerlink\" title=\"改进一\"></a>改进一</h3><p>任何时刻,我们手中的牌都是已序的,因此我们可以用二分查找来搜索插入位置。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">isort</span><span class=\"params\">(xs)</span>:</span></span><br><span class=\"line\">    n = len(xs)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">1</span>, n):</span><br><span class=\"line\">        x = xs[i]</span><br><span class=\"line\">        p = binary_search(xs[:i], x)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> range(i, p, <span class=\"number\">-1</span>):</span><br><span class=\"line\">            xs[j] = xs[j<span class=\"number\">-1</span>]</span><br><span class=\"line\">        xs[p] = x</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">binary_search</span><span class=\"params\">(xs, x)</span>:</span></span><br><span class=\"line\">    l = <span class=\"number\">0</span></span><br><span class=\"line\">    u = len(xs)</span><br><span class=\"line\">    <span class=\"keyword\">while</span> l &lt; u:</span><br><span class=\"line\">        m = (l+u)/<span class=\"number\">2</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> xs[m] == x:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> m</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> xs[m] &lt; x:</span><br><span class=\"line\">            l = m + <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            u = m</span><br><span class=\"line\">    <span class=\"keyword\">return</span> l</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"使用二叉搜索树的最终改进\"><a href=\"#使用二叉搜索树的最终改进\" class=\"headerlink\" title=\"使用二叉搜索树的最终改进\"></a>使用二叉搜索树的最终改进</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Sort(A)</span><br><span class=\"line\">    T &lt;- φ</span><br><span class=\"line\">    <span class=\"keyword\">for</span> each x ∈ A do</span><br><span class=\"line\">        T &lt;- Insert-Tree(T, x)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> To-List(T)</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<h2 id=\"二叉搜索树-数据结构中的”hello-world”\"><a href=\"#二叉搜索树-数据结构中的”hello-world”\" class=\"headerlink\" title=\"二叉搜索树,数据结构中的”hello world”\"></a>二叉搜索树,数据结构中的”hello world”</h2><p>我们使用二叉搜索树(BST)作为数据结构中的“hello world”。Jon Bentley在他的《编程珠玑》一书中,曾给了这样一个有趣的题目:如何统计一段文字中每个单词出现的次数?下面的C++程序展示了一个解法。<br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span>, <span class=\"keyword\">char</span>∗∗ )</span></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">map</span>&lt;<span class=\"built_in\">string</span>, <span class=\"keyword\">int</span>&gt; dict;</span><br><span class=\"line\">    <span class=\"built_in\">string</span> s;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"built_in\">cin</span>&gt;&gt;s)</span><br><span class=\"line\">        ++dict[s];</span><br><span class=\"line\">    <span class=\"built_in\">map</span>&lt;<span class=\"built_in\">string</span>, <span class=\"keyword\">int</span>&gt;::iterator it=dict.begin();</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(; it!=dict.end(); ++it)</span><br><span class=\"line\">        <span class=\"built_in\">cout</span>&lt;&lt;it-&gt;first&lt;&lt;<span class=\"string\">\": \"</span>&lt;&lt;it-&gt;second&lt;&lt;<span class=\"string\">\"λn\"</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>","more":"<p>C++标准库中提供的map是一种用平衡二叉树实现的字典数据结构。例子中用单词作为key,用单词出现的次数作为值。<br>一棵<code>二叉搜索树</code>是一棵满足下面条件的二叉树:</p>\n<ul>\n<li>所有左侧分支的值都小于本节点的值,</li>\n<li>本节点的值小于所有右侧分支的值。<br><img src=\"http://otl4ekdmf.bkt.clouddn.com/BST.png\" alt=\"\"></li>\n</ul>\n<h3 id=\"节点数据结构\"><a href=\"#节点数据结构\" class=\"headerlink\" title=\"节点数据结构\"></a>节点数据结构</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">T</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">struct</span> <span class=\"title\">node</span>&#123;</span></span><br><span class=\"line\">    node(T x):key(x), left(<span class=\"number\">0</span>), right(<span class=\"number\">0</span>), parent(<span class=\"number\">0</span>)&#123;&#125;</span><br><span class=\"line\">    ~node()&#123;</span><br><span class=\"line\">        <span class=\"keyword\">delete</span> left;</span><br><span class=\"line\">        <span class=\"keyword\">delete</span> right;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    node∗ left;</span><br><span class=\"line\">    node∗ right;</span><br><span class=\"line\">    node∗ parent; <span class=\"comment\">//Optional, it's helpful for succ and pred</span></span><br><span class=\"line\">    T key;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"插入\"><a href=\"#插入\" class=\"headerlink\" title=\"插入\"></a>插入</h3><p>我们可以使用下述算法向一个二叉搜索树中插入一个键k(在实际应用中,有时会同时插入一对键和值):</p>\n<ul>\n<li>如果树为空,创建一个叶子节点,令该节点的key = k;</li>\n<li>如果k小于根节点的key,将它插入到左子树中;</li>\n<li>如果k大于根节点的key,将它插入到右子树中。</li>\n</ul>\n<h3 id=\"遍历\"><a href=\"#遍历\" class=\"headerlink\" title=\"遍历\"></a>遍历</h3><p>遍历是指依次访问二叉树中的每个元素。有三种遍历方法,分别是前序遍历、中序遍历和后序遍历。它们是按照访问根节点和子节点的先后顺序命名的。</p>\n<ul>\n<li>前序遍历:先访问key,然后访问左子树,最后访问右子树;</li>\n<li>中序遍历:先访问左子树,然后访问key,最后访问右子树;</li>\n<li>后序遍历:先访问左子树,然后访问右子树,最后访问key。</li>\n</ul>\n<p>所有的“访问”操作都是递归的。先访问根后访问子分支称为先序,在访问左右分支的中间访问根称为中序,先访问子分支后访问根称为后序。对于图中的二叉树,下面分别列出了三种遍历的结果:</p>\n<ul>\n<li>前序遍历:4, 3, 1, 2, 8, 7, 16, 10, 9, 14;</li>\n<li>中序遍历:1, 2, 3, 4, 7, 8, 9, 10, 14, 16;</li>\n<li>后序遍历:2, 1, 3, 7, 9, 14, 10, 16, 8, 4。  </li>\n</ul>\n<p>对二叉搜索树进行中序遍历,元素就会按照从小到大的顺序输出。<br>中序遍历的算法可以描述为:</p>\n<ul>\n<li>如果树为空,则返回;</li>\n<li>否则先中序遍历左子树,然后访问key,最后再中序遍历右子树。</li>\n</ul>\n<h3 id=\"搜索\"><a href=\"#搜索\" class=\"headerlink\" title=\"搜索\"></a>搜索</h3><h4 id=\"Look-up\"><a href=\"#Look-up\" class=\"headerlink\" title=\"Look up\"></a>Look up</h4><p>二叉搜索树的定义使得它非常适合进行元素的搜索。可以按照下面描述的方法在树中搜索一个key:</p>\n<ul>\n<li>如果树为空,搜索失败;</li>\n<li>如果根节点的key等于待搜索的值,搜索成功,返回根节点作为结果;</li>\n<li>如果待搜索的值小于根节点的key,继续在左子树中递归搜索;</li>\n<li>否则,待搜索的值大于根节点的key,继续在右子树中递归搜索。  </li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">T</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">node</span>&lt;T&gt;∗ <span class=\"title\">search</span>(<span class=\"title\">node</span>&lt;T&gt;∗ <span class=\"title\">t</span>, <span class=\"title\">T</span> <span class=\"title\">x</span>)&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(t &amp;&amp; t-&gt;key!=x)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x &lt; t-&gt;key) t=t-&gt;left;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> t=t-&gt;right;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> t;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"最小元素和最大元素\"><a href=\"#最小元素和最大元素\" class=\"headerlink\" title=\"最小元素和最大元素\"></a>最小元素和最大元素</h4><p>为了获取最小元素,我们可以不断向左侧前进,直到左侧分支为空。类似地,我们可以通过不断向右侧前进获取最大元素。</p>\n<h4 id=\"前驱-Successor-和后继-predecessor\"><a href=\"#前驱-Successor-和后继-predecessor\" class=\"headerlink\" title=\"前驱(Successor)和后继(predecessor)\"></a>前驱(Successor)和后继(predecessor)</h4><p>给定元素x,它的后继元素y是满足y &gt; x的最小值。有两种情况:如果x所在的节点有一个非空的右子树,则右子树中的最小值就是答案。如图所示,8的后继元素为9,它是元素8的右子树中的最小值。另外一种情况是,如果x没有非空的右子树,我们需要向上回溯,找到最近的一个祖先,使得该祖先的左侧孩子,也为x的祖先。元素2所在的节点没有右侧分支,我们向上回溯一步找到元素1,但是1没有左侧分支,因此需要继续向上查找,这次我们到达了元素3所在的节点。而3的左侧孩子,同样也是2的祖先。至此,我们找到了2的后继元素3。<br><img src=\"http://otl4ekdmf.bkt.clouddn.com/succpred.png\" alt=\"\"><br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">succ</span><span class=\"params\">(x)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> x.right <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"keyword\">None</span>: <span class=\"keyword\">return</span> tree_min(x.right)</span><br><span class=\"line\">    p = x.parent</span><br><span class=\"line\">    <span class=\"keyword\">while</span> p <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"keyword\">None</span> <span class=\"keyword\">and</span> p.left != x:</span><br><span class=\"line\">        x = p</span><br><span class=\"line\">        p = p.parent</span><br><span class=\"line\">    <span class=\"keyword\">return</span> p</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">pred</span><span class=\"params\">(x)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> x.left <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"keyword\">None</span>: <span class=\"keyword\">return</span> tree_max(x.left)</span><br><span class=\"line\">    p = x.parent</span><br><span class=\"line\">    <span class=\"keyword\">while</span> p <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"keyword\">None</span> <span class=\"keyword\">and</span> p.right != x:</span><br><span class=\"line\">        x = p</span><br><span class=\"line\">        p = p.parent</span><br><span class=\"line\">    <span class=\"keyword\">return</span> p</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"代码如下：\"><a href=\"#代码如下：\" class=\"headerlink\" title=\"代码如下：\"></a>代码如下：</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;sstream&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\">//#include &lt;boost/lambda/lambda.hpp&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">T</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">struct</span> <span class=\"title\">node</span>&#123;</span></span><br><span class=\"line\">    node(T x):key(x), left(<span class=\"number\">0</span>), right(<span class=\"number\">0</span>), parent(<span class=\"number\">0</span>)&#123;&#125;</span><br><span class=\"line\">    ~node()&#123; <span class=\"comment\">// for convinient, use functional approach</span></span><br><span class=\"line\">        <span class=\"keyword\">delete</span> left;</span><br><span class=\"line\">        <span class=\"keyword\">delete</span> right;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    node* left;</span><br><span class=\"line\">    node* right;</span><br><span class=\"line\">    node* parent; <span class=\"comment\">//parent is optional, it's helpful for succ/pred</span></span><br><span class=\"line\">    T key;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// in-order tree walk</span></span><br><span class=\"line\"><span class=\"comment\">// easy implemented by using functional approach</span></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">T</span>, <span class=\"title\">class</span> <span class=\"title\">F</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">void</span> <span class=\"title\">in_order_walk</span>(<span class=\"title\">node</span>&lt;T&gt;* <span class=\"title\">t</span>, <span class=\"title\">F</span> <span class=\"title\">f</span>)&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(t)&#123;</span><br><span class=\"line\">        in_order_walk(t-&gt;left, f);</span><br><span class=\"line\">        f(t-&gt;key);</span><br><span class=\"line\">        in_order_walk(t-&gt;right, f);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">T</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">node</span>&lt;T&gt;* <span class=\"title\">search</span>(<span class=\"title\">node</span>&lt;T&gt;* <span class=\"title\">t</span>, <span class=\"title\">T</span> <span class=\"title\">x</span>)&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(t &amp;&amp; t-&gt;key!=x)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(x &lt; t-&gt;key) t=t-&gt;left;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> t=t-&gt;right;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> t;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">T</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">node</span>&lt;T&gt;* <span class=\"title\">min</span>(<span class=\"title\">node</span>&lt;T&gt;* <span class=\"title\">x</span>)&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(x &amp;&amp; x-&gt;left)</span><br><span class=\"line\">        x = x-&gt;left;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">T</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">node</span>&lt;T&gt;* <span class=\"title\">max</span>(<span class=\"title\">node</span>&lt;T&gt;* <span class=\"title\">x</span>)&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(x &amp;&amp; x-&gt;right)</span><br><span class=\"line\">        x = x-&gt;right;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">T</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">node</span>&lt;T&gt;* <span class=\"title\">succ</span>(<span class=\"title\">node</span>&lt;T&gt;* <span class=\"title\">x</span>)&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(x-&gt;right) <span class=\"keyword\">return</span> min(x-&gt;right);</span><br><span class=\"line\">        <span class=\"comment\">//find an ancestor, whose left child contains x</span></span><br><span class=\"line\">        node&lt;T&gt;* p = x-&gt;parent;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(p &amp;&amp; p-&gt;right==x)&#123;</span><br><span class=\"line\">            x = p;</span><br><span class=\"line\">            p = p-&gt;parent;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> p;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">T</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">node</span>&lt;T&gt;* <span class=\"title\">pred</span>(<span class=\"title\">node</span>&lt;T&gt;* <span class=\"title\">x</span>)&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(x-&gt;left) <span class=\"keyword\">return</span> max(x-&gt;left);</span><br><span class=\"line\">        <span class=\"comment\">//find an ancestor, whose right child contains x</span></span><br><span class=\"line\">        node&lt;T&gt;* p = x-&gt;parent;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(p &amp;&amp; p-&gt;left==x)&#123;</span><br><span class=\"line\">            x = p;</span><br><span class=\"line\">            p = p-&gt;parent;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> p;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">T</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">node</span>&lt;T&gt;* <span class=\"title\">insert</span>(<span class=\"title\">node</span>&lt;T&gt;* <span class=\"title\">tree</span>, <span class=\"title\">T</span> <span class=\"title\">key</span>)&#123;</span></span><br><span class=\"line\">    node&lt;T&gt;* root(tree);</span><br><span class=\"line\">    node&lt;T&gt;* x = <span class=\"keyword\">new</span> node&lt;T&gt;(key);</span><br><span class=\"line\">    node&lt;T&gt;* parent(<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(tree)&#123;</span><br><span class=\"line\">        parent = tree;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(key &lt; tree-&gt;key)</span><br><span class=\"line\">            tree = tree -&gt; left;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"comment\">//assert there is no duplicated key inserted.</span></span><br><span class=\"line\">            tree = tree -&gt; right;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    x-&gt;parent = parent;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>( parent == <span class=\"number\">0</span> ) <span class=\"comment\">//tree is empty</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> x;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>( key &lt; parent-&gt;key)</span><br><span class=\"line\">        parent-&gt;left = x;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        parent-&gt;right = x;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> root;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// cut the node off the tree, then delete it.</span></span><br><span class=\"line\"><span class=\"comment\">// it can prevent dtor removed children of a node</span></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">T</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">void</span> <span class=\"title\">remove_node</span>(<span class=\"title\">node</span>&lt;T&gt;* <span class=\"title\">x</span>)&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x)</span><br><span class=\"line\">        x-&gt;left = x-&gt;right = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">delete</span> x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// The algorithm described in CLRS isn't used here.</span></span><br><span class=\"line\"><span class=\"comment\">// I used the algorithm as below (refer to Annotated STL, P 235 (by Hou Jie)</span></span><br><span class=\"line\"><span class=\"comment\">//   if x has only one child: just splice x out</span></span><br><span class=\"line\"><span class=\"comment\">//   if x has two children: use min(right) to replace x</span></span><br><span class=\"line\"><span class=\"comment\">// @return root of the tree</span></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">T</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">node</span>&lt;T&gt;* <span class=\"title\">del</span>(<span class=\"title\">node</span>&lt;T&gt;* <span class=\"title\">tree</span>, <span class=\"title\">node</span>&lt;T&gt;* <span class=\"title\">x</span>)&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!x)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> tree;</span><br><span class=\"line\"></span><br><span class=\"line\">    node&lt;T&gt;* root(tree);</span><br><span class=\"line\">    node&lt;T&gt;* old_x(x);</span><br><span class=\"line\">    node&lt;T&gt;* parent(x-&gt;parent);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x-&gt;left == <span class=\"number\">0</span>)</span><br><span class=\"line\">        x = x-&gt;right;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(x-&gt;right == <span class=\"number\">0</span>)</span><br><span class=\"line\">        x = x-&gt;left;</span><br><span class=\"line\">    <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        node&lt;T&gt;* y=min(x-&gt;right);</span><br><span class=\"line\">        x-&gt;key = y-&gt;key;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(y-&gt;parent != x)</span><br><span class=\"line\">            y-&gt;parent-&gt;left = y-&gt;right;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            x-&gt;right = y-&gt;right;</span><br><span class=\"line\"></span><br><span class=\"line\">        remove_node(y);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> root;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x)</span><br><span class=\"line\">        x-&gt;parent = parent;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!parent)</span><br><span class=\"line\">        root = x; <span class=\"comment\">//remove node of a tree</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(parent-&gt;left == old_x)</span><br><span class=\"line\">        parent-&gt;left = x;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        parent-&gt;right = x;</span><br><span class=\"line\"></span><br><span class=\"line\">    remove_node(old_x);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> root;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//for testing</span></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Coll</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">node</span>&lt;typename Coll::value_type&gt;* <span class=\"title\">build_tree</span>(<span class=\"title\">const</span> <span class=\"title\">Coll</span>&amp; <span class=\"title\">coll</span>)&#123;</span></span><br><span class=\"line\">    node&lt;<span class=\"keyword\">typename</span> Coll::value_type&gt;* tree(<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">typename</span> Coll::const_iterator it=coll.begin(); it!=coll.end(); ++it)</span><br><span class=\"line\">        tree = insert(tree, *it);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> tree;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">T</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">std</span>:</span>:<span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">tree_to_str</span><span class=\"params\">(<span class=\"keyword\">const</span> node&lt;T&gt;* tree)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(tree)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">std</span>::<span class=\"built_in\">ostringstream</span> s;</span><br><span class=\"line\">        s&lt;&lt;<span class=\"string\">\"(\"</span>&lt;&lt;tree_to_str(tree-&gt;left)&lt;&lt;<span class=\"string\">\"), \"</span>&lt;&lt;tree-&gt;key</span><br><span class=\"line\">         &lt;&lt;<span class=\"string\">\", (\"</span>&lt;&lt;tree_to_str(tree-&gt;right)&lt;&lt;<span class=\"string\">\")\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> s.str();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"empty\"</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">T</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">node</span>&lt;T&gt;* <span class=\"title\">clone_tree</span>(<span class=\"title\">const</span> <span class=\"title\">node</span>&lt;T&gt;* <span class=\"title\">t</span>, <span class=\"title\">node</span>&lt;T&gt;* <span class=\"title\">parent</span>=0)&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(t)&#123;</span><br><span class=\"line\">        node&lt;T&gt;* t1 = <span class=\"keyword\">new</span> node&lt;T&gt;(t-&gt;key);</span><br><span class=\"line\">        t1-&gt;left = clone_tree(t-&gt;left, t1);</span><br><span class=\"line\">        t1-&gt;right = clone_tree(t-&gt;right, t1);</span><br><span class=\"line\">        t1-&gt;parent = parent;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> t1;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">static_cast</span>&lt;node&lt;T&gt;*&gt;(<span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//test helper</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">test</span>&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    test()&#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> buf[]=&#123;<span class=\"number\">15</span>, <span class=\"number\">6</span>, <span class=\"number\">18</span>, <span class=\"number\">3</span>, <span class=\"number\">7</span>, <span class=\"number\">17</span>, <span class=\"number\">20</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">13</span>, <span class=\"number\">9</span>&#125;;</span><br><span class=\"line\">        tree = build_tree(<span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;(buf, buf+<span class=\"keyword\">sizeof</span>(buf)/<span class=\"keyword\">sizeof</span>(<span class=\"keyword\">int</span>)));</span><br><span class=\"line\">        <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span>&lt;&lt;tree_to_str(tree);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    ~test()&#123;</span><br><span class=\"line\">        <span class=\"keyword\">delete</span> tree;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">template</span>&lt;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">T</span>&gt; <span class=\"title\">void</span> <span class=\"title\">assert_</span>(<span class=\"title\">std</span>:</span>:<span class=\"built_in\">string</span> msg, T x, T y)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span>&lt;&lt;msg;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(x==y)</span><br><span class=\"line\">            <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span>&lt;&lt;x&lt;&lt;<span class=\"string\">\" OK.\\n\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span>&lt;&lt;x&lt;&lt;<span class=\"string\">\"!=\"</span>&lt;&lt;y&lt;&lt;<span class=\"string\">\" Fail.\\n\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        test_in_order_walk();</span><br><span class=\"line\">        test_min_max();</span><br><span class=\"line\">        test_search();</span><br><span class=\"line\">        test_succ_pred();</span><br><span class=\"line\">        test_del();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Print</span>&#123;</span></span><br><span class=\"line\">        <span class=\"keyword\">template</span>&lt;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">T</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\">        <span class=\"title\">void</span> <span class=\"title\">operator</span>()(<span class=\"title\">T</span> <span class=\"title\">x</span>)&#123;</span> <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span>&lt;&lt;x&lt;&lt;<span class=\"string\">\", \"</span>; &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test_in_order_walk</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"\\ntest in order walk with print functor: \"</span>;</span><br><span class=\"line\">        in_order_walk(tree, Print());</span><br><span class=\"line\">        <span class=\"comment\">//this can be simplified by using boost</span></span><br><span class=\"line\">        <span class=\"comment\">//using namespace boost::lambda;</span></span><br><span class=\"line\">        <span class=\"comment\">//in_order_walk(tree, std::cout&lt;&lt;_1&lt;&lt;\", \");</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test_min_max</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        node&lt;<span class=\"keyword\">int</span>&gt;* empty(<span class=\"number\">0</span>);</span><br><span class=\"line\">        assert_(<span class=\"string\">\"min(empty)=\"</span>, min(empty), empty);</span><br><span class=\"line\">        assert_(<span class=\"string\">\"min(tree)=\"</span>, min(tree)-&gt;key, <span class=\"number\">2</span>);</span><br><span class=\"line\">        assert_(<span class=\"string\">\"max(empty)=\"</span>,max(empty), empty);</span><br><span class=\"line\">        assert_(<span class=\"string\">\"max(tree)=\"</span>, max(tree)-&gt;key, <span class=\"number\">20</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test_search</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        node&lt;<span class=\"keyword\">int</span>&gt;* empty(<span class=\"number\">0</span>);</span><br><span class=\"line\">        assert_(<span class=\"string\">\"search empty: \"</span>, search(empty, <span class=\"number\">3</span>), empty);</span><br><span class=\"line\">        <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"search exist key: \"</span>&lt;&lt;tree_to_str(search(tree, <span class=\"number\">18</span>))&lt;&lt;<span class=\"string\">\"\\n\"</span>;</span><br><span class=\"line\">        assert_(<span class=\"string\">\"search non-exist: \"</span>, search(tree, <span class=\"number\">5</span>), empty);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test_succ_pred</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        node&lt;<span class=\"keyword\">int</span>&gt;* empty(<span class=\"number\">0</span>);</span><br><span class=\"line\">        assert_(<span class=\"string\">\"succ 7: \"</span>, succ(search(tree, <span class=\"number\">7</span>))-&gt;key, <span class=\"number\">9</span>);</span><br><span class=\"line\">        assert_(<span class=\"string\">\"succ 13: \"</span>, succ(search(tree, <span class=\"number\">13</span>))-&gt;key, <span class=\"number\">15</span>);</span><br><span class=\"line\">        assert_(<span class=\"string\">\"succ 20: \"</span>, succ(search(tree, <span class=\"number\">20</span>)), empty);</span><br><span class=\"line\">        assert_(<span class=\"string\">\"pred 6: \"</span>, pred(search(tree, <span class=\"number\">6</span>))-&gt;key, <span class=\"number\">4</span>);</span><br><span class=\"line\">        assert_(<span class=\"string\">\"pred 7: \"</span>, pred(search(tree, <span class=\"number\">7</span>))-&gt;key, <span class=\"number\">6</span>);</span><br><span class=\"line\">        assert_(<span class=\"string\">\"pred 2: \"</span>, pred(search(tree, <span class=\"number\">2</span>)), empty);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test_del_n</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span></span>&#123;</span><br><span class=\"line\">        node&lt;<span class=\"keyword\">int</span>&gt;* empty(<span class=\"number\">0</span>);</span><br><span class=\"line\">        node&lt;<span class=\"keyword\">int</span>&gt;* t1=clone_tree(tree);</span><br><span class=\"line\">        t1=del(t1, search(t1, n));</span><br><span class=\"line\">        <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"del \"</span>&lt;&lt;n&lt;&lt;<span class=\"string\">\":\\n\"</span>&lt;&lt;tree_to_str(t1)&lt;&lt;<span class=\"string\">\"\\n\"</span>;</span><br><span class=\"line\">        assert_(<span class=\"string\">\"search after del: \"</span>, search(t1, n), empty);</span><br><span class=\"line\">        <span class=\"keyword\">delete</span> t1;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test_del</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        test_del_n(<span class=\"number\">17</span>);</span><br><span class=\"line\">        test_del_n(<span class=\"number\">7</span>);</span><br><span class=\"line\">        test_del_n(<span class=\"number\">6</span>);</span><br><span class=\"line\">        test_del_n(<span class=\"number\">15</span>);</span><br><span class=\"line\">        test_del_n(<span class=\"number\">1</span>); <span class=\"comment\">//try to del a non-exist val</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    node&lt;<span class=\"keyword\">int</span>&gt;* tree;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span>, <span class=\"keyword\">char</span>**)</span></span>&#123;</span><br><span class=\"line\">    test().run();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"插入排序的进化\"><a href=\"#插入排序的进化\" class=\"headerlink\" title=\"插入排序的进化\"></a>插入排序的进化</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">isort</span><span class=\"params\">(Key∗ xs, <span class=\"keyword\">int</span> n)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i, j;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(i=<span class=\"number\">1</span>; i&lt;n; ++i)</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(j=i<span class=\"number\">-1</span>; j≥<span class=\"number\">0</span> &amp;&amp; xs[j+<span class=\"number\">1</span>] &lt; xs[j]; --j)</span><br><span class=\"line\">            swap(xs, j, j+<span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"改进一\"><a href=\"#改进一\" class=\"headerlink\" title=\"改进一\"></a>改进一</h3><p>任何时刻,我们手中的牌都是已序的,因此我们可以用二分查找来搜索插入位置。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">isort</span><span class=\"params\">(xs)</span>:</span></span><br><span class=\"line\">    n = len(xs)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">1</span>, n):</span><br><span class=\"line\">        x = xs[i]</span><br><span class=\"line\">        p = binary_search(xs[:i], x)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> range(i, p, <span class=\"number\">-1</span>):</span><br><span class=\"line\">            xs[j] = xs[j<span class=\"number\">-1</span>]</span><br><span class=\"line\">        xs[p] = x</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">binary_search</span><span class=\"params\">(xs, x)</span>:</span></span><br><span class=\"line\">    l = <span class=\"number\">0</span></span><br><span class=\"line\">    u = len(xs)</span><br><span class=\"line\">    <span class=\"keyword\">while</span> l &lt; u:</span><br><span class=\"line\">        m = (l+u)/<span class=\"number\">2</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> xs[m] == x:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> m</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> xs[m] &lt; x:</span><br><span class=\"line\">            l = m + <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            u = m</span><br><span class=\"line\">    <span class=\"keyword\">return</span> l</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"使用二叉搜索树的最终改进\"><a href=\"#使用二叉搜索树的最终改进\" class=\"headerlink\" title=\"使用二叉搜索树的最终改进\"></a>使用二叉搜索树的最终改进</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Sort(A)</span><br><span class=\"line\">    T &lt;- φ</span><br><span class=\"line\">    <span class=\"keyword\">for</span> each x ∈ A do</span><br><span class=\"line\">        T &lt;- Insert-Tree(T, x)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> To-List(T)</span><br></pre></td></tr></table></figure>"},{"title":"[初等算法]--红黑树","date":"2017-07-28T02:03:57.000Z","_content":"\n## 红黑树的定义\n红黑树是一种自平衡二叉搜索树。通过对节点进行着色和旋转,红黑树可以很容易地保持树的平衡。我们需要在二叉搜索树上增加一个额外的颜色信息。节点可以被涂成红色或黑色。如果一棵二叉搜索树满足下面的全部5条性质,我们称之为红黑树。\n- 任一节点要么是红色,要么是黑色。\n- 根节点为黑色。\n- 所有的叶节点(NIL节点)为黑色。\n- 如果一个节点为红色,则它的两个子节点都是黑色。\n- 对任一节点,从它出发到所有叶子节点的路径上包含相同数量的黑色节点。\n<!--more-->\n为什么这5条性质能保证红黑树的平衡性呢?因为它们有一个关键的特性:从根节点出发到达叶节点的所有路径中,最长路径不会超过最短路径两倍。注意到第四条性质,它意味着不存在两个连续的红色节点。因此,最短的路径只含有黑色的节点,任何比最短路径长的路径上都分散有一些红色节点。根据性质五,从根节点出发的所有的路径都含有相同数量的黑色节点,这就最终保证了没有任何路径超过最短路径长度的两倍。图3.4的例子展示了一棵红黑树。\n![](http://otl4ekdmf.bkt.clouddn.com/rbt.png)\n红黑树沿用所有二叉搜索树中不改变树结构的操作,包括查找、获取最大、最小值等。只有插入和删除操作是特殊的。\n由于只增加了一个颜色信息,我们可以复用二叉搜索树的节点定义。如下面的C++代码所示:\n```c++\nenum Color {Red, Black};\ntemplate <class T>\nstruct node {\n    Color color;\n    T key;\n    node* left;\n    node* right;\n    node* parent;\n};\n```\n","source":"_posts/basicAlg02.md","raw":"---\ntitle: '[初等算法]--红黑树'\ndate: 2017-07-28 10:03:57\ntags: 算法\ncategories: 初等算法\n---\n\n## 红黑树的定义\n红黑树是一种自平衡二叉搜索树。通过对节点进行着色和旋转,红黑树可以很容易地保持树的平衡。我们需要在二叉搜索树上增加一个额外的颜色信息。节点可以被涂成红色或黑色。如果一棵二叉搜索树满足下面的全部5条性质,我们称之为红黑树。\n- 任一节点要么是红色,要么是黑色。\n- 根节点为黑色。\n- 所有的叶节点(NIL节点)为黑色。\n- 如果一个节点为红色,则它的两个子节点都是黑色。\n- 对任一节点,从它出发到所有叶子节点的路径上包含相同数量的黑色节点。\n<!--more-->\n为什么这5条性质能保证红黑树的平衡性呢?因为它们有一个关键的特性:从根节点出发到达叶节点的所有路径中,最长路径不会超过最短路径两倍。注意到第四条性质,它意味着不存在两个连续的红色节点。因此,最短的路径只含有黑色的节点,任何比最短路径长的路径上都分散有一些红色节点。根据性质五,从根节点出发的所有的路径都含有相同数量的黑色节点,这就最终保证了没有任何路径超过最短路径长度的两倍。图3.4的例子展示了一棵红黑树。\n![](http://otl4ekdmf.bkt.clouddn.com/rbt.png)\n红黑树沿用所有二叉搜索树中不改变树结构的操作,包括查找、获取最大、最小值等。只有插入和删除操作是特殊的。\n由于只增加了一个颜色信息,我们可以复用二叉搜索树的节点定义。如下面的C++代码所示:\n```c++\nenum Color {Red, Black};\ntemplate <class T>\nstruct node {\n    Color color;\n    T key;\n    node* left;\n    node* right;\n    node* parent;\n};\n```\n","slug":"basicAlg02","published":1,"updated":"2018-01-02T00:50:36.820Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjbwxj0yd0009h0vo4vfsmetx","content":"<h2 id=\"红黑树的定义\"><a href=\"#红黑树的定义\" class=\"headerlink\" title=\"红黑树的定义\"></a>红黑树的定义</h2><p>红黑树是一种自平衡二叉搜索树。通过对节点进行着色和旋转,红黑树可以很容易地保持树的平衡。我们需要在二叉搜索树上增加一个额外的颜色信息。节点可以被涂成红色或黑色。如果一棵二叉搜索树满足下面的全部5条性质,我们称之为红黑树。</p>\n<ul>\n<li>任一节点要么是红色,要么是黑色。</li>\n<li>根节点为黑色。</li>\n<li>所有的叶节点(NIL节点)为黑色。</li>\n<li>如果一个节点为红色,则它的两个子节点都是黑色。</li>\n<li>对任一节点,从它出发到所有叶子节点的路径上包含相同数量的黑色节点。<a id=\"more\"></a>\n为什么这5条性质能保证红黑树的平衡性呢?因为它们有一个关键的特性:从根节点出发到达叶节点的所有路径中,最长路径不会超过最短路径两倍。注意到第四条性质,它意味着不存在两个连续的红色节点。因此,最短的路径只含有黑色的节点,任何比最短路径长的路径上都分散有一些红色节点。根据性质五,从根节点出发的所有的路径都含有相同数量的黑色节点,这就最终保证了没有任何路径超过最短路径长度的两倍。图3.4的例子展示了一棵红黑树。<br><img src=\"http://otl4ekdmf.bkt.clouddn.com/rbt.png\" alt=\"\"><br>红黑树沿用所有二叉搜索树中不改变树结构的操作,包括查找、获取最大、最小值等。只有插入和删除操作是特殊的。<br>由于只增加了一个颜色信息,我们可以复用二叉搜索树的节点定义。如下面的C++代码所示:<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">enum</span> Color &#123;Red, Black&#125;;</span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">T</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">struct</span> <span class=\"title\">node</span> &#123;</span></span><br><span class=\"line\">    Color color;</span><br><span class=\"line\">    T key;</span><br><span class=\"line\">    node* left;</span><br><span class=\"line\">    node* right;</span><br><span class=\"line\">    node* parent;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h2 id=\"红黑树的定义\"><a href=\"#红黑树的定义\" class=\"headerlink\" title=\"红黑树的定义\"></a>红黑树的定义</h2><p>红黑树是一种自平衡二叉搜索树。通过对节点进行着色和旋转,红黑树可以很容易地保持树的平衡。我们需要在二叉搜索树上增加一个额外的颜色信息。节点可以被涂成红色或黑色。如果一棵二叉搜索树满足下面的全部5条性质,我们称之为红黑树。</p>\n<ul>\n<li>任一节点要么是红色,要么是黑色。</li>\n<li>根节点为黑色。</li>\n<li>所有的叶节点(NIL节点)为黑色。</li>\n<li>如果一个节点为红色,则它的两个子节点都是黑色。</li>\n<li>对任一节点,从它出发到所有叶子节点的路径上包含相同数量的黑色节点。","more":"为什么这5条性质能保证红黑树的平衡性呢?因为它们有一个关键的特性:从根节点出发到达叶节点的所有路径中,最长路径不会超过最短路径两倍。注意到第四条性质,它意味着不存在两个连续的红色节点。因此,最短的路径只含有黑色的节点,任何比最短路径长的路径上都分散有一些红色节点。根据性质五,从根节点出发的所有的路径都含有相同数量的黑色节点,这就最终保证了没有任何路径超过最短路径长度的两倍。图3.4的例子展示了一棵红黑树。<br><img src=\"http://otl4ekdmf.bkt.clouddn.com/rbt.png\" alt=\"\"><br>红黑树沿用所有二叉搜索树中不改变树结构的操作,包括查找、获取最大、最小值等。只有插入和删除操作是特殊的。<br>由于只增加了一个颜色信息,我们可以复用二叉搜索树的节点定义。如下面的C++代码所示:<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">enum</span> Color &#123;Red, Black&#125;;</span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">T</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">struct</span> <span class=\"title\">node</span> &#123;</span></span><br><span class=\"line\">    Color color;</span><br><span class=\"line\">    T key;</span><br><span class=\"line\">    node* left;</span><br><span class=\"line\">    node* right;</span><br><span class=\"line\">    node* parent;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>"},{"title":"[初等算法]--前言","date":"2017-04-03T08:39:47.000Z","_content":"\n# 最小可用ID 算法的威力\n题目：系统中每一个ID具有独特性，有些ID处于使用的状态，有些ID可以分配给新的用户，现在的问题是，怎么样找到最小的可用ID呢？   \n当前正在使用的ID： \n\n>[18, 4, 8, 9, 16, 1, 14, 7, 19, 3, 0, 5, 2, 11, 6]  \n\n<!--more-->\n\n## 解法一：暴力搜索\n我们立即可以写出下面的解法：\n```python\ndef brute_force ( lst ):\n    i = 0\n    while True :\n    if i not in lst :\n        return i\n    i = i + 1\n```\n在个解法在一个几百万个ID系统中表现的性能很差，需要O(N*N)的时间。  \n\n## 解法二：时间优化\n改进这一解法的关键基于这一事实:对于任何n个非负整数x 1 , x 2 , ..., x n ,如果存在小于n的可用整数,必然存在某个x i 不在[0, n)这个范围内。否则这些整数一定是0, 1, ..., n − 1的某个排列,这种情况下,最小的可用整数是n。  \n```python\ndef min_free(A):\n    n = len(A)\n    a = [0]*(n+1)\n    for x in A:\n        if x < n:\n            a[x] = 1;\n    return a.index(0);\n```\n缺点：空间上有浪费。\n\n## 解法三：分而治之\n我们在速度上的改进是以空间上的消耗为代价的。由于维护了一个长度为n的标志数组,当n很大时,空间上的性能就成了新的瓶颈。分而治之的典型策略是将问题分解为若干规模较小的子问题,然后逐步解决它们以得到最终的结果。我们可以将所有满足xi ≤ ⌊n/2⌋的整数放入一个子序列A′;将剩余的其他整数放入另外一个序列A′′。根据公式1,如果序列A′ 的长度正好是⌊n/2⌋,这说明前一半的整数已经“`满了`”,最小的可用整数一定可以在A′′中递归地找到。否则,最小的可用整数可以在A′中找到。总之,通过这一划分,问题的规模减小了。  \n\n需要注意的是,当我们在子序列A′′ 中递归查找时,边界情况发生了一些变化,我们不再是从0开始寻找最小可用整数,查找的下界变成了⌊n/2⌋ + 1。因此我们的算法应定义为minfree(A, l, u),其中l和u分别是上下界。递归结束的边界条件是当待查找的序列变为空的时候,此时我们只需要返回下界作为结果即可。\n```python\ndef dc_min_free(lst):\n    return binary_search(lst, 0, len(lst)-1)\n\ndef binary_search(lst, l, u):\n    if lst == []:\n        return l\n    m = (l + u ) / 2\n    xs = [x for x in lst if x <= m]\n    ys = [x for x in lst if x > m]\n    if len(xs) == m - l + 1:\n        return binary_search(ys, m+1, u)\n    else:\n        return binary_search(xs, l, m)\n```\n时间复杂度为O(n)，空间复杂度为O(logn)。\n\n---\n# 丑数 数据结构的威力\n如果说最小可用ID问题还有一些应用价值,那么接下来这个问题就纯粹是为了“有趣”了。我们要寻找第1500个“丑数”。所谓丑数,就是只含有2、3或5这三个因子的自然数。前三个丑数按照定义分别是2、3和5。数字60 = 2x2x3x5是第25个丑数。数字21 = 3x7 由于含有因子7,所以不是丑数。前10个丑数如下表:2,3,4,5,6,8,9,10,12,15  \n如果我们认为1也是一个合法的丑数,则1就是第一个丑数。  \n\n## 暴力解法\n这道题目看起来并不复杂,我们可以从1开始,逐一检查所有自然数,对于每个整数,我们把所有的2、3和5的因子都除去,如果结果是1,则找到了一个丑数,当遇到第n= 1500个丑数时就找到答案了。\n```python\ndef valid(x):\n    while x%2==0:\n        x=x/2\n    while x%3==0:\n        x=x/3\n    while x%5==0:\n        x=x/5\n    if x==1:\n        return 1\n    else:\n        return 0\ndef get_number(n):\n    x=1\n    i=0\n    while(1):\n        if valid(x):\n            i=i+1\n        if i==n:\n            return x\n        x=x+1;\n```\n\n## 改进一\n我们的思路是先把1作为唯一的元素放入队列,然后我们不断从队列另一侧取出元素,分别乘以2、3和5,这样就得到了3个新的元素。然后把它们按照大小顺序放入队列。注意,这样产生的整数有可能已经在队列中存在了。这种情况下,我们需要丢弃重复产生的元素。另外新产生的整数还有可能小于队列尾部的某些元素,所以我们在插入时,需要保持它们在队列中的大小顺序。\n```c++\nint get_number(int n){\n    queue<int> Q;\n    int t;\n    Q.push(1);\n    while(n > 0){\n        t=Q.front();\n        Q.pop();\n        unique_enqueue(Q,2*t);\n        unique_enqueue(Q,3*t);\n        unique_enqueue(Q,4*t);\n        n--;\n    }\n}\nvoid unique_enqueue(queue<int> *Q, int x){\n    int i = 0;\n    while(i < Q->size() && Q[i] < x){\n        i++;\n    }\n    if(i < Q->size() && Q[i]==x){\n        return;\n    }\n    insert(Q,i,x);\n}\n```\n## 改进二\n我们可以用三个队列来进行改进。这三个队列表示为Q 2 ,Q 3 和Q 5 。它们初\n始化为Q 2 = {2},Q 3 = {3}和Q 5 = {5}。我们每次从这三个队列的头部选择最小的一个元素x取出,然后进行下面的检查:\n\n- 如果x是从Q2取出的,我们将2x加入Q2 ,3x加入Q3 ,5x加入Q5。\n- 如果x是从Q3取出的,我们只将3x加入Q3,5x加入Q5,而不需要将2x加\n入Q2。这是因为2x已经在Q3中了。\n- 如果x是从Q5取出的,我们只将5x加入Q5 ,而不需要处理2x和3x了。\n\n```c++\ntypedef unsigned long Integer;\nInteger get_number(int n) {\n    if(n==1)\n        return 1;\n    queue<Integer> Q2, Q3, Q5;\n    Q2.push(2);\n    Q3.push(3);\n    Q5.push(5);\n    Integer x;\n    while(n-- > 1) {\n        x = min(min(Q2.front(), Q3.front()), Q5.front());\n        if(x==Q2.front()) {\n            Q2.pop();\n            Q2.push(x∗2);\n            Q3.push(x∗3);\n            Q5.push(x∗5);\n        } else if(x==Q3.front()) {\n            Q3.pop();\n            Q3.push(x∗3);\n            Q5.push(x∗5);\n        } else {\n            Q5.pop();\n            Q5.push(x∗5);\n        }\n    }\n    return x;\n}\n```\n\n## 改进三\n首先，第一个丑数为“1”，后面的每一个丑数都是有前一个丑数乘2、3、5或7而来，那么后一个丑数就是前一个乘这四个数得到的最小值，for example：第一个：1，第二个：1\\*2、1\\*3、1\\*5或1\\*7，显然为2，第三个：2\\*2,1\\*3,1\\*5或1\\*7，显然是3，第四个：2\\*2,,2\\*3,1\\*5,1\\*7为4，第五个：3\\*2,2\\*3,1\\*5,1\\*7……  \n\n```c++\nint a[5850];\nint main()\n{\n    int n=1;\n    int p2,p3,p5;\n    p2=p3=p5=1;\n    a[1]=1;\n    while(n<5843)//枚举5842个丑数，放在数组a里。\n    {\n        a[++n]=min4(2*a[p2],3*a[p3],5*a[p5]);//从现在枚举的3个丑数里，先选择小的放在a里。\n        if(a[n]==2*a[p2])p2++;//如果a[n]==2*a[p2],2*a[p2]可能是吧a[n]枚举出的数，这样p2++,也可能是重复的枚举，这样也是p2++,总之p2++。\n        if(a[n]==3*a[p3])p3++;//同理。\n        if(a[n]==5*a[p5])p5++;//同理。\n    }\n    while(scanf(\"%d\",&n)&&n)\n    {\n        printf(\"%d\\n\",a[n]);//要谁找谁。\n    }\n    return 0;\n}\n```\n","source":"_posts/basicAlg00.md","raw":"---\ntitle: '[初等算法]--前言'\ndate: 2017-04-03 16:39:47\ntags: 算法\ncategories: 初等算法\n---\n\n# 最小可用ID 算法的威力\n题目：系统中每一个ID具有独特性，有些ID处于使用的状态，有些ID可以分配给新的用户，现在的问题是，怎么样找到最小的可用ID呢？   \n当前正在使用的ID： \n\n>[18, 4, 8, 9, 16, 1, 14, 7, 19, 3, 0, 5, 2, 11, 6]  \n\n<!--more-->\n\n## 解法一：暴力搜索\n我们立即可以写出下面的解法：\n```python\ndef brute_force ( lst ):\n    i = 0\n    while True :\n    if i not in lst :\n        return i\n    i = i + 1\n```\n在个解法在一个几百万个ID系统中表现的性能很差，需要O(N*N)的时间。  \n\n## 解法二：时间优化\n改进这一解法的关键基于这一事实:对于任何n个非负整数x 1 , x 2 , ..., x n ,如果存在小于n的可用整数,必然存在某个x i 不在[0, n)这个范围内。否则这些整数一定是0, 1, ..., n − 1的某个排列,这种情况下,最小的可用整数是n。  \n```python\ndef min_free(A):\n    n = len(A)\n    a = [0]*(n+1)\n    for x in A:\n        if x < n:\n            a[x] = 1;\n    return a.index(0);\n```\n缺点：空间上有浪费。\n\n## 解法三：分而治之\n我们在速度上的改进是以空间上的消耗为代价的。由于维护了一个长度为n的标志数组,当n很大时,空间上的性能就成了新的瓶颈。分而治之的典型策略是将问题分解为若干规模较小的子问题,然后逐步解决它们以得到最终的结果。我们可以将所有满足xi ≤ ⌊n/2⌋的整数放入一个子序列A′;将剩余的其他整数放入另外一个序列A′′。根据公式1,如果序列A′ 的长度正好是⌊n/2⌋,这说明前一半的整数已经“`满了`”,最小的可用整数一定可以在A′′中递归地找到。否则,最小的可用整数可以在A′中找到。总之,通过这一划分,问题的规模减小了。  \n\n需要注意的是,当我们在子序列A′′ 中递归查找时,边界情况发生了一些变化,我们不再是从0开始寻找最小可用整数,查找的下界变成了⌊n/2⌋ + 1。因此我们的算法应定义为minfree(A, l, u),其中l和u分别是上下界。递归结束的边界条件是当待查找的序列变为空的时候,此时我们只需要返回下界作为结果即可。\n```python\ndef dc_min_free(lst):\n    return binary_search(lst, 0, len(lst)-1)\n\ndef binary_search(lst, l, u):\n    if lst == []:\n        return l\n    m = (l + u ) / 2\n    xs = [x for x in lst if x <= m]\n    ys = [x for x in lst if x > m]\n    if len(xs) == m - l + 1:\n        return binary_search(ys, m+1, u)\n    else:\n        return binary_search(xs, l, m)\n```\n时间复杂度为O(n)，空间复杂度为O(logn)。\n\n---\n# 丑数 数据结构的威力\n如果说最小可用ID问题还有一些应用价值,那么接下来这个问题就纯粹是为了“有趣”了。我们要寻找第1500个“丑数”。所谓丑数,就是只含有2、3或5这三个因子的自然数。前三个丑数按照定义分别是2、3和5。数字60 = 2x2x3x5是第25个丑数。数字21 = 3x7 由于含有因子7,所以不是丑数。前10个丑数如下表:2,3,4,5,6,8,9,10,12,15  \n如果我们认为1也是一个合法的丑数,则1就是第一个丑数。  \n\n## 暴力解法\n这道题目看起来并不复杂,我们可以从1开始,逐一检查所有自然数,对于每个整数,我们把所有的2、3和5的因子都除去,如果结果是1,则找到了一个丑数,当遇到第n= 1500个丑数时就找到答案了。\n```python\ndef valid(x):\n    while x%2==0:\n        x=x/2\n    while x%3==0:\n        x=x/3\n    while x%5==0:\n        x=x/5\n    if x==1:\n        return 1\n    else:\n        return 0\ndef get_number(n):\n    x=1\n    i=0\n    while(1):\n        if valid(x):\n            i=i+1\n        if i==n:\n            return x\n        x=x+1;\n```\n\n## 改进一\n我们的思路是先把1作为唯一的元素放入队列,然后我们不断从队列另一侧取出元素,分别乘以2、3和5,这样就得到了3个新的元素。然后把它们按照大小顺序放入队列。注意,这样产生的整数有可能已经在队列中存在了。这种情况下,我们需要丢弃重复产生的元素。另外新产生的整数还有可能小于队列尾部的某些元素,所以我们在插入时,需要保持它们在队列中的大小顺序。\n```c++\nint get_number(int n){\n    queue<int> Q;\n    int t;\n    Q.push(1);\n    while(n > 0){\n        t=Q.front();\n        Q.pop();\n        unique_enqueue(Q,2*t);\n        unique_enqueue(Q,3*t);\n        unique_enqueue(Q,4*t);\n        n--;\n    }\n}\nvoid unique_enqueue(queue<int> *Q, int x){\n    int i = 0;\n    while(i < Q->size() && Q[i] < x){\n        i++;\n    }\n    if(i < Q->size() && Q[i]==x){\n        return;\n    }\n    insert(Q,i,x);\n}\n```\n## 改进二\n我们可以用三个队列来进行改进。这三个队列表示为Q 2 ,Q 3 和Q 5 。它们初\n始化为Q 2 = {2},Q 3 = {3}和Q 5 = {5}。我们每次从这三个队列的头部选择最小的一个元素x取出,然后进行下面的检查:\n\n- 如果x是从Q2取出的,我们将2x加入Q2 ,3x加入Q3 ,5x加入Q5。\n- 如果x是从Q3取出的,我们只将3x加入Q3,5x加入Q5,而不需要将2x加\n入Q2。这是因为2x已经在Q3中了。\n- 如果x是从Q5取出的,我们只将5x加入Q5 ,而不需要处理2x和3x了。\n\n```c++\ntypedef unsigned long Integer;\nInteger get_number(int n) {\n    if(n==1)\n        return 1;\n    queue<Integer> Q2, Q3, Q5;\n    Q2.push(2);\n    Q3.push(3);\n    Q5.push(5);\n    Integer x;\n    while(n-- > 1) {\n        x = min(min(Q2.front(), Q3.front()), Q5.front());\n        if(x==Q2.front()) {\n            Q2.pop();\n            Q2.push(x∗2);\n            Q3.push(x∗3);\n            Q5.push(x∗5);\n        } else if(x==Q3.front()) {\n            Q3.pop();\n            Q3.push(x∗3);\n            Q5.push(x∗5);\n        } else {\n            Q5.pop();\n            Q5.push(x∗5);\n        }\n    }\n    return x;\n}\n```\n\n## 改进三\n首先，第一个丑数为“1”，后面的每一个丑数都是有前一个丑数乘2、3、5或7而来，那么后一个丑数就是前一个乘这四个数得到的最小值，for example：第一个：1，第二个：1\\*2、1\\*3、1\\*5或1\\*7，显然为2，第三个：2\\*2,1\\*3,1\\*5或1\\*7，显然是3，第四个：2\\*2,,2\\*3,1\\*5,1\\*7为4，第五个：3\\*2,2\\*3,1\\*5,1\\*7……  \n\n```c++\nint a[5850];\nint main()\n{\n    int n=1;\n    int p2,p3,p5;\n    p2=p3=p5=1;\n    a[1]=1;\n    while(n<5843)//枚举5842个丑数，放在数组a里。\n    {\n        a[++n]=min4(2*a[p2],3*a[p3],5*a[p5]);//从现在枚举的3个丑数里，先选择小的放在a里。\n        if(a[n]==2*a[p2])p2++;//如果a[n]==2*a[p2],2*a[p2]可能是吧a[n]枚举出的数，这样p2++,也可能是重复的枚举，这样也是p2++,总之p2++。\n        if(a[n]==3*a[p3])p3++;//同理。\n        if(a[n]==5*a[p5])p5++;//同理。\n    }\n    while(scanf(\"%d\",&n)&&n)\n    {\n        printf(\"%d\\n\",a[n]);//要谁找谁。\n    }\n    return 0;\n}\n```\n","slug":"basicAlg00","published":1,"updated":"2018-01-02T00:50:36.820Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjbwxj0yt000dh0vonziuhl2x","content":"<h1 id=\"最小可用ID-算法的威力\"><a href=\"#最小可用ID-算法的威力\" class=\"headerlink\" title=\"最小可用ID 算法的威力\"></a>最小可用ID 算法的威力</h1><p>题目：系统中每一个ID具有独特性，有些ID处于使用的状态，有些ID可以分配给新的用户，现在的问题是，怎么样找到最小的可用ID呢？<br>当前正在使用的ID： </p>\n<blockquote>\n<p>[18, 4, 8, 9, 16, 1, 14, 7, 19, 3, 0, 5, 2, 11, 6]  </p>\n</blockquote>\n<a id=\"more\"></a>\n<h2 id=\"解法一：暴力搜索\"><a href=\"#解法一：暴力搜索\" class=\"headerlink\" title=\"解法一：暴力搜索\"></a>解法一：暴力搜索</h2><p>我们立即可以写出下面的解法：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">brute_force</span> <span class=\"params\">( lst )</span>:</span></span><br><span class=\"line\">    i = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> <span class=\"keyword\">True</span> :</span><br><span class=\"line\">    <span class=\"keyword\">if</span> i <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> lst :</span><br><span class=\"line\">        <span class=\"keyword\">return</span> i</span><br><span class=\"line\">    i = i + <span class=\"number\">1</span></span><br></pre></td></tr></table></figure></p>\n<p>在个解法在一个几百万个ID系统中表现的性能很差，需要O(N*N)的时间。  </p>\n<h2 id=\"解法二：时间优化\"><a href=\"#解法二：时间优化\" class=\"headerlink\" title=\"解法二：时间优化\"></a>解法二：时间优化</h2><p>改进这一解法的关键基于这一事实:对于任何n个非负整数x 1 , x 2 , …, x n ,如果存在小于n的可用整数,必然存在某个x i 不在[0, n)这个范围内。否则这些整数一定是0, 1, …, n − 1的某个排列,这种情况下,最小的可用整数是n。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">min_free</span><span class=\"params\">(A)</span>:</span></span><br><span class=\"line\">    n = len(A)</span><br><span class=\"line\">    a = [<span class=\"number\">0</span>]*(n+<span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> A:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> x &lt; n:</span><br><span class=\"line\">            a[x] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a.index(<span class=\"number\">0</span>);</span><br></pre></td></tr></table></figure></p>\n<p>缺点：空间上有浪费。</p>\n<h2 id=\"解法三：分而治之\"><a href=\"#解法三：分而治之\" class=\"headerlink\" title=\"解法三：分而治之\"></a>解法三：分而治之</h2><p>我们在速度上的改进是以空间上的消耗为代价的。由于维护了一个长度为n的标志数组,当n很大时,空间上的性能就成了新的瓶颈。分而治之的典型策略是将问题分解为若干规模较小的子问题,然后逐步解决它们以得到最终的结果。我们可以将所有满足xi ≤ ⌊n/2⌋的整数放入一个子序列A′;将剩余的其他整数放入另外一个序列A′′。根据公式1,如果序列A′ 的长度正好是⌊n/2⌋,这说明前一半的整数已经“<code>满了</code>”,最小的可用整数一定可以在A′′中递归地找到。否则,最小的可用整数可以在A′中找到。总之,通过这一划分,问题的规模减小了。  </p>\n<p>需要注意的是,当我们在子序列A′′ 中递归查找时,边界情况发生了一些变化,我们不再是从0开始寻找最小可用整数,查找的下界变成了⌊n/2⌋ + 1。因此我们的算法应定义为minfree(A, l, u),其中l和u分别是上下界。递归结束的边界条件是当待查找的序列变为空的时候,此时我们只需要返回下界作为结果即可。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">dc_min_free</span><span class=\"params\">(lst)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> binary_search(lst, <span class=\"number\">0</span>, len(lst)<span class=\"number\">-1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">binary_search</span><span class=\"params\">(lst, l, u)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> lst == []:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> l</span><br><span class=\"line\">    m = (l + u ) / <span class=\"number\">2</span></span><br><span class=\"line\">    xs = [x <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> lst <span class=\"keyword\">if</span> x &lt;= m]</span><br><span class=\"line\">    ys = [x <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> lst <span class=\"keyword\">if</span> x &gt; m]</span><br><span class=\"line\">    <span class=\"keyword\">if</span> len(xs) == m - l + <span class=\"number\">1</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> binary_search(ys, m+<span class=\"number\">1</span>, u)</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> binary_search(xs, l, m)</span><br></pre></td></tr></table></figure></p>\n<p>时间复杂度为O(n)，空间复杂度为O(logn)。</p>\n<hr>\n<h1 id=\"丑数-数据结构的威力\"><a href=\"#丑数-数据结构的威力\" class=\"headerlink\" title=\"丑数 数据结构的威力\"></a>丑数 数据结构的威力</h1><p>如果说最小可用ID问题还有一些应用价值,那么接下来这个问题就纯粹是为了“有趣”了。我们要寻找第1500个“丑数”。所谓丑数,就是只含有2、3或5这三个因子的自然数。前三个丑数按照定义分别是2、3和5。数字60 = 2x2x3x5是第25个丑数。数字21 = 3x7 由于含有因子7,所以不是丑数。前10个丑数如下表:2,3,4,5,6,8,9,10,12,15<br>如果我们认为1也是一个合法的丑数,则1就是第一个丑数。  </p>\n<h2 id=\"暴力解法\"><a href=\"#暴力解法\" class=\"headerlink\" title=\"暴力解法\"></a>暴力解法</h2><p>这道题目看起来并不复杂,我们可以从1开始,逐一检查所有自然数,对于每个整数,我们把所有的2、3和5的因子都除去,如果结果是1,则找到了一个丑数,当遇到第n= 1500个丑数时就找到答案了。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">valid</span><span class=\"params\">(x)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> x%<span class=\"number\">2</span>==<span class=\"number\">0</span>:</span><br><span class=\"line\">        x=x/<span class=\"number\">2</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> x%<span class=\"number\">3</span>==<span class=\"number\">0</span>:</span><br><span class=\"line\">        x=x/<span class=\"number\">3</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> x%<span class=\"number\">5</span>==<span class=\"number\">0</span>:</span><br><span class=\"line\">        x=x/<span class=\"number\">5</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> x==<span class=\"number\">1</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_number</span><span class=\"params\">(n)</span>:</span></span><br><span class=\"line\">    x=<span class=\"number\">1</span></span><br><span class=\"line\">    i=<span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"number\">1</span>):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> valid(x):</span><br><span class=\"line\">            i=i+<span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> i==n:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> x</span><br><span class=\"line\">        x=x+<span class=\"number\">1</span>;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"改进一\"><a href=\"#改进一\" class=\"headerlink\" title=\"改进一\"></a>改进一</h2><p>我们的思路是先把1作为唯一的元素放入队列,然后我们不断从队列另一侧取出元素,分别乘以2、3和5,这样就得到了3个新的元素。然后把它们按照大小顺序放入队列。注意,这样产生的整数有可能已经在队列中存在了。这种情况下,我们需要丢弃重复产生的元素。另外新产生的整数还有可能小于队列尾部的某些元素,所以我们在插入时,需要保持它们在队列中的大小顺序。<br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">get_number</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">queue</span>&lt;<span class=\"keyword\">int</span>&gt; Q;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> t;</span><br><span class=\"line\">    Q.push(<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(n &gt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        t=Q.front();</span><br><span class=\"line\">        Q.pop();</span><br><span class=\"line\">        unique_enqueue(Q,<span class=\"number\">2</span>*t);</span><br><span class=\"line\">        unique_enqueue(Q,<span class=\"number\">3</span>*t);</span><br><span class=\"line\">        unique_enqueue(Q,<span class=\"number\">4</span>*t);</span><br><span class=\"line\">        n--;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">unique_enqueue</span><span class=\"params\">(<span class=\"built_in\">queue</span>&lt;<span class=\"keyword\">int</span>&gt; *Q, <span class=\"keyword\">int</span> x)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(i &lt; Q-&gt;size() &amp;&amp; Q[i] &lt; x)&#123;</span><br><span class=\"line\">        i++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(i &lt; Q-&gt;size() &amp;&amp; Q[i]==x)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    insert(Q,i,x);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"改进二\"><a href=\"#改进二\" class=\"headerlink\" title=\"改进二\"></a>改进二</h2><p>我们可以用三个队列来进行改进。这三个队列表示为Q 2 ,Q 3 和Q 5 。它们初<br>始化为Q 2 = {2},Q 3 = {3}和Q 5 = {5}。我们每次从这三个队列的头部选择最小的一个元素x取出,然后进行下面的检查:</p>\n<ul>\n<li>如果x是从Q2取出的,我们将2x加入Q2 ,3x加入Q3 ,5x加入Q5。</li>\n<li>如果x是从Q3取出的,我们只将3x加入Q3,5x加入Q5,而不需要将2x加<br>入Q2。这是因为2x已经在Q3中了。</li>\n<li>如果x是从Q5取出的,我们只将5x加入Q5 ,而不需要处理2x和3x了。</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> Integer;</span><br><span class=\"line\"><span class=\"function\">Integer <span class=\"title\">get_number</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(n==<span class=\"number\">1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"built_in\">queue</span>&lt;Integer&gt; Q2, Q3, Q5;</span><br><span class=\"line\">    Q2.push(<span class=\"number\">2</span>);</span><br><span class=\"line\">    Q3.push(<span class=\"number\">3</span>);</span><br><span class=\"line\">    Q5.push(<span class=\"number\">5</span>);</span><br><span class=\"line\">    Integer x;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(n-- &gt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        x = min(min(Q2.front(), Q3.front()), Q5.front());</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(x==Q2.front()) &#123;</span><br><span class=\"line\">            Q2.pop();</span><br><span class=\"line\">            Q2.push(x∗<span class=\"number\">2</span>);</span><br><span class=\"line\">            Q3.push(x∗<span class=\"number\">3</span>);</span><br><span class=\"line\">            Q5.push(x∗<span class=\"number\">5</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(x==Q3.front()) &#123;</span><br><span class=\"line\">            Q3.pop();</span><br><span class=\"line\">            Q3.push(x∗<span class=\"number\">3</span>);</span><br><span class=\"line\">            Q5.push(x∗<span class=\"number\">5</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            Q5.pop();</span><br><span class=\"line\">            Q5.push(x∗<span class=\"number\">5</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"改进三\"><a href=\"#改进三\" class=\"headerlink\" title=\"改进三\"></a>改进三</h2><p>首先，第一个丑数为“1”，后面的每一个丑数都是有前一个丑数乘2、3、5或7而来，那么后一个丑数就是前一个乘这四个数得到的最小值，for example：第一个：1，第二个：1*2、1*3、1*5或1*7，显然为2，第三个：2*2,1*3,1*5或1*7，显然是3，第四个：2*2,,2*3,1*5,1*7为4，第五个：3*2,2*3,1*5,1*7……  </p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> a[<span class=\"number\">5850</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n=<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> p2,p3,p5;</span><br><span class=\"line\">    p2=p3=p5=<span class=\"number\">1</span>;</span><br><span class=\"line\">    a[<span class=\"number\">1</span>]=<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(n&lt;<span class=\"number\">5843</span>)<span class=\"comment\">//枚举5842个丑数，放在数组a里。</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        a[++n]=min4(<span class=\"number\">2</span>*a[p2],<span class=\"number\">3</span>*a[p3],<span class=\"number\">5</span>*a[p5]);<span class=\"comment\">//从现在枚举的3个丑数里，先选择小的放在a里。</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(a[n]==<span class=\"number\">2</span>*a[p2])p2++;<span class=\"comment\">//如果a[n]==2*a[p2],2*a[p2]可能是吧a[n]枚举出的数，这样p2++,也可能是重复的枚举，这样也是p2++,总之p2++。</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(a[n]==<span class=\"number\">3</span>*a[p3])p3++;<span class=\"comment\">//同理。</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(a[n]==<span class=\"number\">5</span>*a[p5])p5++;<span class=\"comment\">//同理。</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,&amp;n)&amp;&amp;n)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>,a[n]);<span class=\"comment\">//要谁找谁。</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h1 id=\"最小可用ID-算法的威力\"><a href=\"#最小可用ID-算法的威力\" class=\"headerlink\" title=\"最小可用ID 算法的威力\"></a>最小可用ID 算法的威力</h1><p>题目：系统中每一个ID具有独特性，有些ID处于使用的状态，有些ID可以分配给新的用户，现在的问题是，怎么样找到最小的可用ID呢？<br>当前正在使用的ID： </p>\n<blockquote>\n<p>[18, 4, 8, 9, 16, 1, 14, 7, 19, 3, 0, 5, 2, 11, 6]  </p>\n</blockquote>","more":"<h2 id=\"解法一：暴力搜索\"><a href=\"#解法一：暴力搜索\" class=\"headerlink\" title=\"解法一：暴力搜索\"></a>解法一：暴力搜索</h2><p>我们立即可以写出下面的解法：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">brute_force</span> <span class=\"params\">( lst )</span>:</span></span><br><span class=\"line\">    i = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> <span class=\"keyword\">True</span> :</span><br><span class=\"line\">    <span class=\"keyword\">if</span> i <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> lst :</span><br><span class=\"line\">        <span class=\"keyword\">return</span> i</span><br><span class=\"line\">    i = i + <span class=\"number\">1</span></span><br></pre></td></tr></table></figure></p>\n<p>在个解法在一个几百万个ID系统中表现的性能很差，需要O(N*N)的时间。  </p>\n<h2 id=\"解法二：时间优化\"><a href=\"#解法二：时间优化\" class=\"headerlink\" title=\"解法二：时间优化\"></a>解法二：时间优化</h2><p>改进这一解法的关键基于这一事实:对于任何n个非负整数x 1 , x 2 , …, x n ,如果存在小于n的可用整数,必然存在某个x i 不在[0, n)这个范围内。否则这些整数一定是0, 1, …, n − 1的某个排列,这种情况下,最小的可用整数是n。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">min_free</span><span class=\"params\">(A)</span>:</span></span><br><span class=\"line\">    n = len(A)</span><br><span class=\"line\">    a = [<span class=\"number\">0</span>]*(n+<span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> A:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> x &lt; n:</span><br><span class=\"line\">            a[x] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a.index(<span class=\"number\">0</span>);</span><br></pre></td></tr></table></figure></p>\n<p>缺点：空间上有浪费。</p>\n<h2 id=\"解法三：分而治之\"><a href=\"#解法三：分而治之\" class=\"headerlink\" title=\"解法三：分而治之\"></a>解法三：分而治之</h2><p>我们在速度上的改进是以空间上的消耗为代价的。由于维护了一个长度为n的标志数组,当n很大时,空间上的性能就成了新的瓶颈。分而治之的典型策略是将问题分解为若干规模较小的子问题,然后逐步解决它们以得到最终的结果。我们可以将所有满足xi ≤ ⌊n/2⌋的整数放入一个子序列A′;将剩余的其他整数放入另外一个序列A′′。根据公式1,如果序列A′ 的长度正好是⌊n/2⌋,这说明前一半的整数已经“<code>满了</code>”,最小的可用整数一定可以在A′′中递归地找到。否则,最小的可用整数可以在A′中找到。总之,通过这一划分,问题的规模减小了。  </p>\n<p>需要注意的是,当我们在子序列A′′ 中递归查找时,边界情况发生了一些变化,我们不再是从0开始寻找最小可用整数,查找的下界变成了⌊n/2⌋ + 1。因此我们的算法应定义为minfree(A, l, u),其中l和u分别是上下界。递归结束的边界条件是当待查找的序列变为空的时候,此时我们只需要返回下界作为结果即可。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">dc_min_free</span><span class=\"params\">(lst)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> binary_search(lst, <span class=\"number\">0</span>, len(lst)<span class=\"number\">-1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">binary_search</span><span class=\"params\">(lst, l, u)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> lst == []:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> l</span><br><span class=\"line\">    m = (l + u ) / <span class=\"number\">2</span></span><br><span class=\"line\">    xs = [x <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> lst <span class=\"keyword\">if</span> x &lt;= m]</span><br><span class=\"line\">    ys = [x <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> lst <span class=\"keyword\">if</span> x &gt; m]</span><br><span class=\"line\">    <span class=\"keyword\">if</span> len(xs) == m - l + <span class=\"number\">1</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> binary_search(ys, m+<span class=\"number\">1</span>, u)</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> binary_search(xs, l, m)</span><br></pre></td></tr></table></figure></p>\n<p>时间复杂度为O(n)，空间复杂度为O(logn)。</p>\n<hr>\n<h1 id=\"丑数-数据结构的威力\"><a href=\"#丑数-数据结构的威力\" class=\"headerlink\" title=\"丑数 数据结构的威力\"></a>丑数 数据结构的威力</h1><p>如果说最小可用ID问题还有一些应用价值,那么接下来这个问题就纯粹是为了“有趣”了。我们要寻找第1500个“丑数”。所谓丑数,就是只含有2、3或5这三个因子的自然数。前三个丑数按照定义分别是2、3和5。数字60 = 2x2x3x5是第25个丑数。数字21 = 3x7 由于含有因子7,所以不是丑数。前10个丑数如下表:2,3,4,5,6,8,9,10,12,15<br>如果我们认为1也是一个合法的丑数,则1就是第一个丑数。  </p>\n<h2 id=\"暴力解法\"><a href=\"#暴力解法\" class=\"headerlink\" title=\"暴力解法\"></a>暴力解法</h2><p>这道题目看起来并不复杂,我们可以从1开始,逐一检查所有自然数,对于每个整数,我们把所有的2、3和5的因子都除去,如果结果是1,则找到了一个丑数,当遇到第n= 1500个丑数时就找到答案了。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">valid</span><span class=\"params\">(x)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> x%<span class=\"number\">2</span>==<span class=\"number\">0</span>:</span><br><span class=\"line\">        x=x/<span class=\"number\">2</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> x%<span class=\"number\">3</span>==<span class=\"number\">0</span>:</span><br><span class=\"line\">        x=x/<span class=\"number\">3</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> x%<span class=\"number\">5</span>==<span class=\"number\">0</span>:</span><br><span class=\"line\">        x=x/<span class=\"number\">5</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> x==<span class=\"number\">1</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_number</span><span class=\"params\">(n)</span>:</span></span><br><span class=\"line\">    x=<span class=\"number\">1</span></span><br><span class=\"line\">    i=<span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"number\">1</span>):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> valid(x):</span><br><span class=\"line\">            i=i+<span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> i==n:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> x</span><br><span class=\"line\">        x=x+<span class=\"number\">1</span>;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"改进一\"><a href=\"#改进一\" class=\"headerlink\" title=\"改进一\"></a>改进一</h2><p>我们的思路是先把1作为唯一的元素放入队列,然后我们不断从队列另一侧取出元素,分别乘以2、3和5,这样就得到了3个新的元素。然后把它们按照大小顺序放入队列。注意,这样产生的整数有可能已经在队列中存在了。这种情况下,我们需要丢弃重复产生的元素。另外新产生的整数还有可能小于队列尾部的某些元素,所以我们在插入时,需要保持它们在队列中的大小顺序。<br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">get_number</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">queue</span>&lt;<span class=\"keyword\">int</span>&gt; Q;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> t;</span><br><span class=\"line\">    Q.push(<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(n &gt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        t=Q.front();</span><br><span class=\"line\">        Q.pop();</span><br><span class=\"line\">        unique_enqueue(Q,<span class=\"number\">2</span>*t);</span><br><span class=\"line\">        unique_enqueue(Q,<span class=\"number\">3</span>*t);</span><br><span class=\"line\">        unique_enqueue(Q,<span class=\"number\">4</span>*t);</span><br><span class=\"line\">        n--;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">unique_enqueue</span><span class=\"params\">(<span class=\"built_in\">queue</span>&lt;<span class=\"keyword\">int</span>&gt; *Q, <span class=\"keyword\">int</span> x)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(i &lt; Q-&gt;size() &amp;&amp; Q[i] &lt; x)&#123;</span><br><span class=\"line\">        i++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(i &lt; Q-&gt;size() &amp;&amp; Q[i]==x)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    insert(Q,i,x);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"改进二\"><a href=\"#改进二\" class=\"headerlink\" title=\"改进二\"></a>改进二</h2><p>我们可以用三个队列来进行改进。这三个队列表示为Q 2 ,Q 3 和Q 5 。它们初<br>始化为Q 2 = {2},Q 3 = {3}和Q 5 = {5}。我们每次从这三个队列的头部选择最小的一个元素x取出,然后进行下面的检查:</p>\n<ul>\n<li>如果x是从Q2取出的,我们将2x加入Q2 ,3x加入Q3 ,5x加入Q5。</li>\n<li>如果x是从Q3取出的,我们只将3x加入Q3,5x加入Q5,而不需要将2x加<br>入Q2。这是因为2x已经在Q3中了。</li>\n<li>如果x是从Q5取出的,我们只将5x加入Q5 ,而不需要处理2x和3x了。</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> Integer;</span><br><span class=\"line\"><span class=\"function\">Integer <span class=\"title\">get_number</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(n==<span class=\"number\">1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"built_in\">queue</span>&lt;Integer&gt; Q2, Q3, Q5;</span><br><span class=\"line\">    Q2.push(<span class=\"number\">2</span>);</span><br><span class=\"line\">    Q3.push(<span class=\"number\">3</span>);</span><br><span class=\"line\">    Q5.push(<span class=\"number\">5</span>);</span><br><span class=\"line\">    Integer x;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(n-- &gt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        x = min(min(Q2.front(), Q3.front()), Q5.front());</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(x==Q2.front()) &#123;</span><br><span class=\"line\">            Q2.pop();</span><br><span class=\"line\">            Q2.push(x∗<span class=\"number\">2</span>);</span><br><span class=\"line\">            Q3.push(x∗<span class=\"number\">3</span>);</span><br><span class=\"line\">            Q5.push(x∗<span class=\"number\">5</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(x==Q3.front()) &#123;</span><br><span class=\"line\">            Q3.pop();</span><br><span class=\"line\">            Q3.push(x∗<span class=\"number\">3</span>);</span><br><span class=\"line\">            Q5.push(x∗<span class=\"number\">5</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            Q5.pop();</span><br><span class=\"line\">            Q5.push(x∗<span class=\"number\">5</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"改进三\"><a href=\"#改进三\" class=\"headerlink\" title=\"改进三\"></a>改进三</h2><p>首先，第一个丑数为“1”，后面的每一个丑数都是有前一个丑数乘2、3、5或7而来，那么后一个丑数就是前一个乘这四个数得到的最小值，for example：第一个：1，第二个：1*2、1*3、1*5或1*7，显然为2，第三个：2*2,1*3,1*5或1*7，显然是3，第四个：2*2,,2*3,1*5,1*7为4，第五个：3*2,2*3,1*5,1*7……  </p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> a[<span class=\"number\">5850</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n=<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> p2,p3,p5;</span><br><span class=\"line\">    p2=p3=p5=<span class=\"number\">1</span>;</span><br><span class=\"line\">    a[<span class=\"number\">1</span>]=<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(n&lt;<span class=\"number\">5843</span>)<span class=\"comment\">//枚举5842个丑数，放在数组a里。</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        a[++n]=min4(<span class=\"number\">2</span>*a[p2],<span class=\"number\">3</span>*a[p3],<span class=\"number\">5</span>*a[p5]);<span class=\"comment\">//从现在枚举的3个丑数里，先选择小的放在a里。</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(a[n]==<span class=\"number\">2</span>*a[p2])p2++;<span class=\"comment\">//如果a[n]==2*a[p2],2*a[p2]可能是吧a[n]枚举出的数，这样p2++,也可能是重复的枚举，这样也是p2++,总之p2++。</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(a[n]==<span class=\"number\">3</span>*a[p3])p3++;<span class=\"comment\">//同理。</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(a[n]==<span class=\"number\">5</span>*a[p5])p5++;<span class=\"comment\">//同理。</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,&amp;n)&amp;&amp;n)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>,a[n]);<span class=\"comment\">//要谁找谁。</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"python装饰器学习","date":"2017-11-13T06:59:19.000Z","_content":"\n## 1 装饰器初试\n\n### 1.1 装饰器基础知识\n\n装饰器是可调用的对象，其参数是另一个函数（被装饰的函数）。装饰器可能会处理被装饰的函数，然后把它返回，或者将其替换成另一个函数或可调用对象。\n<!--more-->\n\n```python\n@decorate\ndef target():\n    print('running target()')\n```\n\n上述代码和下述代码的写法一样\n\n\n```python\ndef target():\n    print('running target()')\ntarget = decorate(target)\n```\n\n两种写法的最终结果一样：上述两个代码片段执行完毕后得到的target不一定是原来那个target 函数，而是decorate(target)返回的函数。\n\n\n```python\ndef deco(func):\n    def inner():\n        print('running inner()')\n    return inner\n@deco\ndef target():\n    print('running target()')\n```\n\n\n```python\ntarget()\nprint(target)\n```\n\n    running inner()\n    <function deco.<locals>.inner at 0x0000016C2B20AA60>\n\n\n严格来说，装饰器只是语法糖。如前所示，装饰器可以像常规的可调用对象那样调用，其参数是另一个函数。有时，这样做更方便，尤其是做元编程（在运行时改变程序的行为）时。综上，装饰器的一大特性是，能把被装饰的函数替换成其他函数。第二个特性是，装饰器在加载模块时立即执行。下一节会说明。\n\n### 1.2 Python何时执行装饰器\n\n装饰器的一个关键特性是， 它们在被装饰的函数定义之后立即运行。 这通常是在导入时(即 Python 加载模块时） ， 如 registration.py 模块所示。\n\n```python\n# BEGIN REGISTRATION\n\nregistry = []  # <1>\n\ndef register(func):  # <2>\n    print('running register(%s)' % func)  # <3>\n    registry.append(func)  # <4>\n    return func  # <5>\n\n@register  # <6>\ndef f1():\n    print('running f1()')\n\n@register\ndef f2():\n    print('running f2()')\n\ndef f3():  # <7>\n    print('running f3()')\n\ndef main():  # <8>\n    print('running main()')\n    print('registry ->', registry)\n    f1()\n    f2()\n    f3()\n\nif __name__=='__main__':\n    main()  # <9>\n\n# END REGISTRATION\n```\n\n    running register(<function f1 at 0x0000016C2B20A378>)\n    running register(<function f2 at 0x0000016C2B23B048>)\n    running main()\n    registry -> [<function f1 at 0x0000016C2B20A378>, <function f2 at 0x0000016C2B23B048>]\n    running f1()\n    running f2()\n    running f3()\n\n\n注意， register 在模块中其他函数之前运行（两次） 。 调用 register 时， 传给它的参数是被装饰的函数， 例如 <function f1 at 0x100631bf8>。\n加载模块后， registry 中有两个被装饰函数的引用： f1 和 f2。 这两个函数， 以及 f3，只在 main 明确调用它们时才执行。如果导入 registration.py 模块（不作为脚本运行） ， 输出如下：\n\n\n```python\n>>> import registration\nrunning register(<function f1 at 0x10063b1e0>)\nrunning register(<function f2 at 0x10063b268>)\n```\n\n此时查看 registry 的值， 得到的输出如下\n\n\n```python\n>>> registration.registry\n[<function f1 at 0x10063b1e0>, <function f2 at 0x10063b268>]\n```\n\n主要想强调， 函数装饰器在导入模块时立即执行， 而被装饰的函数只在明确调用时运行。 这突出了 Python 程序员所说的导入时和运行时之间的区别。\n\n### 1.3 装饰器改进“策略”模式\n\n定义体中有函数的名称， 但是 best_promo 用来判断哪个折扣幅度最大的 promos 列表中也有函数名称。 这种重复是个问题， 因为新增策略函数后可能会忘记把它添加到 promos 列表中， 导致 best_promo 忽略新策略， 而且不报错， 为系统引入了不易察觉的缺陷。 \n\n`实例 1` promos 列表中使用promotion装饰器填充\n\n\n```python\n# strategy_best4.py\n# Strategy pattern -- function-based implementation\n# selecting best promotion from list of functions\n# registered by a decorator\n\n\"\"\"\n    >>> joe = Customer('John Doe', 0)\n    >>> ann = Customer('Ann Smith', 1100)\n    >>> cart = [LineItem('banana', 4, .5),\n    ...         LineItem('apple', 10, 1.5),\n    ...         LineItem('watermellon', 5, 5.0)]\n    >>> Order(joe, cart, fidelity)\n    <Order total: 42.00 due: 42.00>\n    >>> Order(ann, cart, fidelity)\n    <Order total: 42.00 due: 39.90>\n    >>> banana_cart = [LineItem('banana', 30, .5),\n    ...                LineItem('apple', 10, 1.5)]\n    >>> Order(joe, banana_cart, bulk_item)\n    <Order total: 30.00 due: 28.50>\n    >>> long_order = [LineItem(str(item_code), 1, 1.0)\n    ...               for item_code in range(10)]\n    >>> Order(joe, long_order, large_order)\n    <Order total: 10.00 due: 9.30>\n    >>> Order(joe, cart, large_order)\n    <Order total: 42.00 due: 42.00>\n\n# BEGIN STRATEGY_BEST_TESTS\n\n    >>> Order(joe, long_order, best_promo)\n    <Order total: 10.00 due: 9.30>\n    >>> Order(joe, banana_cart, best_promo)\n    <Order total: 30.00 due: 28.50>\n    >>> Order(ann, cart, best_promo)\n    <Order total: 42.00 due: 39.90>\n\n# END STRATEGY_BEST_TESTS\n\"\"\"\n\nfrom collections import namedtuple\n\nCustomer = namedtuple('Customer', 'name fidelity')\n\n\nclass LineItem:\n\n    def __init__(self, product, quantity, price):\n        self.product = product\n        self.quantity = quantity\n        self.price = price\n\n    def total(self):\n        return self.price * self.quantity\n\n\nclass Order:  # the Context\n\n    def __init__(self, customer, cart, promotion=None):\n        self.customer = customer\n        self.cart = list(cart)\n        self.promotion = promotion\n\n    def total(self):\n        if not hasattr(self, '__total'):\n            self.__total = sum(item.total() for item in self.cart)\n        return self.__total\n\n    def due(self):\n        if self.promotion is None:\n            discount = 0\n        else:\n            discount = self.promotion(self)\n        return self.total() - discount\n\n    def __repr__(self):\n        fmt = '<Order total: {:.2f} due: {:.2f}>'\n        return fmt.format(self.total(), self.due())\n\n# BEGIN STRATEGY_BEST4\n\npromos = []  # <1>\n\ndef promotion(promo_func):  # <2>\n    promos.append(promo_func)\n    return promo_func\n\n@promotion  # <3>\ndef fidelity(order):\n    \"\"\"5% discount for customers with 1000 or more fidelity points\"\"\"\n    return order.total() * .05 if order.customer.fidelity >= 1000 else 0\n\n@promotion\ndef bulk_item(order):\n    \"\"\"10% discount for each LineItem with 20 or more units\"\"\"\n    discount = 0\n    for item in order.cart:\n        if item.quantity >= 20:\n            discount += item.total() * .1\n    return discount\n\n@promotion\ndef large_order(order):\n    \"\"\"7% discount for orders with 10 or more distinct items\"\"\"\n    distinct_items = {item.product for item in order.cart}\n    if len(distinct_items) >= 10:\n        return order.total() * .07\n    return 0\n\ndef best_promo(order):  # <4>\n    \"\"\"Select best discount available\n    \"\"\"\n    return max(promo(order) for promo in promos)\n\n# END STRATEGY_BEST4\n```\n\n`优点如下：`\n\n- 促销策略函数无需使用特殊的名称（即不用以 _promo 结尾）。\n- @promotion 装饰器突出了被装饰的函数的作用， 还便于临时禁用某个促销策略： 只需把装饰器注释掉。\n- 促销折扣策略可以在其他模块中定义， 在系统中的任何地方都行， 只要使用@promotion 装饰即可。\n\n## 2 闭包\n\n### 2.1 闭包的使用\n\n在博客圈， 人们有时会把闭包和匿名函数弄混。 这是有历史原因的： 在函数内部定义函数不常见， 直到开始使用匿名函数才会这样做。 而且， 只有涉及嵌套函数时才有闭包问题。因此， 很多人是同时知道这两个概念的。其实， 闭包指延伸了作用域的函数， 其中包含函数定义体中引用、 但是不在定义体中定义的非全局变量。 函数是不是匿名的没有关系， 关键是它能访问定义体之外定义的非全局变量。\n\n`1、闭包实现`\n\n\n```python\n\"\"\"\n>>> avg = make_averager()\n>>> avg(10)\n10.0\n>>> avg(11)\n10.5\n>>> avg(12)\n11.0\n>>> avg.__code__.co_varnames\n('new_value', 'total')\n>>> avg.__code__.co_freevars\n('series',)\n>>> avg.__closure__  # doctest: +ELLIPSIS\n(<cell at 0x...: list object at 0x...>,)\n>>> avg.__closure__[0].cell_contents\n[10, 11, 12]\n\"\"\"\n\nDEMO = \"\"\"\n>>> avg.__closure__\n(<cell at 0x107a44f78: list object at 0x107a91a48>,)\n\"\"\"\n\n\ndef make_averager():\n    series = []\n\n    def averager(new_value):\n        series.append(new_value)\n        total = sum(series)\n        return total/len(series)\n\n    return averager\n\n```\n\n`2、初学者实现`\n\n\n```python\n\"\"\"\n>>> avg = Averager()\n>>> avg(10)\n10.0\n>>> avg(11)\n10.5\n>>> avg(12)\n11.0\n\n\"\"\"\n\n\nclass Averager():\n\n    def __init__(self):\n        self.series = []\n\n    def __call__(self, new_value):\n        self.series.append(new_value)\n        total = sum(self.series)\n        return total/len(self.series)\n\n```\n\n综上， 闭包是一种函数， 它会保留定义函数时存在的自由变量的绑定， 这样调用函数时，虽然定义作用域不可用了， 但是仍能使用那些绑定。注意， 只有嵌套在其他函数中的函数才可能需要处理不在全局作用域中的外部变量。\n\n### 2.2 nonloacl声明\n\n前面实现 make_averager 函数的方法效率不高。在示例中，我们把所有值存储在历史数列中，然后在每次调用averager时使用sum求和。更好的实现方式是，只存储目前的总值和元素个数，然后使用这两个数计算均值。\n\n\n```python\ndef make_averager():\n    count = 0\n    total = 0\n    def averager(new_value):\n        count += 1\n        total += new_value\n        return total / count\n    return averager\n```\n\n尝试使用示例定义的函数， 会得到如下结果：\n\n\n```python\n>>> avg = make_averager()\n>>> avg(10)\nTraceback (most recent call last):\n...\nUnboundLocalError: local variable 'count' referenced before assignment\n>>>\n```\n\n问题是， 当 count 是数字或任何不可变类型时， count += 1 语句的作用其实与 count= count + 1 一样。 因此， 我们在 averager 的定义体中为 count 赋值了， 这会把count 变成局部变量。 total 变量也受这个问题影响。\n\n前面没有遇到这个问题， 因为我们没有给 series 赋值， 我们只是调用series.append， 并把它传给 sum 和 len。 也就是说， 我们利用了列表是可变的对象这一事实。但是对数字、 字符串、 元组等不可变类型来说， 只能读取， 不能更新。 如果尝试重新绑定， 例如 count = count + 1， 其实会隐式创建局部变量 count。 这样， count 就不是自由变量了， 因此不会保存在闭包中。\n\n为了解决这个问题， Python 3 引入了 nonlocal 声明。 它的作用是把变量标记为自由变量， 即使在函数中为变量赋予新值了， 也会变成自由变量。 如果为 nonlocal 声明的变量赋予新值， 闭包中保存的绑定会更新。 最新版 make_averager 的正确实现如示例所示。\n\n\n```python\ndef make_averager():\n    count = 0\n    total = 0\n    def averager(new_value):\n        nonlocal count, total\n        count += 1\n        total += new_value\n        return total / count\n    return averager\n```\n\n## 3 实现一个简单的装饰器\n\n 定义了一个装饰器， 它会在每次调用被装饰的函数时计时， 然后把经过的时间、 传入的参数和调用的结果打印出来。\n\n\n```python\n# clockdeco.py\nimport time\ndef clock(func):\n    def clocked(*args):\n        t0 = time.time()\n        result = func(*args)\n        elapsed = time.time()-t0 #闭包中包含自由变量func()\n        name = func.__name__\n        arg_str = ', '.join(repr(arg) for arg in args)\n        print('[%0.8fs] %s(%s) -> $r' % \\\n              (elapsed, name, arg_str, result))\n        return result\n    return clocked #返回内部函数，取代被装饰的函数\n```\n\n使用clock装饰器\n\n\n```python\n# clockdeco_demo.py\nimport time\nimport clockdeco import clock\n\n@clock\ndef snooze(seconds):\n    time.sleep(seconds)\n\n@clock\ndef factorial(n):\n    return 1 if n < 2 else n*factorial(n-1)\n\nif __name__ == '__main__':\n    print('*' * 40, 'Calling snozzen(.123)')\n    snooze(.123)\n    print('*' * 40, 'Calling factorial(6)')\n    factorial(6)\n```\n\n\n```python\n$ python3 clockdeco_demo.py\n**************************************** Calling snooze(123)\n[0.12405610s] snooze(.123) -> None\n**************************************** Calling factorial(6)\n[0.00000191s] factorial(1) -> 1\n[0.00004911s] factorial(2) -> 2\n[0.00008488s] factorial(3) -> 6\n[0.00013208s] factorial(4) -> 24\n[0.00019193s] factorial(5) -> 120\n[0.00026107s] factorial(6) -> 720\n6! = 720\n```\n\n这是装饰器的典型行为： 把被装饰的函数替换成新函数， 二者接受相同的参数， 而且（通常） 返回被装饰的函数本该返回的值， 同时还会做些额外操作。\n\n示例中实现的 clock 装饰器有几个缺点：不支持关键字参数，而且遮盖了被装饰函数的 \\__name\\__ 和 \\__doc\\__ 属性。下面使用 functools.wraps 装饰器把相关的属性从 func 复制到 clocked 中。此外，这个新版还能正确处理关键字参数。\n\n\n```python\n# clockdeco2.py\nimport time\nimport functools\ndef clock(func):\n    @functions.wraps(func)\n    def clocked(*args, **kwargs):\n        t0 = time.time()\n        result = func(*args)\n        elapsed = time.time()-t0 #闭包中包含自由变量func()\n        name = func.__name__\n        arg_lst = []\n        if args:\n            arg_lst.append(', '.join(repr(arg) for arg in args))\n        if kwargs:\n            pairs = ['%s=%r' % (k, w) for k, w in sorted(kwargs.items())]\n            arg_lst.append(', '.join(pairs))\n        arg_str = ', '.join(arg_lst)\n        print('[%0.8fs] %s(%s) -> %r ' % (elapsed, name, arg_str, result))\n    return result\n```\n\n## 4 参数化装饰器\n\n解析源码中的装饰器时， Python 把被装饰的函数作为第一个参数传给装饰器函数。 那怎么让装饰器接受其他参数呢？ 答案是： 创建一个装饰器工厂函数， 把参数传给它， 返回一个装饰器， 然后再把它应用到要装饰的函数上。 \n\n### 4.1 一个参数化的注册装饰器\n\n为了便于启用或禁用 register 执行的函数注册功能， 我们为它提供一个可选active参数， 设为 False 时， 不注册被装饰的函数。 实现方式参见示例。从概念上看， 这个新的 register 函数不是装饰器， 而是装饰器工厂函数。 调用它会返回真正的装饰器，这才是应用到目标函数上的装饰器。\n\n\n```python\n# BEGIN REGISTRATION_PARAM\nregistry = set()  # <1>\n\ndef register(active=True):  # <2>\n    def decorate(func):  # <3>\n        print('running register(active=%s)->decorate(%s)'\n              % (active, func))\n        if active:   # <4>\n            registry.add(func)\n        else:\n            registry.discard(func)  # <5>\n\n        return func  # <6>\n    return decorate  # <7>\n\n@register(active=False)  # <8>\ndef f1():\n    print('running f1()')\n\n@register()  # <9>\ndef f2():\n    print('running f2()')\n\ndef f3():\n    print('running f3()')\n\nprint(registry)\n# END REGISTRATION_PARAM\n```\n\n代码在 registration_param.py 模块中。 如果导入， 得到的结果如下：\n\n\n```python\n>>> import registration_param\nrunning register(active=False)->decorate(<function f1 at 0x10063c1e0>)\nrunning register(active=True)->decorate(<function f2 at 0x10063c268>)\n>>> registration_param.registry\n{<function f2 at 0x10063c268>}\n```\n\n### 4.2 参数化clock装饰器\n\n探讨 clock 装饰器， 为它添加一个功能： 让用户传入一个格式字符串， 控制被装饰函数的输出。\n\n\n```python\n# clockdeco_param.py\n\n\"\"\"\n>>> snooze(.1)  # doctest: +ELLIPSIS\n[0.101...s] snooze(0.1) -> None\n>>> clock('{name}: {elapsed}')(time.sleep)(.2)  # doctest: +ELLIPSIS\nsleep: 0.20...\n>>> clock('{name}({args}) dt={elapsed:0.3f}s')(time.sleep)(.2)\nsleep(0.2) dt=0.201s\n\"\"\"\n\n# BEGIN CLOCKDECO_PARAM\nimport time\n\nDEFAULT_FMT = '[{elapsed:0.8f}s] {name}({args}) -> {result}'\n\ndef clock(fmt=DEFAULT_FMT):  # <1>\n    def decorate(func):      # <2>\n        def clocked(*_args): # <3>\n            t0 = time.time()\n            _result = func(*_args)  # <4>\n            elapsed = time.time() - t0\n            name = func.__name__\n            args = ', '.join(repr(arg) for arg in _args)  # <5>\n            result = repr(_result)  # <6>\n            print(fmt.format(**locals()))  # <7>\n            return _result  # <8>\n        return clocked  # <9>\n    return decorate  # <10>\n\nif __name__ == '__main__':\n\n    @clock()  # <11>\n    def snooze(seconds):\n        time.sleep(seconds)\n\n    for i in range(3):\n        snooze(.123)\n\n# END CLOCKDECO_PARAM\n\n```\n\n\n```python\n$ python3 clockdeco_param.py\n[0.12412500s] snooze(0.123) -> None\n[0.12411904s] snooze(0.123) -> None\n[0.12410498s] snooze(0.123) -> None\n```\n\n使用了 clockdeco_param 模块中的新功能， 随后是两个模块输出的结果。\n\n\n```python\nimport time\nfrom clockdeco_param import clock\n\n@clock('{name}: {elapsed}s')\ndef snooze(seconds):\n    time.sleep(seconds)\n\nfor i in range(3):\n    snooze(.123)\n```\n\n\n```python\n$ python3 clockdeco_param_demo1.py\nsnooze: 0.12414693832397461s\nsnooze: 0.1241159439086914s\nsnooze: 0.12412118911743164s\n```","source":"_posts/decorate.md","raw":"---\ntitle: python装饰器学习\ndate: 2017-11-13 14:59:19\ntags: python\ncategories: python学习\n---\n\n## 1 装饰器初试\n\n### 1.1 装饰器基础知识\n\n装饰器是可调用的对象，其参数是另一个函数（被装饰的函数）。装饰器可能会处理被装饰的函数，然后把它返回，或者将其替换成另一个函数或可调用对象。\n<!--more-->\n\n```python\n@decorate\ndef target():\n    print('running target()')\n```\n\n上述代码和下述代码的写法一样\n\n\n```python\ndef target():\n    print('running target()')\ntarget = decorate(target)\n```\n\n两种写法的最终结果一样：上述两个代码片段执行完毕后得到的target不一定是原来那个target 函数，而是decorate(target)返回的函数。\n\n\n```python\ndef deco(func):\n    def inner():\n        print('running inner()')\n    return inner\n@deco\ndef target():\n    print('running target()')\n```\n\n\n```python\ntarget()\nprint(target)\n```\n\n    running inner()\n    <function deco.<locals>.inner at 0x0000016C2B20AA60>\n\n\n严格来说，装饰器只是语法糖。如前所示，装饰器可以像常规的可调用对象那样调用，其参数是另一个函数。有时，这样做更方便，尤其是做元编程（在运行时改变程序的行为）时。综上，装饰器的一大特性是，能把被装饰的函数替换成其他函数。第二个特性是，装饰器在加载模块时立即执行。下一节会说明。\n\n### 1.2 Python何时执行装饰器\n\n装饰器的一个关键特性是， 它们在被装饰的函数定义之后立即运行。 这通常是在导入时(即 Python 加载模块时） ， 如 registration.py 模块所示。\n\n```python\n# BEGIN REGISTRATION\n\nregistry = []  # <1>\n\ndef register(func):  # <2>\n    print('running register(%s)' % func)  # <3>\n    registry.append(func)  # <4>\n    return func  # <5>\n\n@register  # <6>\ndef f1():\n    print('running f1()')\n\n@register\ndef f2():\n    print('running f2()')\n\ndef f3():  # <7>\n    print('running f3()')\n\ndef main():  # <8>\n    print('running main()')\n    print('registry ->', registry)\n    f1()\n    f2()\n    f3()\n\nif __name__=='__main__':\n    main()  # <9>\n\n# END REGISTRATION\n```\n\n    running register(<function f1 at 0x0000016C2B20A378>)\n    running register(<function f2 at 0x0000016C2B23B048>)\n    running main()\n    registry -> [<function f1 at 0x0000016C2B20A378>, <function f2 at 0x0000016C2B23B048>]\n    running f1()\n    running f2()\n    running f3()\n\n\n注意， register 在模块中其他函数之前运行（两次） 。 调用 register 时， 传给它的参数是被装饰的函数， 例如 <function f1 at 0x100631bf8>。\n加载模块后， registry 中有两个被装饰函数的引用： f1 和 f2。 这两个函数， 以及 f3，只在 main 明确调用它们时才执行。如果导入 registration.py 模块（不作为脚本运行） ， 输出如下：\n\n\n```python\n>>> import registration\nrunning register(<function f1 at 0x10063b1e0>)\nrunning register(<function f2 at 0x10063b268>)\n```\n\n此时查看 registry 的值， 得到的输出如下\n\n\n```python\n>>> registration.registry\n[<function f1 at 0x10063b1e0>, <function f2 at 0x10063b268>]\n```\n\n主要想强调， 函数装饰器在导入模块时立即执行， 而被装饰的函数只在明确调用时运行。 这突出了 Python 程序员所说的导入时和运行时之间的区别。\n\n### 1.3 装饰器改进“策略”模式\n\n定义体中有函数的名称， 但是 best_promo 用来判断哪个折扣幅度最大的 promos 列表中也有函数名称。 这种重复是个问题， 因为新增策略函数后可能会忘记把它添加到 promos 列表中， 导致 best_promo 忽略新策略， 而且不报错， 为系统引入了不易察觉的缺陷。 \n\n`实例 1` promos 列表中使用promotion装饰器填充\n\n\n```python\n# strategy_best4.py\n# Strategy pattern -- function-based implementation\n# selecting best promotion from list of functions\n# registered by a decorator\n\n\"\"\"\n    >>> joe = Customer('John Doe', 0)\n    >>> ann = Customer('Ann Smith', 1100)\n    >>> cart = [LineItem('banana', 4, .5),\n    ...         LineItem('apple', 10, 1.5),\n    ...         LineItem('watermellon', 5, 5.0)]\n    >>> Order(joe, cart, fidelity)\n    <Order total: 42.00 due: 42.00>\n    >>> Order(ann, cart, fidelity)\n    <Order total: 42.00 due: 39.90>\n    >>> banana_cart = [LineItem('banana', 30, .5),\n    ...                LineItem('apple', 10, 1.5)]\n    >>> Order(joe, banana_cart, bulk_item)\n    <Order total: 30.00 due: 28.50>\n    >>> long_order = [LineItem(str(item_code), 1, 1.0)\n    ...               for item_code in range(10)]\n    >>> Order(joe, long_order, large_order)\n    <Order total: 10.00 due: 9.30>\n    >>> Order(joe, cart, large_order)\n    <Order total: 42.00 due: 42.00>\n\n# BEGIN STRATEGY_BEST_TESTS\n\n    >>> Order(joe, long_order, best_promo)\n    <Order total: 10.00 due: 9.30>\n    >>> Order(joe, banana_cart, best_promo)\n    <Order total: 30.00 due: 28.50>\n    >>> Order(ann, cart, best_promo)\n    <Order total: 42.00 due: 39.90>\n\n# END STRATEGY_BEST_TESTS\n\"\"\"\n\nfrom collections import namedtuple\n\nCustomer = namedtuple('Customer', 'name fidelity')\n\n\nclass LineItem:\n\n    def __init__(self, product, quantity, price):\n        self.product = product\n        self.quantity = quantity\n        self.price = price\n\n    def total(self):\n        return self.price * self.quantity\n\n\nclass Order:  # the Context\n\n    def __init__(self, customer, cart, promotion=None):\n        self.customer = customer\n        self.cart = list(cart)\n        self.promotion = promotion\n\n    def total(self):\n        if not hasattr(self, '__total'):\n            self.__total = sum(item.total() for item in self.cart)\n        return self.__total\n\n    def due(self):\n        if self.promotion is None:\n            discount = 0\n        else:\n            discount = self.promotion(self)\n        return self.total() - discount\n\n    def __repr__(self):\n        fmt = '<Order total: {:.2f} due: {:.2f}>'\n        return fmt.format(self.total(), self.due())\n\n# BEGIN STRATEGY_BEST4\n\npromos = []  # <1>\n\ndef promotion(promo_func):  # <2>\n    promos.append(promo_func)\n    return promo_func\n\n@promotion  # <3>\ndef fidelity(order):\n    \"\"\"5% discount for customers with 1000 or more fidelity points\"\"\"\n    return order.total() * .05 if order.customer.fidelity >= 1000 else 0\n\n@promotion\ndef bulk_item(order):\n    \"\"\"10% discount for each LineItem with 20 or more units\"\"\"\n    discount = 0\n    for item in order.cart:\n        if item.quantity >= 20:\n            discount += item.total() * .1\n    return discount\n\n@promotion\ndef large_order(order):\n    \"\"\"7% discount for orders with 10 or more distinct items\"\"\"\n    distinct_items = {item.product for item in order.cart}\n    if len(distinct_items) >= 10:\n        return order.total() * .07\n    return 0\n\ndef best_promo(order):  # <4>\n    \"\"\"Select best discount available\n    \"\"\"\n    return max(promo(order) for promo in promos)\n\n# END STRATEGY_BEST4\n```\n\n`优点如下：`\n\n- 促销策略函数无需使用特殊的名称（即不用以 _promo 结尾）。\n- @promotion 装饰器突出了被装饰的函数的作用， 还便于临时禁用某个促销策略： 只需把装饰器注释掉。\n- 促销折扣策略可以在其他模块中定义， 在系统中的任何地方都行， 只要使用@promotion 装饰即可。\n\n## 2 闭包\n\n### 2.1 闭包的使用\n\n在博客圈， 人们有时会把闭包和匿名函数弄混。 这是有历史原因的： 在函数内部定义函数不常见， 直到开始使用匿名函数才会这样做。 而且， 只有涉及嵌套函数时才有闭包问题。因此， 很多人是同时知道这两个概念的。其实， 闭包指延伸了作用域的函数， 其中包含函数定义体中引用、 但是不在定义体中定义的非全局变量。 函数是不是匿名的没有关系， 关键是它能访问定义体之外定义的非全局变量。\n\n`1、闭包实现`\n\n\n```python\n\"\"\"\n>>> avg = make_averager()\n>>> avg(10)\n10.0\n>>> avg(11)\n10.5\n>>> avg(12)\n11.0\n>>> avg.__code__.co_varnames\n('new_value', 'total')\n>>> avg.__code__.co_freevars\n('series',)\n>>> avg.__closure__  # doctest: +ELLIPSIS\n(<cell at 0x...: list object at 0x...>,)\n>>> avg.__closure__[0].cell_contents\n[10, 11, 12]\n\"\"\"\n\nDEMO = \"\"\"\n>>> avg.__closure__\n(<cell at 0x107a44f78: list object at 0x107a91a48>,)\n\"\"\"\n\n\ndef make_averager():\n    series = []\n\n    def averager(new_value):\n        series.append(new_value)\n        total = sum(series)\n        return total/len(series)\n\n    return averager\n\n```\n\n`2、初学者实现`\n\n\n```python\n\"\"\"\n>>> avg = Averager()\n>>> avg(10)\n10.0\n>>> avg(11)\n10.5\n>>> avg(12)\n11.0\n\n\"\"\"\n\n\nclass Averager():\n\n    def __init__(self):\n        self.series = []\n\n    def __call__(self, new_value):\n        self.series.append(new_value)\n        total = sum(self.series)\n        return total/len(self.series)\n\n```\n\n综上， 闭包是一种函数， 它会保留定义函数时存在的自由变量的绑定， 这样调用函数时，虽然定义作用域不可用了， 但是仍能使用那些绑定。注意， 只有嵌套在其他函数中的函数才可能需要处理不在全局作用域中的外部变量。\n\n### 2.2 nonloacl声明\n\n前面实现 make_averager 函数的方法效率不高。在示例中，我们把所有值存储在历史数列中，然后在每次调用averager时使用sum求和。更好的实现方式是，只存储目前的总值和元素个数，然后使用这两个数计算均值。\n\n\n```python\ndef make_averager():\n    count = 0\n    total = 0\n    def averager(new_value):\n        count += 1\n        total += new_value\n        return total / count\n    return averager\n```\n\n尝试使用示例定义的函数， 会得到如下结果：\n\n\n```python\n>>> avg = make_averager()\n>>> avg(10)\nTraceback (most recent call last):\n...\nUnboundLocalError: local variable 'count' referenced before assignment\n>>>\n```\n\n问题是， 当 count 是数字或任何不可变类型时， count += 1 语句的作用其实与 count= count + 1 一样。 因此， 我们在 averager 的定义体中为 count 赋值了， 这会把count 变成局部变量。 total 变量也受这个问题影响。\n\n前面没有遇到这个问题， 因为我们没有给 series 赋值， 我们只是调用series.append， 并把它传给 sum 和 len。 也就是说， 我们利用了列表是可变的对象这一事实。但是对数字、 字符串、 元组等不可变类型来说， 只能读取， 不能更新。 如果尝试重新绑定， 例如 count = count + 1， 其实会隐式创建局部变量 count。 这样， count 就不是自由变量了， 因此不会保存在闭包中。\n\n为了解决这个问题， Python 3 引入了 nonlocal 声明。 它的作用是把变量标记为自由变量， 即使在函数中为变量赋予新值了， 也会变成自由变量。 如果为 nonlocal 声明的变量赋予新值， 闭包中保存的绑定会更新。 最新版 make_averager 的正确实现如示例所示。\n\n\n```python\ndef make_averager():\n    count = 0\n    total = 0\n    def averager(new_value):\n        nonlocal count, total\n        count += 1\n        total += new_value\n        return total / count\n    return averager\n```\n\n## 3 实现一个简单的装饰器\n\n 定义了一个装饰器， 它会在每次调用被装饰的函数时计时， 然后把经过的时间、 传入的参数和调用的结果打印出来。\n\n\n```python\n# clockdeco.py\nimport time\ndef clock(func):\n    def clocked(*args):\n        t0 = time.time()\n        result = func(*args)\n        elapsed = time.time()-t0 #闭包中包含自由变量func()\n        name = func.__name__\n        arg_str = ', '.join(repr(arg) for arg in args)\n        print('[%0.8fs] %s(%s) -> $r' % \\\n              (elapsed, name, arg_str, result))\n        return result\n    return clocked #返回内部函数，取代被装饰的函数\n```\n\n使用clock装饰器\n\n\n```python\n# clockdeco_demo.py\nimport time\nimport clockdeco import clock\n\n@clock\ndef snooze(seconds):\n    time.sleep(seconds)\n\n@clock\ndef factorial(n):\n    return 1 if n < 2 else n*factorial(n-1)\n\nif __name__ == '__main__':\n    print('*' * 40, 'Calling snozzen(.123)')\n    snooze(.123)\n    print('*' * 40, 'Calling factorial(6)')\n    factorial(6)\n```\n\n\n```python\n$ python3 clockdeco_demo.py\n**************************************** Calling snooze(123)\n[0.12405610s] snooze(.123) -> None\n**************************************** Calling factorial(6)\n[0.00000191s] factorial(1) -> 1\n[0.00004911s] factorial(2) -> 2\n[0.00008488s] factorial(3) -> 6\n[0.00013208s] factorial(4) -> 24\n[0.00019193s] factorial(5) -> 120\n[0.00026107s] factorial(6) -> 720\n6! = 720\n```\n\n这是装饰器的典型行为： 把被装饰的函数替换成新函数， 二者接受相同的参数， 而且（通常） 返回被装饰的函数本该返回的值， 同时还会做些额外操作。\n\n示例中实现的 clock 装饰器有几个缺点：不支持关键字参数，而且遮盖了被装饰函数的 \\__name\\__ 和 \\__doc\\__ 属性。下面使用 functools.wraps 装饰器把相关的属性从 func 复制到 clocked 中。此外，这个新版还能正确处理关键字参数。\n\n\n```python\n# clockdeco2.py\nimport time\nimport functools\ndef clock(func):\n    @functions.wraps(func)\n    def clocked(*args, **kwargs):\n        t0 = time.time()\n        result = func(*args)\n        elapsed = time.time()-t0 #闭包中包含自由变量func()\n        name = func.__name__\n        arg_lst = []\n        if args:\n            arg_lst.append(', '.join(repr(arg) for arg in args))\n        if kwargs:\n            pairs = ['%s=%r' % (k, w) for k, w in sorted(kwargs.items())]\n            arg_lst.append(', '.join(pairs))\n        arg_str = ', '.join(arg_lst)\n        print('[%0.8fs] %s(%s) -> %r ' % (elapsed, name, arg_str, result))\n    return result\n```\n\n## 4 参数化装饰器\n\n解析源码中的装饰器时， Python 把被装饰的函数作为第一个参数传给装饰器函数。 那怎么让装饰器接受其他参数呢？ 答案是： 创建一个装饰器工厂函数， 把参数传给它， 返回一个装饰器， 然后再把它应用到要装饰的函数上。 \n\n### 4.1 一个参数化的注册装饰器\n\n为了便于启用或禁用 register 执行的函数注册功能， 我们为它提供一个可选active参数， 设为 False 时， 不注册被装饰的函数。 实现方式参见示例。从概念上看， 这个新的 register 函数不是装饰器， 而是装饰器工厂函数。 调用它会返回真正的装饰器，这才是应用到目标函数上的装饰器。\n\n\n```python\n# BEGIN REGISTRATION_PARAM\nregistry = set()  # <1>\n\ndef register(active=True):  # <2>\n    def decorate(func):  # <3>\n        print('running register(active=%s)->decorate(%s)'\n              % (active, func))\n        if active:   # <4>\n            registry.add(func)\n        else:\n            registry.discard(func)  # <5>\n\n        return func  # <6>\n    return decorate  # <7>\n\n@register(active=False)  # <8>\ndef f1():\n    print('running f1()')\n\n@register()  # <9>\ndef f2():\n    print('running f2()')\n\ndef f3():\n    print('running f3()')\n\nprint(registry)\n# END REGISTRATION_PARAM\n```\n\n代码在 registration_param.py 模块中。 如果导入， 得到的结果如下：\n\n\n```python\n>>> import registration_param\nrunning register(active=False)->decorate(<function f1 at 0x10063c1e0>)\nrunning register(active=True)->decorate(<function f2 at 0x10063c268>)\n>>> registration_param.registry\n{<function f2 at 0x10063c268>}\n```\n\n### 4.2 参数化clock装饰器\n\n探讨 clock 装饰器， 为它添加一个功能： 让用户传入一个格式字符串， 控制被装饰函数的输出。\n\n\n```python\n# clockdeco_param.py\n\n\"\"\"\n>>> snooze(.1)  # doctest: +ELLIPSIS\n[0.101...s] snooze(0.1) -> None\n>>> clock('{name}: {elapsed}')(time.sleep)(.2)  # doctest: +ELLIPSIS\nsleep: 0.20...\n>>> clock('{name}({args}) dt={elapsed:0.3f}s')(time.sleep)(.2)\nsleep(0.2) dt=0.201s\n\"\"\"\n\n# BEGIN CLOCKDECO_PARAM\nimport time\n\nDEFAULT_FMT = '[{elapsed:0.8f}s] {name}({args}) -> {result}'\n\ndef clock(fmt=DEFAULT_FMT):  # <1>\n    def decorate(func):      # <2>\n        def clocked(*_args): # <3>\n            t0 = time.time()\n            _result = func(*_args)  # <4>\n            elapsed = time.time() - t0\n            name = func.__name__\n            args = ', '.join(repr(arg) for arg in _args)  # <5>\n            result = repr(_result)  # <6>\n            print(fmt.format(**locals()))  # <7>\n            return _result  # <8>\n        return clocked  # <9>\n    return decorate  # <10>\n\nif __name__ == '__main__':\n\n    @clock()  # <11>\n    def snooze(seconds):\n        time.sleep(seconds)\n\n    for i in range(3):\n        snooze(.123)\n\n# END CLOCKDECO_PARAM\n\n```\n\n\n```python\n$ python3 clockdeco_param.py\n[0.12412500s] snooze(0.123) -> None\n[0.12411904s] snooze(0.123) -> None\n[0.12410498s] snooze(0.123) -> None\n```\n\n使用了 clockdeco_param 模块中的新功能， 随后是两个模块输出的结果。\n\n\n```python\nimport time\nfrom clockdeco_param import clock\n\n@clock('{name}: {elapsed}s')\ndef snooze(seconds):\n    time.sleep(seconds)\n\nfor i in range(3):\n    snooze(.123)\n```\n\n\n```python\n$ python3 clockdeco_param_demo1.py\nsnooze: 0.12414693832397461s\nsnooze: 0.1241159439086914s\nsnooze: 0.12412118911743164s\n```","slug":"decorate","published":1,"updated":"2018-01-02T00:50:36.820Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjbwxj0yt000eh0vo3nshfkrz","content":"<h2 id=\"1-装饰器初试\"><a href=\"#1-装饰器初试\" class=\"headerlink\" title=\"1 装饰器初试\"></a>1 装饰器初试</h2><h3 id=\"1-1-装饰器基础知识\"><a href=\"#1-1-装饰器基础知识\" class=\"headerlink\" title=\"1.1 装饰器基础知识\"></a>1.1 装饰器基础知识</h3><p>装饰器是可调用的对象，其参数是另一个函数（被装饰的函数）。装饰器可能会处理被装饰的函数，然后把它返回，或者将其替换成另一个函数或可调用对象。<br><a id=\"more\"></a></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@decorate</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">target</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    print(<span class=\"string\">'running target()'</span>)</span><br></pre></td></tr></table></figure>\n<p>上述代码和下述代码的写法一样</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">target</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    print(<span class=\"string\">'running target()'</span>)</span><br><span class=\"line\">target = decorate(target)</span><br></pre></td></tr></table></figure>\n<p>两种写法的最终结果一样：上述两个代码片段执行完毕后得到的target不一定是原来那个target 函数，而是decorate(target)返回的函数。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">deco</span><span class=\"params\">(func)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">inner</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">        print(<span class=\"string\">'running inner()'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> inner</span><br><span class=\"line\"><span class=\"meta\">@deco</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">target</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    print(<span class=\"string\">'running target()'</span>)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">target()</span><br><span class=\"line\">print(target)</span><br></pre></td></tr></table></figure>\n<pre><code>running inner()\n&lt;function deco.&lt;locals&gt;.inner at 0x0000016C2B20AA60&gt;\n</code></pre><p>严格来说，装饰器只是语法糖。如前所示，装饰器可以像常规的可调用对象那样调用，其参数是另一个函数。有时，这样做更方便，尤其是做元编程（在运行时改变程序的行为）时。综上，装饰器的一大特性是，能把被装饰的函数替换成其他函数。第二个特性是，装饰器在加载模块时立即执行。下一节会说明。</p>\n<h3 id=\"1-2-Python何时执行装饰器\"><a href=\"#1-2-Python何时执行装饰器\" class=\"headerlink\" title=\"1.2 Python何时执行装饰器\"></a>1.2 Python何时执行装饰器</h3><p>装饰器的一个关键特性是， 它们在被装饰的函数定义之后立即运行。 这通常是在导入时(即 Python 加载模块时） ， 如 registration.py 模块所示。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># BEGIN REGISTRATION</span></span><br><span class=\"line\"></span><br><span class=\"line\">registry = []  <span class=\"comment\"># &lt;1&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">register</span><span class=\"params\">(func)</span>:</span>  <span class=\"comment\"># &lt;2&gt;</span></span><br><span class=\"line\">    print(<span class=\"string\">'running register(%s)'</span> % func)  <span class=\"comment\"># &lt;3&gt;</span></span><br><span class=\"line\">    registry.append(func)  <span class=\"comment\"># &lt;4&gt;</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> func  <span class=\"comment\"># &lt;5&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@register  # &lt;6&gt;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">f1</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    print(<span class=\"string\">'running f1()'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@register</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">f2</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    print(<span class=\"string\">'running f2()'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">f3</span><span class=\"params\">()</span>:</span>  <span class=\"comment\"># &lt;7&gt;</span></span><br><span class=\"line\">    print(<span class=\"string\">'running f3()'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span><span class=\"params\">()</span>:</span>  <span class=\"comment\"># &lt;8&gt;</span></span><br><span class=\"line\">    print(<span class=\"string\">'running main()'</span>)</span><br><span class=\"line\">    print(<span class=\"string\">'registry -&gt;'</span>, registry)</span><br><span class=\"line\">    f1()</span><br><span class=\"line\">    f2()</span><br><span class=\"line\">    f3()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__==<span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    main()  <span class=\"comment\"># &lt;9&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># END REGISTRATION</span></span><br></pre></td></tr></table></figure>\n<pre><code>running register(&lt;function f1 at 0x0000016C2B20A378&gt;)\nrunning register(&lt;function f2 at 0x0000016C2B23B048&gt;)\nrunning main()\nregistry -&gt; [&lt;function f1 at 0x0000016C2B20A378&gt;, &lt;function f2 at 0x0000016C2B23B048&gt;]\nrunning f1()\nrunning f2()\nrunning f3()\n</code></pre><p>注意， register 在模块中其他函数之前运行（两次） 。 调用 register 时， 传给它的参数是被装饰的函数， 例如 <function f1=\"\" at=\"\" 0x100631bf8=\"\">。<br>加载模块后， registry 中有两个被装饰函数的引用： f1 和 f2。 这两个函数， 以及 f3，只在 main 明确调用它们时才执行。如果导入 registration.py 模块（不作为脚本运行） ， 输出如下：</function></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">import</span> registration</span><br><span class=\"line\">running register(&lt;function f1 at <span class=\"number\">0x10063b1e0</span>&gt;)</span><br><span class=\"line\">running register(&lt;function f2 at <span class=\"number\">0x10063b268</span>&gt;)</span><br></pre></td></tr></table></figure>\n<p>此时查看 registry 的值， 得到的输出如下</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>registration.registry</span><br><span class=\"line\">[&lt;function f1 at <span class=\"number\">0x10063b1e0</span>&gt;, &lt;function f2 at <span class=\"number\">0x10063b268</span>&gt;]</span><br></pre></td></tr></table></figure>\n<p>主要想强调， 函数装饰器在导入模块时立即执行， 而被装饰的函数只在明确调用时运行。 这突出了 Python 程序员所说的导入时和运行时之间的区别。</p>\n<h3 id=\"1-3-装饰器改进“策略”模式\"><a href=\"#1-3-装饰器改进“策略”模式\" class=\"headerlink\" title=\"1.3 装饰器改进“策略”模式\"></a>1.3 装饰器改进“策略”模式</h3><p>定义体中有函数的名称， 但是 best_promo 用来判断哪个折扣幅度最大的 promos 列表中也有函数名称。 这种重复是个问题， 因为新增策略函数后可能会忘记把它添加到 promos 列表中， 导致 best_promo 忽略新策略， 而且不报错， 为系统引入了不易察觉的缺陷。 </p>\n<p><code>实例 1</code> promos 列表中使用promotion装饰器填充</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># strategy_best4.py</span></span><br><span class=\"line\"><span class=\"comment\"># Strategy pattern -- function-based implementation</span></span><br><span class=\"line\"><span class=\"comment\"># selecting best promotion from list of functions</span></span><br><span class=\"line\"><span class=\"comment\"># registered by a decorator</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">    &gt;&gt;&gt; joe = Customer('John Doe', 0)</span></span><br><span class=\"line\"><span class=\"string\">    &gt;&gt;&gt; ann = Customer('Ann Smith', 1100)</span></span><br><span class=\"line\"><span class=\"string\">    &gt;&gt;&gt; cart = [LineItem('banana', 4, .5),</span></span><br><span class=\"line\"><span class=\"string\">    ...         LineItem('apple', 10, 1.5),</span></span><br><span class=\"line\"><span class=\"string\">    ...         LineItem('watermellon', 5, 5.0)]</span></span><br><span class=\"line\"><span class=\"string\">    &gt;&gt;&gt; Order(joe, cart, fidelity)</span></span><br><span class=\"line\"><span class=\"string\">    &lt;Order total: 42.00 due: 42.00&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &gt;&gt;&gt; Order(ann, cart, fidelity)</span></span><br><span class=\"line\"><span class=\"string\">    &lt;Order total: 42.00 due: 39.90&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &gt;&gt;&gt; banana_cart = [LineItem('banana', 30, .5),</span></span><br><span class=\"line\"><span class=\"string\">    ...                LineItem('apple', 10, 1.5)]</span></span><br><span class=\"line\"><span class=\"string\">    &gt;&gt;&gt; Order(joe, banana_cart, bulk_item)</span></span><br><span class=\"line\"><span class=\"string\">    &lt;Order total: 30.00 due: 28.50&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &gt;&gt;&gt; long_order = [LineItem(str(item_code), 1, 1.0)</span></span><br><span class=\"line\"><span class=\"string\">    ...               for item_code in range(10)]</span></span><br><span class=\"line\"><span class=\"string\">    &gt;&gt;&gt; Order(joe, long_order, large_order)</span></span><br><span class=\"line\"><span class=\"string\">    &lt;Order total: 10.00 due: 9.30&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &gt;&gt;&gt; Order(joe, cart, large_order)</span></span><br><span class=\"line\"><span class=\"string\">    &lt;Order total: 42.00 due: 42.00&gt;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\"># BEGIN STRATEGY_BEST_TESTS</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    &gt;&gt;&gt; Order(joe, long_order, best_promo)</span></span><br><span class=\"line\"><span class=\"string\">    &lt;Order total: 10.00 due: 9.30&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &gt;&gt;&gt; Order(joe, banana_cart, best_promo)</span></span><br><span class=\"line\"><span class=\"string\">    &lt;Order total: 30.00 due: 28.50&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &gt;&gt;&gt; Order(ann, cart, best_promo)</span></span><br><span class=\"line\"><span class=\"string\">    &lt;Order total: 42.00 due: 39.90&gt;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\"># END STRATEGY_BEST_TESTS</span></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> collections <span class=\"keyword\">import</span> namedtuple</span><br><span class=\"line\"></span><br><span class=\"line\">Customer = namedtuple(<span class=\"string\">'Customer'</span>, <span class=\"string\">'name fidelity'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LineItem</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, product, quantity, price)</span>:</span></span><br><span class=\"line\">        self.product = product</span><br><span class=\"line\">        self.quantity = quantity</span><br><span class=\"line\">        self.price = price</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">total</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.price * self.quantity</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Order</span>:</span>  <span class=\"comment\"># the Context</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, customer, cart, promotion=None)</span>:</span></span><br><span class=\"line\">        self.customer = customer</span><br><span class=\"line\">        self.cart = list(cart)</span><br><span class=\"line\">        self.promotion = promotion</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">total</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> hasattr(self, <span class=\"string\">'__total'</span>):</span><br><span class=\"line\">            self.__total = sum(item.total() <span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> self.cart)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.__total</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">due</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> self.promotion <span class=\"keyword\">is</span> <span class=\"keyword\">None</span>:</span><br><span class=\"line\">            discount = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            discount = self.promotion(self)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.total() - discount</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__repr__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        fmt = <span class=\"string\">'&lt;Order total: &#123;:.2f&#125; due: &#123;:.2f&#125;&gt;'</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> fmt.format(self.total(), self.due())</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># BEGIN STRATEGY_BEST4</span></span><br><span class=\"line\"></span><br><span class=\"line\">promos = []  <span class=\"comment\"># &lt;1&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">promotion</span><span class=\"params\">(promo_func)</span>:</span>  <span class=\"comment\"># &lt;2&gt;</span></span><br><span class=\"line\">    promos.append(promo_func)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> promo_func</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@promotion  # &lt;3&gt;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">fidelity</span><span class=\"params\">(order)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"5% discount for customers with 1000 or more fidelity points\"\"\"</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> order.total() * <span class=\"number\">.05</span> <span class=\"keyword\">if</span> order.customer.fidelity &gt;= <span class=\"number\">1000</span> <span class=\"keyword\">else</span> <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@promotion</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">bulk_item</span><span class=\"params\">(order)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"10% discount for each LineItem with 20 or more units\"\"\"</span></span><br><span class=\"line\">    discount = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> order.cart:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> item.quantity &gt;= <span class=\"number\">20</span>:</span><br><span class=\"line\">            discount += item.total() * <span class=\"number\">.1</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> discount</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@promotion</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">large_order</span><span class=\"params\">(order)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"7% discount for orders with 10 or more distinct items\"\"\"</span></span><br><span class=\"line\">    distinct_items = &#123;item.product <span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> order.cart&#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> len(distinct_items) &gt;= <span class=\"number\">10</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> order.total() * <span class=\"number\">.07</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">best_promo</span><span class=\"params\">(order)</span>:</span>  <span class=\"comment\"># &lt;4&gt;</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"Select best discount available</span></span><br><span class=\"line\"><span class=\"string\">    \"\"\"</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> max(promo(order) <span class=\"keyword\">for</span> promo <span class=\"keyword\">in</span> promos)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># END STRATEGY_BEST4</span></span><br></pre></td></tr></table></figure>\n<p><code>优点如下：</code></p>\n<ul>\n<li>促销策略函数无需使用特殊的名称（即不用以 _promo 结尾）。</li>\n<li>@promotion 装饰器突出了被装饰的函数的作用， 还便于临时禁用某个促销策略： 只需把装饰器注释掉。</li>\n<li>促销折扣策略可以在其他模块中定义， 在系统中的任何地方都行， 只要使用@promotion 装饰即可。</li>\n</ul>\n<h2 id=\"2-闭包\"><a href=\"#2-闭包\" class=\"headerlink\" title=\"2 闭包\"></a>2 闭包</h2><h3 id=\"2-1-闭包的使用\"><a href=\"#2-1-闭包的使用\" class=\"headerlink\" title=\"2.1 闭包的使用\"></a>2.1 闭包的使用</h3><p>在博客圈， 人们有时会把闭包和匿名函数弄混。 这是有历史原因的： 在函数内部定义函数不常见， 直到开始使用匿名函数才会这样做。 而且， 只有涉及嵌套函数时才有闭包问题。因此， 很多人是同时知道这两个概念的。其实， 闭包指延伸了作用域的函数， 其中包含函数定义体中引用、 但是不在定义体中定义的非全局变量。 函数是不是匿名的没有关系， 关键是它能访问定义体之外定义的非全局变量。</p>\n<p><code>1、闭包实现</code></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\"><span class=\"meta\">&gt;&gt;&gt; </span>avg = make_averager()</span></span><br><span class=\"line\"><span class=\"string\"><span class=\"meta\">&gt;&gt;&gt; </span>avg(10)</span></span><br><span class=\"line\"><span class=\"string\">10.0</span></span><br><span class=\"line\"><span class=\"string\"><span class=\"meta\">&gt;&gt;&gt; </span>avg(11)</span></span><br><span class=\"line\"><span class=\"string\">10.5</span></span><br><span class=\"line\"><span class=\"string\"><span class=\"meta\">&gt;&gt;&gt; </span>avg(12)</span></span><br><span class=\"line\"><span class=\"string\">11.0</span></span><br><span class=\"line\"><span class=\"string\"><span class=\"meta\">&gt;&gt;&gt; </span>avg.__code__.co_varnames</span></span><br><span class=\"line\"><span class=\"string\">('new_value', 'total')</span></span><br><span class=\"line\"><span class=\"string\"><span class=\"meta\">&gt;&gt;&gt; </span>avg.__code__.co_freevars</span></span><br><span class=\"line\"><span class=\"string\">('series',)</span></span><br><span class=\"line\"><span class=\"string\"><span class=\"meta\">&gt;&gt;&gt; </span>avg.__closure__  # doctest: +ELLIPSIS</span></span><br><span class=\"line\"><span class=\"string\">(&lt;cell at 0x...: list object at 0x...&gt;,)</span></span><br><span class=\"line\"><span class=\"string\"><span class=\"meta\">&gt;&gt;&gt; </span>avg.__closure__[0].cell_contents</span></span><br><span class=\"line\"><span class=\"string\">[10, 11, 12]</span></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">DEMO = <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\"><span class=\"meta\">&gt;&gt;&gt; </span>avg.__closure__</span></span><br><span class=\"line\"><span class=\"string\">(&lt;cell at 0x107a44f78: list object at 0x107a91a48&gt;,)</span></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">make_averager</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    series = []</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">averager</span><span class=\"params\">(new_value)</span>:</span></span><br><span class=\"line\">        series.append(new_value)</span><br><span class=\"line\">        total = sum(series)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> total/len(series)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> averager</span><br></pre></td></tr></table></figure>\n<p><code>2、初学者实现</code></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\"><span class=\"meta\">&gt;&gt;&gt; </span>avg = Averager()</span></span><br><span class=\"line\"><span class=\"string\"><span class=\"meta\">&gt;&gt;&gt; </span>avg(10)</span></span><br><span class=\"line\"><span class=\"string\">10.0</span></span><br><span class=\"line\"><span class=\"string\"><span class=\"meta\">&gt;&gt;&gt; </span>avg(11)</span></span><br><span class=\"line\"><span class=\"string\">10.5</span></span><br><span class=\"line\"><span class=\"string\"><span class=\"meta\">&gt;&gt;&gt; </span>avg(12)</span></span><br><span class=\"line\"><span class=\"string\">11.0</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Averager</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        self.series = []</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__call__</span><span class=\"params\">(self, new_value)</span>:</span></span><br><span class=\"line\">        self.series.append(new_value)</span><br><span class=\"line\">        total = sum(self.series)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> total/len(self.series)</span><br></pre></td></tr></table></figure>\n<p>综上， 闭包是一种函数， 它会保留定义函数时存在的自由变量的绑定， 这样调用函数时，虽然定义作用域不可用了， 但是仍能使用那些绑定。注意， 只有嵌套在其他函数中的函数才可能需要处理不在全局作用域中的外部变量。</p>\n<h3 id=\"2-2-nonloacl声明\"><a href=\"#2-2-nonloacl声明\" class=\"headerlink\" title=\"2.2 nonloacl声明\"></a>2.2 nonloacl声明</h3><p>前面实现 make_averager 函数的方法效率不高。在示例中，我们把所有值存储在历史数列中，然后在每次调用averager时使用sum求和。更好的实现方式是，只存储目前的总值和元素个数，然后使用这两个数计算均值。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">make_averager</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    count = <span class=\"number\">0</span></span><br><span class=\"line\">    total = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">averager</span><span class=\"params\">(new_value)</span>:</span></span><br><span class=\"line\">        count += <span class=\"number\">1</span></span><br><span class=\"line\">        total += new_value</span><br><span class=\"line\">        <span class=\"keyword\">return</span> total / count</span><br><span class=\"line\">    <span class=\"keyword\">return</span> averager</span><br></pre></td></tr></table></figure>\n<p>尝试使用示例定义的函数， 会得到如下结果：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>avg = make_averager()</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>avg(<span class=\"number\">10</span>)</span><br><span class=\"line\">Traceback (most recent call last):</span><br><span class=\"line\">...</span><br><span class=\"line\">UnboundLocalError: local variable <span class=\"string\">'count'</span> referenced before assignment</span><br><span class=\"line\">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure>\n<p>问题是， 当 count 是数字或任何不可变类型时， count += 1 语句的作用其实与 count= count + 1 一样。 因此， 我们在 averager 的定义体中为 count 赋值了， 这会把count 变成局部变量。 total 变量也受这个问题影响。</p>\n<p>前面没有遇到这个问题， 因为我们没有给 series 赋值， 我们只是调用series.append， 并把它传给 sum 和 len。 也就是说， 我们利用了列表是可变的对象这一事实。但是对数字、 字符串、 元组等不可变类型来说， 只能读取， 不能更新。 如果尝试重新绑定， 例如 count = count + 1， 其实会隐式创建局部变量 count。 这样， count 就不是自由变量了， 因此不会保存在闭包中。</p>\n<p>为了解决这个问题， Python 3 引入了 nonlocal 声明。 它的作用是把变量标记为自由变量， 即使在函数中为变量赋予新值了， 也会变成自由变量。 如果为 nonlocal 声明的变量赋予新值， 闭包中保存的绑定会更新。 最新版 make_averager 的正确实现如示例所示。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">make_averager</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    count = <span class=\"number\">0</span></span><br><span class=\"line\">    total = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">averager</span><span class=\"params\">(new_value)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">nonlocal</span> count, total</span><br><span class=\"line\">        count += <span class=\"number\">1</span></span><br><span class=\"line\">        total += new_value</span><br><span class=\"line\">        <span class=\"keyword\">return</span> total / count</span><br><span class=\"line\">    <span class=\"keyword\">return</span> averager</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-实现一个简单的装饰器\"><a href=\"#3-实现一个简单的装饰器\" class=\"headerlink\" title=\"3 实现一个简单的装饰器\"></a>3 实现一个简单的装饰器</h2><p> 定义了一个装饰器， 它会在每次调用被装饰的函数时计时， 然后把经过的时间、 传入的参数和调用的结果打印出来。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># clockdeco.py</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">clock</span><span class=\"params\">(func)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">clocked</span><span class=\"params\">(*args)</span>:</span></span><br><span class=\"line\">        t0 = time.time()</span><br><span class=\"line\">        result = func(*args)</span><br><span class=\"line\">        elapsed = time.time()-t0 <span class=\"comment\">#闭包中包含自由变量func()</span></span><br><span class=\"line\">        name = func.__name__</span><br><span class=\"line\">        arg_str = <span class=\"string\">', '</span>.join(repr(arg) <span class=\"keyword\">for</span> arg <span class=\"keyword\">in</span> args)</span><br><span class=\"line\">        print(<span class=\"string\">'[%0.8fs] %s(%s) -&gt; $r'</span> % \\</span><br><span class=\"line\">              (elapsed, name, arg_str, result))</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result</span><br><span class=\"line\">    <span class=\"keyword\">return</span> clocked <span class=\"comment\">#返回内部函数，取代被装饰的函数</span></span><br></pre></td></tr></table></figure>\n<p>使用clock装饰器</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># clockdeco_demo.py</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">import</span> clockdeco <span class=\"keyword\">import</span> clock</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@clock</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">snooze</span><span class=\"params\">(seconds)</span>:</span></span><br><span class=\"line\">    time.sleep(seconds)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@clock</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">factorial</span><span class=\"params\">(n)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span> <span class=\"keyword\">if</span> n &lt; <span class=\"number\">2</span> <span class=\"keyword\">else</span> n*factorial(n<span class=\"number\">-1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    print(<span class=\"string\">'*'</span> * <span class=\"number\">40</span>, <span class=\"string\">'Calling snozzen(.123)'</span>)</span><br><span class=\"line\">    snooze(<span class=\"number\">.123</span>)</span><br><span class=\"line\">    print(<span class=\"string\">'*'</span> * <span class=\"number\">40</span>, <span class=\"string\">'Calling factorial(6)'</span>)</span><br><span class=\"line\">    factorial(<span class=\"number\">6</span>)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ python3 clockdeco_demo.py</span><br><span class=\"line\">**************************************** Calling snooze(<span class=\"number\">123</span>)</span><br><span class=\"line\">[0.12405610s] snooze(.123) -&gt; None</span><br><span class=\"line\">**************************************** Calling factorial(<span class=\"number\">6</span>)</span><br><span class=\"line\">[0.00000191s] factorial(1) -&gt; 1</span><br><span class=\"line\">[0.00004911s] factorial(2) -&gt; 2</span><br><span class=\"line\">[0.00008488s] factorial(3) -&gt; 6</span><br><span class=\"line\">[0.00013208s] factorial(4) -&gt; 24</span><br><span class=\"line\">[0.00019193s] factorial(5) -&gt; 120</span><br><span class=\"line\">[0.00026107s] factorial(6) -&gt; 720</span><br><span class=\"line\"><span class=\"number\">6</span>! = <span class=\"number\">720</span></span><br></pre></td></tr></table></figure>\n<p>这是装饰器的典型行为： 把被装饰的函数替换成新函数， 二者接受相同的参数， 而且（通常） 返回被装饰的函数本该返回的值， 同时还会做些额外操作。</p>\n<p>示例中实现的 clock 装饰器有几个缺点：不支持关键字参数，而且遮盖了被装饰函数的 __name__ 和 __doc__ 属性。下面使用 functools.wraps 装饰器把相关的属性从 func 复制到 clocked 中。此外，这个新版还能正确处理关键字参数。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># clockdeco2.py</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">import</span> functools</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">clock</span><span class=\"params\">(func)</span>:</span></span><br><span class=\"line\"><span class=\"meta\">    @functions.wraps(func)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">clocked</span><span class=\"params\">(*args, **kwargs)</span>:</span></span><br><span class=\"line\">        t0 = time.time()</span><br><span class=\"line\">        result = func(*args)</span><br><span class=\"line\">        elapsed = time.time()-t0 <span class=\"comment\">#闭包中包含自由变量func()</span></span><br><span class=\"line\">        name = func.__name__</span><br><span class=\"line\">        arg_lst = []</span><br><span class=\"line\">        <span class=\"keyword\">if</span> args:</span><br><span class=\"line\">            arg_lst.append(<span class=\"string\">', '</span>.join(repr(arg) <span class=\"keyword\">for</span> arg <span class=\"keyword\">in</span> args))</span><br><span class=\"line\">        <span class=\"keyword\">if</span> kwargs:</span><br><span class=\"line\">            pairs = [<span class=\"string\">'%s=%r'</span> % (k, w) <span class=\"keyword\">for</span> k, w <span class=\"keyword\">in</span> sorted(kwargs.items())]</span><br><span class=\"line\">            arg_lst.append(<span class=\"string\">', '</span>.join(pairs))</span><br><span class=\"line\">        arg_str = <span class=\"string\">', '</span>.join(arg_lst)</span><br><span class=\"line\">        print(<span class=\"string\">'[%0.8fs] %s(%s) -&gt; %r '</span> % (elapsed, name, arg_str, result))</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result</span><br></pre></td></tr></table></figure>\n<h2 id=\"4-参数化装饰器\"><a href=\"#4-参数化装饰器\" class=\"headerlink\" title=\"4 参数化装饰器\"></a>4 参数化装饰器</h2><p>解析源码中的装饰器时， Python 把被装饰的函数作为第一个参数传给装饰器函数。 那怎么让装饰器接受其他参数呢？ 答案是： 创建一个装饰器工厂函数， 把参数传给它， 返回一个装饰器， 然后再把它应用到要装饰的函数上。 </p>\n<h3 id=\"4-1-一个参数化的注册装饰器\"><a href=\"#4-1-一个参数化的注册装饰器\" class=\"headerlink\" title=\"4.1 一个参数化的注册装饰器\"></a>4.1 一个参数化的注册装饰器</h3><p>为了便于启用或禁用 register 执行的函数注册功能， 我们为它提供一个可选active参数， 设为 False 时， 不注册被装饰的函数。 实现方式参见示例。从概念上看， 这个新的 register 函数不是装饰器， 而是装饰器工厂函数。 调用它会返回真正的装饰器，这才是应用到目标函数上的装饰器。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># BEGIN REGISTRATION_PARAM</span></span><br><span class=\"line\">registry = set()  <span class=\"comment\"># &lt;1&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">register</span><span class=\"params\">(active=True)</span>:</span>  <span class=\"comment\"># &lt;2&gt;</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">decorate</span><span class=\"params\">(func)</span>:</span>  <span class=\"comment\"># &lt;3&gt;</span></span><br><span class=\"line\">        print(<span class=\"string\">'running register(active=%s)-&gt;decorate(%s)'</span></span><br><span class=\"line\">              % (active, func))</span><br><span class=\"line\">        <span class=\"keyword\">if</span> active:   <span class=\"comment\"># &lt;4&gt;</span></span><br><span class=\"line\">            registry.add(func)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            registry.discard(func)  <span class=\"comment\"># &lt;5&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> func  <span class=\"comment\"># &lt;6&gt;</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> decorate  <span class=\"comment\"># &lt;7&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@register(active=False)  # &lt;8&gt;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">f1</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    print(<span class=\"string\">'running f1()'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@register()  # &lt;9&gt;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">f2</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    print(<span class=\"string\">'running f2()'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">f3</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    print(<span class=\"string\">'running f3()'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">print(registry)</span><br><span class=\"line\"><span class=\"comment\"># END REGISTRATION_PARAM</span></span><br></pre></td></tr></table></figure>\n<p>代码在 registration_param.py 模块中。 如果导入， 得到的结果如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">import</span> registration_param</span><br><span class=\"line\">running register(active=False)-&gt;decorate(&lt;function f1 at 0x10063c1e0&gt;)</span><br><span class=\"line\">running register(active=True)-&gt;decorate(&lt;function f2 at 0x10063c268&gt;)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>registration_param.registry</span><br><span class=\"line\">&#123;&lt;function f2 at <span class=\"number\">0x10063c268</span>&gt;&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"4-2-参数化clock装饰器\"><a href=\"#4-2-参数化clock装饰器\" class=\"headerlink\" title=\"4.2 参数化clock装饰器\"></a>4.2 参数化clock装饰器</h3><p>探讨 clock 装饰器， 为它添加一个功能： 让用户传入一个格式字符串， 控制被装饰函数的输出。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># clockdeco_param.py</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\"><span class=\"meta\">&gt;&gt;&gt; </span>snooze(.1)  # doctest: +ELLIPSIS</span></span><br><span class=\"line\"><span class=\"string\">[0.101...s] snooze(0.1) -&gt; None</span></span><br><span class=\"line\"><span class=\"string\"><span class=\"meta\">&gt;&gt;&gt; </span>clock('&#123;name&#125;: &#123;elapsed&#125;')(time.sleep)(.2)  # doctest: +ELLIPSIS</span></span><br><span class=\"line\"><span class=\"string\">sleep: 0.20...</span></span><br><span class=\"line\"><span class=\"string\"><span class=\"meta\">&gt;&gt;&gt; </span>clock('&#123;name&#125;(&#123;args&#125;) dt=&#123;elapsed:0.3f&#125;s')(time.sleep)(.2)</span></span><br><span class=\"line\"><span class=\"string\">sleep(0.2) dt=0.201s</span></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># BEGIN CLOCKDECO_PARAM</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"></span><br><span class=\"line\">DEFAULT_FMT = <span class=\"string\">'[&#123;elapsed:0.8f&#125;s] &#123;name&#125;(&#123;args&#125;) -&gt; &#123;result&#125;'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">clock</span><span class=\"params\">(fmt=DEFAULT_FMT)</span>:</span>  <span class=\"comment\"># &lt;1&gt;</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">decorate</span><span class=\"params\">(func)</span>:</span>      <span class=\"comment\"># &lt;2&gt;</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">clocked</span><span class=\"params\">(*_args)</span>:</span> <span class=\"comment\"># &lt;3&gt;</span></span><br><span class=\"line\">            t0 = time.time()</span><br><span class=\"line\">            _result = func(*_args)  <span class=\"comment\"># &lt;4&gt;</span></span><br><span class=\"line\">            elapsed = time.time() - t0</span><br><span class=\"line\">            name = func.__name__</span><br><span class=\"line\">            args = <span class=\"string\">', '</span>.join(repr(arg) <span class=\"keyword\">for</span> arg <span class=\"keyword\">in</span> _args)  <span class=\"comment\"># &lt;5&gt;</span></span><br><span class=\"line\">            result = repr(_result)  <span class=\"comment\"># &lt;6&gt;</span></span><br><span class=\"line\">            print(fmt.format(**locals()))  <span class=\"comment\"># &lt;7&gt;</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> _result  <span class=\"comment\"># &lt;8&gt;</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> clocked  <span class=\"comment\"># &lt;9&gt;</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> decorate  <span class=\"comment\"># &lt;10&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @clock()  # &lt;11&gt;</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">snooze</span><span class=\"params\">(seconds)</span>:</span></span><br><span class=\"line\">        time.sleep(seconds)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">3</span>):</span><br><span class=\"line\">        snooze(<span class=\"number\">.123</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># END CLOCKDECO_PARAM</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ python3 clockdeco_param.py</span><br><span class=\"line\">[0.12412500s] snooze(0.123) -&gt; None</span><br><span class=\"line\">[0.12411904s] snooze(0.123) -&gt; None</span><br><span class=\"line\">[0.12410498s] snooze(0.123) -&gt; None</span><br></pre></td></tr></table></figure>\n<p>使用了 clockdeco_param 模块中的新功能， 随后是两个模块输出的结果。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">from</span> clockdeco_param <span class=\"keyword\">import</span> clock</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@clock('&#123;name&#125;: &#123;elapsed&#125;s')</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">snooze</span><span class=\"params\">(seconds)</span>:</span></span><br><span class=\"line\">    time.sleep(seconds)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">3</span>):</span><br><span class=\"line\">    snooze(<span class=\"number\">.123</span>)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ python3 clockdeco_param_demo1.py</span><br><span class=\"line\">snooze: <span class=\"number\">0.12414693832397461</span>s</span><br><span class=\"line\">snooze: <span class=\"number\">0.1241159439086914</span>s</span><br><span class=\"line\">snooze: <span class=\"number\">0.12412118911743164</span>s</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<h2 id=\"1-装饰器初试\"><a href=\"#1-装饰器初试\" class=\"headerlink\" title=\"1 装饰器初试\"></a>1 装饰器初试</h2><h3 id=\"1-1-装饰器基础知识\"><a href=\"#1-1-装饰器基础知识\" class=\"headerlink\" title=\"1.1 装饰器基础知识\"></a>1.1 装饰器基础知识</h3><p>装饰器是可调用的对象，其参数是另一个函数（被装饰的函数）。装饰器可能会处理被装饰的函数，然后把它返回，或者将其替换成另一个函数或可调用对象。<br>","more":"</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@decorate</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">target</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    print(<span class=\"string\">'running target()'</span>)</span><br></pre></td></tr></table></figure>\n<p>上述代码和下述代码的写法一样</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">target</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    print(<span class=\"string\">'running target()'</span>)</span><br><span class=\"line\">target = decorate(target)</span><br></pre></td></tr></table></figure>\n<p>两种写法的最终结果一样：上述两个代码片段执行完毕后得到的target不一定是原来那个target 函数，而是decorate(target)返回的函数。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">deco</span><span class=\"params\">(func)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">inner</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">        print(<span class=\"string\">'running inner()'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> inner</span><br><span class=\"line\"><span class=\"meta\">@deco</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">target</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    print(<span class=\"string\">'running target()'</span>)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">target()</span><br><span class=\"line\">print(target)</span><br></pre></td></tr></table></figure>\n<pre><code>running inner()\n&lt;function deco.&lt;locals&gt;.inner at 0x0000016C2B20AA60&gt;\n</code></pre><p>严格来说，装饰器只是语法糖。如前所示，装饰器可以像常规的可调用对象那样调用，其参数是另一个函数。有时，这样做更方便，尤其是做元编程（在运行时改变程序的行为）时。综上，装饰器的一大特性是，能把被装饰的函数替换成其他函数。第二个特性是，装饰器在加载模块时立即执行。下一节会说明。</p>\n<h3 id=\"1-2-Python何时执行装饰器\"><a href=\"#1-2-Python何时执行装饰器\" class=\"headerlink\" title=\"1.2 Python何时执行装饰器\"></a>1.2 Python何时执行装饰器</h3><p>装饰器的一个关键特性是， 它们在被装饰的函数定义之后立即运行。 这通常是在导入时(即 Python 加载模块时） ， 如 registration.py 模块所示。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># BEGIN REGISTRATION</span></span><br><span class=\"line\"></span><br><span class=\"line\">registry = []  <span class=\"comment\"># &lt;1&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">register</span><span class=\"params\">(func)</span>:</span>  <span class=\"comment\"># &lt;2&gt;</span></span><br><span class=\"line\">    print(<span class=\"string\">'running register(%s)'</span> % func)  <span class=\"comment\"># &lt;3&gt;</span></span><br><span class=\"line\">    registry.append(func)  <span class=\"comment\"># &lt;4&gt;</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> func  <span class=\"comment\"># &lt;5&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@register  # &lt;6&gt;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">f1</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    print(<span class=\"string\">'running f1()'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@register</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">f2</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    print(<span class=\"string\">'running f2()'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">f3</span><span class=\"params\">()</span>:</span>  <span class=\"comment\"># &lt;7&gt;</span></span><br><span class=\"line\">    print(<span class=\"string\">'running f3()'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span><span class=\"params\">()</span>:</span>  <span class=\"comment\"># &lt;8&gt;</span></span><br><span class=\"line\">    print(<span class=\"string\">'running main()'</span>)</span><br><span class=\"line\">    print(<span class=\"string\">'registry -&gt;'</span>, registry)</span><br><span class=\"line\">    f1()</span><br><span class=\"line\">    f2()</span><br><span class=\"line\">    f3()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__==<span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    main()  <span class=\"comment\"># &lt;9&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># END REGISTRATION</span></span><br></pre></td></tr></table></figure>\n<pre><code>running register(&lt;function f1 at 0x0000016C2B20A378&gt;)\nrunning register(&lt;function f2 at 0x0000016C2B23B048&gt;)\nrunning main()\nregistry -&gt; [&lt;function f1 at 0x0000016C2B20A378&gt;, &lt;function f2 at 0x0000016C2B23B048&gt;]\nrunning f1()\nrunning f2()\nrunning f3()\n</code></pre><p>注意， register 在模块中其他函数之前运行（两次） 。 调用 register 时， 传给它的参数是被装饰的函数， 例如 <function f1=\"\" at=\"\" 0x100631bf8=\"\">。<br>加载模块后， registry 中有两个被装饰函数的引用： f1 和 f2。 这两个函数， 以及 f3，只在 main 明确调用它们时才执行。如果导入 registration.py 模块（不作为脚本运行） ， 输出如下：</function></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">import</span> registration</span><br><span class=\"line\">running register(&lt;function f1 at <span class=\"number\">0x10063b1e0</span>&gt;)</span><br><span class=\"line\">running register(&lt;function f2 at <span class=\"number\">0x10063b268</span>&gt;)</span><br></pre></td></tr></table></figure>\n<p>此时查看 registry 的值， 得到的输出如下</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>registration.registry</span><br><span class=\"line\">[&lt;function f1 at <span class=\"number\">0x10063b1e0</span>&gt;, &lt;function f2 at <span class=\"number\">0x10063b268</span>&gt;]</span><br></pre></td></tr></table></figure>\n<p>主要想强调， 函数装饰器在导入模块时立即执行， 而被装饰的函数只在明确调用时运行。 这突出了 Python 程序员所说的导入时和运行时之间的区别。</p>\n<h3 id=\"1-3-装饰器改进“策略”模式\"><a href=\"#1-3-装饰器改进“策略”模式\" class=\"headerlink\" title=\"1.3 装饰器改进“策略”模式\"></a>1.3 装饰器改进“策略”模式</h3><p>定义体中有函数的名称， 但是 best_promo 用来判断哪个折扣幅度最大的 promos 列表中也有函数名称。 这种重复是个问题， 因为新增策略函数后可能会忘记把它添加到 promos 列表中， 导致 best_promo 忽略新策略， 而且不报错， 为系统引入了不易察觉的缺陷。 </p>\n<p><code>实例 1</code> promos 列表中使用promotion装饰器填充</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># strategy_best4.py</span></span><br><span class=\"line\"><span class=\"comment\"># Strategy pattern -- function-based implementation</span></span><br><span class=\"line\"><span class=\"comment\"># selecting best promotion from list of functions</span></span><br><span class=\"line\"><span class=\"comment\"># registered by a decorator</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">    &gt;&gt;&gt; joe = Customer('John Doe', 0)</span></span><br><span class=\"line\"><span class=\"string\">    &gt;&gt;&gt; ann = Customer('Ann Smith', 1100)</span></span><br><span class=\"line\"><span class=\"string\">    &gt;&gt;&gt; cart = [LineItem('banana', 4, .5),</span></span><br><span class=\"line\"><span class=\"string\">    ...         LineItem('apple', 10, 1.5),</span></span><br><span class=\"line\"><span class=\"string\">    ...         LineItem('watermellon', 5, 5.0)]</span></span><br><span class=\"line\"><span class=\"string\">    &gt;&gt;&gt; Order(joe, cart, fidelity)</span></span><br><span class=\"line\"><span class=\"string\">    &lt;Order total: 42.00 due: 42.00&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &gt;&gt;&gt; Order(ann, cart, fidelity)</span></span><br><span class=\"line\"><span class=\"string\">    &lt;Order total: 42.00 due: 39.90&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &gt;&gt;&gt; banana_cart = [LineItem('banana', 30, .5),</span></span><br><span class=\"line\"><span class=\"string\">    ...                LineItem('apple', 10, 1.5)]</span></span><br><span class=\"line\"><span class=\"string\">    &gt;&gt;&gt; Order(joe, banana_cart, bulk_item)</span></span><br><span class=\"line\"><span class=\"string\">    &lt;Order total: 30.00 due: 28.50&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &gt;&gt;&gt; long_order = [LineItem(str(item_code), 1, 1.0)</span></span><br><span class=\"line\"><span class=\"string\">    ...               for item_code in range(10)]</span></span><br><span class=\"line\"><span class=\"string\">    &gt;&gt;&gt; Order(joe, long_order, large_order)</span></span><br><span class=\"line\"><span class=\"string\">    &lt;Order total: 10.00 due: 9.30&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &gt;&gt;&gt; Order(joe, cart, large_order)</span></span><br><span class=\"line\"><span class=\"string\">    &lt;Order total: 42.00 due: 42.00&gt;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\"># BEGIN STRATEGY_BEST_TESTS</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    &gt;&gt;&gt; Order(joe, long_order, best_promo)</span></span><br><span class=\"line\"><span class=\"string\">    &lt;Order total: 10.00 due: 9.30&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &gt;&gt;&gt; Order(joe, banana_cart, best_promo)</span></span><br><span class=\"line\"><span class=\"string\">    &lt;Order total: 30.00 due: 28.50&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &gt;&gt;&gt; Order(ann, cart, best_promo)</span></span><br><span class=\"line\"><span class=\"string\">    &lt;Order total: 42.00 due: 39.90&gt;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\"># END STRATEGY_BEST_TESTS</span></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> collections <span class=\"keyword\">import</span> namedtuple</span><br><span class=\"line\"></span><br><span class=\"line\">Customer = namedtuple(<span class=\"string\">'Customer'</span>, <span class=\"string\">'name fidelity'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LineItem</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, product, quantity, price)</span>:</span></span><br><span class=\"line\">        self.product = product</span><br><span class=\"line\">        self.quantity = quantity</span><br><span class=\"line\">        self.price = price</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">total</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.price * self.quantity</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Order</span>:</span>  <span class=\"comment\"># the Context</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, customer, cart, promotion=None)</span>:</span></span><br><span class=\"line\">        self.customer = customer</span><br><span class=\"line\">        self.cart = list(cart)</span><br><span class=\"line\">        self.promotion = promotion</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">total</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> hasattr(self, <span class=\"string\">'__total'</span>):</span><br><span class=\"line\">            self.__total = sum(item.total() <span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> self.cart)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.__total</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">due</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> self.promotion <span class=\"keyword\">is</span> <span class=\"keyword\">None</span>:</span><br><span class=\"line\">            discount = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            discount = self.promotion(self)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.total() - discount</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__repr__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        fmt = <span class=\"string\">'&lt;Order total: &#123;:.2f&#125; due: &#123;:.2f&#125;&gt;'</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> fmt.format(self.total(), self.due())</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># BEGIN STRATEGY_BEST4</span></span><br><span class=\"line\"></span><br><span class=\"line\">promos = []  <span class=\"comment\"># &lt;1&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">promotion</span><span class=\"params\">(promo_func)</span>:</span>  <span class=\"comment\"># &lt;2&gt;</span></span><br><span class=\"line\">    promos.append(promo_func)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> promo_func</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@promotion  # &lt;3&gt;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">fidelity</span><span class=\"params\">(order)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"5% discount for customers with 1000 or more fidelity points\"\"\"</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> order.total() * <span class=\"number\">.05</span> <span class=\"keyword\">if</span> order.customer.fidelity &gt;= <span class=\"number\">1000</span> <span class=\"keyword\">else</span> <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@promotion</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">bulk_item</span><span class=\"params\">(order)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"10% discount for each LineItem with 20 or more units\"\"\"</span></span><br><span class=\"line\">    discount = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> order.cart:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> item.quantity &gt;= <span class=\"number\">20</span>:</span><br><span class=\"line\">            discount += item.total() * <span class=\"number\">.1</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> discount</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@promotion</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">large_order</span><span class=\"params\">(order)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"7% discount for orders with 10 or more distinct items\"\"\"</span></span><br><span class=\"line\">    distinct_items = &#123;item.product <span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> order.cart&#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> len(distinct_items) &gt;= <span class=\"number\">10</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> order.total() * <span class=\"number\">.07</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">best_promo</span><span class=\"params\">(order)</span>:</span>  <span class=\"comment\"># &lt;4&gt;</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"Select best discount available</span></span><br><span class=\"line\"><span class=\"string\">    \"\"\"</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> max(promo(order) <span class=\"keyword\">for</span> promo <span class=\"keyword\">in</span> promos)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># END STRATEGY_BEST4</span></span><br></pre></td></tr></table></figure>\n<p><code>优点如下：</code></p>\n<ul>\n<li>促销策略函数无需使用特殊的名称（即不用以 _promo 结尾）。</li>\n<li>@promotion 装饰器突出了被装饰的函数的作用， 还便于临时禁用某个促销策略： 只需把装饰器注释掉。</li>\n<li>促销折扣策略可以在其他模块中定义， 在系统中的任何地方都行， 只要使用@promotion 装饰即可。</li>\n</ul>\n<h2 id=\"2-闭包\"><a href=\"#2-闭包\" class=\"headerlink\" title=\"2 闭包\"></a>2 闭包</h2><h3 id=\"2-1-闭包的使用\"><a href=\"#2-1-闭包的使用\" class=\"headerlink\" title=\"2.1 闭包的使用\"></a>2.1 闭包的使用</h3><p>在博客圈， 人们有时会把闭包和匿名函数弄混。 这是有历史原因的： 在函数内部定义函数不常见， 直到开始使用匿名函数才会这样做。 而且， 只有涉及嵌套函数时才有闭包问题。因此， 很多人是同时知道这两个概念的。其实， 闭包指延伸了作用域的函数， 其中包含函数定义体中引用、 但是不在定义体中定义的非全局变量。 函数是不是匿名的没有关系， 关键是它能访问定义体之外定义的非全局变量。</p>\n<p><code>1、闭包实现</code></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\"><span class=\"meta\">&gt;&gt;&gt; </span>avg = make_averager()</span></span><br><span class=\"line\"><span class=\"string\"><span class=\"meta\">&gt;&gt;&gt; </span>avg(10)</span></span><br><span class=\"line\"><span class=\"string\">10.0</span></span><br><span class=\"line\"><span class=\"string\"><span class=\"meta\">&gt;&gt;&gt; </span>avg(11)</span></span><br><span class=\"line\"><span class=\"string\">10.5</span></span><br><span class=\"line\"><span class=\"string\"><span class=\"meta\">&gt;&gt;&gt; </span>avg(12)</span></span><br><span class=\"line\"><span class=\"string\">11.0</span></span><br><span class=\"line\"><span class=\"string\"><span class=\"meta\">&gt;&gt;&gt; </span>avg.__code__.co_varnames</span></span><br><span class=\"line\"><span class=\"string\">('new_value', 'total')</span></span><br><span class=\"line\"><span class=\"string\"><span class=\"meta\">&gt;&gt;&gt; </span>avg.__code__.co_freevars</span></span><br><span class=\"line\"><span class=\"string\">('series',)</span></span><br><span class=\"line\"><span class=\"string\"><span class=\"meta\">&gt;&gt;&gt; </span>avg.__closure__  # doctest: +ELLIPSIS</span></span><br><span class=\"line\"><span class=\"string\">(&lt;cell at 0x...: list object at 0x...&gt;,)</span></span><br><span class=\"line\"><span class=\"string\"><span class=\"meta\">&gt;&gt;&gt; </span>avg.__closure__[0].cell_contents</span></span><br><span class=\"line\"><span class=\"string\">[10, 11, 12]</span></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">DEMO = <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\"><span class=\"meta\">&gt;&gt;&gt; </span>avg.__closure__</span></span><br><span class=\"line\"><span class=\"string\">(&lt;cell at 0x107a44f78: list object at 0x107a91a48&gt;,)</span></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">make_averager</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    series = []</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">averager</span><span class=\"params\">(new_value)</span>:</span></span><br><span class=\"line\">        series.append(new_value)</span><br><span class=\"line\">        total = sum(series)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> total/len(series)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> averager</span><br></pre></td></tr></table></figure>\n<p><code>2、初学者实现</code></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\"><span class=\"meta\">&gt;&gt;&gt; </span>avg = Averager()</span></span><br><span class=\"line\"><span class=\"string\"><span class=\"meta\">&gt;&gt;&gt; </span>avg(10)</span></span><br><span class=\"line\"><span class=\"string\">10.0</span></span><br><span class=\"line\"><span class=\"string\"><span class=\"meta\">&gt;&gt;&gt; </span>avg(11)</span></span><br><span class=\"line\"><span class=\"string\">10.5</span></span><br><span class=\"line\"><span class=\"string\"><span class=\"meta\">&gt;&gt;&gt; </span>avg(12)</span></span><br><span class=\"line\"><span class=\"string\">11.0</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Averager</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        self.series = []</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__call__</span><span class=\"params\">(self, new_value)</span>:</span></span><br><span class=\"line\">        self.series.append(new_value)</span><br><span class=\"line\">        total = sum(self.series)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> total/len(self.series)</span><br></pre></td></tr></table></figure>\n<p>综上， 闭包是一种函数， 它会保留定义函数时存在的自由变量的绑定， 这样调用函数时，虽然定义作用域不可用了， 但是仍能使用那些绑定。注意， 只有嵌套在其他函数中的函数才可能需要处理不在全局作用域中的外部变量。</p>\n<h3 id=\"2-2-nonloacl声明\"><a href=\"#2-2-nonloacl声明\" class=\"headerlink\" title=\"2.2 nonloacl声明\"></a>2.2 nonloacl声明</h3><p>前面实现 make_averager 函数的方法效率不高。在示例中，我们把所有值存储在历史数列中，然后在每次调用averager时使用sum求和。更好的实现方式是，只存储目前的总值和元素个数，然后使用这两个数计算均值。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">make_averager</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    count = <span class=\"number\">0</span></span><br><span class=\"line\">    total = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">averager</span><span class=\"params\">(new_value)</span>:</span></span><br><span class=\"line\">        count += <span class=\"number\">1</span></span><br><span class=\"line\">        total += new_value</span><br><span class=\"line\">        <span class=\"keyword\">return</span> total / count</span><br><span class=\"line\">    <span class=\"keyword\">return</span> averager</span><br></pre></td></tr></table></figure>\n<p>尝试使用示例定义的函数， 会得到如下结果：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>avg = make_averager()</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>avg(<span class=\"number\">10</span>)</span><br><span class=\"line\">Traceback (most recent call last):</span><br><span class=\"line\">...</span><br><span class=\"line\">UnboundLocalError: local variable <span class=\"string\">'count'</span> referenced before assignment</span><br><span class=\"line\">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure>\n<p>问题是， 当 count 是数字或任何不可变类型时， count += 1 语句的作用其实与 count= count + 1 一样。 因此， 我们在 averager 的定义体中为 count 赋值了， 这会把count 变成局部变量。 total 变量也受这个问题影响。</p>\n<p>前面没有遇到这个问题， 因为我们没有给 series 赋值， 我们只是调用series.append， 并把它传给 sum 和 len。 也就是说， 我们利用了列表是可变的对象这一事实。但是对数字、 字符串、 元组等不可变类型来说， 只能读取， 不能更新。 如果尝试重新绑定， 例如 count = count + 1， 其实会隐式创建局部变量 count。 这样， count 就不是自由变量了， 因此不会保存在闭包中。</p>\n<p>为了解决这个问题， Python 3 引入了 nonlocal 声明。 它的作用是把变量标记为自由变量， 即使在函数中为变量赋予新值了， 也会变成自由变量。 如果为 nonlocal 声明的变量赋予新值， 闭包中保存的绑定会更新。 最新版 make_averager 的正确实现如示例所示。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">make_averager</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    count = <span class=\"number\">0</span></span><br><span class=\"line\">    total = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">averager</span><span class=\"params\">(new_value)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">nonlocal</span> count, total</span><br><span class=\"line\">        count += <span class=\"number\">1</span></span><br><span class=\"line\">        total += new_value</span><br><span class=\"line\">        <span class=\"keyword\">return</span> total / count</span><br><span class=\"line\">    <span class=\"keyword\">return</span> averager</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-实现一个简单的装饰器\"><a href=\"#3-实现一个简单的装饰器\" class=\"headerlink\" title=\"3 实现一个简单的装饰器\"></a>3 实现一个简单的装饰器</h2><p> 定义了一个装饰器， 它会在每次调用被装饰的函数时计时， 然后把经过的时间、 传入的参数和调用的结果打印出来。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># clockdeco.py</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">clock</span><span class=\"params\">(func)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">clocked</span><span class=\"params\">(*args)</span>:</span></span><br><span class=\"line\">        t0 = time.time()</span><br><span class=\"line\">        result = func(*args)</span><br><span class=\"line\">        elapsed = time.time()-t0 <span class=\"comment\">#闭包中包含自由变量func()</span></span><br><span class=\"line\">        name = func.__name__</span><br><span class=\"line\">        arg_str = <span class=\"string\">', '</span>.join(repr(arg) <span class=\"keyword\">for</span> arg <span class=\"keyword\">in</span> args)</span><br><span class=\"line\">        print(<span class=\"string\">'[%0.8fs] %s(%s) -&gt; $r'</span> % \\</span><br><span class=\"line\">              (elapsed, name, arg_str, result))</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result</span><br><span class=\"line\">    <span class=\"keyword\">return</span> clocked <span class=\"comment\">#返回内部函数，取代被装饰的函数</span></span><br></pre></td></tr></table></figure>\n<p>使用clock装饰器</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># clockdeco_demo.py</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">import</span> clockdeco <span class=\"keyword\">import</span> clock</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@clock</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">snooze</span><span class=\"params\">(seconds)</span>:</span></span><br><span class=\"line\">    time.sleep(seconds)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@clock</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">factorial</span><span class=\"params\">(n)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span> <span class=\"keyword\">if</span> n &lt; <span class=\"number\">2</span> <span class=\"keyword\">else</span> n*factorial(n<span class=\"number\">-1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    print(<span class=\"string\">'*'</span> * <span class=\"number\">40</span>, <span class=\"string\">'Calling snozzen(.123)'</span>)</span><br><span class=\"line\">    snooze(<span class=\"number\">.123</span>)</span><br><span class=\"line\">    print(<span class=\"string\">'*'</span> * <span class=\"number\">40</span>, <span class=\"string\">'Calling factorial(6)'</span>)</span><br><span class=\"line\">    factorial(<span class=\"number\">6</span>)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ python3 clockdeco_demo.py</span><br><span class=\"line\">**************************************** Calling snooze(<span class=\"number\">123</span>)</span><br><span class=\"line\">[0.12405610s] snooze(.123) -&gt; None</span><br><span class=\"line\">**************************************** Calling factorial(<span class=\"number\">6</span>)</span><br><span class=\"line\">[0.00000191s] factorial(1) -&gt; 1</span><br><span class=\"line\">[0.00004911s] factorial(2) -&gt; 2</span><br><span class=\"line\">[0.00008488s] factorial(3) -&gt; 6</span><br><span class=\"line\">[0.00013208s] factorial(4) -&gt; 24</span><br><span class=\"line\">[0.00019193s] factorial(5) -&gt; 120</span><br><span class=\"line\">[0.00026107s] factorial(6) -&gt; 720</span><br><span class=\"line\"><span class=\"number\">6</span>! = <span class=\"number\">720</span></span><br></pre></td></tr></table></figure>\n<p>这是装饰器的典型行为： 把被装饰的函数替换成新函数， 二者接受相同的参数， 而且（通常） 返回被装饰的函数本该返回的值， 同时还会做些额外操作。</p>\n<p>示例中实现的 clock 装饰器有几个缺点：不支持关键字参数，而且遮盖了被装饰函数的 __name__ 和 __doc__ 属性。下面使用 functools.wraps 装饰器把相关的属性从 func 复制到 clocked 中。此外，这个新版还能正确处理关键字参数。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># clockdeco2.py</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">import</span> functools</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">clock</span><span class=\"params\">(func)</span>:</span></span><br><span class=\"line\"><span class=\"meta\">    @functions.wraps(func)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">clocked</span><span class=\"params\">(*args, **kwargs)</span>:</span></span><br><span class=\"line\">        t0 = time.time()</span><br><span class=\"line\">        result = func(*args)</span><br><span class=\"line\">        elapsed = time.time()-t0 <span class=\"comment\">#闭包中包含自由变量func()</span></span><br><span class=\"line\">        name = func.__name__</span><br><span class=\"line\">        arg_lst = []</span><br><span class=\"line\">        <span class=\"keyword\">if</span> args:</span><br><span class=\"line\">            arg_lst.append(<span class=\"string\">', '</span>.join(repr(arg) <span class=\"keyword\">for</span> arg <span class=\"keyword\">in</span> args))</span><br><span class=\"line\">        <span class=\"keyword\">if</span> kwargs:</span><br><span class=\"line\">            pairs = [<span class=\"string\">'%s=%r'</span> % (k, w) <span class=\"keyword\">for</span> k, w <span class=\"keyword\">in</span> sorted(kwargs.items())]</span><br><span class=\"line\">            arg_lst.append(<span class=\"string\">', '</span>.join(pairs))</span><br><span class=\"line\">        arg_str = <span class=\"string\">', '</span>.join(arg_lst)</span><br><span class=\"line\">        print(<span class=\"string\">'[%0.8fs] %s(%s) -&gt; %r '</span> % (elapsed, name, arg_str, result))</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result</span><br></pre></td></tr></table></figure>\n<h2 id=\"4-参数化装饰器\"><a href=\"#4-参数化装饰器\" class=\"headerlink\" title=\"4 参数化装饰器\"></a>4 参数化装饰器</h2><p>解析源码中的装饰器时， Python 把被装饰的函数作为第一个参数传给装饰器函数。 那怎么让装饰器接受其他参数呢？ 答案是： 创建一个装饰器工厂函数， 把参数传给它， 返回一个装饰器， 然后再把它应用到要装饰的函数上。 </p>\n<h3 id=\"4-1-一个参数化的注册装饰器\"><a href=\"#4-1-一个参数化的注册装饰器\" class=\"headerlink\" title=\"4.1 一个参数化的注册装饰器\"></a>4.1 一个参数化的注册装饰器</h3><p>为了便于启用或禁用 register 执行的函数注册功能， 我们为它提供一个可选active参数， 设为 False 时， 不注册被装饰的函数。 实现方式参见示例。从概念上看， 这个新的 register 函数不是装饰器， 而是装饰器工厂函数。 调用它会返回真正的装饰器，这才是应用到目标函数上的装饰器。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># BEGIN REGISTRATION_PARAM</span></span><br><span class=\"line\">registry = set()  <span class=\"comment\"># &lt;1&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">register</span><span class=\"params\">(active=True)</span>:</span>  <span class=\"comment\"># &lt;2&gt;</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">decorate</span><span class=\"params\">(func)</span>:</span>  <span class=\"comment\"># &lt;3&gt;</span></span><br><span class=\"line\">        print(<span class=\"string\">'running register(active=%s)-&gt;decorate(%s)'</span></span><br><span class=\"line\">              % (active, func))</span><br><span class=\"line\">        <span class=\"keyword\">if</span> active:   <span class=\"comment\"># &lt;4&gt;</span></span><br><span class=\"line\">            registry.add(func)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            registry.discard(func)  <span class=\"comment\"># &lt;5&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> func  <span class=\"comment\"># &lt;6&gt;</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> decorate  <span class=\"comment\"># &lt;7&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@register(active=False)  # &lt;8&gt;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">f1</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    print(<span class=\"string\">'running f1()'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@register()  # &lt;9&gt;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">f2</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    print(<span class=\"string\">'running f2()'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">f3</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    print(<span class=\"string\">'running f3()'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">print(registry)</span><br><span class=\"line\"><span class=\"comment\"># END REGISTRATION_PARAM</span></span><br></pre></td></tr></table></figure>\n<p>代码在 registration_param.py 模块中。 如果导入， 得到的结果如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">import</span> registration_param</span><br><span class=\"line\">running register(active=False)-&gt;decorate(&lt;function f1 at 0x10063c1e0&gt;)</span><br><span class=\"line\">running register(active=True)-&gt;decorate(&lt;function f2 at 0x10063c268&gt;)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>registration_param.registry</span><br><span class=\"line\">&#123;&lt;function f2 at <span class=\"number\">0x10063c268</span>&gt;&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"4-2-参数化clock装饰器\"><a href=\"#4-2-参数化clock装饰器\" class=\"headerlink\" title=\"4.2 参数化clock装饰器\"></a>4.2 参数化clock装饰器</h3><p>探讨 clock 装饰器， 为它添加一个功能： 让用户传入一个格式字符串， 控制被装饰函数的输出。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># clockdeco_param.py</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\"><span class=\"meta\">&gt;&gt;&gt; </span>snooze(.1)  # doctest: +ELLIPSIS</span></span><br><span class=\"line\"><span class=\"string\">[0.101...s] snooze(0.1) -&gt; None</span></span><br><span class=\"line\"><span class=\"string\"><span class=\"meta\">&gt;&gt;&gt; </span>clock('&#123;name&#125;: &#123;elapsed&#125;')(time.sleep)(.2)  # doctest: +ELLIPSIS</span></span><br><span class=\"line\"><span class=\"string\">sleep: 0.20...</span></span><br><span class=\"line\"><span class=\"string\"><span class=\"meta\">&gt;&gt;&gt; </span>clock('&#123;name&#125;(&#123;args&#125;) dt=&#123;elapsed:0.3f&#125;s')(time.sleep)(.2)</span></span><br><span class=\"line\"><span class=\"string\">sleep(0.2) dt=0.201s</span></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># BEGIN CLOCKDECO_PARAM</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"></span><br><span class=\"line\">DEFAULT_FMT = <span class=\"string\">'[&#123;elapsed:0.8f&#125;s] &#123;name&#125;(&#123;args&#125;) -&gt; &#123;result&#125;'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">clock</span><span class=\"params\">(fmt=DEFAULT_FMT)</span>:</span>  <span class=\"comment\"># &lt;1&gt;</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">decorate</span><span class=\"params\">(func)</span>:</span>      <span class=\"comment\"># &lt;2&gt;</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">clocked</span><span class=\"params\">(*_args)</span>:</span> <span class=\"comment\"># &lt;3&gt;</span></span><br><span class=\"line\">            t0 = time.time()</span><br><span class=\"line\">            _result = func(*_args)  <span class=\"comment\"># &lt;4&gt;</span></span><br><span class=\"line\">            elapsed = time.time() - t0</span><br><span class=\"line\">            name = func.__name__</span><br><span class=\"line\">            args = <span class=\"string\">', '</span>.join(repr(arg) <span class=\"keyword\">for</span> arg <span class=\"keyword\">in</span> _args)  <span class=\"comment\"># &lt;5&gt;</span></span><br><span class=\"line\">            result = repr(_result)  <span class=\"comment\"># &lt;6&gt;</span></span><br><span class=\"line\">            print(fmt.format(**locals()))  <span class=\"comment\"># &lt;7&gt;</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> _result  <span class=\"comment\"># &lt;8&gt;</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> clocked  <span class=\"comment\"># &lt;9&gt;</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> decorate  <span class=\"comment\"># &lt;10&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @clock()  # &lt;11&gt;</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">snooze</span><span class=\"params\">(seconds)</span>:</span></span><br><span class=\"line\">        time.sleep(seconds)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">3</span>):</span><br><span class=\"line\">        snooze(<span class=\"number\">.123</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># END CLOCKDECO_PARAM</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ python3 clockdeco_param.py</span><br><span class=\"line\">[0.12412500s] snooze(0.123) -&gt; None</span><br><span class=\"line\">[0.12411904s] snooze(0.123) -&gt; None</span><br><span class=\"line\">[0.12410498s] snooze(0.123) -&gt; None</span><br></pre></td></tr></table></figure>\n<p>使用了 clockdeco_param 模块中的新功能， 随后是两个模块输出的结果。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">from</span> clockdeco_param <span class=\"keyword\">import</span> clock</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@clock('&#123;name&#125;: &#123;elapsed&#125;s')</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">snooze</span><span class=\"params\">(seconds)</span>:</span></span><br><span class=\"line\">    time.sleep(seconds)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">3</span>):</span><br><span class=\"line\">    snooze(<span class=\"number\">.123</span>)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ python3 clockdeco_param_demo1.py</span><br><span class=\"line\">snooze: <span class=\"number\">0.12414693832397461</span>s</span><br><span class=\"line\">snooze: <span class=\"number\">0.1241159439086914</span>s</span><br><span class=\"line\">snooze: <span class=\"number\">0.12412118911743164</span>s</span><br></pre></td></tr></table></figure>"},{"title":"go语言基础--函数、指针、结构体、接口","date":"2017-07-06T03:10:36.000Z","_content":"# Go函数\n是时候讨论一下Go的函数定义了。\n\n## 什么是函数\n\n函数，简单来讲就是一段将`输入数据`转换为`输出数据`的`公用代码块`。当然有的时候函数的返回值为空，那么就是说输出数据为空。而真正的处理过程在函数内部已经完成了。\n<!--more-->\n想一想我们为什么需要函数，最直接的需求就是代码中有太多的重复代码了，为了代码的可读性和可维护性，将这些重复代码重构为函数也是必要的。\n\n## 函数定义\n\n先看一个例子\n```go\n\tpackage main\n\n\timport (\n\t\t\"fmt\"\n\t)\n\n\tfunc slice_sum(arr []int) int {\n\t\tsum := 0\n\t\tfor _, elem := range arr {\n\t\t\tsum += elem\n\t\t}\n\t\treturn sum\n\t}\n\n\tfunc main() {\n\t\tvar arr1 = []int{1, 3, 2, 3, 2}\n\t\tvar arr2 = []int{3, 2, 3, 1, 6, 4, 8, 9}\n\t\tfmt.Println(slice_sum(arr1))\n\t\tfmt.Println(slice_sum(arr2))\n\t}\n```\n在上面的例子中，我们需要分别计算两个切片的元素和。如果我们把计算切片元素的和的代码分别为两个切片展开，那么代码就失去了简洁性和一致性。假设你预想实现同样功能的代码在拷贝粘贴的过程中发生了错误，比如忘记改变量名之类的，到时候debug到崩溃吧。因为这时很有可能你就先入为主了，因为模板代码没有错啊，是不是。所以函数就是这个用处。\n\n我们再仔细看一下上面的函数定义：\n\n首先是关键字`func`，然后后面是`函数名称`，`参数列表`，最后是`返回值列表`。当然如果函数没有参数列表或者返回值，那么这两项都是可选的。其中返回值两边的括号在只声明一个返回值类型的时候可以省略。\n\n## 命名返回值\n\nGo的函数很有趣，你甚至可以为返回值预先定义一个名称，在函数结束的时候，直接一个return就可以返回所有的预定义返回值。例如上面的例子，我们将sum作为命名返回值。\n```go\n\tpackage main\n\n\timport (\n\t\t\"fmt\"\n\t)\n\n\tfunc slice_sum(arr []int) (sum int) {\n\t\tsum = 0\n\t\tfor _, elem := range arr {\n\t\t\tsum += elem\n\t\t}\n\t\treturn\n\t}\n\n\tfunc main() {\n\t\tvar arr1 = []int{1, 3, 2, 3, 2}\n\t\tvar arr2 = []int{3, 2, 3, 1, 6, 4, 8, 9}\n\t\tfmt.Println(slice_sum(arr1))\n\t\tfmt.Println(slice_sum(arr2))\n\t}\n```\n这里要注意的是，如果你定义了命名返回值，那么在函数内部你将不能再重复定义一个同样名称的变量。比如第一个例子中我们用`sum:=0`来定义和初始化变量sum，而在第二个例子中，我们只能用`sum=0`初始化这个变量了。因为`:=`表示的是定义并且初始化变量。\n\n## 实参数和虚参数\n\n可能你听说过函数的实参数和虚参数。其实所谓的`实参数就是函数调用的时候传入的参数`。在上面的例子中，实参就是`arr1`和`arr2`，而`虚参数就是函数定义的时候表示函数需要传入哪些参数的占位参数`。在上面的例子中，虚参就是`arr`。`实参和虚参的名字不必是一样的。即使是一样的，也互不影响。`因为虚参是函数的内部变量。而实参则是另一个函数的内部变量或者是全局变量。它们的作用域不同。如果一个函数的虚参碰巧和一个全局变量名称相同，那么函数使用的也是虚参。例如我们再修改一下上面的例子。\n```go\n\tpackage main\n\n\timport (\n\t\t\"fmt\"\n\t)\n\n\tvar arr = []int{1, 3, 2, 3, 2}\n\n\tfunc slice_sum(arr []int) (sum int) {\n\t\tsum = 0\n\t\tfor _, elem := range arr {\n\t\t\tsum += elem\n\t\t}\n\t\treturn\n\t}\n\n\tfunc main() {\n\t\tvar arr2 = []int{3, 2, 3, 1, 6, 4, 8, 9}\n\t\tfmt.Println(slice_sum(arr))\n\t\tfmt.Println(slice_sum(arr2))\n\t}\n```\n\n在上面的例子中，我们定义了全局变量arr并且初始化值，而我们的slice_sum函数的虚参也是arr，但是程序同样正常工作。\n\n## 函数多返回值\n\n记不记得你在java或者c里面需要返回多个值时还得去定义一个对象或者结构体的呢？在Go里面，你不需要这么做了。Go函数支持你返回多个值。\n\n其实函数的多返回值，我们在上面遇见过很多次了。那就是`range`函数。这个函数用来迭代数组或者切片的时候返回的是两个值，一个是数组或切片元素的索引，另外一个是数组或切片元素。在上面的例子中，因为我们不需要元素的索引，所以我们用一个特殊的忽略返回值符号`下划线(_)`来忽略索引。\n\n假设上面的例子我们除了返回切片的元素和，还想返回切片元素的平均值，那么我们修改一下代码。\n```go\n\tpackage main\n\n\timport (\n\t\t\"fmt\"\n\t)\n\n\tfunc slice_sum(arr []int) (int, float64) {\n\t\tsum := 0\n\t\tavg := 0.0\n\t\tfor _, elem := range arr {\n\t\t\tsum += elem\n\t\t}\n\t\tavg = float64(sum) / float64(len(arr))\n\t\treturn sum, avg\n\t}\n\n\tfunc main() {\n\t\tvar arr1 = []int{3, 2, 3, 1, 6, 4, 8, 9}\n\t\tfmt.Println(slice_sum(arr1))\n\t}\n```\n\n很简单吧，当然我们还可以将上面的参数定义为命名参数\n```go\n\tpackage main\n\n\timport (\n\t\t\"fmt\"\n\t)\n\n\tfunc slice_sum(arr []int) (sum int, avg float64) {\n\t\tsum = 0\n\t\tavg = 0.0\n\t\tfor _, elem := range arr {\n\t\t\tsum += elem\n\t\t}\n\t\tavg = float64(sum) / float64(len(arr))\n\t\t//return sum, avg\n\t\treturn\n\t}\n\n\tfunc main() {\n\t\tvar arr1 = []int{3, 2, 3, 1, 6, 4, 8, 9}\n\t\tfmt.Println(slice_sum(arr1))\n\t}\n```\n\n在上面的代码里面，将`return sum, avg`给注释了而直接使用`return`。其实这两种返回方式都可以。\n\n## 变长参数\n\n想一想我们的fmt包里面的Println函数，它怎么知道你传入的参数个数呢？\n```go\n\tpackage main\n\n\timport (\n\t\t\"fmt\"\n\t)\n\n\tfunc main() {\n\t\tfmt.Println(1)\n\t\tfmt.Println(1, 2)\n\t\tfmt.Println(1, 2, 3)\n\t}\n```\n这个要归功于Go的一大特性，支持可变长参数列表。\n\n首先我们来看一个例子\n```go\n\tpackage main\n\n\timport (\n\t\t\"fmt\"\n\t)\n\n\tfunc sum(arr ...int) int {\n\t\tsum := 0\n\t\tfor _, val := range arr {\n\t\t\tsum += val\n\t\t}\n\t\treturn sum\n\t}\n\tfunc main() {\n\t\tfmt.Println(sum(1))\n\t\tfmt.Println(sum(1, 2))\n\t\tfmt.Println(sum(1, 2, 3))\n\t}\n```\n\n在上面的例子中，我们将原来的切片参数修改为可变长参数，然后使用range函数迭代这些参数，并求和。\n从这里我们可以看出至少一点那就是`可变长参数列表里面的参数类型都是相同的`（*如果你对这句话表示怀疑，可能是因为你看到Println函数恰恰可以输出不同类型的可变参数，这个问题的答案要等到我们介绍完Go的接口后才行*）。\n\n另外还有一点需要注意，那就是`可变长参数定义只能是函数的最后一个参数`。比如下面的例子：\n```go\n\tpackage main\n\n\timport (\n\t\t\"fmt\"\n\t)\n\n\tfunc sum(base int, arr ...int) int {\n\t\tsum := base\n\t\tfor _, val := range arr {\n\t\t\tsum += val\n\t\t}\n\t\treturn sum\n\t}\n\tfunc main() {\n\t\tfmt.Println(sum(100, 1))\n\t\tfmt.Println(sum(200, 1, 2))\n\t\tfmt.Println(sum(300, 1, 2, 3))\n\t}\n```\n\n这里不知道你是否觉得这个例子其实和那个切片的例子很像啊，在哪里呢？\n```go\n\tpackage main\n\n\timport (\n\t\t\"fmt\"\n\t)\n\n\tfunc sum(base int, arr ...int) int {\n\t\tsum := base\n\t\tfor _, val := range arr {\n\t\t\tsum += val\n\t\t}\n\t\treturn sum\n\t}\n\tfunc main() {\n\t\tvar arr1 = []int{1, 2, 3, 4, 5}\n\t\tfmt.Println(sum(300, arr1...))\n\t}\n```\n呵呵，就是把切片“啪，啪，啪”三个耳光打碎了，传递过去啊！:-P\n\n\n## 闭包函数\n\n曾经使用python和javascript的时候就在想，如果有一天可以把这两种语言的特性做个并集该有多好。\n\n这一天终于来了，Go支持闭包函数。\n\n首先看一个闭包函数的例子。所谓闭包函数就是将整个函数的定义一气呵成写好并赋值给一个变量。然后用这个变量名作为函数名去调用函数体。\n\n我们将刚刚的例子修改一下：\n```go\n\tpackage main\n\n\timport (\n\t\t\"fmt\"\n\t)\n\n\tfunc main() {\n\t\tvar arr1 = []int{1, 2, 3, 4, 5}\n\t\t\n\t\tvar sum = func(arr ...int) int {\n\t\t\ttotal_sum := 0\n\t\t\tfor _, val := range arr {\n\t\t\t\ttotal_sum += val\n\t\t\t}\n\t\t\treturn total_sum\n\t\t}\n\t\tfmt.Println(sum(arr1...))\n\t}\n```\n从这里我们可以看出，其实闭包函数也没有什么特别之处。因为Go不支持在一个函数的内部再定义一个嵌套函数，所以使用闭包函数能够实现在一个函数内部定义另一个函数的目的。\n\n这里我们需要注意的一个问题是，闭包函数对它外层的函数中的变量具有`访问`和`修改`的权限。例如：\n```go\n\tpackage main\n\n\timport (\n\t\t\"fmt\"\n\t)\n\n\tfunc main() {\n\t\tvar arr1 = []int{1, 2, 3, 4, 5}\n\t\tvar base = 300\n\t\tvar sum = func(arr ...int) int {\n\t\t\ttotal_sum := 0\n\t\t\ttotal_sum += base\n\t\t\tfor _, val := range arr {\n\t\t\t\ttotal_sum += val\n\t\t\t}\n\t\t\treturn total_sum\n\t\t}\n\t\tfmt.Println(sum(arr1...))\n\t}\n```\n\n这个例子，输出315，因为total_sum加上了base的值。\n```go\n\tpackage main\n\n\timport (\n\t\t\"fmt\"\n\t)\n\n\tfunc main() {\n\t\tvar base = 0\n\t\tinc := func() {\n\t\t\tbase += 1\n\t\t}\n\t\tfmt.Println(base)\n\t\tinc()\n\t\tfmt.Println(base)\n\t}\n```\n\n在上面的例子中，闭包函数修改了main函数的局部变量base。\n\n最后我们来看一个闭包的示例，生成偶数序列。\n```go\n\tpackage main\n\n\timport (\n\t\t\"fmt\"\n\t)\n\n\tfunc createEvenGenerator() func() uint {\n\t\ti := uint(0)\n\t\treturn func() (retVal uint) {\n\t\t\tretVal = i\n\t\t\ti += 2\n\t\t\treturn\n\t\t}\n\t}\n\tfunc main() {\n\t\tnextEven := createEvenGenerator()\n\t\tfmt.Println(nextEven())\n\t\tfmt.Println(nextEven())\n\t\tfmt.Println(nextEven())\n\t}\n```\n\n这个例子很有意思的，因为我们定义了一个`返回函数定义`的函数。而所返回的函数定义就是`在这个函数的内部定义的闭包函数`。这个闭包函数在外层函数调用的时候，每次都生成一个新的偶数（加2操作）然后返回闭包函数定义。\n\n其中`func() uint`就是函数createEvenGenerator的返回值。在createEvenGenerator中，这个返回值是return返回的闭包函数定义。\n```go\n\tfunc() (retVal uint) {\n        \tretVal = i\n        \ti += 2\n        \treturn\n    \t}\n```\n因为createEvenGenerator函数返回的是一个函数定义，所以我们再把它赋值给一个代表函数的变量，然后用这个代表闭包函数的变量去调用函数执行。\n\n## 递归函数\n\n每次谈到递归函数，必然绕不开阶乘和斐波拉切数列。\n\n阶乘\n```go\n\tpackage main\n\n\t/**\n\t    n!=1*2*3*...*n\n\t*/\n\timport (\n\t\t\"fmt\"\n\t)\n\n\tfunc factorial(x uint) uint {\n\t\tif x == 0 {\n\t\t\treturn 1\n\t\t}\n\t\treturn x * factorial(x-1)\n\t}\n\n\tfunc main() {\n\t\tfmt.Println(factorial(5))\n\t}\n```\n\n如果x为0，那么返回1，因为0!=1。如果x是1，那么f(1)=1*f(0)，如果x是2，那么f(2)=2*f(1)=2*1*f(0)，依次推断f(x)=x*(x-1)*...*2*1*f(0)。\n\n从上面看出所谓递归，就是在函数的内部重复调用一个函数的过程。需要注意的是这个函数必须能够一层一层分解，并且有出口。上面的例子出口就是0。\n\n斐波拉切数列\n\n求第N个斐波拉切元素\n```go\n\tpackage main\n\n\t/**\n\t\tf(1)=1\n\t\tf(2)=2\n\t\tf(n)=f(n-2)+f(n-1)\n\t*/\n\timport (\n\t\t\"fmt\"\n\t)\n\n\tfunc fibonacci(n int) int {\n\t\tvar retVal = 0\n\t\tif n == 1 {\n\t\t\tretVal = 1\n\t\t} else if n == 2 {\n\t\t\tretVal = 2\n\t\t} else {\n\t\t\tretVal = fibonacci(n-2) + fibonacci(n-1)\n\t\t}\n\t\treturn retVal\n\n\t}\n\tfunc main() {\n\t\tfmt.Println(fibonacci(5))\n\t}\n```\n\n斐波拉切第一个元素是1，第二个元素是2，后面的元素依次是前两个元素的和。\n\n其实对于递归函数来讲，只要知道了函数的出口，后面的不过是让计算机去不断地推断，一直推断到这个出口。理解了这一点，递归就很好理解了。\n\n\n## 异常处理\n\n当你读取文件失败而退出的时候是否担心文件句柄是否已经关闭？抑或是你对于try...catch...finally的结构中finally里面的代码和try里面的return代码那个先执行这样的问题痛苦不已？\n\n一切都结束了。一门完美的语言必须有一个清晰的无歧义的执行逻辑。\n\n好，来看看Go提供的异常处理。\n\n*defer*\n```go\n\tpackage main\n\n\timport (\n\t\t\"fmt\"\n\t)\n\n\tfunc first() {\n\t\tfmt.Println(\"first func run\")\n\t}\n\tfunc second() {\n\t\tfmt.Println(\"second func run\")\n\t}\n\n\tfunc main() {\n\t\tdefer second()\n\t\tfirst()\n\t}\n```\nGo语言提供了关键字`defer`来在函数运行结束的时候运行一段代码或调用一个清理函数。上面的例子中，虽然second()函数写在first()函数前面，但是由于使用了defer标注，所以它是在main函数执行结束的时候才调用的。\n\n所以输出结果\n```\n\tfirst func run\n\tsecond func run\n```\n`defer`用途最多的在于释放各种资源。比如我们读取一个文件，读完之后需要释放文件句柄。\n```go\n\tpackage main\n\n\timport (\n\t\t\"bufio\"\n\t\t\"fmt\"\n\t\t\"os\"\n\t\t\"strings\"\n\t)\n\n\tfunc main() {\n\t\tfname := \"D:\\\\Temp\\\\test.txt\"\n\t\tf, err := os.Open(fname)\n\t\tdefer f.Close()\n\t\tif err != nil {\n\t\t\tos.Exit(1)\n\t\t}\n\t\tbReader := bufio.NewReader(f)\n\t\tfor {\n\t\t\tline, ok := bReader.ReadString('\\n')\n\t\t\tif ok != nil {\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tfmt.Println(strings.Trim(line, \"\\r\\n\"))\n\t\t}\n\t}\n```\n\n在上面的例子中，我们按行读取文件，并且输出。从代码中，我们可以看到在使用os包中的Open方法打开文件后，立马跟着一个defer语句用来关闭文件句柄。这样就保证了该文件句柄在main函数运行结束的时候或者异常终止的时候一定能够被释放。而且由于紧跟着Open语句，一旦养成了习惯，就不会忘记去关闭文件句柄了。\n\n\n*panic* & *recover*\n\n>当你周末走在林荫道上，听着小歌，哼着小曲，很是惬意。突然之间，从天而降瓢泼大雨，你顿时慌张（panic）起来，没有带伞啊，淋着雨感冒就不好了。于是你四下张望，忽然发现自己离地铁站很近，那里有很多卖伞的，心中顿时又安定了下来（recover），于是你飞奔过去买了一把伞（defer）。\n\n好了，panic和recover是Go语言提供的用以处理异常的关键字。`panic用来触发异常`，而`recover用来终止异常并且返回传递给panic的值`。（注意`recover并不能处理异常`，而且`recover只能在defer里面使用，否则无效`。）\n\n先瞧个小例子\n```go\n\tpackage main\n\n\timport (\n\t\t\"fmt\"\n\t)\n\n\tfunc main() {\n\t\tfmt.Println(\"I am walking and singing...\")\n\t\tpanic(\"It starts to rain cats and dogs\")\n\t\tmsg := recover()\n\t\tfmt.Println(msg)\n\t}\n```\n看看输出结果\n\n```\n\truntime.panic(0x48d380, 0xc084003210)\n        C:/Users/ADMINI~1/AppData/Local/Temp/2/bindist667667715/go/src/pkg/runtime/panic.c:266 \t+0xc8\n\tmain.main()\n        D:/JemyGraw/Creation/Go/freebook_go/func_d1.go:9 +0xea\n\texit status 2\n```\n咦？怎么没有输出recover获取的错误信息呢？\n\n这是因为在运行到panic语句的时候，程序已经异常终止了，后面的代码就不运行了。\n\n那么如何才能阻止程序异常终止呢？这个时候要使用defer。因为`defer一定是在函数执行结束的时候运行的。不管是正常结束还是异常终止`。\n\n修改一下代码\n```go\n\tpackage main\n\n\timport (\n\t\t\"fmt\"\n\t)\n\n\tfunc main() {\n\t\tdefer func() {\n\t\t\tmsg := recover()\n\t\t\tfmt.Println(msg)\n\t\t}()\n\t\tfmt.Println(\"I am walking and singing...\")\n\t\tpanic(\"It starts to rain cats and dogs\")\n\t}\n```\n\n好了，看下输出\n```go\n\tI am walking and singing...\n\tIt starts to rain cats and dogs\n```\n小结：\n\npanic触发的异常通常是运行时错误。比如试图访问的索引超出了数组边界，忘记初始化字典或者任何无法轻易恢复到正常执行的错误。\n\n# Go指针\n不要害怕，Go的指针是好指针。\n\n## 定义\n\n所谓`指针其实你可以把它想像成一个箭头，这个箭头指向（存储）一个变量的地址`。\n\n因为这个箭头本身也需要变量来存储，所以也叫做指针变量。\n\nGo的指针`不支持那些乱七八糟的指针移位`。`它就表示一个变量的地址`。看看这个例子：\n```go\n\tpackage main\n\n\timport (\n\t\t\"fmt\"\n\t)\n\n\tfunc main() {\n\t\tvar x int\n\t\tvar x_ptr *int\n\n\t\tx = 10\n\t\tx_ptr = &x\n\n\t\tfmt.Println(x)\n\t\tfmt.Println(x_ptr)\n\t\tfmt.Println(*x_ptr)\n\t}\n```\n\n上面例子输出`x的值`，`x的地址`和`通过指针变量输出x的值`，而`x_ptr就是一个指针变量`。\n```\n\t10\n\t0xc084000038\n\t10\n```\n认真理清楚这两个符号的意思。\n\n**&** `取一个变量的地址`\n\n**\\*** `取一个指针变量所指向的地址的值`\n\n\n考你一下，上面的例子中，如何输出x_ptr的地址呢？\n```go\n\tpackage main\n\n\timport (\n\t\t\"fmt\"\n\t)\n\n\tfunc main() {\n\t\tvar x int\n\t\tvar x_ptr *int\n\n\t\tx = 10\n\t\tx_ptr = &x\n\n\t\tfmt.Println(&x_ptr)\n\t}\n```\n此例看懂，指针就懂了。\n\n永远记住一句话，`所谓指针就是一个指向（存储）特定变量地址的变量`。没有其他的特别之处。\n\n再变态一下，看看这个：\n```\n\tpackage main\n\n\timport (\n\t\t\"fmt\"\n\t)\n\n\tfunc main() {\n\t\tvar x int\n\t\tvar x_ptr *int\n\n\t\tx = 10\n\t\tx_ptr = &x\n\n\t\tfmt.Println(*&x_ptr)\n\t}\n```\n1. x_ptr 是一个`指针变量`，它`指向(存储)x的地址`；\n2. &x_ptr 是`取这个指针变量x_ptr的地址`，这里可以设想`有另一个指针变量x_ptr_ptr(指向)存储`这个`x_ptr指针的地址`；\n3. *&x_ptr 等价于`*x_ptr_ptr`就是`取这个x_ptr_ptr指针变量`所`指向(存储)`的`地址所对应的变量的值` ，也就是`x_ptr的值`，也就是`指针变量x_ptr指向(存储)的地址`，也就是`x的地址`。 这里可以看到，其实`*&`这两个运算符在一起就相互抵消作用了。\n\n## 用途\n\n`指针的一大用途就是可以将变量的指针作为实参传递给函数，从而在函数内部能够直接修改实参所指向的变量值。`\n\nGo的变量传递都是值传递。\n```go\n\tpackage main\n\n\timport (\n\t\t\"fmt\"\n\t)\n\n\tfunc change(x int) {\n\t\tx = 200\n\t}\n\tfunc main() {\n\t\tvar x int = 100\n\t\tfmt.Println(x)\n\t\tchange(x)\n\t\tfmt.Println(x)\n\t}\n```\n\n上面的例子输出结果为\n```\n\t100\n\t100\n```\n很显然，change函数`改变的`仅仅是`内部变量x`的`值`，而`不会改变`传递进去的`实参`。其实，也就是说Go的函数一般关心的是输出结果，而输入参数就相当于信使跑到函数门口大叫，你们这个参数是什么值，那个是什么值，然后就跑了。你函数根本就不能修改它的值。不过如果是传递的实参是指针变量，那么函数一看，小子这次你地址我都知道了，哪里跑。那么就是下面的例子：\n```go\n\tpackage main\n\n\timport (\n\t\t\"fmt\"\n\t)\n\n\tfunc change(x *int) {\n\t\t*x = 200\n\t}\n\tfunc main() {\n\t\tvar x int = 100\n\t\tfmt.Println(x)\n\t\tchange(&x)\n\t\tfmt.Println(x)\n\t}\n```\n\n上面的例子中，change函数的虚参为`整型指针变量`，所以在main中调用的时候`传递的是x的地址`。然后在change里面使用`*x=200`修改了这个x的地址的值。所以`x的值就变了`。这个输出是：\n```\n\t100\n\t200\n```\n\n## new\n\nnew这个函数挺神奇，因为它的用处太多了。这里还可以通过new来`初始化一个指针`。上面说过指针指向(存储)的是一个变量的地址，但是指针本身也需要地址存储。先看个例子：\n```go\n\tpackage main\n\n\timport (\n\t\t\"fmt\"\n\t)\n\n\tfunc set_value(x_ptr *int) {\n\t\t*x_ptr = 100\n\t}\n\tfunc main() {\n\t\tx_ptr := new(int)\n\t\tset_value(x_ptr)\n\t\t//x_ptr指向的地址\n\t\tfmt.Println(x_ptr)\n\t\t//x_ptr本身的地址\n\t\tfmt.Println(&x_ptr)\n\t\t//x_ptr指向的地址值\n\t\tfmt.Println(*x_ptr)\n\t}\n```\n\n上面我们定义了一个x_ptr变量，然后用`new申请`了一个`存储整型数据的内存地址`，然后将这个`地址赋值`给`x_ptr指针变量`，也就是说`x_ptr指向（存储）的是一个可以存储整型数据的地址`，然后用set_value函数将`这个地址中存储的值`赋值为100。所以第一个输出是`x_ptr指向的地址`，第二个则是`x_ptr本身的地址`，而`*x_ptr`则是`x_ptr指向的地址中存储的整型数据的值`。\n\n```\n\t0xc084000040\n\t0xc084000038\n\t100\n```\n## 小结\n\n好了，现在用个例子再来回顾一下指针。\n\n交换两个变量的值。\n```go\n\tpackage main\n\n\timport (\n\t\t\"fmt\"\n\t)\n\n\tfunc swap(x, y *int) {\n\t\t*x, *y = *y, *x\n\t}\n\tfunc main() {\n\t\tx_val := 100\n\t\ty_val := 200\n\t\tswap(&x_val, &y_val)\n\t\tfmt.Println(x_val)\n\t\tfmt.Println(y_val)\n\t}\n```\n\n很简单吧，这里利用了Go提供的`交叉赋值`的功能，另外由于是使用了指针作为参数，所以在swap函数内，x_val和y_val的值就被交换了。\n\n# Go结构体和指针\n\n基本上到这里的时候，就是上了一个台阶了。Go的精华特点即将展开。\n\n## 结构体定义\n\n上面我们说过Go的指针和C的不同，结构体也是一样的。Go是一门删繁就简的语言，一切令人困惑的特性都必须去掉。\n\n简单来讲，Go提供的`结构体`就是把`使用各种数据类型定义`的`不同变量组合起来`的`高级数据类型`。闲话不多说，看例子:\n```go\n\ttype Rect struct {\n\t\twidth float64\n\t\tlength float64\n\t}\n```\n上面我们定义了一个矩形结构体，首先是关键是`type`表示要`定义一个新的数据类型了`，然后是新的数据类型名称`Rect`，最后是`struct`关键字，表示这个高级数据类型是结构体类型。在上面的例子中，因为`width和length的数据类型相同`，还可以写成如下格式：\n\n```go\n\ttype Rect struct {\n\t\twidth, length float64\n\t}\n```\n\n好了，来用结构体干点啥吧，计算一下矩形面积。\n```go\n\tpackage main\n\n\timport (\n\t\t\"fmt\"\n\t)\n\n\ttype Rect struct {\n\t\twidth, length float64\n\t}\n\n\tfunc main() {\n\t\tvar rect Rect\n\t\trect.width = 100\n\t\trect.length = 200\n\t\tfmt.Println(rect.width * rect.length)\n\t}\n```\n从上面的例子看到，其实结构体类型和基础数据类型使用方式差不多，唯一的区别就是结构体类型可以通过`.`来访问内部的成员。包括`给内部成员赋值`和`读取内部成员值`。\n\n在上面的例子中，我们是用var关键字先定义了一个Rect变量，然后对它的成员赋值。我们也可以使用初始化的方式来给Rect变量的内部成员赋值。\n```go\n\tpackage main\n\n\timport (\n\t\t\"fmt\"\n\t)\n\n\ttype Rect struct {\n\t\twidth, length float64\n\t}\n\n\tfunc main() {\n\t\tvar rect = Rect{width: 100, length: 200}\n\n\t\tfmt.Println(rect.width * rect.length)\n\t}\n```\n\n当然`如果你知道结构体成员定义的顺序`，也可以不使用`key:value`的方式赋值，`直接按照结构体成员定义的顺序给它们赋值`。\n```go\n\tpackage main\n\n\timport (\n\t\t\"fmt\"\n\t)\n\n\ttype Rect struct {\n\t\twidth, length float64\n\t}\n\n\tfunc main() {\n\t\tvar rect = Rect{100, 200}\n\n\t\tfmt.Println(\"Width:\", rect.width, \"* Length:\",\n\t\t\trect.length, \"= Area:\", rect.width*rect.length)\n\t}\n```\n输出结果为\n\n\tWidth: 100 * Length: 200 = Area: 20000\n\n## 结构体参数传递方式\n\n我们说过，`Go函数的参数传递方式是值传递`，这句话`对结构体也是适用的`。\n\n```go\n\tpackage main\n\n\timport (\n\t\t\"fmt\"\n\t)\n\n\ttype Rect struct {\n\t\twidth, length float64\n\t}\n\n\tfunc double_area(rect Rect) float64 {\n\t\trect.width *= 2\n\t\trect.length *= 2\n\t\treturn rect.width * rect.length\n\t}\n\tfunc main() {\n\t\tvar rect = Rect{100, 200}\n\t\tfmt.Println(double_area(rect))\n\t\tfmt.Println(\"Width:\", rect.width, \"Length:\", rect.length)\n\t}\n```\n上面的例子输出为:\n```\n\t80000\n\tWidth: 100 Length: 200\n```\n也就说虽然在double_area函数里面我们将结构体的宽度和长度都加倍，但仍然没有影响main函数里面的rect变量的宽度和长度。\n\n\n## 结构体组合函数\n\n上面我们在main函数中计算了矩形的面积，但是我们觉得矩形的面积如果能够作为矩形结构体的“内部函数”提供会更好。这样我们就可以直接说这个矩形面积是多少，而不用另外去取宽度和长度去计算。现在我们看看结构体“内部函数”定义方法：\n\n```go\n\tpackage main\n\n\timport (\n\t\t\"fmt\"\n\t)\n\n\ttype Rect struct {\n\t\twidth, length float64\n\t}\n\n\tfunc (rect Rect) area() float64 {\n\t\treturn rect.width * rect.length\n\t}\n\n\tfunc main() {\n\t\tvar rect = Rect{100, 200}\n\n\t\tfmt.Println(\"Width:\", rect.width, \"Length:\", rect.length,\n\t\t\t\"Area:\", rect.area())\n\t}\n```\n咦？这个是什么“内部方法”，根本没有定义在Rect数据类型的内部啊？\n\n确实如此，我们看到，虽然main函数中的rect变量可以直接调用函数area()来获取矩形面积，但是area()函数确实没有定义在Rect结构体内部，这点和C语言的有很大不同。`Go使用组合函数的方式来为结构体定义结构体方法`。我们仔细看一下上面的area()函数定义。\n\n首先是关键字`func`表示这是一个函数，第二个参数是`结构体类型和实例变量`，第三个是`函数名称`，第四个是`函数返回值`。这里我们可以看出area()函数和普通函数定义的`区别就在于`area()函数`多了一个结构体类型限定`。这样一来Go就知道了这是一个为结构体定义的`方法`。\n\n这里需要注意一点就是`定义在结构体上面的函数(function)`一般叫做`方法(method)`。\n\n## 结构体和指针\n\n我们在指针一节讲到过，`指针的主要作用就是在函数内部改变传递进来变量的值`。对于上面的计算矩形面积的例子，我们可以修改一下代码如下：\n```go\n\tpackage main\n\n\timport (\n\t\t\"fmt\"\n\t)\n\n\ttype Rect struct {\n\t\twidth, length float64\n\t}\n\n\tfunc (rect *Rect) area() float64 {\n\t\treturn rect.width * rect.length\n\t}\n\n\tfunc main() {\n\t\tvar rect = new(Rect)\n\t\trect.width = 100\n\t\trect.length = 200\n\t\tfmt.Println(\"Width:\", rect.width, \"Length:\", rect.length,\n\t\t\t\"Area:\", rect.area())\n\t}\n```\n\n上面的例子中，使用了new函数来创建一个结构体指针rect，也就是说rect的类型是\\*Rect，结构体遇到指针的时候，你`不需要使用*去访问结构体的成员`，直接使用`.`引用就可以了。所以上面的例子中我们直接使用`rect.width=100` 和`rect.length=200`来设置结构体成员值。因为这个时候rect是结构体指针，所以我们定义area()函数的时候结构体限定类型为`*Rect`。\n\n其实在计算面积的这个例子中，我们不需要改变矩形的宽或者长度，所以定义area函数的时候结构体限定类型仍然为`Rect`也是可以的。如下：\n```go\n\tpackage main\n\n\timport (\n\t\t\"fmt\"\n\t)\n\n\ttype Rect struct {\n\t\twidth, length float64\n\t}\n\n\tfunc (rect Rect) area() float64 {\n\t\treturn rect.width * rect.length\n\t}\n\n\tfunc main() {\n\t\tvar rect = new(Rect)\n\t\trect.width = 100\n\t\trect.length = 200\n\t\tfmt.Println(\"Width:\", rect.width, \"Length:\", rect.length,\n\t\t\t\"Area:\", rect.area())\n\t}\n```\n这里Go足够聪明，所以rect.area()也是可以的。\n\n至于`使不使用结构体指针和使不使用指针的出发点是一样的`，那就是`你是否试图在函数内部改变传递进来的参数的值`。再举个例子如下：\n```go\n\tpackage main\n\n\timport (\n\t\t\"fmt\"\n\t)\n\n\ttype Rect struct {\n\t\twidth, length float64\n\t}\n\n\tfunc (rect *Rect) double_area() float64 {\n\t\trect.width *= 2\n\t\trect.length *= 2\n\t\treturn rect.width * rect.length\n\t}\n\n\tfunc main() {\n\t\tvar rect = new(Rect)\n\t\trect.width = 100\n\t\trect.length = 200\n\t\tfmt.Println(*rect)\n\t\tfmt.Println(\"Double Width:\", rect.width, \"Double Length:\", rect.length,\n\t\t\t\"Double Area:\", rect.double_area())\n\t\tfmt.Println(*rect)\n\t}\n```\n这个例子的输出是：\n```\n\t{100 200}\n\tDouble Width: 200 Double Length: 400 Double Area: 80000\n\t{200 400}\n```\n\n## 结构体内嵌类型\n\n我们可以在一个`结构体内部定义另外一个结构体类型的成员`。例如iPhone也是Phone，我们看下例子：\n```go\n\tpackage main\n\n\timport (\n\t\t\"fmt\"\n\t)\n\n\ttype Phone struct {\n\t\tprice int\n\t\tcolor string\n\t}\n\n\ttype IPhone struct {\n\t\tphone Phone\n\t\tmodel string\n\t}\n\n\tfunc main() {\n\t\tvar p IPhone\n\t\tp.phone.price = 5000\n\t\tp.phone.color = \"Black\"\n\t\tp.model = \"iPhone 5\"\n\t\tfmt.Println(\"I have a iPhone:\")\n\t\tfmt.Println(\"Price:\", p.phone.price)\n\t\tfmt.Println(\"Color:\", p.phone.color)\n\t\tfmt.Println(\"Model:\", p.model)\n\t}\n```\n输出结果为\n```\n\tI have a iPhone:\n\tPrice: 5000\n\tColor: Black\n\tModel: iPhone 5\n```\n在上面的例子中，我们在结构体IPhone里面定义了一个Phone变量phone，然后我们可以像正常的访问结构体成员一样访问phone的成员数据。但是我们原来的意思是`“iPhone也是(is-a)Phone”`，而这里的结构体IPhone里面定义了一个phone变量，给人的感觉就是`“iPhone有一个(has-a)Phone”`，挺奇怪的。当然Go也知道这种方式很奇怪，所以支持如下做法：\n\n```go\n\tpackage main\n\n\timport (\n\t\t\"fmt\"\n\t)\n\n\ttype Phone struct {\n\t\tprice int\n\t\tcolor string\n\t}\n\n\ttype IPhone struct {\n\t\tPhone\n\t\tmodel string\n\t}\n\n\tfunc main() {\n\t\tvar p IPhone\n\t\tp.price = 5000\n\t\tp.color = \"Black\"\n\t\tp.model = \"iPhone 5\"\n\t\tfmt.Println(\"I have a iPhone:\")\n\t\tfmt.Println(\"Price:\", p.price)\n\t\tfmt.Println(\"Color:\", p.color)\n\t\tfmt.Println(\"Model:\", p.model)\n\t}\n```\n输出结果为\n```\n\tI have a iPhone:\n\tPrice: 5000\n\tColor: Black\n\tModel: iPhone 5\n```\n在这个例子中，我们定义IPhone结构体的时候，`不再定义Phone变量`，`直接把结构体Phone类型定义在那里`。然后IPhone就可以`像访问直接定义在自己结构体里面的成员一样访问Phone的成员`。\n\n上面的例子中，我们演示了结构体的内嵌类型以及内嵌类型的成员访问，除此之外，假设结构体A内部定义了一个内嵌结构体B，那么A同时也可以调用所有定义在B上面的函数。\n\n```go\n\tpackage main\n\n\timport (\n\t\t\"fmt\"\n\t)\n\n\ttype Phone struct {\n\t\tprice int\n\t\tcolor string\n\t}\n\n\tfunc (phone Phone) ringing() {\n\t\tfmt.Println(\"Phone is ringing...\")\n\t}\n\n\ttype IPhone struct {\n\t\tPhone\n\t\tmodel string\n\t}\n\n\tfunc main() {\n\t\tvar p IPhone\n\t\tp.price = 5000\n\t\tp.color = \"Black\"\n\t\tp.model = \"iPhone 5\"\n\t\tfmt.Println(\"I have a iPhone:\")\n\t\tfmt.Println(\"Price:\", p.price)\n\t\tfmt.Println(\"Color:\", p.color)\n\t\tfmt.Println(\"Model:\", p.model)\n\n\t\tp.ringing()\n\t}\n```\n输出结果为：\n```\n\tI have a iPhone:\n\tPrice: 5000\n\tColor: Black\n\tModel: iPhone 5\n\tPhone is ringing...\n```\n\n## 接口\n\n我们先看一个例子，关于Nokia手机和iPhone手机都能够打电话的例子。\n```go\n\tpackage main\n\n\timport (\n\t\t\"fmt\"\n\t)\n\n\ttype NokiaPhone struct {\n\t}\n\n\tfunc (nokiaPhone NokiaPhone) call() {\n\t\tfmt.Println(\"I am Nokia, I can call you!\")\n\t}\n\n\ttype IPhone struct {\n\t}\n\n\tfunc (iPhone IPhone) call() {\n\t\tfmt.Println(\"I am iPhone, I can call you!\")\n\t}\n\tfunc main() {\n\t\tvar nokia NokiaPhone\n\t\tnokia.call()\n\n\t\tvar iPhone IPhone\n\t\tiPhone.call()\n\t}\n```\n我们定义了NokiaPhone和IPhone，它们都有各自的方法call()，表示自己都能够打电话。但是我们想一想，是手机都应该能够打电话，所以这个不算是NokiaPhone或是IPhone的独特特点。否则iPhone不可能卖这么贵了。\n\n再仔细看一下`接口的定义`，首先是关键字`type`，然后是`接口名称`，最后是关键字`interface`表示这个类型是接口类型。`在接口类型里面，我们定义了一组方法`。\n\nGo语言提供了一种接口功能，它把所有的具有共性的方法定义在一起，`任何其他类型只要实现了这些方法就是实现了这个接口`，`不一定非要显式地声明`要去实现哪些接口啦。比如上面的手机的call()方法，就完全可以定义在接口Phone里面，而NokiaPhone和IPhone只要实现了这个接口就是一个Phone。\n```go\n\tpackage main\n\n\timport (\n\t\t\"fmt\"\n\t)\n\n\ttype Phone interface {\n\t\tcall()\n\t}\n\n\ttype NokiaPhone struct {\n\t}\n\n\tfunc (nokiaPhone NokiaPhone) call() {\n\t\tfmt.Println(\"I am Nokia, I can call you!\")\n\t}\n\n\ttype IPhone struct {\n\t}\n\n\tfunc (iPhone IPhone) call() {\n\t\tfmt.Println(\"I am iPhone, I can call you!\")\n\t}\n\n\tfunc main() {\n\t\tvar phone Phone\n\n\t\tphone = new(NokiaPhone)\n\t\tphone.call()\n\n\t\tphone = new(IPhone)\n\t\tphone.call()\n\n\t}\n```\n在上面的例子中，我们定义了一个接口Phone，接口里面有一个方法call()，仅此而已。然后我们在main函数里面定义了一个Phone类型变量，并分别为之赋值为NokiaPhone和IPhone。然后调用call()方法，输出结果如下：\n```\n\tI am Nokia, I can call you!\n\tI am iPhone, I can call you!\n```\n以前我们说过，`Go语言式静态类型语言，变量的类型在运行过程中不能改变`。但是在上面的例子中，phone变量好像先定义为Phone类型，然后是NokiaPhone类型，最后成为了IPhone类型，真的是这样吗？\n\n原来，在Go语言里面，`一个类型A只要实现了接口X所定义的全部方法`，那么`A类型的变量`也是`X类型的变量`。在上面的例子中，NokiaPhone和IPhone都实现了Phone接口的call()方法，所以它们都是Phone，这样一来是不是感觉正常了一些。\n\n我们为Phone添加一个方法sales()，再来熟悉一下接口用法。\n```go\n\tpackage main\n\n\timport (\n\t\t\"fmt\"\n\t)\n\n\ttype Phone interface {\n\t\tcall()\n\t\tsales() int\n\t}\n\n\ttype NokiaPhone struct {\n\t\tprice int\n\t}\n\n\tfunc (nokiaPhone NokiaPhone) call() {\n\t\tfmt.Println(\"I am Nokia, I can call you!\")\n\t}\n\tfunc (nokiaPhone NokiaPhone) sales() int {\n\t\treturn nokiaPhone.price\n\t}\n\n\ttype IPhone struct {\n\t\tprice int\n\t}\n\n\tfunc (iPhone IPhone) call() {\n\t\tfmt.Println(\"I am iPhone, I can call you!\")\n\t}\n\n\tfunc (iPhone IPhone) sales() int {\n\t\treturn iPhone.price\n\t}\n\n\tfunc main() {\n\t\tvar phones = [5]Phone{\n\t\t\tNokiaPhone{price: 350},\n\t\t\tIPhone{price: 5000},\n\t\t\tIPhone{price: 3400},\n\t\t\tNokiaPhone{price: 450},\n\t\t\tIPhone{price: 5000},\n\t\t}\n\n\t\tvar totalSales = 0\n\t\tfor _, phone := range phones {\n\t\t\ttotalSales += phone.sales()\n\t\t}\n\t\tfmt.Println(totalSales)\n\n\t}\n```\n输出结果：\n\n\t14200\n\n上面的例子中，我们定义了一个手机数组，然后计算手机的总售价。可以看到，由于NokiaPhone和IPhone都实现了sales()方法，所以它们都是Phone类型，但是计算售价的时候，Go会知道调用哪个对象实现的方法。\n\n接口类型还可以作为结构体的数据成员。\n\n假设有个败家子，iPhone没有出的时候，买了好几款Nokia，iPhone出来后，又买了好多部iPhone，老爸要来看看这小子一共花了多少钱。\n```go\n\tpackage main\n\n\timport (\n\t\t\"fmt\"\n\t)\n\n\ttype Phone interface {\n\t\tsales() int\n\t}\n\n\ttype NokiaPhone struct {\n\t\tprice int\n\t}\n\n\tfunc (nokiaPhone NokiaPhone) sales() int {\n\t\treturn nokiaPhone.price\n\t}\n\n\ttype IPhone struct {\n\t\tprice int\n\t}\n\n\tfunc (iPhone IPhone) sales() int {\n\t\treturn iPhone.price\n\t}\n\n\ttype Person struct {\n\t\tphones []Phone\n\t\tname   string\n\t\tage    int\n\t}\n\n\tfunc (person Person) total_cost() int {\n\t\tvar sum = 0\n\t\tfor _, phone := range person.phones {\n\t\t\tsum += phone.sales()\n\t\t}\n\t\treturn sum\n\t}\n\n\tfunc main() {\n\t\tvar bought_phones = [5]Phone{\n\t\t\tNokiaPhone{price: 350},\n\t\t\tIPhone{price: 5000},\n\t\t\tIPhone{price: 3400},\n\t\t\tNokiaPhone{price: 450},\n\t\t\tIPhone{price: 5000},\n\t\t}\n\n\t\tvar person = Person{name: \"Jemy\", age: 25, phones: bought_phones[:]}\n\n\t\tfmt.Println(person.name)\n\t\tfmt.Println(person.age)\n\t\tfmt.Println(person.total_cost())\n\t}\n```\n这个例子纯为演示接口作为结构体数据成员，如有雷同，纯属巧合。这里面我们定义了一个Person结构体，结构体内部定义了一个手机类型切片。另外我们定义了Person的total_cost()方法用来计算手机花费总额。输出结果如下：\n```\n\tJemy\n\t25\n\t14200\n```\n## 小结\n\nGo的结构体和接口的实现方法可谓删繁就简，去除了很多别的语言令人困惑的地方，而且学习难度也不大，很容易上手。不过由于思想比较独到，也有可能会有人觉得功能太简单而无用，这个就各有看法了，不过在逐渐的使用过程中，我们会慢慢领悟到这种设计所带来的好处，以及所避免的问题。","source":"_posts/goeasylearn2.md","raw":"---\ntitle: go语言基础--函数、指针、结构体、接口\ndate: 2017-07-06 11:10:36\ntags: go语言基础\ncategories: go语言学习笔记\n---\n# Go函数\n是时候讨论一下Go的函数定义了。\n\n## 什么是函数\n\n函数，简单来讲就是一段将`输入数据`转换为`输出数据`的`公用代码块`。当然有的时候函数的返回值为空，那么就是说输出数据为空。而真正的处理过程在函数内部已经完成了。\n<!--more-->\n想一想我们为什么需要函数，最直接的需求就是代码中有太多的重复代码了，为了代码的可读性和可维护性，将这些重复代码重构为函数也是必要的。\n\n## 函数定义\n\n先看一个例子\n```go\n\tpackage main\n\n\timport (\n\t\t\"fmt\"\n\t)\n\n\tfunc slice_sum(arr []int) int {\n\t\tsum := 0\n\t\tfor _, elem := range arr {\n\t\t\tsum += elem\n\t\t}\n\t\treturn sum\n\t}\n\n\tfunc main() {\n\t\tvar arr1 = []int{1, 3, 2, 3, 2}\n\t\tvar arr2 = []int{3, 2, 3, 1, 6, 4, 8, 9}\n\t\tfmt.Println(slice_sum(arr1))\n\t\tfmt.Println(slice_sum(arr2))\n\t}\n```\n在上面的例子中，我们需要分别计算两个切片的元素和。如果我们把计算切片元素的和的代码分别为两个切片展开，那么代码就失去了简洁性和一致性。假设你预想实现同样功能的代码在拷贝粘贴的过程中发生了错误，比如忘记改变量名之类的，到时候debug到崩溃吧。因为这时很有可能你就先入为主了，因为模板代码没有错啊，是不是。所以函数就是这个用处。\n\n我们再仔细看一下上面的函数定义：\n\n首先是关键字`func`，然后后面是`函数名称`，`参数列表`，最后是`返回值列表`。当然如果函数没有参数列表或者返回值，那么这两项都是可选的。其中返回值两边的括号在只声明一个返回值类型的时候可以省略。\n\n## 命名返回值\n\nGo的函数很有趣，你甚至可以为返回值预先定义一个名称，在函数结束的时候，直接一个return就可以返回所有的预定义返回值。例如上面的例子，我们将sum作为命名返回值。\n```go\n\tpackage main\n\n\timport (\n\t\t\"fmt\"\n\t)\n\n\tfunc slice_sum(arr []int) (sum int) {\n\t\tsum = 0\n\t\tfor _, elem := range arr {\n\t\t\tsum += elem\n\t\t}\n\t\treturn\n\t}\n\n\tfunc main() {\n\t\tvar arr1 = []int{1, 3, 2, 3, 2}\n\t\tvar arr2 = []int{3, 2, 3, 1, 6, 4, 8, 9}\n\t\tfmt.Println(slice_sum(arr1))\n\t\tfmt.Println(slice_sum(arr2))\n\t}\n```\n这里要注意的是，如果你定义了命名返回值，那么在函数内部你将不能再重复定义一个同样名称的变量。比如第一个例子中我们用`sum:=0`来定义和初始化变量sum，而在第二个例子中，我们只能用`sum=0`初始化这个变量了。因为`:=`表示的是定义并且初始化变量。\n\n## 实参数和虚参数\n\n可能你听说过函数的实参数和虚参数。其实所谓的`实参数就是函数调用的时候传入的参数`。在上面的例子中，实参就是`arr1`和`arr2`，而`虚参数就是函数定义的时候表示函数需要传入哪些参数的占位参数`。在上面的例子中，虚参就是`arr`。`实参和虚参的名字不必是一样的。即使是一样的，也互不影响。`因为虚参是函数的内部变量。而实参则是另一个函数的内部变量或者是全局变量。它们的作用域不同。如果一个函数的虚参碰巧和一个全局变量名称相同，那么函数使用的也是虚参。例如我们再修改一下上面的例子。\n```go\n\tpackage main\n\n\timport (\n\t\t\"fmt\"\n\t)\n\n\tvar arr = []int{1, 3, 2, 3, 2}\n\n\tfunc slice_sum(arr []int) (sum int) {\n\t\tsum = 0\n\t\tfor _, elem := range arr {\n\t\t\tsum += elem\n\t\t}\n\t\treturn\n\t}\n\n\tfunc main() {\n\t\tvar arr2 = []int{3, 2, 3, 1, 6, 4, 8, 9}\n\t\tfmt.Println(slice_sum(arr))\n\t\tfmt.Println(slice_sum(arr2))\n\t}\n```\n\n在上面的例子中，我们定义了全局变量arr并且初始化值，而我们的slice_sum函数的虚参也是arr，但是程序同样正常工作。\n\n## 函数多返回值\n\n记不记得你在java或者c里面需要返回多个值时还得去定义一个对象或者结构体的呢？在Go里面，你不需要这么做了。Go函数支持你返回多个值。\n\n其实函数的多返回值，我们在上面遇见过很多次了。那就是`range`函数。这个函数用来迭代数组或者切片的时候返回的是两个值，一个是数组或切片元素的索引，另外一个是数组或切片元素。在上面的例子中，因为我们不需要元素的索引，所以我们用一个特殊的忽略返回值符号`下划线(_)`来忽略索引。\n\n假设上面的例子我们除了返回切片的元素和，还想返回切片元素的平均值，那么我们修改一下代码。\n```go\n\tpackage main\n\n\timport (\n\t\t\"fmt\"\n\t)\n\n\tfunc slice_sum(arr []int) (int, float64) {\n\t\tsum := 0\n\t\tavg := 0.0\n\t\tfor _, elem := range arr {\n\t\t\tsum += elem\n\t\t}\n\t\tavg = float64(sum) / float64(len(arr))\n\t\treturn sum, avg\n\t}\n\n\tfunc main() {\n\t\tvar arr1 = []int{3, 2, 3, 1, 6, 4, 8, 9}\n\t\tfmt.Println(slice_sum(arr1))\n\t}\n```\n\n很简单吧，当然我们还可以将上面的参数定义为命名参数\n```go\n\tpackage main\n\n\timport (\n\t\t\"fmt\"\n\t)\n\n\tfunc slice_sum(arr []int) (sum int, avg float64) {\n\t\tsum = 0\n\t\tavg = 0.0\n\t\tfor _, elem := range arr {\n\t\t\tsum += elem\n\t\t}\n\t\tavg = float64(sum) / float64(len(arr))\n\t\t//return sum, avg\n\t\treturn\n\t}\n\n\tfunc main() {\n\t\tvar arr1 = []int{3, 2, 3, 1, 6, 4, 8, 9}\n\t\tfmt.Println(slice_sum(arr1))\n\t}\n```\n\n在上面的代码里面，将`return sum, avg`给注释了而直接使用`return`。其实这两种返回方式都可以。\n\n## 变长参数\n\n想一想我们的fmt包里面的Println函数，它怎么知道你传入的参数个数呢？\n```go\n\tpackage main\n\n\timport (\n\t\t\"fmt\"\n\t)\n\n\tfunc main() {\n\t\tfmt.Println(1)\n\t\tfmt.Println(1, 2)\n\t\tfmt.Println(1, 2, 3)\n\t}\n```\n这个要归功于Go的一大特性，支持可变长参数列表。\n\n首先我们来看一个例子\n```go\n\tpackage main\n\n\timport (\n\t\t\"fmt\"\n\t)\n\n\tfunc sum(arr ...int) int {\n\t\tsum := 0\n\t\tfor _, val := range arr {\n\t\t\tsum += val\n\t\t}\n\t\treturn sum\n\t}\n\tfunc main() {\n\t\tfmt.Println(sum(1))\n\t\tfmt.Println(sum(1, 2))\n\t\tfmt.Println(sum(1, 2, 3))\n\t}\n```\n\n在上面的例子中，我们将原来的切片参数修改为可变长参数，然后使用range函数迭代这些参数，并求和。\n从这里我们可以看出至少一点那就是`可变长参数列表里面的参数类型都是相同的`（*如果你对这句话表示怀疑，可能是因为你看到Println函数恰恰可以输出不同类型的可变参数，这个问题的答案要等到我们介绍完Go的接口后才行*）。\n\n另外还有一点需要注意，那就是`可变长参数定义只能是函数的最后一个参数`。比如下面的例子：\n```go\n\tpackage main\n\n\timport (\n\t\t\"fmt\"\n\t)\n\n\tfunc sum(base int, arr ...int) int {\n\t\tsum := base\n\t\tfor _, val := range arr {\n\t\t\tsum += val\n\t\t}\n\t\treturn sum\n\t}\n\tfunc main() {\n\t\tfmt.Println(sum(100, 1))\n\t\tfmt.Println(sum(200, 1, 2))\n\t\tfmt.Println(sum(300, 1, 2, 3))\n\t}\n```\n\n这里不知道你是否觉得这个例子其实和那个切片的例子很像啊，在哪里呢？\n```go\n\tpackage main\n\n\timport (\n\t\t\"fmt\"\n\t)\n\n\tfunc sum(base int, arr ...int) int {\n\t\tsum := base\n\t\tfor _, val := range arr {\n\t\t\tsum += val\n\t\t}\n\t\treturn sum\n\t}\n\tfunc main() {\n\t\tvar arr1 = []int{1, 2, 3, 4, 5}\n\t\tfmt.Println(sum(300, arr1...))\n\t}\n```\n呵呵，就是把切片“啪，啪，啪”三个耳光打碎了，传递过去啊！:-P\n\n\n## 闭包函数\n\n曾经使用python和javascript的时候就在想，如果有一天可以把这两种语言的特性做个并集该有多好。\n\n这一天终于来了，Go支持闭包函数。\n\n首先看一个闭包函数的例子。所谓闭包函数就是将整个函数的定义一气呵成写好并赋值给一个变量。然后用这个变量名作为函数名去调用函数体。\n\n我们将刚刚的例子修改一下：\n```go\n\tpackage main\n\n\timport (\n\t\t\"fmt\"\n\t)\n\n\tfunc main() {\n\t\tvar arr1 = []int{1, 2, 3, 4, 5}\n\t\t\n\t\tvar sum = func(arr ...int) int {\n\t\t\ttotal_sum := 0\n\t\t\tfor _, val := range arr {\n\t\t\t\ttotal_sum += val\n\t\t\t}\n\t\t\treturn total_sum\n\t\t}\n\t\tfmt.Println(sum(arr1...))\n\t}\n```\n从这里我们可以看出，其实闭包函数也没有什么特别之处。因为Go不支持在一个函数的内部再定义一个嵌套函数，所以使用闭包函数能够实现在一个函数内部定义另一个函数的目的。\n\n这里我们需要注意的一个问题是，闭包函数对它外层的函数中的变量具有`访问`和`修改`的权限。例如：\n```go\n\tpackage main\n\n\timport (\n\t\t\"fmt\"\n\t)\n\n\tfunc main() {\n\t\tvar arr1 = []int{1, 2, 3, 4, 5}\n\t\tvar base = 300\n\t\tvar sum = func(arr ...int) int {\n\t\t\ttotal_sum := 0\n\t\t\ttotal_sum += base\n\t\t\tfor _, val := range arr {\n\t\t\t\ttotal_sum += val\n\t\t\t}\n\t\t\treturn total_sum\n\t\t}\n\t\tfmt.Println(sum(arr1...))\n\t}\n```\n\n这个例子，输出315，因为total_sum加上了base的值。\n```go\n\tpackage main\n\n\timport (\n\t\t\"fmt\"\n\t)\n\n\tfunc main() {\n\t\tvar base = 0\n\t\tinc := func() {\n\t\t\tbase += 1\n\t\t}\n\t\tfmt.Println(base)\n\t\tinc()\n\t\tfmt.Println(base)\n\t}\n```\n\n在上面的例子中，闭包函数修改了main函数的局部变量base。\n\n最后我们来看一个闭包的示例，生成偶数序列。\n```go\n\tpackage main\n\n\timport (\n\t\t\"fmt\"\n\t)\n\n\tfunc createEvenGenerator() func() uint {\n\t\ti := uint(0)\n\t\treturn func() (retVal uint) {\n\t\t\tretVal = i\n\t\t\ti += 2\n\t\t\treturn\n\t\t}\n\t}\n\tfunc main() {\n\t\tnextEven := createEvenGenerator()\n\t\tfmt.Println(nextEven())\n\t\tfmt.Println(nextEven())\n\t\tfmt.Println(nextEven())\n\t}\n```\n\n这个例子很有意思的，因为我们定义了一个`返回函数定义`的函数。而所返回的函数定义就是`在这个函数的内部定义的闭包函数`。这个闭包函数在外层函数调用的时候，每次都生成一个新的偶数（加2操作）然后返回闭包函数定义。\n\n其中`func() uint`就是函数createEvenGenerator的返回值。在createEvenGenerator中，这个返回值是return返回的闭包函数定义。\n```go\n\tfunc() (retVal uint) {\n        \tretVal = i\n        \ti += 2\n        \treturn\n    \t}\n```\n因为createEvenGenerator函数返回的是一个函数定义，所以我们再把它赋值给一个代表函数的变量，然后用这个代表闭包函数的变量去调用函数执行。\n\n## 递归函数\n\n每次谈到递归函数，必然绕不开阶乘和斐波拉切数列。\n\n阶乘\n```go\n\tpackage main\n\n\t/**\n\t    n!=1*2*3*...*n\n\t*/\n\timport (\n\t\t\"fmt\"\n\t)\n\n\tfunc factorial(x uint) uint {\n\t\tif x == 0 {\n\t\t\treturn 1\n\t\t}\n\t\treturn x * factorial(x-1)\n\t}\n\n\tfunc main() {\n\t\tfmt.Println(factorial(5))\n\t}\n```\n\n如果x为0，那么返回1，因为0!=1。如果x是1，那么f(1)=1*f(0)，如果x是2，那么f(2)=2*f(1)=2*1*f(0)，依次推断f(x)=x*(x-1)*...*2*1*f(0)。\n\n从上面看出所谓递归，就是在函数的内部重复调用一个函数的过程。需要注意的是这个函数必须能够一层一层分解，并且有出口。上面的例子出口就是0。\n\n斐波拉切数列\n\n求第N个斐波拉切元素\n```go\n\tpackage main\n\n\t/**\n\t\tf(1)=1\n\t\tf(2)=2\n\t\tf(n)=f(n-2)+f(n-1)\n\t*/\n\timport (\n\t\t\"fmt\"\n\t)\n\n\tfunc fibonacci(n int) int {\n\t\tvar retVal = 0\n\t\tif n == 1 {\n\t\t\tretVal = 1\n\t\t} else if n == 2 {\n\t\t\tretVal = 2\n\t\t} else {\n\t\t\tretVal = fibonacci(n-2) + fibonacci(n-1)\n\t\t}\n\t\treturn retVal\n\n\t}\n\tfunc main() {\n\t\tfmt.Println(fibonacci(5))\n\t}\n```\n\n斐波拉切第一个元素是1，第二个元素是2，后面的元素依次是前两个元素的和。\n\n其实对于递归函数来讲，只要知道了函数的出口，后面的不过是让计算机去不断地推断，一直推断到这个出口。理解了这一点，递归就很好理解了。\n\n\n## 异常处理\n\n当你读取文件失败而退出的时候是否担心文件句柄是否已经关闭？抑或是你对于try...catch...finally的结构中finally里面的代码和try里面的return代码那个先执行这样的问题痛苦不已？\n\n一切都结束了。一门完美的语言必须有一个清晰的无歧义的执行逻辑。\n\n好，来看看Go提供的异常处理。\n\n*defer*\n```go\n\tpackage main\n\n\timport (\n\t\t\"fmt\"\n\t)\n\n\tfunc first() {\n\t\tfmt.Println(\"first func run\")\n\t}\n\tfunc second() {\n\t\tfmt.Println(\"second func run\")\n\t}\n\n\tfunc main() {\n\t\tdefer second()\n\t\tfirst()\n\t}\n```\nGo语言提供了关键字`defer`来在函数运行结束的时候运行一段代码或调用一个清理函数。上面的例子中，虽然second()函数写在first()函数前面，但是由于使用了defer标注，所以它是在main函数执行结束的时候才调用的。\n\n所以输出结果\n```\n\tfirst func run\n\tsecond func run\n```\n`defer`用途最多的在于释放各种资源。比如我们读取一个文件，读完之后需要释放文件句柄。\n```go\n\tpackage main\n\n\timport (\n\t\t\"bufio\"\n\t\t\"fmt\"\n\t\t\"os\"\n\t\t\"strings\"\n\t)\n\n\tfunc main() {\n\t\tfname := \"D:\\\\Temp\\\\test.txt\"\n\t\tf, err := os.Open(fname)\n\t\tdefer f.Close()\n\t\tif err != nil {\n\t\t\tos.Exit(1)\n\t\t}\n\t\tbReader := bufio.NewReader(f)\n\t\tfor {\n\t\t\tline, ok := bReader.ReadString('\\n')\n\t\t\tif ok != nil {\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tfmt.Println(strings.Trim(line, \"\\r\\n\"))\n\t\t}\n\t}\n```\n\n在上面的例子中，我们按行读取文件，并且输出。从代码中，我们可以看到在使用os包中的Open方法打开文件后，立马跟着一个defer语句用来关闭文件句柄。这样就保证了该文件句柄在main函数运行结束的时候或者异常终止的时候一定能够被释放。而且由于紧跟着Open语句，一旦养成了习惯，就不会忘记去关闭文件句柄了。\n\n\n*panic* & *recover*\n\n>当你周末走在林荫道上，听着小歌，哼着小曲，很是惬意。突然之间，从天而降瓢泼大雨，你顿时慌张（panic）起来，没有带伞啊，淋着雨感冒就不好了。于是你四下张望，忽然发现自己离地铁站很近，那里有很多卖伞的，心中顿时又安定了下来（recover），于是你飞奔过去买了一把伞（defer）。\n\n好了，panic和recover是Go语言提供的用以处理异常的关键字。`panic用来触发异常`，而`recover用来终止异常并且返回传递给panic的值`。（注意`recover并不能处理异常`，而且`recover只能在defer里面使用，否则无效`。）\n\n先瞧个小例子\n```go\n\tpackage main\n\n\timport (\n\t\t\"fmt\"\n\t)\n\n\tfunc main() {\n\t\tfmt.Println(\"I am walking and singing...\")\n\t\tpanic(\"It starts to rain cats and dogs\")\n\t\tmsg := recover()\n\t\tfmt.Println(msg)\n\t}\n```\n看看输出结果\n\n```\n\truntime.panic(0x48d380, 0xc084003210)\n        C:/Users/ADMINI~1/AppData/Local/Temp/2/bindist667667715/go/src/pkg/runtime/panic.c:266 \t+0xc8\n\tmain.main()\n        D:/JemyGraw/Creation/Go/freebook_go/func_d1.go:9 +0xea\n\texit status 2\n```\n咦？怎么没有输出recover获取的错误信息呢？\n\n这是因为在运行到panic语句的时候，程序已经异常终止了，后面的代码就不运行了。\n\n那么如何才能阻止程序异常终止呢？这个时候要使用defer。因为`defer一定是在函数执行结束的时候运行的。不管是正常结束还是异常终止`。\n\n修改一下代码\n```go\n\tpackage main\n\n\timport (\n\t\t\"fmt\"\n\t)\n\n\tfunc main() {\n\t\tdefer func() {\n\t\t\tmsg := recover()\n\t\t\tfmt.Println(msg)\n\t\t}()\n\t\tfmt.Println(\"I am walking and singing...\")\n\t\tpanic(\"It starts to rain cats and dogs\")\n\t}\n```\n\n好了，看下输出\n```go\n\tI am walking and singing...\n\tIt starts to rain cats and dogs\n```\n小结：\n\npanic触发的异常通常是运行时错误。比如试图访问的索引超出了数组边界，忘记初始化字典或者任何无法轻易恢复到正常执行的错误。\n\n# Go指针\n不要害怕，Go的指针是好指针。\n\n## 定义\n\n所谓`指针其实你可以把它想像成一个箭头，这个箭头指向（存储）一个变量的地址`。\n\n因为这个箭头本身也需要变量来存储，所以也叫做指针变量。\n\nGo的指针`不支持那些乱七八糟的指针移位`。`它就表示一个变量的地址`。看看这个例子：\n```go\n\tpackage main\n\n\timport (\n\t\t\"fmt\"\n\t)\n\n\tfunc main() {\n\t\tvar x int\n\t\tvar x_ptr *int\n\n\t\tx = 10\n\t\tx_ptr = &x\n\n\t\tfmt.Println(x)\n\t\tfmt.Println(x_ptr)\n\t\tfmt.Println(*x_ptr)\n\t}\n```\n\n上面例子输出`x的值`，`x的地址`和`通过指针变量输出x的值`，而`x_ptr就是一个指针变量`。\n```\n\t10\n\t0xc084000038\n\t10\n```\n认真理清楚这两个符号的意思。\n\n**&** `取一个变量的地址`\n\n**\\*** `取一个指针变量所指向的地址的值`\n\n\n考你一下，上面的例子中，如何输出x_ptr的地址呢？\n```go\n\tpackage main\n\n\timport (\n\t\t\"fmt\"\n\t)\n\n\tfunc main() {\n\t\tvar x int\n\t\tvar x_ptr *int\n\n\t\tx = 10\n\t\tx_ptr = &x\n\n\t\tfmt.Println(&x_ptr)\n\t}\n```\n此例看懂，指针就懂了。\n\n永远记住一句话，`所谓指针就是一个指向（存储）特定变量地址的变量`。没有其他的特别之处。\n\n再变态一下，看看这个：\n```\n\tpackage main\n\n\timport (\n\t\t\"fmt\"\n\t)\n\n\tfunc main() {\n\t\tvar x int\n\t\tvar x_ptr *int\n\n\t\tx = 10\n\t\tx_ptr = &x\n\n\t\tfmt.Println(*&x_ptr)\n\t}\n```\n1. x_ptr 是一个`指针变量`，它`指向(存储)x的地址`；\n2. &x_ptr 是`取这个指针变量x_ptr的地址`，这里可以设想`有另一个指针变量x_ptr_ptr(指向)存储`这个`x_ptr指针的地址`；\n3. *&x_ptr 等价于`*x_ptr_ptr`就是`取这个x_ptr_ptr指针变量`所`指向(存储)`的`地址所对应的变量的值` ，也就是`x_ptr的值`，也就是`指针变量x_ptr指向(存储)的地址`，也就是`x的地址`。 这里可以看到，其实`*&`这两个运算符在一起就相互抵消作用了。\n\n## 用途\n\n`指针的一大用途就是可以将变量的指针作为实参传递给函数，从而在函数内部能够直接修改实参所指向的变量值。`\n\nGo的变量传递都是值传递。\n```go\n\tpackage main\n\n\timport (\n\t\t\"fmt\"\n\t)\n\n\tfunc change(x int) {\n\t\tx = 200\n\t}\n\tfunc main() {\n\t\tvar x int = 100\n\t\tfmt.Println(x)\n\t\tchange(x)\n\t\tfmt.Println(x)\n\t}\n```\n\n上面的例子输出结果为\n```\n\t100\n\t100\n```\n很显然，change函数`改变的`仅仅是`内部变量x`的`值`，而`不会改变`传递进去的`实参`。其实，也就是说Go的函数一般关心的是输出结果，而输入参数就相当于信使跑到函数门口大叫，你们这个参数是什么值，那个是什么值，然后就跑了。你函数根本就不能修改它的值。不过如果是传递的实参是指针变量，那么函数一看，小子这次你地址我都知道了，哪里跑。那么就是下面的例子：\n```go\n\tpackage main\n\n\timport (\n\t\t\"fmt\"\n\t)\n\n\tfunc change(x *int) {\n\t\t*x = 200\n\t}\n\tfunc main() {\n\t\tvar x int = 100\n\t\tfmt.Println(x)\n\t\tchange(&x)\n\t\tfmt.Println(x)\n\t}\n```\n\n上面的例子中，change函数的虚参为`整型指针变量`，所以在main中调用的时候`传递的是x的地址`。然后在change里面使用`*x=200`修改了这个x的地址的值。所以`x的值就变了`。这个输出是：\n```\n\t100\n\t200\n```\n\n## new\n\nnew这个函数挺神奇，因为它的用处太多了。这里还可以通过new来`初始化一个指针`。上面说过指针指向(存储)的是一个变量的地址，但是指针本身也需要地址存储。先看个例子：\n```go\n\tpackage main\n\n\timport (\n\t\t\"fmt\"\n\t)\n\n\tfunc set_value(x_ptr *int) {\n\t\t*x_ptr = 100\n\t}\n\tfunc main() {\n\t\tx_ptr := new(int)\n\t\tset_value(x_ptr)\n\t\t//x_ptr指向的地址\n\t\tfmt.Println(x_ptr)\n\t\t//x_ptr本身的地址\n\t\tfmt.Println(&x_ptr)\n\t\t//x_ptr指向的地址值\n\t\tfmt.Println(*x_ptr)\n\t}\n```\n\n上面我们定义了一个x_ptr变量，然后用`new申请`了一个`存储整型数据的内存地址`，然后将这个`地址赋值`给`x_ptr指针变量`，也就是说`x_ptr指向（存储）的是一个可以存储整型数据的地址`，然后用set_value函数将`这个地址中存储的值`赋值为100。所以第一个输出是`x_ptr指向的地址`，第二个则是`x_ptr本身的地址`，而`*x_ptr`则是`x_ptr指向的地址中存储的整型数据的值`。\n\n```\n\t0xc084000040\n\t0xc084000038\n\t100\n```\n## 小结\n\n好了，现在用个例子再来回顾一下指针。\n\n交换两个变量的值。\n```go\n\tpackage main\n\n\timport (\n\t\t\"fmt\"\n\t)\n\n\tfunc swap(x, y *int) {\n\t\t*x, *y = *y, *x\n\t}\n\tfunc main() {\n\t\tx_val := 100\n\t\ty_val := 200\n\t\tswap(&x_val, &y_val)\n\t\tfmt.Println(x_val)\n\t\tfmt.Println(y_val)\n\t}\n```\n\n很简单吧，这里利用了Go提供的`交叉赋值`的功能，另外由于是使用了指针作为参数，所以在swap函数内，x_val和y_val的值就被交换了。\n\n# Go结构体和指针\n\n基本上到这里的时候，就是上了一个台阶了。Go的精华特点即将展开。\n\n## 结构体定义\n\n上面我们说过Go的指针和C的不同，结构体也是一样的。Go是一门删繁就简的语言，一切令人困惑的特性都必须去掉。\n\n简单来讲，Go提供的`结构体`就是把`使用各种数据类型定义`的`不同变量组合起来`的`高级数据类型`。闲话不多说，看例子:\n```go\n\ttype Rect struct {\n\t\twidth float64\n\t\tlength float64\n\t}\n```\n上面我们定义了一个矩形结构体，首先是关键是`type`表示要`定义一个新的数据类型了`，然后是新的数据类型名称`Rect`，最后是`struct`关键字，表示这个高级数据类型是结构体类型。在上面的例子中，因为`width和length的数据类型相同`，还可以写成如下格式：\n\n```go\n\ttype Rect struct {\n\t\twidth, length float64\n\t}\n```\n\n好了，来用结构体干点啥吧，计算一下矩形面积。\n```go\n\tpackage main\n\n\timport (\n\t\t\"fmt\"\n\t)\n\n\ttype Rect struct {\n\t\twidth, length float64\n\t}\n\n\tfunc main() {\n\t\tvar rect Rect\n\t\trect.width = 100\n\t\trect.length = 200\n\t\tfmt.Println(rect.width * rect.length)\n\t}\n```\n从上面的例子看到，其实结构体类型和基础数据类型使用方式差不多，唯一的区别就是结构体类型可以通过`.`来访问内部的成员。包括`给内部成员赋值`和`读取内部成员值`。\n\n在上面的例子中，我们是用var关键字先定义了一个Rect变量，然后对它的成员赋值。我们也可以使用初始化的方式来给Rect变量的内部成员赋值。\n```go\n\tpackage main\n\n\timport (\n\t\t\"fmt\"\n\t)\n\n\ttype Rect struct {\n\t\twidth, length float64\n\t}\n\n\tfunc main() {\n\t\tvar rect = Rect{width: 100, length: 200}\n\n\t\tfmt.Println(rect.width * rect.length)\n\t}\n```\n\n当然`如果你知道结构体成员定义的顺序`，也可以不使用`key:value`的方式赋值，`直接按照结构体成员定义的顺序给它们赋值`。\n```go\n\tpackage main\n\n\timport (\n\t\t\"fmt\"\n\t)\n\n\ttype Rect struct {\n\t\twidth, length float64\n\t}\n\n\tfunc main() {\n\t\tvar rect = Rect{100, 200}\n\n\t\tfmt.Println(\"Width:\", rect.width, \"* Length:\",\n\t\t\trect.length, \"= Area:\", rect.width*rect.length)\n\t}\n```\n输出结果为\n\n\tWidth: 100 * Length: 200 = Area: 20000\n\n## 结构体参数传递方式\n\n我们说过，`Go函数的参数传递方式是值传递`，这句话`对结构体也是适用的`。\n\n```go\n\tpackage main\n\n\timport (\n\t\t\"fmt\"\n\t)\n\n\ttype Rect struct {\n\t\twidth, length float64\n\t}\n\n\tfunc double_area(rect Rect) float64 {\n\t\trect.width *= 2\n\t\trect.length *= 2\n\t\treturn rect.width * rect.length\n\t}\n\tfunc main() {\n\t\tvar rect = Rect{100, 200}\n\t\tfmt.Println(double_area(rect))\n\t\tfmt.Println(\"Width:\", rect.width, \"Length:\", rect.length)\n\t}\n```\n上面的例子输出为:\n```\n\t80000\n\tWidth: 100 Length: 200\n```\n也就说虽然在double_area函数里面我们将结构体的宽度和长度都加倍，但仍然没有影响main函数里面的rect变量的宽度和长度。\n\n\n## 结构体组合函数\n\n上面我们在main函数中计算了矩形的面积，但是我们觉得矩形的面积如果能够作为矩形结构体的“内部函数”提供会更好。这样我们就可以直接说这个矩形面积是多少，而不用另外去取宽度和长度去计算。现在我们看看结构体“内部函数”定义方法：\n\n```go\n\tpackage main\n\n\timport (\n\t\t\"fmt\"\n\t)\n\n\ttype Rect struct {\n\t\twidth, length float64\n\t}\n\n\tfunc (rect Rect) area() float64 {\n\t\treturn rect.width * rect.length\n\t}\n\n\tfunc main() {\n\t\tvar rect = Rect{100, 200}\n\n\t\tfmt.Println(\"Width:\", rect.width, \"Length:\", rect.length,\n\t\t\t\"Area:\", rect.area())\n\t}\n```\n咦？这个是什么“内部方法”，根本没有定义在Rect数据类型的内部啊？\n\n确实如此，我们看到，虽然main函数中的rect变量可以直接调用函数area()来获取矩形面积，但是area()函数确实没有定义在Rect结构体内部，这点和C语言的有很大不同。`Go使用组合函数的方式来为结构体定义结构体方法`。我们仔细看一下上面的area()函数定义。\n\n首先是关键字`func`表示这是一个函数，第二个参数是`结构体类型和实例变量`，第三个是`函数名称`，第四个是`函数返回值`。这里我们可以看出area()函数和普通函数定义的`区别就在于`area()函数`多了一个结构体类型限定`。这样一来Go就知道了这是一个为结构体定义的`方法`。\n\n这里需要注意一点就是`定义在结构体上面的函数(function)`一般叫做`方法(method)`。\n\n## 结构体和指针\n\n我们在指针一节讲到过，`指针的主要作用就是在函数内部改变传递进来变量的值`。对于上面的计算矩形面积的例子，我们可以修改一下代码如下：\n```go\n\tpackage main\n\n\timport (\n\t\t\"fmt\"\n\t)\n\n\ttype Rect struct {\n\t\twidth, length float64\n\t}\n\n\tfunc (rect *Rect) area() float64 {\n\t\treturn rect.width * rect.length\n\t}\n\n\tfunc main() {\n\t\tvar rect = new(Rect)\n\t\trect.width = 100\n\t\trect.length = 200\n\t\tfmt.Println(\"Width:\", rect.width, \"Length:\", rect.length,\n\t\t\t\"Area:\", rect.area())\n\t}\n```\n\n上面的例子中，使用了new函数来创建一个结构体指针rect，也就是说rect的类型是\\*Rect，结构体遇到指针的时候，你`不需要使用*去访问结构体的成员`，直接使用`.`引用就可以了。所以上面的例子中我们直接使用`rect.width=100` 和`rect.length=200`来设置结构体成员值。因为这个时候rect是结构体指针，所以我们定义area()函数的时候结构体限定类型为`*Rect`。\n\n其实在计算面积的这个例子中，我们不需要改变矩形的宽或者长度，所以定义area函数的时候结构体限定类型仍然为`Rect`也是可以的。如下：\n```go\n\tpackage main\n\n\timport (\n\t\t\"fmt\"\n\t)\n\n\ttype Rect struct {\n\t\twidth, length float64\n\t}\n\n\tfunc (rect Rect) area() float64 {\n\t\treturn rect.width * rect.length\n\t}\n\n\tfunc main() {\n\t\tvar rect = new(Rect)\n\t\trect.width = 100\n\t\trect.length = 200\n\t\tfmt.Println(\"Width:\", rect.width, \"Length:\", rect.length,\n\t\t\t\"Area:\", rect.area())\n\t}\n```\n这里Go足够聪明，所以rect.area()也是可以的。\n\n至于`使不使用结构体指针和使不使用指针的出发点是一样的`，那就是`你是否试图在函数内部改变传递进来的参数的值`。再举个例子如下：\n```go\n\tpackage main\n\n\timport (\n\t\t\"fmt\"\n\t)\n\n\ttype Rect struct {\n\t\twidth, length float64\n\t}\n\n\tfunc (rect *Rect) double_area() float64 {\n\t\trect.width *= 2\n\t\trect.length *= 2\n\t\treturn rect.width * rect.length\n\t}\n\n\tfunc main() {\n\t\tvar rect = new(Rect)\n\t\trect.width = 100\n\t\trect.length = 200\n\t\tfmt.Println(*rect)\n\t\tfmt.Println(\"Double Width:\", rect.width, \"Double Length:\", rect.length,\n\t\t\t\"Double Area:\", rect.double_area())\n\t\tfmt.Println(*rect)\n\t}\n```\n这个例子的输出是：\n```\n\t{100 200}\n\tDouble Width: 200 Double Length: 400 Double Area: 80000\n\t{200 400}\n```\n\n## 结构体内嵌类型\n\n我们可以在一个`结构体内部定义另外一个结构体类型的成员`。例如iPhone也是Phone，我们看下例子：\n```go\n\tpackage main\n\n\timport (\n\t\t\"fmt\"\n\t)\n\n\ttype Phone struct {\n\t\tprice int\n\t\tcolor string\n\t}\n\n\ttype IPhone struct {\n\t\tphone Phone\n\t\tmodel string\n\t}\n\n\tfunc main() {\n\t\tvar p IPhone\n\t\tp.phone.price = 5000\n\t\tp.phone.color = \"Black\"\n\t\tp.model = \"iPhone 5\"\n\t\tfmt.Println(\"I have a iPhone:\")\n\t\tfmt.Println(\"Price:\", p.phone.price)\n\t\tfmt.Println(\"Color:\", p.phone.color)\n\t\tfmt.Println(\"Model:\", p.model)\n\t}\n```\n输出结果为\n```\n\tI have a iPhone:\n\tPrice: 5000\n\tColor: Black\n\tModel: iPhone 5\n```\n在上面的例子中，我们在结构体IPhone里面定义了一个Phone变量phone，然后我们可以像正常的访问结构体成员一样访问phone的成员数据。但是我们原来的意思是`“iPhone也是(is-a)Phone”`，而这里的结构体IPhone里面定义了一个phone变量，给人的感觉就是`“iPhone有一个(has-a)Phone”`，挺奇怪的。当然Go也知道这种方式很奇怪，所以支持如下做法：\n\n```go\n\tpackage main\n\n\timport (\n\t\t\"fmt\"\n\t)\n\n\ttype Phone struct {\n\t\tprice int\n\t\tcolor string\n\t}\n\n\ttype IPhone struct {\n\t\tPhone\n\t\tmodel string\n\t}\n\n\tfunc main() {\n\t\tvar p IPhone\n\t\tp.price = 5000\n\t\tp.color = \"Black\"\n\t\tp.model = \"iPhone 5\"\n\t\tfmt.Println(\"I have a iPhone:\")\n\t\tfmt.Println(\"Price:\", p.price)\n\t\tfmt.Println(\"Color:\", p.color)\n\t\tfmt.Println(\"Model:\", p.model)\n\t}\n```\n输出结果为\n```\n\tI have a iPhone:\n\tPrice: 5000\n\tColor: Black\n\tModel: iPhone 5\n```\n在这个例子中，我们定义IPhone结构体的时候，`不再定义Phone变量`，`直接把结构体Phone类型定义在那里`。然后IPhone就可以`像访问直接定义在自己结构体里面的成员一样访问Phone的成员`。\n\n上面的例子中，我们演示了结构体的内嵌类型以及内嵌类型的成员访问，除此之外，假设结构体A内部定义了一个内嵌结构体B，那么A同时也可以调用所有定义在B上面的函数。\n\n```go\n\tpackage main\n\n\timport (\n\t\t\"fmt\"\n\t)\n\n\ttype Phone struct {\n\t\tprice int\n\t\tcolor string\n\t}\n\n\tfunc (phone Phone) ringing() {\n\t\tfmt.Println(\"Phone is ringing...\")\n\t}\n\n\ttype IPhone struct {\n\t\tPhone\n\t\tmodel string\n\t}\n\n\tfunc main() {\n\t\tvar p IPhone\n\t\tp.price = 5000\n\t\tp.color = \"Black\"\n\t\tp.model = \"iPhone 5\"\n\t\tfmt.Println(\"I have a iPhone:\")\n\t\tfmt.Println(\"Price:\", p.price)\n\t\tfmt.Println(\"Color:\", p.color)\n\t\tfmt.Println(\"Model:\", p.model)\n\n\t\tp.ringing()\n\t}\n```\n输出结果为：\n```\n\tI have a iPhone:\n\tPrice: 5000\n\tColor: Black\n\tModel: iPhone 5\n\tPhone is ringing...\n```\n\n## 接口\n\n我们先看一个例子，关于Nokia手机和iPhone手机都能够打电话的例子。\n```go\n\tpackage main\n\n\timport (\n\t\t\"fmt\"\n\t)\n\n\ttype NokiaPhone struct {\n\t}\n\n\tfunc (nokiaPhone NokiaPhone) call() {\n\t\tfmt.Println(\"I am Nokia, I can call you!\")\n\t}\n\n\ttype IPhone struct {\n\t}\n\n\tfunc (iPhone IPhone) call() {\n\t\tfmt.Println(\"I am iPhone, I can call you!\")\n\t}\n\tfunc main() {\n\t\tvar nokia NokiaPhone\n\t\tnokia.call()\n\n\t\tvar iPhone IPhone\n\t\tiPhone.call()\n\t}\n```\n我们定义了NokiaPhone和IPhone，它们都有各自的方法call()，表示自己都能够打电话。但是我们想一想，是手机都应该能够打电话，所以这个不算是NokiaPhone或是IPhone的独特特点。否则iPhone不可能卖这么贵了。\n\n再仔细看一下`接口的定义`，首先是关键字`type`，然后是`接口名称`，最后是关键字`interface`表示这个类型是接口类型。`在接口类型里面，我们定义了一组方法`。\n\nGo语言提供了一种接口功能，它把所有的具有共性的方法定义在一起，`任何其他类型只要实现了这些方法就是实现了这个接口`，`不一定非要显式地声明`要去实现哪些接口啦。比如上面的手机的call()方法，就完全可以定义在接口Phone里面，而NokiaPhone和IPhone只要实现了这个接口就是一个Phone。\n```go\n\tpackage main\n\n\timport (\n\t\t\"fmt\"\n\t)\n\n\ttype Phone interface {\n\t\tcall()\n\t}\n\n\ttype NokiaPhone struct {\n\t}\n\n\tfunc (nokiaPhone NokiaPhone) call() {\n\t\tfmt.Println(\"I am Nokia, I can call you!\")\n\t}\n\n\ttype IPhone struct {\n\t}\n\n\tfunc (iPhone IPhone) call() {\n\t\tfmt.Println(\"I am iPhone, I can call you!\")\n\t}\n\n\tfunc main() {\n\t\tvar phone Phone\n\n\t\tphone = new(NokiaPhone)\n\t\tphone.call()\n\n\t\tphone = new(IPhone)\n\t\tphone.call()\n\n\t}\n```\n在上面的例子中，我们定义了一个接口Phone，接口里面有一个方法call()，仅此而已。然后我们在main函数里面定义了一个Phone类型变量，并分别为之赋值为NokiaPhone和IPhone。然后调用call()方法，输出结果如下：\n```\n\tI am Nokia, I can call you!\n\tI am iPhone, I can call you!\n```\n以前我们说过，`Go语言式静态类型语言，变量的类型在运行过程中不能改变`。但是在上面的例子中，phone变量好像先定义为Phone类型，然后是NokiaPhone类型，最后成为了IPhone类型，真的是这样吗？\n\n原来，在Go语言里面，`一个类型A只要实现了接口X所定义的全部方法`，那么`A类型的变量`也是`X类型的变量`。在上面的例子中，NokiaPhone和IPhone都实现了Phone接口的call()方法，所以它们都是Phone，这样一来是不是感觉正常了一些。\n\n我们为Phone添加一个方法sales()，再来熟悉一下接口用法。\n```go\n\tpackage main\n\n\timport (\n\t\t\"fmt\"\n\t)\n\n\ttype Phone interface {\n\t\tcall()\n\t\tsales() int\n\t}\n\n\ttype NokiaPhone struct {\n\t\tprice int\n\t}\n\n\tfunc (nokiaPhone NokiaPhone) call() {\n\t\tfmt.Println(\"I am Nokia, I can call you!\")\n\t}\n\tfunc (nokiaPhone NokiaPhone) sales() int {\n\t\treturn nokiaPhone.price\n\t}\n\n\ttype IPhone struct {\n\t\tprice int\n\t}\n\n\tfunc (iPhone IPhone) call() {\n\t\tfmt.Println(\"I am iPhone, I can call you!\")\n\t}\n\n\tfunc (iPhone IPhone) sales() int {\n\t\treturn iPhone.price\n\t}\n\n\tfunc main() {\n\t\tvar phones = [5]Phone{\n\t\t\tNokiaPhone{price: 350},\n\t\t\tIPhone{price: 5000},\n\t\t\tIPhone{price: 3400},\n\t\t\tNokiaPhone{price: 450},\n\t\t\tIPhone{price: 5000},\n\t\t}\n\n\t\tvar totalSales = 0\n\t\tfor _, phone := range phones {\n\t\t\ttotalSales += phone.sales()\n\t\t}\n\t\tfmt.Println(totalSales)\n\n\t}\n```\n输出结果：\n\n\t14200\n\n上面的例子中，我们定义了一个手机数组，然后计算手机的总售价。可以看到，由于NokiaPhone和IPhone都实现了sales()方法，所以它们都是Phone类型，但是计算售价的时候，Go会知道调用哪个对象实现的方法。\n\n接口类型还可以作为结构体的数据成员。\n\n假设有个败家子，iPhone没有出的时候，买了好几款Nokia，iPhone出来后，又买了好多部iPhone，老爸要来看看这小子一共花了多少钱。\n```go\n\tpackage main\n\n\timport (\n\t\t\"fmt\"\n\t)\n\n\ttype Phone interface {\n\t\tsales() int\n\t}\n\n\ttype NokiaPhone struct {\n\t\tprice int\n\t}\n\n\tfunc (nokiaPhone NokiaPhone) sales() int {\n\t\treturn nokiaPhone.price\n\t}\n\n\ttype IPhone struct {\n\t\tprice int\n\t}\n\n\tfunc (iPhone IPhone) sales() int {\n\t\treturn iPhone.price\n\t}\n\n\ttype Person struct {\n\t\tphones []Phone\n\t\tname   string\n\t\tage    int\n\t}\n\n\tfunc (person Person) total_cost() int {\n\t\tvar sum = 0\n\t\tfor _, phone := range person.phones {\n\t\t\tsum += phone.sales()\n\t\t}\n\t\treturn sum\n\t}\n\n\tfunc main() {\n\t\tvar bought_phones = [5]Phone{\n\t\t\tNokiaPhone{price: 350},\n\t\t\tIPhone{price: 5000},\n\t\t\tIPhone{price: 3400},\n\t\t\tNokiaPhone{price: 450},\n\t\t\tIPhone{price: 5000},\n\t\t}\n\n\t\tvar person = Person{name: \"Jemy\", age: 25, phones: bought_phones[:]}\n\n\t\tfmt.Println(person.name)\n\t\tfmt.Println(person.age)\n\t\tfmt.Println(person.total_cost())\n\t}\n```\n这个例子纯为演示接口作为结构体数据成员，如有雷同，纯属巧合。这里面我们定义了一个Person结构体，结构体内部定义了一个手机类型切片。另外我们定义了Person的total_cost()方法用来计算手机花费总额。输出结果如下：\n```\n\tJemy\n\t25\n\t14200\n```\n## 小结\n\nGo的结构体和接口的实现方法可谓删繁就简，去除了很多别的语言令人困惑的地方，而且学习难度也不大，很容易上手。不过由于思想比较独到，也有可能会有人觉得功能太简单而无用，这个就各有看法了，不过在逐渐的使用过程中，我们会慢慢领悟到这种设计所带来的好处，以及所避免的问题。","slug":"goeasylearn2","published":1,"updated":"2018-01-02T00:50:36.835Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjbwxj0yt000jh0vob869tz87","content":"<h1 id=\"Go函数\"><a href=\"#Go函数\" class=\"headerlink\" title=\"Go函数\"></a>Go函数</h1><p>是时候讨论一下Go的函数定义了。</p>\n<h2 id=\"什么是函数\"><a href=\"#什么是函数\" class=\"headerlink\" title=\"什么是函数\"></a>什么是函数</h2><p>函数，简单来讲就是一段将<code>输入数据</code>转换为<code>输出数据</code>的<code>公用代码块</code>。当然有的时候函数的返回值为空，那么就是说输出数据为空。而真正的处理过程在函数内部已经完成了。<br><a id=\"more\"></a><br>想一想我们为什么需要函数，最直接的需求就是代码中有太多的重复代码了，为了代码的可读性和可维护性，将这些重复代码重构为函数也是必要的。</p>\n<h2 id=\"函数定义\"><a href=\"#函数定义\" class=\"headerlink\" title=\"函数定义\"></a>函数定义</h2><p>先看一个例子<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">slice_sum</span><span class=\"params\">(arr []<span class=\"keyword\">int</span>)</span> <span class=\"title\">int</span></span> &#123;</span><br><span class=\"line\">\tsum := <span class=\"number\">0</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> _, elem := <span class=\"keyword\">range</span> arr &#123;</span><br><span class=\"line\">\t\tsum += elem</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> sum</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> arr1 = []<span class=\"keyword\">int</span>&#123;<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">2</span>&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> arr2 = []<span class=\"keyword\">int</span>&#123;<span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">1</span>, <span class=\"number\">6</span>, <span class=\"number\">4</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>&#125;</span><br><span class=\"line\">\tfmt.Println(slice_sum(arr1))</span><br><span class=\"line\">\tfmt.Println(slice_sum(arr2))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>在上面的例子中，我们需要分别计算两个切片的元素和。如果我们把计算切片元素的和的代码分别为两个切片展开，那么代码就失去了简洁性和一致性。假设你预想实现同样功能的代码在拷贝粘贴的过程中发生了错误，比如忘记改变量名之类的，到时候debug到崩溃吧。因为这时很有可能你就先入为主了，因为模板代码没有错啊，是不是。所以函数就是这个用处。</p>\n<p>我们再仔细看一下上面的函数定义：</p>\n<p>首先是关键字<code>func</code>，然后后面是<code>函数名称</code>，<code>参数列表</code>，最后是<code>返回值列表</code>。当然如果函数没有参数列表或者返回值，那么这两项都是可选的。其中返回值两边的括号在只声明一个返回值类型的时候可以省略。</p>\n<h2 id=\"命名返回值\"><a href=\"#命名返回值\" class=\"headerlink\" title=\"命名返回值\"></a>命名返回值</h2><p>Go的函数很有趣，你甚至可以为返回值预先定义一个名称，在函数结束的时候，直接一个return就可以返回所有的预定义返回值。例如上面的例子，我们将sum作为命名返回值。<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">slice_sum</span><span class=\"params\">(arr []<span class=\"keyword\">int</span>)</span> <span class=\"params\">(sum <span class=\"keyword\">int</span>)</span></span> &#123;</span><br><span class=\"line\">\tsum = <span class=\"number\">0</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> _, elem := <span class=\"keyword\">range</span> arr &#123;</span><br><span class=\"line\">\t\tsum += elem</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> arr1 = []<span class=\"keyword\">int</span>&#123;<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">2</span>&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> arr2 = []<span class=\"keyword\">int</span>&#123;<span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">1</span>, <span class=\"number\">6</span>, <span class=\"number\">4</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>&#125;</span><br><span class=\"line\">\tfmt.Println(slice_sum(arr1))</span><br><span class=\"line\">\tfmt.Println(slice_sum(arr2))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这里要注意的是，如果你定义了命名返回值，那么在函数内部你将不能再重复定义一个同样名称的变量。比如第一个例子中我们用<code>sum:=0</code>来定义和初始化变量sum，而在第二个例子中，我们只能用<code>sum=0</code>初始化这个变量了。因为<code>:=</code>表示的是定义并且初始化变量。</p>\n<h2 id=\"实参数和虚参数\"><a href=\"#实参数和虚参数\" class=\"headerlink\" title=\"实参数和虚参数\"></a>实参数和虚参数</h2><p>可能你听说过函数的实参数和虚参数。其实所谓的<code>实参数就是函数调用的时候传入的参数</code>。在上面的例子中，实参就是<code>arr1</code>和<code>arr2</code>，而<code>虚参数就是函数定义的时候表示函数需要传入哪些参数的占位参数</code>。在上面的例子中，虚参就是<code>arr</code>。<code>实参和虚参的名字不必是一样的。即使是一样的，也互不影响。</code>因为虚参是函数的内部变量。而实参则是另一个函数的内部变量或者是全局变量。它们的作用域不同。如果一个函数的虚参碰巧和一个全局变量名称相同，那么函数使用的也是虚参。例如我们再修改一下上面的例子。<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr = []<span class=\"keyword\">int</span>&#123;<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">2</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">slice_sum</span><span class=\"params\">(arr []<span class=\"keyword\">int</span>)</span> <span class=\"params\">(sum <span class=\"keyword\">int</span>)</span></span> &#123;</span><br><span class=\"line\">\tsum = <span class=\"number\">0</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> _, elem := <span class=\"keyword\">range</span> arr &#123;</span><br><span class=\"line\">\t\tsum += elem</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> arr2 = []<span class=\"keyword\">int</span>&#123;<span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">1</span>, <span class=\"number\">6</span>, <span class=\"number\">4</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>&#125;</span><br><span class=\"line\">\tfmt.Println(slice_sum(arr))</span><br><span class=\"line\">\tfmt.Println(slice_sum(arr2))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>在上面的例子中，我们定义了全局变量arr并且初始化值，而我们的slice_sum函数的虚参也是arr，但是程序同样正常工作。</p>\n<h2 id=\"函数多返回值\"><a href=\"#函数多返回值\" class=\"headerlink\" title=\"函数多返回值\"></a>函数多返回值</h2><p>记不记得你在java或者c里面需要返回多个值时还得去定义一个对象或者结构体的呢？在Go里面，你不需要这么做了。Go函数支持你返回多个值。</p>\n<p>其实函数的多返回值，我们在上面遇见过很多次了。那就是<code>range</code>函数。这个函数用来迭代数组或者切片的时候返回的是两个值，一个是数组或切片元素的索引，另外一个是数组或切片元素。在上面的例子中，因为我们不需要元素的索引，所以我们用一个特殊的忽略返回值符号<code>下划线(_)</code>来忽略索引。</p>\n<p>假设上面的例子我们除了返回切片的元素和，还想返回切片元素的平均值，那么我们修改一下代码。<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">slice_sum</span><span class=\"params\">(arr []<span class=\"keyword\">int</span>)</span> <span class=\"params\">(<span class=\"keyword\">int</span>, <span class=\"keyword\">float64</span>)</span></span> &#123;</span><br><span class=\"line\">\tsum := <span class=\"number\">0</span></span><br><span class=\"line\">\tavg := <span class=\"number\">0.0</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> _, elem := <span class=\"keyword\">range</span> arr &#123;</span><br><span class=\"line\">\t\tsum += elem</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tavg = <span class=\"keyword\">float64</span>(sum) / <span class=\"keyword\">float64</span>(<span class=\"built_in\">len</span>(arr))</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> sum, avg</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> arr1 = []<span class=\"keyword\">int</span>&#123;<span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">1</span>, <span class=\"number\">6</span>, <span class=\"number\">4</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>&#125;</span><br><span class=\"line\">\tfmt.Println(slice_sum(arr1))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>很简单吧，当然我们还可以将上面的参数定义为命名参数<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">slice_sum</span><span class=\"params\">(arr []<span class=\"keyword\">int</span>)</span> <span class=\"params\">(sum <span class=\"keyword\">int</span>, avg <span class=\"keyword\">float64</span>)</span></span> &#123;</span><br><span class=\"line\">\tsum = <span class=\"number\">0</span></span><br><span class=\"line\">\tavg = <span class=\"number\">0.0</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> _, elem := <span class=\"keyword\">range</span> arr &#123;</span><br><span class=\"line\">\t\tsum += elem</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tavg = <span class=\"keyword\">float64</span>(sum) / <span class=\"keyword\">float64</span>(<span class=\"built_in\">len</span>(arr))</span><br><span class=\"line\">\t<span class=\"comment\">//return sum, avg</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> arr1 = []<span class=\"keyword\">int</span>&#123;<span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">1</span>, <span class=\"number\">6</span>, <span class=\"number\">4</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>&#125;</span><br><span class=\"line\">\tfmt.Println(slice_sum(arr1))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>在上面的代码里面，将<code>return sum, avg</code>给注释了而直接使用<code>return</code>。其实这两种返回方式都可以。</p>\n<h2 id=\"变长参数\"><a href=\"#变长参数\" class=\"headerlink\" title=\"变长参数\"></a>变长参数</h2><p>想一想我们的fmt包里面的Println函数，它怎么知道你传入的参数个数呢？<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tfmt.Println(<span class=\"number\">1</span>)</span><br><span class=\"line\">\tfmt.Println(<span class=\"number\">1</span>, <span class=\"number\">2</span>)</span><br><span class=\"line\">\tfmt.Println(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这个要归功于Go的一大特性，支持可变长参数列表。</p>\n<p>首先我们来看一个例子<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">sum</span><span class=\"params\">(arr ...<span class=\"keyword\">int</span>)</span> <span class=\"title\">int</span></span> &#123;</span><br><span class=\"line\">\tsum := <span class=\"number\">0</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> _, val := <span class=\"keyword\">range</span> arr &#123;</span><br><span class=\"line\">\t\tsum += val</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> sum</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tfmt.Println(sum(<span class=\"number\">1</span>))</span><br><span class=\"line\">\tfmt.Println(sum(<span class=\"number\">1</span>, <span class=\"number\">2</span>))</span><br><span class=\"line\">\tfmt.Println(sum(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>在上面的例子中，我们将原来的切片参数修改为可变长参数，然后使用range函数迭代这些参数，并求和。<br>从这里我们可以看出至少一点那就是<code>可变长参数列表里面的参数类型都是相同的</code>（<em>如果你对这句话表示怀疑，可能是因为你看到Println函数恰恰可以输出不同类型的可变参数，这个问题的答案要等到我们介绍完Go的接口后才行</em>）。</p>\n<p>另外还有一点需要注意，那就是<code>可变长参数定义只能是函数的最后一个参数</code>。比如下面的例子：<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">sum</span><span class=\"params\">(base <span class=\"keyword\">int</span>, arr ...<span class=\"keyword\">int</span>)</span> <span class=\"title\">int</span></span> &#123;</span><br><span class=\"line\">\tsum := base</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> _, val := <span class=\"keyword\">range</span> arr &#123;</span><br><span class=\"line\">\t\tsum += val</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> sum</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tfmt.Println(sum(<span class=\"number\">100</span>, <span class=\"number\">1</span>))</span><br><span class=\"line\">\tfmt.Println(sum(<span class=\"number\">200</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>))</span><br><span class=\"line\">\tfmt.Println(sum(<span class=\"number\">300</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这里不知道你是否觉得这个例子其实和那个切片的例子很像啊，在哪里呢？<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">sum</span><span class=\"params\">(base <span class=\"keyword\">int</span>, arr ...<span class=\"keyword\">int</span>)</span> <span class=\"title\">int</span></span> &#123;</span><br><span class=\"line\">\tsum := base</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> _, val := <span class=\"keyword\">range</span> arr &#123;</span><br><span class=\"line\">\t\tsum += val</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> sum</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> arr1 = []<span class=\"keyword\">int</span>&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>&#125;</span><br><span class=\"line\">\tfmt.Println(sum(<span class=\"number\">300</span>, arr1...))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>呵呵，就是把切片“啪，啪，啪”三个耳光打碎了，传递过去啊！:-P</p>\n<h2 id=\"闭包函数\"><a href=\"#闭包函数\" class=\"headerlink\" title=\"闭包函数\"></a>闭包函数</h2><p>曾经使用python和javascript的时候就在想，如果有一天可以把这两种语言的特性做个并集该有多好。</p>\n<p>这一天终于来了，Go支持闭包函数。</p>\n<p>首先看一个闭包函数的例子。所谓闭包函数就是将整个函数的定义一气呵成写好并赋值给一个变量。然后用这个变量名作为函数名去调用函数体。</p>\n<p>我们将刚刚的例子修改一下：<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> arr1 = []<span class=\"keyword\">int</span>&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> sum = <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(arr ...<span class=\"keyword\">int</span>)</span> <span class=\"title\">int</span></span> &#123;</span><br><span class=\"line\">\t\ttotal_sum := <span class=\"number\">0</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> _, val := <span class=\"keyword\">range</span> arr &#123;</span><br><span class=\"line\">\t\t\ttotal_sum += val</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> total_sum</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfmt.Println(sum(arr1...))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>从这里我们可以看出，其实闭包函数也没有什么特别之处。因为Go不支持在一个函数的内部再定义一个嵌套函数，所以使用闭包函数能够实现在一个函数内部定义另一个函数的目的。</p>\n<p>这里我们需要注意的一个问题是，闭包函数对它外层的函数中的变量具有<code>访问</code>和<code>修改</code>的权限。例如：<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> arr1 = []<span class=\"keyword\">int</span>&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> base = <span class=\"number\">300</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> sum = <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(arr ...<span class=\"keyword\">int</span>)</span> <span class=\"title\">int</span></span> &#123;</span><br><span class=\"line\">\t\ttotal_sum := <span class=\"number\">0</span></span><br><span class=\"line\">\t\ttotal_sum += base</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> _, val := <span class=\"keyword\">range</span> arr &#123;</span><br><span class=\"line\">\t\t\ttotal_sum += val</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> total_sum</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfmt.Println(sum(arr1...))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这个例子，输出315，因为total_sum加上了base的值。<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> base = <span class=\"number\">0</span></span><br><span class=\"line\">\tinc := <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t\tbase += <span class=\"number\">1</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfmt.Println(base)</span><br><span class=\"line\">\tinc()</span><br><span class=\"line\">\tfmt.Println(base)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>在上面的例子中，闭包函数修改了main函数的局部变量base。</p>\n<p>最后我们来看一个闭包的示例，生成偶数序列。<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">createEvenGenerator</span><span class=\"params\">()</span> <span class=\"title\">func</span><span class=\"params\">()</span> <span class=\"title\">uint</span></span> &#123;</span><br><span class=\"line\">\ti := <span class=\"keyword\">uint</span>(<span class=\"number\">0</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span> <span class=\"params\">(retVal <span class=\"keyword\">uint</span>)</span></span> &#123;</span><br><span class=\"line\">\t\tretVal = i</span><br><span class=\"line\">\t\ti += <span class=\"number\">2</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tnextEven := createEvenGenerator()</span><br><span class=\"line\">\tfmt.Println(nextEven())</span><br><span class=\"line\">\tfmt.Println(nextEven())</span><br><span class=\"line\">\tfmt.Println(nextEven())</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这个例子很有意思的，因为我们定义了一个<code>返回函数定义</code>的函数。而所返回的函数定义就是<code>在这个函数的内部定义的闭包函数</code>。这个闭包函数在外层函数调用的时候，每次都生成一个新的偶数（加2操作）然后返回闭包函数定义。</p>\n<p>其中<code>func() uint</code>就是函数createEvenGenerator的返回值。在createEvenGenerator中，这个返回值是return返回的闭包函数定义。<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span> <span class=\"params\">(retVal <span class=\"keyword\">uint</span>)</span></span> &#123;</span><br><span class=\"line\">       \tretVal = i</span><br><span class=\"line\">       \ti += <span class=\"number\">2</span></span><br><span class=\"line\">       \t<span class=\"keyword\">return</span></span><br><span class=\"line\">   \t&#125;</span><br></pre></td></tr></table></figure></p>\n<p>因为createEvenGenerator函数返回的是一个函数定义，所以我们再把它赋值给一个代表函数的变量，然后用这个代表闭包函数的变量去调用函数执行。</p>\n<h2 id=\"递归函数\"><a href=\"#递归函数\" class=\"headerlink\" title=\"递归函数\"></a>递归函数</h2><p>每次谈到递归函数，必然绕不开阶乘和斐波拉切数列。</p>\n<p>阶乘<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    n!=1*2*3*...*n</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">factorial</span><span class=\"params\">(x <span class=\"keyword\">uint</span>)</span> <span class=\"title\">uint</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> x == <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">1</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> x * factorial(x<span class=\"number\">-1</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tfmt.Println(factorial(<span class=\"number\">5</span>))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>如果x为0，那么返回1，因为0!=1。如果x是1，那么f(1)=1<em>f(0)，如果x是2，那么f(2)=2</em>f(1)=2<em>1</em>f(0)，依次推断f(x)=x<em>(x-1)</em>…<em>2</em>1*f(0)。</p>\n<p>从上面看出所谓递归，就是在函数的内部重复调用一个函数的过程。需要注意的是这个函数必须能够一层一层分解，并且有出口。上面的例子出口就是0。</p>\n<p>斐波拉切数列</p>\n<p>求第N个斐波拉切元素<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\tf(1)=1</span></span><br><span class=\"line\"><span class=\"comment\">\tf(2)=2</span></span><br><span class=\"line\"><span class=\"comment\">\tf(n)=f(n-2)+f(n-1)</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">fibonacci</span><span class=\"params\">(n <span class=\"keyword\">int</span>)</span> <span class=\"title\">int</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> retVal = <span class=\"number\">0</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> n == <span class=\"number\">1</span> &#123;</span><br><span class=\"line\">\t\tretVal = <span class=\"number\">1</span></span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> n == <span class=\"number\">2</span> &#123;</span><br><span class=\"line\">\t\tretVal = <span class=\"number\">2</span></span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\tretVal = fibonacci(n<span class=\"number\">-2</span>) + fibonacci(n<span class=\"number\">-1</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> retVal</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tfmt.Println(fibonacci(<span class=\"number\">5</span>))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>斐波拉切第一个元素是1，第二个元素是2，后面的元素依次是前两个元素的和。</p>\n<p>其实对于递归函数来讲，只要知道了函数的出口，后面的不过是让计算机去不断地推断，一直推断到这个出口。理解了这一点，递归就很好理解了。</p>\n<h2 id=\"异常处理\"><a href=\"#异常处理\" class=\"headerlink\" title=\"异常处理\"></a>异常处理</h2><p>当你读取文件失败而退出的时候是否担心文件句柄是否已经关闭？抑或是你对于try…catch…finally的结构中finally里面的代码和try里面的return代码那个先执行这样的问题痛苦不已？</p>\n<p>一切都结束了。一门完美的语言必须有一个清晰的无歧义的执行逻辑。</p>\n<p>好，来看看Go提供的异常处理。</p>\n<p><em>defer</em><br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">first</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"first func run\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">second</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"second func run\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> second()</span><br><span class=\"line\">\tfirst()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>Go语言提供了关键字<code>defer</code>来在函数运行结束的时候运行一段代码或调用一个清理函数。上面的例子中，虽然second()函数写在first()函数前面，但是由于使用了defer标注，所以它是在main函数执行结束的时候才调用的。</p>\n<p>所以输出结果<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">first func run</span><br><span class=\"line\">second func run</span><br></pre></td></tr></table></figure></p>\n<p><code>defer</code>用途最多的在于释放各种资源。比如我们读取一个文件，读完之后需要释放文件句柄。<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"bufio\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"os\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"strings\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tfname := <span class=\"string\">\"D:\\\\Temp\\\\test.txt\"</span></span><br><span class=\"line\">\tf, err := os.Open(fname)</span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> f.Close()</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tos.Exit(<span class=\"number\">1</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tbReader := bufio.NewReader(f)</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">\t\tline, ok := bReader.ReadString(<span class=\"string\">'\\n'</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> ok != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tfmt.Println(strings.Trim(line, <span class=\"string\">\"\\r\\n\"</span>))</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>在上面的例子中，我们按行读取文件，并且输出。从代码中，我们可以看到在使用os包中的Open方法打开文件后，立马跟着一个defer语句用来关闭文件句柄。这样就保证了该文件句柄在main函数运行结束的时候或者异常终止的时候一定能够被释放。而且由于紧跟着Open语句，一旦养成了习惯，就不会忘记去关闭文件句柄了。</p>\n<p><em>panic</em> &amp; <em>recover</em></p>\n<blockquote>\n<p>当你周末走在林荫道上，听着小歌，哼着小曲，很是惬意。突然之间，从天而降瓢泼大雨，你顿时慌张（panic）起来，没有带伞啊，淋着雨感冒就不好了。于是你四下张望，忽然发现自己离地铁站很近，那里有很多卖伞的，心中顿时又安定了下来（recover），于是你飞奔过去买了一把伞（defer）。</p>\n</blockquote>\n<p>好了，panic和recover是Go语言提供的用以处理异常的关键字。<code>panic用来触发异常</code>，而<code>recover用来终止异常并且返回传递给panic的值</code>。（注意<code>recover并不能处理异常</code>，而且<code>recover只能在defer里面使用，否则无效</code>。）</p>\n<p>先瞧个小例子<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"I am walking and singing...\"</span>)</span><br><span class=\"line\">\t<span class=\"built_in\">panic</span>(<span class=\"string\">\"It starts to rain cats and dogs\"</span>)</span><br><span class=\"line\">\tmsg := <span class=\"built_in\">recover</span>()</span><br><span class=\"line\">\tfmt.Println(msg)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>看看输出结果</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">runtime.panic(0x48d380, 0xc084003210)</span><br><span class=\"line\">       C:/Users/ADMINI~1/AppData/Local/Temp/2/bindist667667715/go/src/pkg/runtime/panic.c:266 \t+0xc8</span><br><span class=\"line\">main.main()</span><br><span class=\"line\">       D:/JemyGraw/Creation/Go/freebook_go/func_d1.go:9 +0xea</span><br><span class=\"line\">exit status 2</span><br></pre></td></tr></table></figure>\n<p>咦？怎么没有输出recover获取的错误信息呢？</p>\n<p>这是因为在运行到panic语句的时候，程序已经异常终止了，后面的代码就不运行了。</p>\n<p>那么如何才能阻止程序异常终止呢？这个时候要使用defer。因为<code>defer一定是在函数执行结束的时候运行的。不管是正常结束还是异常终止</code>。</p>\n<p>修改一下代码<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t\tmsg := <span class=\"built_in\">recover</span>()</span><br><span class=\"line\">\t\tfmt.Println(msg)</span><br><span class=\"line\">\t&#125;()</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"I am walking and singing...\"</span>)</span><br><span class=\"line\">\t<span class=\"built_in\">panic</span>(<span class=\"string\">\"It starts to rain cats and dogs\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>好了，看下输出<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">I am walking and singing...</span><br><span class=\"line\">It starts to rain cats and dogs</span><br></pre></td></tr></table></figure></p>\n<p>小结：</p>\n<p>panic触发的异常通常是运行时错误。比如试图访问的索引超出了数组边界，忘记初始化字典或者任何无法轻易恢复到正常执行的错误。</p>\n<h1 id=\"Go指针\"><a href=\"#Go指针\" class=\"headerlink\" title=\"Go指针\"></a>Go指针</h1><p>不要害怕，Go的指针是好指针。</p>\n<h2 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h2><p>所谓<code>指针其实你可以把它想像成一个箭头，这个箭头指向（存储）一个变量的地址</code>。</p>\n<p>因为这个箭头本身也需要变量来存储，所以也叫做指针变量。</p>\n<p>Go的指针<code>不支持那些乱七八糟的指针移位</code>。<code>它就表示一个变量的地址</code>。看看这个例子：<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> x <span class=\"keyword\">int</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> x_ptr *<span class=\"keyword\">int</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tx = <span class=\"number\">10</span></span><br><span class=\"line\">\tx_ptr = &amp;x</span><br><span class=\"line\"></span><br><span class=\"line\">\tfmt.Println(x)</span><br><span class=\"line\">\tfmt.Println(x_ptr)</span><br><span class=\"line\">\tfmt.Println(*x_ptr)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>上面例子输出<code>x的值</code>，<code>x的地址</code>和<code>通过指针变量输出x的值</code>，而<code>x_ptr就是一个指针变量</code>。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">10</span><br><span class=\"line\">0xc084000038</span><br><span class=\"line\">10</span><br></pre></td></tr></table></figure></p>\n<p>认真理清楚这两个符号的意思。</p>\n<p><strong>&amp;</strong> <code>取一个变量的地址</code></p>\n<p><strong>*</strong> <code>取一个指针变量所指向的地址的值</code></p>\n<p>考你一下，上面的例子中，如何输出x_ptr的地址呢？<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> x <span class=\"keyword\">int</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> x_ptr *<span class=\"keyword\">int</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tx = <span class=\"number\">10</span></span><br><span class=\"line\">\tx_ptr = &amp;x</span><br><span class=\"line\"></span><br><span class=\"line\">\tfmt.Println(&amp;x_ptr)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>此例看懂，指针就懂了。</p>\n<p>永远记住一句话，<code>所谓指针就是一个指向（存储）特定变量地址的变量</code>。没有其他的特别之处。</p>\n<p>再变态一下，看看这个：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package main</span><br><span class=\"line\"></span><br><span class=\"line\">import (</span><br><span class=\"line\">\t&quot;fmt&quot;</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\">\tvar x int</span><br><span class=\"line\">\tvar x_ptr *int</span><br><span class=\"line\"></span><br><span class=\"line\">\tx = 10</span><br><span class=\"line\">\tx_ptr = &amp;x</span><br><span class=\"line\"></span><br><span class=\"line\">\tfmt.Println(*&amp;x_ptr)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<ol>\n<li>x_ptr 是一个<code>指针变量</code>，它<code>指向(存储)x的地址</code>；</li>\n<li>&amp;x_ptr 是<code>取这个指针变量x_ptr的地址</code>，这里可以设想<code>有另一个指针变量x_ptr_ptr(指向)存储</code>这个<code>x_ptr指针的地址</code>；</li>\n<li><em>&amp;x_ptr 等价于`</em>x_ptr_ptr<code>就是</code>取这个x_ptr_ptr指针变量<code>所</code>指向(存储)<code>的</code>地址所对应的变量的值<code>，也就是</code>x_ptr的值<code>，也就是</code>指针变量x_ptr指向(存储)的地址<code>，也就是</code>x的地址<code>。 这里可以看到，其实</code>*&amp;`这两个运算符在一起就相互抵消作用了。</li>\n</ol>\n<h2 id=\"用途\"><a href=\"#用途\" class=\"headerlink\" title=\"用途\"></a>用途</h2><p><code>指针的一大用途就是可以将变量的指针作为实参传递给函数，从而在函数内部能够直接修改实参所指向的变量值。</code></p>\n<p>Go的变量传递都是值传递。<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">change</span><span class=\"params\">(x <span class=\"keyword\">int</span>)</span></span> &#123;</span><br><span class=\"line\">\tx = <span class=\"number\">200</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> x <span class=\"keyword\">int</span> = <span class=\"number\">100</span></span><br><span class=\"line\">\tfmt.Println(x)</span><br><span class=\"line\">\tchange(x)</span><br><span class=\"line\">\tfmt.Println(x)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>上面的例子输出结果为<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">100</span><br><span class=\"line\">100</span><br></pre></td></tr></table></figure></p>\n<p>很显然，change函数<code>改变的</code>仅仅是<code>内部变量x</code>的<code>值</code>，而<code>不会改变</code>传递进去的<code>实参</code>。其实，也就是说Go的函数一般关心的是输出结果，而输入参数就相当于信使跑到函数门口大叫，你们这个参数是什么值，那个是什么值，然后就跑了。你函数根本就不能修改它的值。不过如果是传递的实参是指针变量，那么函数一看，小子这次你地址我都知道了，哪里跑。那么就是下面的例子：<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">change</span><span class=\"params\">(x *<span class=\"keyword\">int</span>)</span></span> &#123;</span><br><span class=\"line\">\t*x = <span class=\"number\">200</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> x <span class=\"keyword\">int</span> = <span class=\"number\">100</span></span><br><span class=\"line\">\tfmt.Println(x)</span><br><span class=\"line\">\tchange(&amp;x)</span><br><span class=\"line\">\tfmt.Println(x)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>上面的例子中，change函数的虚参为<code>整型指针变量</code>，所以在main中调用的时候<code>传递的是x的地址</code>。然后在change里面使用<code>*x=200</code>修改了这个x的地址的值。所以<code>x的值就变了</code>。这个输出是：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">100</span><br><span class=\"line\">200</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"new\"><a href=\"#new\" class=\"headerlink\" title=\"new\"></a>new</h2><p>new这个函数挺神奇，因为它的用处太多了。这里还可以通过new来<code>初始化一个指针</code>。上面说过指针指向(存储)的是一个变量的地址，但是指针本身也需要地址存储。先看个例子：<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">set_value</span><span class=\"params\">(x_ptr *<span class=\"keyword\">int</span>)</span></span> &#123;</span><br><span class=\"line\">\t*x_ptr = <span class=\"number\">100</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tx_ptr := <span class=\"built_in\">new</span>(<span class=\"keyword\">int</span>)</span><br><span class=\"line\">\tset_value(x_ptr)</span><br><span class=\"line\">\t<span class=\"comment\">//x_ptr指向的地址</span></span><br><span class=\"line\">\tfmt.Println(x_ptr)</span><br><span class=\"line\">\t<span class=\"comment\">//x_ptr本身的地址</span></span><br><span class=\"line\">\tfmt.Println(&amp;x_ptr)</span><br><span class=\"line\">\t<span class=\"comment\">//x_ptr指向的地址值</span></span><br><span class=\"line\">\tfmt.Println(*x_ptr)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>上面我们定义了一个x_ptr变量，然后用<code>new申请</code>了一个<code>存储整型数据的内存地址</code>，然后将这个<code>地址赋值</code>给<code>x_ptr指针变量</code>，也就是说<code>x_ptr指向（存储）的是一个可以存储整型数据的地址</code>，然后用set_value函数将<code>这个地址中存储的值</code>赋值为100。所以第一个输出是<code>x_ptr指向的地址</code>，第二个则是<code>x_ptr本身的地址</code>，而<code>*x_ptr</code>则是<code>x_ptr指向的地址中存储的整型数据的值</code>。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0xc084000040</span><br><span class=\"line\">0xc084000038</span><br><span class=\"line\">100</span><br></pre></td></tr></table></figure>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p>好了，现在用个例子再来回顾一下指针。</p>\n<p>交换两个变量的值。<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">swap</span><span class=\"params\">(x, y *<span class=\"keyword\">int</span>)</span></span> &#123;</span><br><span class=\"line\">\t*x, *y = *y, *x</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tx_val := <span class=\"number\">100</span></span><br><span class=\"line\">\ty_val := <span class=\"number\">200</span></span><br><span class=\"line\">\tswap(&amp;x_val, &amp;y_val)</span><br><span class=\"line\">\tfmt.Println(x_val)</span><br><span class=\"line\">\tfmt.Println(y_val)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>很简单吧，这里利用了Go提供的<code>交叉赋值</code>的功能，另外由于是使用了指针作为参数，所以在swap函数内，x_val和y_val的值就被交换了。</p>\n<h1 id=\"Go结构体和指针\"><a href=\"#Go结构体和指针\" class=\"headerlink\" title=\"Go结构体和指针\"></a>Go结构体和指针</h1><p>基本上到这里的时候，就是上了一个台阶了。Go的精华特点即将展开。</p>\n<h2 id=\"结构体定义\"><a href=\"#结构体定义\" class=\"headerlink\" title=\"结构体定义\"></a>结构体定义</h2><p>上面我们说过Go的指针和C的不同，结构体也是一样的。Go是一门删繁就简的语言，一切令人困惑的特性都必须去掉。</p>\n<p>简单来讲，Go提供的<code>结构体</code>就是把<code>使用各种数据类型定义</code>的<code>不同变量组合起来</code>的<code>高级数据类型</code>。闲话不多说，看例子:<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> Rect <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\twidth <span class=\"keyword\">float64</span></span><br><span class=\"line\">\tlength <span class=\"keyword\">float64</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>上面我们定义了一个矩形结构体，首先是关键是<code>type</code>表示要<code>定义一个新的数据类型了</code>，然后是新的数据类型名称<code>Rect</code>，最后是<code>struct</code>关键字，表示这个高级数据类型是结构体类型。在上面的例子中，因为<code>width和length的数据类型相同</code>，还可以写成如下格式：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> Rect <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\twidth, length <span class=\"keyword\">float64</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>好了，来用结构体干点啥吧，计算一下矩形面积。<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Rect <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\twidth, length <span class=\"keyword\">float64</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> rect Rect</span><br><span class=\"line\">\trect.width = <span class=\"number\">100</span></span><br><span class=\"line\">\trect.length = <span class=\"number\">200</span></span><br><span class=\"line\">\tfmt.Println(rect.width * rect.length)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>从上面的例子看到，其实结构体类型和基础数据类型使用方式差不多，唯一的区别就是结构体类型可以通过<code>.</code>来访问内部的成员。包括<code>给内部成员赋值</code>和<code>读取内部成员值</code>。</p>\n<p>在上面的例子中，我们是用var关键字先定义了一个Rect变量，然后对它的成员赋值。我们也可以使用初始化的方式来给Rect变量的内部成员赋值。<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Rect <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\twidth, length <span class=\"keyword\">float64</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> rect = Rect&#123;width: <span class=\"number\">100</span>, length: <span class=\"number\">200</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tfmt.Println(rect.width * rect.length)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>当然<code>如果你知道结构体成员定义的顺序</code>，也可以不使用<code>key:value</code>的方式赋值，<code>直接按照结构体成员定义的顺序给它们赋值</code>。<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Rect <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\twidth, length <span class=\"keyword\">float64</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> rect = Rect&#123;<span class=\"number\">100</span>, <span class=\"number\">200</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"Width:\"</span>, rect.width, <span class=\"string\">\"* Length:\"</span>,</span><br><span class=\"line\">\t\trect.length, <span class=\"string\">\"= Area:\"</span>, rect.width*rect.length)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>输出结果为</p>\n<pre><code>Width: 100 * Length: 200 = Area: 20000\n</code></pre><h2 id=\"结构体参数传递方式\"><a href=\"#结构体参数传递方式\" class=\"headerlink\" title=\"结构体参数传递方式\"></a>结构体参数传递方式</h2><p>我们说过，<code>Go函数的参数传递方式是值传递</code>，这句话<code>对结构体也是适用的</code>。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Rect <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\twidth, length <span class=\"keyword\">float64</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">double_area</span><span class=\"params\">(rect Rect)</span> <span class=\"title\">float64</span></span> &#123;</span><br><span class=\"line\">\trect.width *= <span class=\"number\">2</span></span><br><span class=\"line\">\trect.length *= <span class=\"number\">2</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> rect.width * rect.length</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> rect = Rect&#123;<span class=\"number\">100</span>, <span class=\"number\">200</span>&#125;</span><br><span class=\"line\">\tfmt.Println(double_area(rect))</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"Width:\"</span>, rect.width, <span class=\"string\">\"Length:\"</span>, rect.length)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面的例子输出为:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">80000</span><br><span class=\"line\">Width: 100 Length: 200</span><br></pre></td></tr></table></figure></p>\n<p>也就说虽然在double_area函数里面我们将结构体的宽度和长度都加倍，但仍然没有影响main函数里面的rect变量的宽度和长度。</p>\n<h2 id=\"结构体组合函数\"><a href=\"#结构体组合函数\" class=\"headerlink\" title=\"结构体组合函数\"></a>结构体组合函数</h2><p>上面我们在main函数中计算了矩形的面积，但是我们觉得矩形的面积如果能够作为矩形结构体的“内部函数”提供会更好。这样我们就可以直接说这个矩形面积是多少，而不用另外去取宽度和长度去计算。现在我们看看结构体“内部函数”定义方法：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Rect <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\twidth, length <span class=\"keyword\">float64</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(rect Rect)</span> <span class=\"title\">area</span><span class=\"params\">()</span> <span class=\"title\">float64</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> rect.width * rect.length</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> rect = Rect&#123;<span class=\"number\">100</span>, <span class=\"number\">200</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"Width:\"</span>, rect.width, <span class=\"string\">\"Length:\"</span>, rect.length,</span><br><span class=\"line\">\t\t<span class=\"string\">\"Area:\"</span>, rect.area())</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>咦？这个是什么“内部方法”，根本没有定义在Rect数据类型的内部啊？</p>\n<p>确实如此，我们看到，虽然main函数中的rect变量可以直接调用函数area()来获取矩形面积，但是area()函数确实没有定义在Rect结构体内部，这点和C语言的有很大不同。<code>Go使用组合函数的方式来为结构体定义结构体方法</code>。我们仔细看一下上面的area()函数定义。</p>\n<p>首先是关键字<code>func</code>表示这是一个函数，第二个参数是<code>结构体类型和实例变量</code>，第三个是<code>函数名称</code>，第四个是<code>函数返回值</code>。这里我们可以看出area()函数和普通函数定义的<code>区别就在于</code>area()函数<code>多了一个结构体类型限定</code>。这样一来Go就知道了这是一个为结构体定义的<code>方法</code>。</p>\n<p>这里需要注意一点就是<code>定义在结构体上面的函数(function)</code>一般叫做<code>方法(method)</code>。</p>\n<h2 id=\"结构体和指针\"><a href=\"#结构体和指针\" class=\"headerlink\" title=\"结构体和指针\"></a>结构体和指针</h2><p>我们在指针一节讲到过，<code>指针的主要作用就是在函数内部改变传递进来变量的值</code>。对于上面的计算矩形面积的例子，我们可以修改一下代码如下：<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Rect <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\twidth, length <span class=\"keyword\">float64</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(rect *Rect)</span> <span class=\"title\">area</span><span class=\"params\">()</span> <span class=\"title\">float64</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> rect.width * rect.length</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> rect = <span class=\"built_in\">new</span>(Rect)</span><br><span class=\"line\">\trect.width = <span class=\"number\">100</span></span><br><span class=\"line\">\trect.length = <span class=\"number\">200</span></span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"Width:\"</span>, rect.width, <span class=\"string\">\"Length:\"</span>, rect.length,</span><br><span class=\"line\">\t\t<span class=\"string\">\"Area:\"</span>, rect.area())</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>上面的例子中，使用了new函数来创建一个结构体指针rect，也就是说rect的类型是*Rect，结构体遇到指针的时候，你<code>不需要使用*去访问结构体的成员</code>，直接使用<code>.</code>引用就可以了。所以上面的例子中我们直接使用<code>rect.width=100</code> 和<code>rect.length=200</code>来设置结构体成员值。因为这个时候rect是结构体指针，所以我们定义area()函数的时候结构体限定类型为<code>*Rect</code>。</p>\n<p>其实在计算面积的这个例子中，我们不需要改变矩形的宽或者长度，所以定义area函数的时候结构体限定类型仍然为<code>Rect</code>也是可以的。如下：<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Rect <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\twidth, length <span class=\"keyword\">float64</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(rect Rect)</span> <span class=\"title\">area</span><span class=\"params\">()</span> <span class=\"title\">float64</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> rect.width * rect.length</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> rect = <span class=\"built_in\">new</span>(Rect)</span><br><span class=\"line\">\trect.width = <span class=\"number\">100</span></span><br><span class=\"line\">\trect.length = <span class=\"number\">200</span></span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"Width:\"</span>, rect.width, <span class=\"string\">\"Length:\"</span>, rect.length,</span><br><span class=\"line\">\t\t<span class=\"string\">\"Area:\"</span>, rect.area())</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这里Go足够聪明，所以rect.area()也是可以的。</p>\n<p>至于<code>使不使用结构体指针和使不使用指针的出发点是一样的</code>，那就是<code>你是否试图在函数内部改变传递进来的参数的值</code>。再举个例子如下：<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Rect <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\twidth, length <span class=\"keyword\">float64</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(rect *Rect)</span> <span class=\"title\">double_area</span><span class=\"params\">()</span> <span class=\"title\">float64</span></span> &#123;</span><br><span class=\"line\">\trect.width *= <span class=\"number\">2</span></span><br><span class=\"line\">\trect.length *= <span class=\"number\">2</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> rect.width * rect.length</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> rect = <span class=\"built_in\">new</span>(Rect)</span><br><span class=\"line\">\trect.width = <span class=\"number\">100</span></span><br><span class=\"line\">\trect.length = <span class=\"number\">200</span></span><br><span class=\"line\">\tfmt.Println(*rect)</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"Double Width:\"</span>, rect.width, <span class=\"string\">\"Double Length:\"</span>, rect.length,</span><br><span class=\"line\">\t\t<span class=\"string\">\"Double Area:\"</span>, rect.double_area())</span><br><span class=\"line\">\tfmt.Println(*rect)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这个例子的输出是：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;100 200&#125;</span><br><span class=\"line\">Double Width: 200 Double Length: 400 Double Area: 80000</span><br><span class=\"line\">&#123;200 400&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"结构体内嵌类型\"><a href=\"#结构体内嵌类型\" class=\"headerlink\" title=\"结构体内嵌类型\"></a>结构体内嵌类型</h2><p>我们可以在一个<code>结构体内部定义另外一个结构体类型的成员</code>。例如iPhone也是Phone，我们看下例子：<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Phone <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tprice <span class=\"keyword\">int</span></span><br><span class=\"line\">\tcolor <span class=\"keyword\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> IPhone <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tphone Phone</span><br><span class=\"line\">\tmodel <span class=\"keyword\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> p IPhone</span><br><span class=\"line\">\tp.phone.price = <span class=\"number\">5000</span></span><br><span class=\"line\">\tp.phone.color = <span class=\"string\">\"Black\"</span></span><br><span class=\"line\">\tp.model = <span class=\"string\">\"iPhone 5\"</span></span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"I have a iPhone:\"</span>)</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"Price:\"</span>, p.phone.price)</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"Color:\"</span>, p.phone.color)</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"Model:\"</span>, p.model)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>输出结果为<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">I have a iPhone:</span><br><span class=\"line\">Price: 5000</span><br><span class=\"line\">Color: Black</span><br><span class=\"line\">Model: iPhone 5</span><br></pre></td></tr></table></figure></p>\n<p>在上面的例子中，我们在结构体IPhone里面定义了一个Phone变量phone，然后我们可以像正常的访问结构体成员一样访问phone的成员数据。但是我们原来的意思是<code>“iPhone也是(is-a)Phone”</code>，而这里的结构体IPhone里面定义了一个phone变量，给人的感觉就是<code>“iPhone有一个(has-a)Phone”</code>，挺奇怪的。当然Go也知道这种方式很奇怪，所以支持如下做法：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Phone <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tprice <span class=\"keyword\">int</span></span><br><span class=\"line\">\tcolor <span class=\"keyword\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> IPhone <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tPhone</span><br><span class=\"line\">\tmodel <span class=\"keyword\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> p IPhone</span><br><span class=\"line\">\tp.price = <span class=\"number\">5000</span></span><br><span class=\"line\">\tp.color = <span class=\"string\">\"Black\"</span></span><br><span class=\"line\">\tp.model = <span class=\"string\">\"iPhone 5\"</span></span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"I have a iPhone:\"</span>)</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"Price:\"</span>, p.price)</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"Color:\"</span>, p.color)</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"Model:\"</span>, p.model)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出结果为<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">I have a iPhone:</span><br><span class=\"line\">Price: 5000</span><br><span class=\"line\">Color: Black</span><br><span class=\"line\">Model: iPhone 5</span><br></pre></td></tr></table></figure></p>\n<p>在这个例子中，我们定义IPhone结构体的时候，<code>不再定义Phone变量</code>，<code>直接把结构体Phone类型定义在那里</code>。然后IPhone就可以<code>像访问直接定义在自己结构体里面的成员一样访问Phone的成员</code>。</p>\n<p>上面的例子中，我们演示了结构体的内嵌类型以及内嵌类型的成员访问，除此之外，假设结构体A内部定义了一个内嵌结构体B，那么A同时也可以调用所有定义在B上面的函数。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Phone <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tprice <span class=\"keyword\">int</span></span><br><span class=\"line\">\tcolor <span class=\"keyword\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(phone Phone)</span> <span class=\"title\">ringing</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"Phone is ringing...\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> IPhone <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tPhone</span><br><span class=\"line\">\tmodel <span class=\"keyword\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> p IPhone</span><br><span class=\"line\">\tp.price = <span class=\"number\">5000</span></span><br><span class=\"line\">\tp.color = <span class=\"string\">\"Black\"</span></span><br><span class=\"line\">\tp.model = <span class=\"string\">\"iPhone 5\"</span></span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"I have a iPhone:\"</span>)</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"Price:\"</span>, p.price)</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"Color:\"</span>, p.color)</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"Model:\"</span>, p.model)</span><br><span class=\"line\"></span><br><span class=\"line\">\tp.ringing()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出结果为：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">I have a iPhone:</span><br><span class=\"line\">Price: 5000</span><br><span class=\"line\">Color: Black</span><br><span class=\"line\">Model: iPhone 5</span><br><span class=\"line\">Phone is ringing...</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"接口\"><a href=\"#接口\" class=\"headerlink\" title=\"接口\"></a>接口</h2><p>我们先看一个例子，关于Nokia手机和iPhone手机都能够打电话的例子。<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> NokiaPhone <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(nokiaPhone NokiaPhone)</span> <span class=\"title\">call</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"I am Nokia, I can call you!\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> IPhone <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(iPhone IPhone)</span> <span class=\"title\">call</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"I am iPhone, I can call you!\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> nokia NokiaPhone</span><br><span class=\"line\">\tnokia.call()</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> iPhone IPhone</span><br><span class=\"line\">\tiPhone.call()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>我们定义了NokiaPhone和IPhone，它们都有各自的方法call()，表示自己都能够打电话。但是我们想一想，是手机都应该能够打电话，所以这个不算是NokiaPhone或是IPhone的独特特点。否则iPhone不可能卖这么贵了。</p>\n<p>再仔细看一下<code>接口的定义</code>，首先是关键字<code>type</code>，然后是<code>接口名称</code>，最后是关键字<code>interface</code>表示这个类型是接口类型。<code>在接口类型里面，我们定义了一组方法</code>。</p>\n<p>Go语言提供了一种接口功能，它把所有的具有共性的方法定义在一起，<code>任何其他类型只要实现了这些方法就是实现了这个接口</code>，<code>不一定非要显式地声明</code>要去实现哪些接口啦。比如上面的手机的call()方法，就完全可以定义在接口Phone里面，而NokiaPhone和IPhone只要实现了这个接口就是一个Phone。<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Phone <span class=\"keyword\">interface</span> &#123;</span><br><span class=\"line\">\tcall()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> NokiaPhone <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(nokiaPhone NokiaPhone)</span> <span class=\"title\">call</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"I am Nokia, I can call you!\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> IPhone <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(iPhone IPhone)</span> <span class=\"title\">call</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"I am iPhone, I can call you!\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> phone Phone</span><br><span class=\"line\"></span><br><span class=\"line\">\tphone = <span class=\"built_in\">new</span>(NokiaPhone)</span><br><span class=\"line\">\tphone.call()</span><br><span class=\"line\"></span><br><span class=\"line\">\tphone = <span class=\"built_in\">new</span>(IPhone)</span><br><span class=\"line\">\tphone.call()</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>在上面的例子中，我们定义了一个接口Phone，接口里面有一个方法call()，仅此而已。然后我们在main函数里面定义了一个Phone类型变量，并分别为之赋值为NokiaPhone和IPhone。然后调用call()方法，输出结果如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">I am Nokia, I can call you!</span><br><span class=\"line\">I am iPhone, I can call you!</span><br></pre></td></tr></table></figure></p>\n<p>以前我们说过，<code>Go语言式静态类型语言，变量的类型在运行过程中不能改变</code>。但是在上面的例子中，phone变量好像先定义为Phone类型，然后是NokiaPhone类型，最后成为了IPhone类型，真的是这样吗？</p>\n<p>原来，在Go语言里面，<code>一个类型A只要实现了接口X所定义的全部方法</code>，那么<code>A类型的变量</code>也是<code>X类型的变量</code>。在上面的例子中，NokiaPhone和IPhone都实现了Phone接口的call()方法，所以它们都是Phone，这样一来是不是感觉正常了一些。</p>\n<p>我们为Phone添加一个方法sales()，再来熟悉一下接口用法。<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Phone <span class=\"keyword\">interface</span> &#123;</span><br><span class=\"line\">\tcall()</span><br><span class=\"line\">\tsales() <span class=\"keyword\">int</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> NokiaPhone <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tprice <span class=\"keyword\">int</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(nokiaPhone NokiaPhone)</span> <span class=\"title\">call</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"I am Nokia, I can call you!\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(nokiaPhone NokiaPhone)</span> <span class=\"title\">sales</span><span class=\"params\">()</span> <span class=\"title\">int</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> nokiaPhone.price</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> IPhone <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tprice <span class=\"keyword\">int</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(iPhone IPhone)</span> <span class=\"title\">call</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"I am iPhone, I can call you!\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(iPhone IPhone)</span> <span class=\"title\">sales</span><span class=\"params\">()</span> <span class=\"title\">int</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> iPhone.price</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> phones = [<span class=\"number\">5</span>]Phone&#123;</span><br><span class=\"line\">\t\tNokiaPhone&#123;price: <span class=\"number\">350</span>&#125;,</span><br><span class=\"line\">\t\tIPhone&#123;price: <span class=\"number\">5000</span>&#125;,</span><br><span class=\"line\">\t\tIPhone&#123;price: <span class=\"number\">3400</span>&#125;,</span><br><span class=\"line\">\t\tNokiaPhone&#123;price: <span class=\"number\">450</span>&#125;,</span><br><span class=\"line\">\t\tIPhone&#123;price: <span class=\"number\">5000</span>&#125;,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> totalSales = <span class=\"number\">0</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> _, phone := <span class=\"keyword\">range</span> phones &#123;</span><br><span class=\"line\">\t\ttotalSales += phone.sales()</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfmt.Println(totalSales)</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>输出结果：</p>\n<pre><code>14200\n</code></pre><p>上面的例子中，我们定义了一个手机数组，然后计算手机的总售价。可以看到，由于NokiaPhone和IPhone都实现了sales()方法，所以它们都是Phone类型，但是计算售价的时候，Go会知道调用哪个对象实现的方法。</p>\n<p>接口类型还可以作为结构体的数据成员。</p>\n<p>假设有个败家子，iPhone没有出的时候，买了好几款Nokia，iPhone出来后，又买了好多部iPhone，老爸要来看看这小子一共花了多少钱。<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Phone <span class=\"keyword\">interface</span> &#123;</span><br><span class=\"line\">\tsales() <span class=\"keyword\">int</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> NokiaPhone <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tprice <span class=\"keyword\">int</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(nokiaPhone NokiaPhone)</span> <span class=\"title\">sales</span><span class=\"params\">()</span> <span class=\"title\">int</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> nokiaPhone.price</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> IPhone <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tprice <span class=\"keyword\">int</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(iPhone IPhone)</span> <span class=\"title\">sales</span><span class=\"params\">()</span> <span class=\"title\">int</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> iPhone.price</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Person <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tphones []Phone</span><br><span class=\"line\">\tname   <span class=\"keyword\">string</span></span><br><span class=\"line\">\tage    <span class=\"keyword\">int</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(person Person)</span> <span class=\"title\">total_cost</span><span class=\"params\">()</span> <span class=\"title\">int</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> sum = <span class=\"number\">0</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> _, phone := <span class=\"keyword\">range</span> person.phones &#123;</span><br><span class=\"line\">\t\tsum += phone.sales()</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> sum</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> bought_phones = [<span class=\"number\">5</span>]Phone&#123;</span><br><span class=\"line\">\t\tNokiaPhone&#123;price: <span class=\"number\">350</span>&#125;,</span><br><span class=\"line\">\t\tIPhone&#123;price: <span class=\"number\">5000</span>&#125;,</span><br><span class=\"line\">\t\tIPhone&#123;price: <span class=\"number\">3400</span>&#125;,</span><br><span class=\"line\">\t\tNokiaPhone&#123;price: <span class=\"number\">450</span>&#125;,</span><br><span class=\"line\">\t\tIPhone&#123;price: <span class=\"number\">5000</span>&#125;,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> person = Person&#123;name: <span class=\"string\">\"Jemy\"</span>, age: <span class=\"number\">25</span>, phones: bought_phones[:]&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tfmt.Println(person.name)</span><br><span class=\"line\">\tfmt.Println(person.age)</span><br><span class=\"line\">\tfmt.Println(person.total_cost())</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这个例子纯为演示接口作为结构体数据成员，如有雷同，纯属巧合。这里面我们定义了一个Person结构体，结构体内部定义了一个手机类型切片。另外我们定义了Person的total_cost()方法用来计算手机花费总额。输出结果如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Jemy</span><br><span class=\"line\">25</span><br><span class=\"line\">14200</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"小结-1\"><a href=\"#小结-1\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p>Go的结构体和接口的实现方法可谓删繁就简，去除了很多别的语言令人困惑的地方，而且学习难度也不大，很容易上手。不过由于思想比较独到，也有可能会有人觉得功能太简单而无用，这个就各有看法了，不过在逐渐的使用过程中，我们会慢慢领悟到这种设计所带来的好处，以及所避免的问题。</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"Go函数\"><a href=\"#Go函数\" class=\"headerlink\" title=\"Go函数\"></a>Go函数</h1><p>是时候讨论一下Go的函数定义了。</p>\n<h2 id=\"什么是函数\"><a href=\"#什么是函数\" class=\"headerlink\" title=\"什么是函数\"></a>什么是函数</h2><p>函数，简单来讲就是一段将<code>输入数据</code>转换为<code>输出数据</code>的<code>公用代码块</code>。当然有的时候函数的返回值为空，那么就是说输出数据为空。而真正的处理过程在函数内部已经完成了。<br>","more":"<br>想一想我们为什么需要函数，最直接的需求就是代码中有太多的重复代码了，为了代码的可读性和可维护性，将这些重复代码重构为函数也是必要的。</p>\n<h2 id=\"函数定义\"><a href=\"#函数定义\" class=\"headerlink\" title=\"函数定义\"></a>函数定义</h2><p>先看一个例子<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">slice_sum</span><span class=\"params\">(arr []<span class=\"keyword\">int</span>)</span> <span class=\"title\">int</span></span> &#123;</span><br><span class=\"line\">\tsum := <span class=\"number\">0</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> _, elem := <span class=\"keyword\">range</span> arr &#123;</span><br><span class=\"line\">\t\tsum += elem</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> sum</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> arr1 = []<span class=\"keyword\">int</span>&#123;<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">2</span>&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> arr2 = []<span class=\"keyword\">int</span>&#123;<span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">1</span>, <span class=\"number\">6</span>, <span class=\"number\">4</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>&#125;</span><br><span class=\"line\">\tfmt.Println(slice_sum(arr1))</span><br><span class=\"line\">\tfmt.Println(slice_sum(arr2))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>在上面的例子中，我们需要分别计算两个切片的元素和。如果我们把计算切片元素的和的代码分别为两个切片展开，那么代码就失去了简洁性和一致性。假设你预想实现同样功能的代码在拷贝粘贴的过程中发生了错误，比如忘记改变量名之类的，到时候debug到崩溃吧。因为这时很有可能你就先入为主了，因为模板代码没有错啊，是不是。所以函数就是这个用处。</p>\n<p>我们再仔细看一下上面的函数定义：</p>\n<p>首先是关键字<code>func</code>，然后后面是<code>函数名称</code>，<code>参数列表</code>，最后是<code>返回值列表</code>。当然如果函数没有参数列表或者返回值，那么这两项都是可选的。其中返回值两边的括号在只声明一个返回值类型的时候可以省略。</p>\n<h2 id=\"命名返回值\"><a href=\"#命名返回值\" class=\"headerlink\" title=\"命名返回值\"></a>命名返回值</h2><p>Go的函数很有趣，你甚至可以为返回值预先定义一个名称，在函数结束的时候，直接一个return就可以返回所有的预定义返回值。例如上面的例子，我们将sum作为命名返回值。<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">slice_sum</span><span class=\"params\">(arr []<span class=\"keyword\">int</span>)</span> <span class=\"params\">(sum <span class=\"keyword\">int</span>)</span></span> &#123;</span><br><span class=\"line\">\tsum = <span class=\"number\">0</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> _, elem := <span class=\"keyword\">range</span> arr &#123;</span><br><span class=\"line\">\t\tsum += elem</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> arr1 = []<span class=\"keyword\">int</span>&#123;<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">2</span>&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> arr2 = []<span class=\"keyword\">int</span>&#123;<span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">1</span>, <span class=\"number\">6</span>, <span class=\"number\">4</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>&#125;</span><br><span class=\"line\">\tfmt.Println(slice_sum(arr1))</span><br><span class=\"line\">\tfmt.Println(slice_sum(arr2))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这里要注意的是，如果你定义了命名返回值，那么在函数内部你将不能再重复定义一个同样名称的变量。比如第一个例子中我们用<code>sum:=0</code>来定义和初始化变量sum，而在第二个例子中，我们只能用<code>sum=0</code>初始化这个变量了。因为<code>:=</code>表示的是定义并且初始化变量。</p>\n<h2 id=\"实参数和虚参数\"><a href=\"#实参数和虚参数\" class=\"headerlink\" title=\"实参数和虚参数\"></a>实参数和虚参数</h2><p>可能你听说过函数的实参数和虚参数。其实所谓的<code>实参数就是函数调用的时候传入的参数</code>。在上面的例子中，实参就是<code>arr1</code>和<code>arr2</code>，而<code>虚参数就是函数定义的时候表示函数需要传入哪些参数的占位参数</code>。在上面的例子中，虚参就是<code>arr</code>。<code>实参和虚参的名字不必是一样的。即使是一样的，也互不影响。</code>因为虚参是函数的内部变量。而实参则是另一个函数的内部变量或者是全局变量。它们的作用域不同。如果一个函数的虚参碰巧和一个全局变量名称相同，那么函数使用的也是虚参。例如我们再修改一下上面的例子。<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr = []<span class=\"keyword\">int</span>&#123;<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">2</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">slice_sum</span><span class=\"params\">(arr []<span class=\"keyword\">int</span>)</span> <span class=\"params\">(sum <span class=\"keyword\">int</span>)</span></span> &#123;</span><br><span class=\"line\">\tsum = <span class=\"number\">0</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> _, elem := <span class=\"keyword\">range</span> arr &#123;</span><br><span class=\"line\">\t\tsum += elem</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> arr2 = []<span class=\"keyword\">int</span>&#123;<span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">1</span>, <span class=\"number\">6</span>, <span class=\"number\">4</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>&#125;</span><br><span class=\"line\">\tfmt.Println(slice_sum(arr))</span><br><span class=\"line\">\tfmt.Println(slice_sum(arr2))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>在上面的例子中，我们定义了全局变量arr并且初始化值，而我们的slice_sum函数的虚参也是arr，但是程序同样正常工作。</p>\n<h2 id=\"函数多返回值\"><a href=\"#函数多返回值\" class=\"headerlink\" title=\"函数多返回值\"></a>函数多返回值</h2><p>记不记得你在java或者c里面需要返回多个值时还得去定义一个对象或者结构体的呢？在Go里面，你不需要这么做了。Go函数支持你返回多个值。</p>\n<p>其实函数的多返回值，我们在上面遇见过很多次了。那就是<code>range</code>函数。这个函数用来迭代数组或者切片的时候返回的是两个值，一个是数组或切片元素的索引，另外一个是数组或切片元素。在上面的例子中，因为我们不需要元素的索引，所以我们用一个特殊的忽略返回值符号<code>下划线(_)</code>来忽略索引。</p>\n<p>假设上面的例子我们除了返回切片的元素和，还想返回切片元素的平均值，那么我们修改一下代码。<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">slice_sum</span><span class=\"params\">(arr []<span class=\"keyword\">int</span>)</span> <span class=\"params\">(<span class=\"keyword\">int</span>, <span class=\"keyword\">float64</span>)</span></span> &#123;</span><br><span class=\"line\">\tsum := <span class=\"number\">0</span></span><br><span class=\"line\">\tavg := <span class=\"number\">0.0</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> _, elem := <span class=\"keyword\">range</span> arr &#123;</span><br><span class=\"line\">\t\tsum += elem</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tavg = <span class=\"keyword\">float64</span>(sum) / <span class=\"keyword\">float64</span>(<span class=\"built_in\">len</span>(arr))</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> sum, avg</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> arr1 = []<span class=\"keyword\">int</span>&#123;<span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">1</span>, <span class=\"number\">6</span>, <span class=\"number\">4</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>&#125;</span><br><span class=\"line\">\tfmt.Println(slice_sum(arr1))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>很简单吧，当然我们还可以将上面的参数定义为命名参数<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">slice_sum</span><span class=\"params\">(arr []<span class=\"keyword\">int</span>)</span> <span class=\"params\">(sum <span class=\"keyword\">int</span>, avg <span class=\"keyword\">float64</span>)</span></span> &#123;</span><br><span class=\"line\">\tsum = <span class=\"number\">0</span></span><br><span class=\"line\">\tavg = <span class=\"number\">0.0</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> _, elem := <span class=\"keyword\">range</span> arr &#123;</span><br><span class=\"line\">\t\tsum += elem</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tavg = <span class=\"keyword\">float64</span>(sum) / <span class=\"keyword\">float64</span>(<span class=\"built_in\">len</span>(arr))</span><br><span class=\"line\">\t<span class=\"comment\">//return sum, avg</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> arr1 = []<span class=\"keyword\">int</span>&#123;<span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">1</span>, <span class=\"number\">6</span>, <span class=\"number\">4</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>&#125;</span><br><span class=\"line\">\tfmt.Println(slice_sum(arr1))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>在上面的代码里面，将<code>return sum, avg</code>给注释了而直接使用<code>return</code>。其实这两种返回方式都可以。</p>\n<h2 id=\"变长参数\"><a href=\"#变长参数\" class=\"headerlink\" title=\"变长参数\"></a>变长参数</h2><p>想一想我们的fmt包里面的Println函数，它怎么知道你传入的参数个数呢？<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tfmt.Println(<span class=\"number\">1</span>)</span><br><span class=\"line\">\tfmt.Println(<span class=\"number\">1</span>, <span class=\"number\">2</span>)</span><br><span class=\"line\">\tfmt.Println(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这个要归功于Go的一大特性，支持可变长参数列表。</p>\n<p>首先我们来看一个例子<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">sum</span><span class=\"params\">(arr ...<span class=\"keyword\">int</span>)</span> <span class=\"title\">int</span></span> &#123;</span><br><span class=\"line\">\tsum := <span class=\"number\">0</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> _, val := <span class=\"keyword\">range</span> arr &#123;</span><br><span class=\"line\">\t\tsum += val</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> sum</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tfmt.Println(sum(<span class=\"number\">1</span>))</span><br><span class=\"line\">\tfmt.Println(sum(<span class=\"number\">1</span>, <span class=\"number\">2</span>))</span><br><span class=\"line\">\tfmt.Println(sum(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>在上面的例子中，我们将原来的切片参数修改为可变长参数，然后使用range函数迭代这些参数，并求和。<br>从这里我们可以看出至少一点那就是<code>可变长参数列表里面的参数类型都是相同的</code>（<em>如果你对这句话表示怀疑，可能是因为你看到Println函数恰恰可以输出不同类型的可变参数，这个问题的答案要等到我们介绍完Go的接口后才行</em>）。</p>\n<p>另外还有一点需要注意，那就是<code>可变长参数定义只能是函数的最后一个参数</code>。比如下面的例子：<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">sum</span><span class=\"params\">(base <span class=\"keyword\">int</span>, arr ...<span class=\"keyword\">int</span>)</span> <span class=\"title\">int</span></span> &#123;</span><br><span class=\"line\">\tsum := base</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> _, val := <span class=\"keyword\">range</span> arr &#123;</span><br><span class=\"line\">\t\tsum += val</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> sum</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tfmt.Println(sum(<span class=\"number\">100</span>, <span class=\"number\">1</span>))</span><br><span class=\"line\">\tfmt.Println(sum(<span class=\"number\">200</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>))</span><br><span class=\"line\">\tfmt.Println(sum(<span class=\"number\">300</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这里不知道你是否觉得这个例子其实和那个切片的例子很像啊，在哪里呢？<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">sum</span><span class=\"params\">(base <span class=\"keyword\">int</span>, arr ...<span class=\"keyword\">int</span>)</span> <span class=\"title\">int</span></span> &#123;</span><br><span class=\"line\">\tsum := base</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> _, val := <span class=\"keyword\">range</span> arr &#123;</span><br><span class=\"line\">\t\tsum += val</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> sum</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> arr1 = []<span class=\"keyword\">int</span>&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>&#125;</span><br><span class=\"line\">\tfmt.Println(sum(<span class=\"number\">300</span>, arr1...))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>呵呵，就是把切片“啪，啪，啪”三个耳光打碎了，传递过去啊！:-P</p>\n<h2 id=\"闭包函数\"><a href=\"#闭包函数\" class=\"headerlink\" title=\"闭包函数\"></a>闭包函数</h2><p>曾经使用python和javascript的时候就在想，如果有一天可以把这两种语言的特性做个并集该有多好。</p>\n<p>这一天终于来了，Go支持闭包函数。</p>\n<p>首先看一个闭包函数的例子。所谓闭包函数就是将整个函数的定义一气呵成写好并赋值给一个变量。然后用这个变量名作为函数名去调用函数体。</p>\n<p>我们将刚刚的例子修改一下：<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> arr1 = []<span class=\"keyword\">int</span>&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> sum = <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(arr ...<span class=\"keyword\">int</span>)</span> <span class=\"title\">int</span></span> &#123;</span><br><span class=\"line\">\t\ttotal_sum := <span class=\"number\">0</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> _, val := <span class=\"keyword\">range</span> arr &#123;</span><br><span class=\"line\">\t\t\ttotal_sum += val</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> total_sum</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfmt.Println(sum(arr1...))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>从这里我们可以看出，其实闭包函数也没有什么特别之处。因为Go不支持在一个函数的内部再定义一个嵌套函数，所以使用闭包函数能够实现在一个函数内部定义另一个函数的目的。</p>\n<p>这里我们需要注意的一个问题是，闭包函数对它外层的函数中的变量具有<code>访问</code>和<code>修改</code>的权限。例如：<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> arr1 = []<span class=\"keyword\">int</span>&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> base = <span class=\"number\">300</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> sum = <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(arr ...<span class=\"keyword\">int</span>)</span> <span class=\"title\">int</span></span> &#123;</span><br><span class=\"line\">\t\ttotal_sum := <span class=\"number\">0</span></span><br><span class=\"line\">\t\ttotal_sum += base</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> _, val := <span class=\"keyword\">range</span> arr &#123;</span><br><span class=\"line\">\t\t\ttotal_sum += val</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> total_sum</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfmt.Println(sum(arr1...))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这个例子，输出315，因为total_sum加上了base的值。<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> base = <span class=\"number\">0</span></span><br><span class=\"line\">\tinc := <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t\tbase += <span class=\"number\">1</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfmt.Println(base)</span><br><span class=\"line\">\tinc()</span><br><span class=\"line\">\tfmt.Println(base)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>在上面的例子中，闭包函数修改了main函数的局部变量base。</p>\n<p>最后我们来看一个闭包的示例，生成偶数序列。<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">createEvenGenerator</span><span class=\"params\">()</span> <span class=\"title\">func</span><span class=\"params\">()</span> <span class=\"title\">uint</span></span> &#123;</span><br><span class=\"line\">\ti := <span class=\"keyword\">uint</span>(<span class=\"number\">0</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span> <span class=\"params\">(retVal <span class=\"keyword\">uint</span>)</span></span> &#123;</span><br><span class=\"line\">\t\tretVal = i</span><br><span class=\"line\">\t\ti += <span class=\"number\">2</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tnextEven := createEvenGenerator()</span><br><span class=\"line\">\tfmt.Println(nextEven())</span><br><span class=\"line\">\tfmt.Println(nextEven())</span><br><span class=\"line\">\tfmt.Println(nextEven())</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这个例子很有意思的，因为我们定义了一个<code>返回函数定义</code>的函数。而所返回的函数定义就是<code>在这个函数的内部定义的闭包函数</code>。这个闭包函数在外层函数调用的时候，每次都生成一个新的偶数（加2操作）然后返回闭包函数定义。</p>\n<p>其中<code>func() uint</code>就是函数createEvenGenerator的返回值。在createEvenGenerator中，这个返回值是return返回的闭包函数定义。<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span> <span class=\"params\">(retVal <span class=\"keyword\">uint</span>)</span></span> &#123;</span><br><span class=\"line\">       \tretVal = i</span><br><span class=\"line\">       \ti += <span class=\"number\">2</span></span><br><span class=\"line\">       \t<span class=\"keyword\">return</span></span><br><span class=\"line\">   \t&#125;</span><br></pre></td></tr></table></figure></p>\n<p>因为createEvenGenerator函数返回的是一个函数定义，所以我们再把它赋值给一个代表函数的变量，然后用这个代表闭包函数的变量去调用函数执行。</p>\n<h2 id=\"递归函数\"><a href=\"#递归函数\" class=\"headerlink\" title=\"递归函数\"></a>递归函数</h2><p>每次谈到递归函数，必然绕不开阶乘和斐波拉切数列。</p>\n<p>阶乘<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    n!=1*2*3*...*n</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">factorial</span><span class=\"params\">(x <span class=\"keyword\">uint</span>)</span> <span class=\"title\">uint</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> x == <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">1</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> x * factorial(x<span class=\"number\">-1</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tfmt.Println(factorial(<span class=\"number\">5</span>))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>如果x为0，那么返回1，因为0!=1。如果x是1，那么f(1)=1<em>f(0)，如果x是2，那么f(2)=2</em>f(1)=2<em>1</em>f(0)，依次推断f(x)=x<em>(x-1)</em>…<em>2</em>1*f(0)。</p>\n<p>从上面看出所谓递归，就是在函数的内部重复调用一个函数的过程。需要注意的是这个函数必须能够一层一层分解，并且有出口。上面的例子出口就是0。</p>\n<p>斐波拉切数列</p>\n<p>求第N个斐波拉切元素<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\tf(1)=1</span></span><br><span class=\"line\"><span class=\"comment\">\tf(2)=2</span></span><br><span class=\"line\"><span class=\"comment\">\tf(n)=f(n-2)+f(n-1)</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">fibonacci</span><span class=\"params\">(n <span class=\"keyword\">int</span>)</span> <span class=\"title\">int</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> retVal = <span class=\"number\">0</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> n == <span class=\"number\">1</span> &#123;</span><br><span class=\"line\">\t\tretVal = <span class=\"number\">1</span></span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> n == <span class=\"number\">2</span> &#123;</span><br><span class=\"line\">\t\tretVal = <span class=\"number\">2</span></span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\tretVal = fibonacci(n<span class=\"number\">-2</span>) + fibonacci(n<span class=\"number\">-1</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> retVal</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tfmt.Println(fibonacci(<span class=\"number\">5</span>))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>斐波拉切第一个元素是1，第二个元素是2，后面的元素依次是前两个元素的和。</p>\n<p>其实对于递归函数来讲，只要知道了函数的出口，后面的不过是让计算机去不断地推断，一直推断到这个出口。理解了这一点，递归就很好理解了。</p>\n<h2 id=\"异常处理\"><a href=\"#异常处理\" class=\"headerlink\" title=\"异常处理\"></a>异常处理</h2><p>当你读取文件失败而退出的时候是否担心文件句柄是否已经关闭？抑或是你对于try…catch…finally的结构中finally里面的代码和try里面的return代码那个先执行这样的问题痛苦不已？</p>\n<p>一切都结束了。一门完美的语言必须有一个清晰的无歧义的执行逻辑。</p>\n<p>好，来看看Go提供的异常处理。</p>\n<p><em>defer</em><br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">first</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"first func run\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">second</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"second func run\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> second()</span><br><span class=\"line\">\tfirst()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>Go语言提供了关键字<code>defer</code>来在函数运行结束的时候运行一段代码或调用一个清理函数。上面的例子中，虽然second()函数写在first()函数前面，但是由于使用了defer标注，所以它是在main函数执行结束的时候才调用的。</p>\n<p>所以输出结果<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">first func run</span><br><span class=\"line\">second func run</span><br></pre></td></tr></table></figure></p>\n<p><code>defer</code>用途最多的在于释放各种资源。比如我们读取一个文件，读完之后需要释放文件句柄。<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"bufio\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"os\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"strings\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tfname := <span class=\"string\">\"D:\\\\Temp\\\\test.txt\"</span></span><br><span class=\"line\">\tf, err := os.Open(fname)</span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> f.Close()</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tos.Exit(<span class=\"number\">1</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tbReader := bufio.NewReader(f)</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">\t\tline, ok := bReader.ReadString(<span class=\"string\">'\\n'</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> ok != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tfmt.Println(strings.Trim(line, <span class=\"string\">\"\\r\\n\"</span>))</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>在上面的例子中，我们按行读取文件，并且输出。从代码中，我们可以看到在使用os包中的Open方法打开文件后，立马跟着一个defer语句用来关闭文件句柄。这样就保证了该文件句柄在main函数运行结束的时候或者异常终止的时候一定能够被释放。而且由于紧跟着Open语句，一旦养成了习惯，就不会忘记去关闭文件句柄了。</p>\n<p><em>panic</em> &amp; <em>recover</em></p>\n<blockquote>\n<p>当你周末走在林荫道上，听着小歌，哼着小曲，很是惬意。突然之间，从天而降瓢泼大雨，你顿时慌张（panic）起来，没有带伞啊，淋着雨感冒就不好了。于是你四下张望，忽然发现自己离地铁站很近，那里有很多卖伞的，心中顿时又安定了下来（recover），于是你飞奔过去买了一把伞（defer）。</p>\n</blockquote>\n<p>好了，panic和recover是Go语言提供的用以处理异常的关键字。<code>panic用来触发异常</code>，而<code>recover用来终止异常并且返回传递给panic的值</code>。（注意<code>recover并不能处理异常</code>，而且<code>recover只能在defer里面使用，否则无效</code>。）</p>\n<p>先瞧个小例子<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"I am walking and singing...\"</span>)</span><br><span class=\"line\">\t<span class=\"built_in\">panic</span>(<span class=\"string\">\"It starts to rain cats and dogs\"</span>)</span><br><span class=\"line\">\tmsg := <span class=\"built_in\">recover</span>()</span><br><span class=\"line\">\tfmt.Println(msg)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>看看输出结果</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">runtime.panic(0x48d380, 0xc084003210)</span><br><span class=\"line\">       C:/Users/ADMINI~1/AppData/Local/Temp/2/bindist667667715/go/src/pkg/runtime/panic.c:266 \t+0xc8</span><br><span class=\"line\">main.main()</span><br><span class=\"line\">       D:/JemyGraw/Creation/Go/freebook_go/func_d1.go:9 +0xea</span><br><span class=\"line\">exit status 2</span><br></pre></td></tr></table></figure>\n<p>咦？怎么没有输出recover获取的错误信息呢？</p>\n<p>这是因为在运行到panic语句的时候，程序已经异常终止了，后面的代码就不运行了。</p>\n<p>那么如何才能阻止程序异常终止呢？这个时候要使用defer。因为<code>defer一定是在函数执行结束的时候运行的。不管是正常结束还是异常终止</code>。</p>\n<p>修改一下代码<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t\tmsg := <span class=\"built_in\">recover</span>()</span><br><span class=\"line\">\t\tfmt.Println(msg)</span><br><span class=\"line\">\t&#125;()</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"I am walking and singing...\"</span>)</span><br><span class=\"line\">\t<span class=\"built_in\">panic</span>(<span class=\"string\">\"It starts to rain cats and dogs\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>好了，看下输出<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">I am walking and singing...</span><br><span class=\"line\">It starts to rain cats and dogs</span><br></pre></td></tr></table></figure></p>\n<p>小结：</p>\n<p>panic触发的异常通常是运行时错误。比如试图访问的索引超出了数组边界，忘记初始化字典或者任何无法轻易恢复到正常执行的错误。</p>\n<h1 id=\"Go指针\"><a href=\"#Go指针\" class=\"headerlink\" title=\"Go指针\"></a>Go指针</h1><p>不要害怕，Go的指针是好指针。</p>\n<h2 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h2><p>所谓<code>指针其实你可以把它想像成一个箭头，这个箭头指向（存储）一个变量的地址</code>。</p>\n<p>因为这个箭头本身也需要变量来存储，所以也叫做指针变量。</p>\n<p>Go的指针<code>不支持那些乱七八糟的指针移位</code>。<code>它就表示一个变量的地址</code>。看看这个例子：<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> x <span class=\"keyword\">int</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> x_ptr *<span class=\"keyword\">int</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tx = <span class=\"number\">10</span></span><br><span class=\"line\">\tx_ptr = &amp;x</span><br><span class=\"line\"></span><br><span class=\"line\">\tfmt.Println(x)</span><br><span class=\"line\">\tfmt.Println(x_ptr)</span><br><span class=\"line\">\tfmt.Println(*x_ptr)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>上面例子输出<code>x的值</code>，<code>x的地址</code>和<code>通过指针变量输出x的值</code>，而<code>x_ptr就是一个指针变量</code>。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">10</span><br><span class=\"line\">0xc084000038</span><br><span class=\"line\">10</span><br></pre></td></tr></table></figure></p>\n<p>认真理清楚这两个符号的意思。</p>\n<p><strong>&amp;</strong> <code>取一个变量的地址</code></p>\n<p><strong>*</strong> <code>取一个指针变量所指向的地址的值</code></p>\n<p>考你一下，上面的例子中，如何输出x_ptr的地址呢？<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> x <span class=\"keyword\">int</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> x_ptr *<span class=\"keyword\">int</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tx = <span class=\"number\">10</span></span><br><span class=\"line\">\tx_ptr = &amp;x</span><br><span class=\"line\"></span><br><span class=\"line\">\tfmt.Println(&amp;x_ptr)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>此例看懂，指针就懂了。</p>\n<p>永远记住一句话，<code>所谓指针就是一个指向（存储）特定变量地址的变量</code>。没有其他的特别之处。</p>\n<p>再变态一下，看看这个：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package main</span><br><span class=\"line\"></span><br><span class=\"line\">import (</span><br><span class=\"line\">\t&quot;fmt&quot;</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\">\tvar x int</span><br><span class=\"line\">\tvar x_ptr *int</span><br><span class=\"line\"></span><br><span class=\"line\">\tx = 10</span><br><span class=\"line\">\tx_ptr = &amp;x</span><br><span class=\"line\"></span><br><span class=\"line\">\tfmt.Println(*&amp;x_ptr)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<ol>\n<li>x_ptr 是一个<code>指针变量</code>，它<code>指向(存储)x的地址</code>；</li>\n<li>&amp;x_ptr 是<code>取这个指针变量x_ptr的地址</code>，这里可以设想<code>有另一个指针变量x_ptr_ptr(指向)存储</code>这个<code>x_ptr指针的地址</code>；</li>\n<li><em>&amp;x_ptr 等价于`</em>x_ptr_ptr<code>就是</code>取这个x_ptr_ptr指针变量<code>所</code>指向(存储)<code>的</code>地址所对应的变量的值<code>，也就是</code>x_ptr的值<code>，也就是</code>指针变量x_ptr指向(存储)的地址<code>，也就是</code>x的地址<code>。 这里可以看到，其实</code>*&amp;`这两个运算符在一起就相互抵消作用了。</li>\n</ol>\n<h2 id=\"用途\"><a href=\"#用途\" class=\"headerlink\" title=\"用途\"></a>用途</h2><p><code>指针的一大用途就是可以将变量的指针作为实参传递给函数，从而在函数内部能够直接修改实参所指向的变量值。</code></p>\n<p>Go的变量传递都是值传递。<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">change</span><span class=\"params\">(x <span class=\"keyword\">int</span>)</span></span> &#123;</span><br><span class=\"line\">\tx = <span class=\"number\">200</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> x <span class=\"keyword\">int</span> = <span class=\"number\">100</span></span><br><span class=\"line\">\tfmt.Println(x)</span><br><span class=\"line\">\tchange(x)</span><br><span class=\"line\">\tfmt.Println(x)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>上面的例子输出结果为<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">100</span><br><span class=\"line\">100</span><br></pre></td></tr></table></figure></p>\n<p>很显然，change函数<code>改变的</code>仅仅是<code>内部变量x</code>的<code>值</code>，而<code>不会改变</code>传递进去的<code>实参</code>。其实，也就是说Go的函数一般关心的是输出结果，而输入参数就相当于信使跑到函数门口大叫，你们这个参数是什么值，那个是什么值，然后就跑了。你函数根本就不能修改它的值。不过如果是传递的实参是指针变量，那么函数一看，小子这次你地址我都知道了，哪里跑。那么就是下面的例子：<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">change</span><span class=\"params\">(x *<span class=\"keyword\">int</span>)</span></span> &#123;</span><br><span class=\"line\">\t*x = <span class=\"number\">200</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> x <span class=\"keyword\">int</span> = <span class=\"number\">100</span></span><br><span class=\"line\">\tfmt.Println(x)</span><br><span class=\"line\">\tchange(&amp;x)</span><br><span class=\"line\">\tfmt.Println(x)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>上面的例子中，change函数的虚参为<code>整型指针变量</code>，所以在main中调用的时候<code>传递的是x的地址</code>。然后在change里面使用<code>*x=200</code>修改了这个x的地址的值。所以<code>x的值就变了</code>。这个输出是：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">100</span><br><span class=\"line\">200</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"new\"><a href=\"#new\" class=\"headerlink\" title=\"new\"></a>new</h2><p>new这个函数挺神奇，因为它的用处太多了。这里还可以通过new来<code>初始化一个指针</code>。上面说过指针指向(存储)的是一个变量的地址，但是指针本身也需要地址存储。先看个例子：<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">set_value</span><span class=\"params\">(x_ptr *<span class=\"keyword\">int</span>)</span></span> &#123;</span><br><span class=\"line\">\t*x_ptr = <span class=\"number\">100</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tx_ptr := <span class=\"built_in\">new</span>(<span class=\"keyword\">int</span>)</span><br><span class=\"line\">\tset_value(x_ptr)</span><br><span class=\"line\">\t<span class=\"comment\">//x_ptr指向的地址</span></span><br><span class=\"line\">\tfmt.Println(x_ptr)</span><br><span class=\"line\">\t<span class=\"comment\">//x_ptr本身的地址</span></span><br><span class=\"line\">\tfmt.Println(&amp;x_ptr)</span><br><span class=\"line\">\t<span class=\"comment\">//x_ptr指向的地址值</span></span><br><span class=\"line\">\tfmt.Println(*x_ptr)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>上面我们定义了一个x_ptr变量，然后用<code>new申请</code>了一个<code>存储整型数据的内存地址</code>，然后将这个<code>地址赋值</code>给<code>x_ptr指针变量</code>，也就是说<code>x_ptr指向（存储）的是一个可以存储整型数据的地址</code>，然后用set_value函数将<code>这个地址中存储的值</code>赋值为100。所以第一个输出是<code>x_ptr指向的地址</code>，第二个则是<code>x_ptr本身的地址</code>，而<code>*x_ptr</code>则是<code>x_ptr指向的地址中存储的整型数据的值</code>。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0xc084000040</span><br><span class=\"line\">0xc084000038</span><br><span class=\"line\">100</span><br></pre></td></tr></table></figure>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p>好了，现在用个例子再来回顾一下指针。</p>\n<p>交换两个变量的值。<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">swap</span><span class=\"params\">(x, y *<span class=\"keyword\">int</span>)</span></span> &#123;</span><br><span class=\"line\">\t*x, *y = *y, *x</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tx_val := <span class=\"number\">100</span></span><br><span class=\"line\">\ty_val := <span class=\"number\">200</span></span><br><span class=\"line\">\tswap(&amp;x_val, &amp;y_val)</span><br><span class=\"line\">\tfmt.Println(x_val)</span><br><span class=\"line\">\tfmt.Println(y_val)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>很简单吧，这里利用了Go提供的<code>交叉赋值</code>的功能，另外由于是使用了指针作为参数，所以在swap函数内，x_val和y_val的值就被交换了。</p>\n<h1 id=\"Go结构体和指针\"><a href=\"#Go结构体和指针\" class=\"headerlink\" title=\"Go结构体和指针\"></a>Go结构体和指针</h1><p>基本上到这里的时候，就是上了一个台阶了。Go的精华特点即将展开。</p>\n<h2 id=\"结构体定义\"><a href=\"#结构体定义\" class=\"headerlink\" title=\"结构体定义\"></a>结构体定义</h2><p>上面我们说过Go的指针和C的不同，结构体也是一样的。Go是一门删繁就简的语言，一切令人困惑的特性都必须去掉。</p>\n<p>简单来讲，Go提供的<code>结构体</code>就是把<code>使用各种数据类型定义</code>的<code>不同变量组合起来</code>的<code>高级数据类型</code>。闲话不多说，看例子:<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> Rect <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\twidth <span class=\"keyword\">float64</span></span><br><span class=\"line\">\tlength <span class=\"keyword\">float64</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>上面我们定义了一个矩形结构体，首先是关键是<code>type</code>表示要<code>定义一个新的数据类型了</code>，然后是新的数据类型名称<code>Rect</code>，最后是<code>struct</code>关键字，表示这个高级数据类型是结构体类型。在上面的例子中，因为<code>width和length的数据类型相同</code>，还可以写成如下格式：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> Rect <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\twidth, length <span class=\"keyword\">float64</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>好了，来用结构体干点啥吧，计算一下矩形面积。<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Rect <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\twidth, length <span class=\"keyword\">float64</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> rect Rect</span><br><span class=\"line\">\trect.width = <span class=\"number\">100</span></span><br><span class=\"line\">\trect.length = <span class=\"number\">200</span></span><br><span class=\"line\">\tfmt.Println(rect.width * rect.length)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>从上面的例子看到，其实结构体类型和基础数据类型使用方式差不多，唯一的区别就是结构体类型可以通过<code>.</code>来访问内部的成员。包括<code>给内部成员赋值</code>和<code>读取内部成员值</code>。</p>\n<p>在上面的例子中，我们是用var关键字先定义了一个Rect变量，然后对它的成员赋值。我们也可以使用初始化的方式来给Rect变量的内部成员赋值。<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Rect <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\twidth, length <span class=\"keyword\">float64</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> rect = Rect&#123;width: <span class=\"number\">100</span>, length: <span class=\"number\">200</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tfmt.Println(rect.width * rect.length)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>当然<code>如果你知道结构体成员定义的顺序</code>，也可以不使用<code>key:value</code>的方式赋值，<code>直接按照结构体成员定义的顺序给它们赋值</code>。<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Rect <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\twidth, length <span class=\"keyword\">float64</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> rect = Rect&#123;<span class=\"number\">100</span>, <span class=\"number\">200</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"Width:\"</span>, rect.width, <span class=\"string\">\"* Length:\"</span>,</span><br><span class=\"line\">\t\trect.length, <span class=\"string\">\"= Area:\"</span>, rect.width*rect.length)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>输出结果为</p>\n<pre><code>Width: 100 * Length: 200 = Area: 20000\n</code></pre><h2 id=\"结构体参数传递方式\"><a href=\"#结构体参数传递方式\" class=\"headerlink\" title=\"结构体参数传递方式\"></a>结构体参数传递方式</h2><p>我们说过，<code>Go函数的参数传递方式是值传递</code>，这句话<code>对结构体也是适用的</code>。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Rect <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\twidth, length <span class=\"keyword\">float64</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">double_area</span><span class=\"params\">(rect Rect)</span> <span class=\"title\">float64</span></span> &#123;</span><br><span class=\"line\">\trect.width *= <span class=\"number\">2</span></span><br><span class=\"line\">\trect.length *= <span class=\"number\">2</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> rect.width * rect.length</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> rect = Rect&#123;<span class=\"number\">100</span>, <span class=\"number\">200</span>&#125;</span><br><span class=\"line\">\tfmt.Println(double_area(rect))</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"Width:\"</span>, rect.width, <span class=\"string\">\"Length:\"</span>, rect.length)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面的例子输出为:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">80000</span><br><span class=\"line\">Width: 100 Length: 200</span><br></pre></td></tr></table></figure></p>\n<p>也就说虽然在double_area函数里面我们将结构体的宽度和长度都加倍，但仍然没有影响main函数里面的rect变量的宽度和长度。</p>\n<h2 id=\"结构体组合函数\"><a href=\"#结构体组合函数\" class=\"headerlink\" title=\"结构体组合函数\"></a>结构体组合函数</h2><p>上面我们在main函数中计算了矩形的面积，但是我们觉得矩形的面积如果能够作为矩形结构体的“内部函数”提供会更好。这样我们就可以直接说这个矩形面积是多少，而不用另外去取宽度和长度去计算。现在我们看看结构体“内部函数”定义方法：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Rect <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\twidth, length <span class=\"keyword\">float64</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(rect Rect)</span> <span class=\"title\">area</span><span class=\"params\">()</span> <span class=\"title\">float64</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> rect.width * rect.length</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> rect = Rect&#123;<span class=\"number\">100</span>, <span class=\"number\">200</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"Width:\"</span>, rect.width, <span class=\"string\">\"Length:\"</span>, rect.length,</span><br><span class=\"line\">\t\t<span class=\"string\">\"Area:\"</span>, rect.area())</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>咦？这个是什么“内部方法”，根本没有定义在Rect数据类型的内部啊？</p>\n<p>确实如此，我们看到，虽然main函数中的rect变量可以直接调用函数area()来获取矩形面积，但是area()函数确实没有定义在Rect结构体内部，这点和C语言的有很大不同。<code>Go使用组合函数的方式来为结构体定义结构体方法</code>。我们仔细看一下上面的area()函数定义。</p>\n<p>首先是关键字<code>func</code>表示这是一个函数，第二个参数是<code>结构体类型和实例变量</code>，第三个是<code>函数名称</code>，第四个是<code>函数返回值</code>。这里我们可以看出area()函数和普通函数定义的<code>区别就在于</code>area()函数<code>多了一个结构体类型限定</code>。这样一来Go就知道了这是一个为结构体定义的<code>方法</code>。</p>\n<p>这里需要注意一点就是<code>定义在结构体上面的函数(function)</code>一般叫做<code>方法(method)</code>。</p>\n<h2 id=\"结构体和指针\"><a href=\"#结构体和指针\" class=\"headerlink\" title=\"结构体和指针\"></a>结构体和指针</h2><p>我们在指针一节讲到过，<code>指针的主要作用就是在函数内部改变传递进来变量的值</code>。对于上面的计算矩形面积的例子，我们可以修改一下代码如下：<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Rect <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\twidth, length <span class=\"keyword\">float64</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(rect *Rect)</span> <span class=\"title\">area</span><span class=\"params\">()</span> <span class=\"title\">float64</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> rect.width * rect.length</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> rect = <span class=\"built_in\">new</span>(Rect)</span><br><span class=\"line\">\trect.width = <span class=\"number\">100</span></span><br><span class=\"line\">\trect.length = <span class=\"number\">200</span></span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"Width:\"</span>, rect.width, <span class=\"string\">\"Length:\"</span>, rect.length,</span><br><span class=\"line\">\t\t<span class=\"string\">\"Area:\"</span>, rect.area())</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>上面的例子中，使用了new函数来创建一个结构体指针rect，也就是说rect的类型是*Rect，结构体遇到指针的时候，你<code>不需要使用*去访问结构体的成员</code>，直接使用<code>.</code>引用就可以了。所以上面的例子中我们直接使用<code>rect.width=100</code> 和<code>rect.length=200</code>来设置结构体成员值。因为这个时候rect是结构体指针，所以我们定义area()函数的时候结构体限定类型为<code>*Rect</code>。</p>\n<p>其实在计算面积的这个例子中，我们不需要改变矩形的宽或者长度，所以定义area函数的时候结构体限定类型仍然为<code>Rect</code>也是可以的。如下：<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Rect <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\twidth, length <span class=\"keyword\">float64</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(rect Rect)</span> <span class=\"title\">area</span><span class=\"params\">()</span> <span class=\"title\">float64</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> rect.width * rect.length</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> rect = <span class=\"built_in\">new</span>(Rect)</span><br><span class=\"line\">\trect.width = <span class=\"number\">100</span></span><br><span class=\"line\">\trect.length = <span class=\"number\">200</span></span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"Width:\"</span>, rect.width, <span class=\"string\">\"Length:\"</span>, rect.length,</span><br><span class=\"line\">\t\t<span class=\"string\">\"Area:\"</span>, rect.area())</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这里Go足够聪明，所以rect.area()也是可以的。</p>\n<p>至于<code>使不使用结构体指针和使不使用指针的出发点是一样的</code>，那就是<code>你是否试图在函数内部改变传递进来的参数的值</code>。再举个例子如下：<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Rect <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\twidth, length <span class=\"keyword\">float64</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(rect *Rect)</span> <span class=\"title\">double_area</span><span class=\"params\">()</span> <span class=\"title\">float64</span></span> &#123;</span><br><span class=\"line\">\trect.width *= <span class=\"number\">2</span></span><br><span class=\"line\">\trect.length *= <span class=\"number\">2</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> rect.width * rect.length</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> rect = <span class=\"built_in\">new</span>(Rect)</span><br><span class=\"line\">\trect.width = <span class=\"number\">100</span></span><br><span class=\"line\">\trect.length = <span class=\"number\">200</span></span><br><span class=\"line\">\tfmt.Println(*rect)</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"Double Width:\"</span>, rect.width, <span class=\"string\">\"Double Length:\"</span>, rect.length,</span><br><span class=\"line\">\t\t<span class=\"string\">\"Double Area:\"</span>, rect.double_area())</span><br><span class=\"line\">\tfmt.Println(*rect)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这个例子的输出是：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;100 200&#125;</span><br><span class=\"line\">Double Width: 200 Double Length: 400 Double Area: 80000</span><br><span class=\"line\">&#123;200 400&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"结构体内嵌类型\"><a href=\"#结构体内嵌类型\" class=\"headerlink\" title=\"结构体内嵌类型\"></a>结构体内嵌类型</h2><p>我们可以在一个<code>结构体内部定义另外一个结构体类型的成员</code>。例如iPhone也是Phone，我们看下例子：<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Phone <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tprice <span class=\"keyword\">int</span></span><br><span class=\"line\">\tcolor <span class=\"keyword\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> IPhone <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tphone Phone</span><br><span class=\"line\">\tmodel <span class=\"keyword\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> p IPhone</span><br><span class=\"line\">\tp.phone.price = <span class=\"number\">5000</span></span><br><span class=\"line\">\tp.phone.color = <span class=\"string\">\"Black\"</span></span><br><span class=\"line\">\tp.model = <span class=\"string\">\"iPhone 5\"</span></span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"I have a iPhone:\"</span>)</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"Price:\"</span>, p.phone.price)</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"Color:\"</span>, p.phone.color)</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"Model:\"</span>, p.model)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>输出结果为<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">I have a iPhone:</span><br><span class=\"line\">Price: 5000</span><br><span class=\"line\">Color: Black</span><br><span class=\"line\">Model: iPhone 5</span><br></pre></td></tr></table></figure></p>\n<p>在上面的例子中，我们在结构体IPhone里面定义了一个Phone变量phone，然后我们可以像正常的访问结构体成员一样访问phone的成员数据。但是我们原来的意思是<code>“iPhone也是(is-a)Phone”</code>，而这里的结构体IPhone里面定义了一个phone变量，给人的感觉就是<code>“iPhone有一个(has-a)Phone”</code>，挺奇怪的。当然Go也知道这种方式很奇怪，所以支持如下做法：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Phone <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tprice <span class=\"keyword\">int</span></span><br><span class=\"line\">\tcolor <span class=\"keyword\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> IPhone <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tPhone</span><br><span class=\"line\">\tmodel <span class=\"keyword\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> p IPhone</span><br><span class=\"line\">\tp.price = <span class=\"number\">5000</span></span><br><span class=\"line\">\tp.color = <span class=\"string\">\"Black\"</span></span><br><span class=\"line\">\tp.model = <span class=\"string\">\"iPhone 5\"</span></span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"I have a iPhone:\"</span>)</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"Price:\"</span>, p.price)</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"Color:\"</span>, p.color)</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"Model:\"</span>, p.model)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出结果为<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">I have a iPhone:</span><br><span class=\"line\">Price: 5000</span><br><span class=\"line\">Color: Black</span><br><span class=\"line\">Model: iPhone 5</span><br></pre></td></tr></table></figure></p>\n<p>在这个例子中，我们定义IPhone结构体的时候，<code>不再定义Phone变量</code>，<code>直接把结构体Phone类型定义在那里</code>。然后IPhone就可以<code>像访问直接定义在自己结构体里面的成员一样访问Phone的成员</code>。</p>\n<p>上面的例子中，我们演示了结构体的内嵌类型以及内嵌类型的成员访问，除此之外，假设结构体A内部定义了一个内嵌结构体B，那么A同时也可以调用所有定义在B上面的函数。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Phone <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tprice <span class=\"keyword\">int</span></span><br><span class=\"line\">\tcolor <span class=\"keyword\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(phone Phone)</span> <span class=\"title\">ringing</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"Phone is ringing...\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> IPhone <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tPhone</span><br><span class=\"line\">\tmodel <span class=\"keyword\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> p IPhone</span><br><span class=\"line\">\tp.price = <span class=\"number\">5000</span></span><br><span class=\"line\">\tp.color = <span class=\"string\">\"Black\"</span></span><br><span class=\"line\">\tp.model = <span class=\"string\">\"iPhone 5\"</span></span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"I have a iPhone:\"</span>)</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"Price:\"</span>, p.price)</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"Color:\"</span>, p.color)</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"Model:\"</span>, p.model)</span><br><span class=\"line\"></span><br><span class=\"line\">\tp.ringing()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出结果为：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">I have a iPhone:</span><br><span class=\"line\">Price: 5000</span><br><span class=\"line\">Color: Black</span><br><span class=\"line\">Model: iPhone 5</span><br><span class=\"line\">Phone is ringing...</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"接口\"><a href=\"#接口\" class=\"headerlink\" title=\"接口\"></a>接口</h2><p>我们先看一个例子，关于Nokia手机和iPhone手机都能够打电话的例子。<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> NokiaPhone <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(nokiaPhone NokiaPhone)</span> <span class=\"title\">call</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"I am Nokia, I can call you!\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> IPhone <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(iPhone IPhone)</span> <span class=\"title\">call</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"I am iPhone, I can call you!\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> nokia NokiaPhone</span><br><span class=\"line\">\tnokia.call()</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> iPhone IPhone</span><br><span class=\"line\">\tiPhone.call()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>我们定义了NokiaPhone和IPhone，它们都有各自的方法call()，表示自己都能够打电话。但是我们想一想，是手机都应该能够打电话，所以这个不算是NokiaPhone或是IPhone的独特特点。否则iPhone不可能卖这么贵了。</p>\n<p>再仔细看一下<code>接口的定义</code>，首先是关键字<code>type</code>，然后是<code>接口名称</code>，最后是关键字<code>interface</code>表示这个类型是接口类型。<code>在接口类型里面，我们定义了一组方法</code>。</p>\n<p>Go语言提供了一种接口功能，它把所有的具有共性的方法定义在一起，<code>任何其他类型只要实现了这些方法就是实现了这个接口</code>，<code>不一定非要显式地声明</code>要去实现哪些接口啦。比如上面的手机的call()方法，就完全可以定义在接口Phone里面，而NokiaPhone和IPhone只要实现了这个接口就是一个Phone。<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Phone <span class=\"keyword\">interface</span> &#123;</span><br><span class=\"line\">\tcall()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> NokiaPhone <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(nokiaPhone NokiaPhone)</span> <span class=\"title\">call</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"I am Nokia, I can call you!\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> IPhone <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(iPhone IPhone)</span> <span class=\"title\">call</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"I am iPhone, I can call you!\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> phone Phone</span><br><span class=\"line\"></span><br><span class=\"line\">\tphone = <span class=\"built_in\">new</span>(NokiaPhone)</span><br><span class=\"line\">\tphone.call()</span><br><span class=\"line\"></span><br><span class=\"line\">\tphone = <span class=\"built_in\">new</span>(IPhone)</span><br><span class=\"line\">\tphone.call()</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>在上面的例子中，我们定义了一个接口Phone，接口里面有一个方法call()，仅此而已。然后我们在main函数里面定义了一个Phone类型变量，并分别为之赋值为NokiaPhone和IPhone。然后调用call()方法，输出结果如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">I am Nokia, I can call you!</span><br><span class=\"line\">I am iPhone, I can call you!</span><br></pre></td></tr></table></figure></p>\n<p>以前我们说过，<code>Go语言式静态类型语言，变量的类型在运行过程中不能改变</code>。但是在上面的例子中，phone变量好像先定义为Phone类型，然后是NokiaPhone类型，最后成为了IPhone类型，真的是这样吗？</p>\n<p>原来，在Go语言里面，<code>一个类型A只要实现了接口X所定义的全部方法</code>，那么<code>A类型的变量</code>也是<code>X类型的变量</code>。在上面的例子中，NokiaPhone和IPhone都实现了Phone接口的call()方法，所以它们都是Phone，这样一来是不是感觉正常了一些。</p>\n<p>我们为Phone添加一个方法sales()，再来熟悉一下接口用法。<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Phone <span class=\"keyword\">interface</span> &#123;</span><br><span class=\"line\">\tcall()</span><br><span class=\"line\">\tsales() <span class=\"keyword\">int</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> NokiaPhone <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tprice <span class=\"keyword\">int</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(nokiaPhone NokiaPhone)</span> <span class=\"title\">call</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"I am Nokia, I can call you!\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(nokiaPhone NokiaPhone)</span> <span class=\"title\">sales</span><span class=\"params\">()</span> <span class=\"title\">int</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> nokiaPhone.price</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> IPhone <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tprice <span class=\"keyword\">int</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(iPhone IPhone)</span> <span class=\"title\">call</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"I am iPhone, I can call you!\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(iPhone IPhone)</span> <span class=\"title\">sales</span><span class=\"params\">()</span> <span class=\"title\">int</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> iPhone.price</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> phones = [<span class=\"number\">5</span>]Phone&#123;</span><br><span class=\"line\">\t\tNokiaPhone&#123;price: <span class=\"number\">350</span>&#125;,</span><br><span class=\"line\">\t\tIPhone&#123;price: <span class=\"number\">5000</span>&#125;,</span><br><span class=\"line\">\t\tIPhone&#123;price: <span class=\"number\">3400</span>&#125;,</span><br><span class=\"line\">\t\tNokiaPhone&#123;price: <span class=\"number\">450</span>&#125;,</span><br><span class=\"line\">\t\tIPhone&#123;price: <span class=\"number\">5000</span>&#125;,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> totalSales = <span class=\"number\">0</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> _, phone := <span class=\"keyword\">range</span> phones &#123;</span><br><span class=\"line\">\t\ttotalSales += phone.sales()</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfmt.Println(totalSales)</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>输出结果：</p>\n<pre><code>14200\n</code></pre><p>上面的例子中，我们定义了一个手机数组，然后计算手机的总售价。可以看到，由于NokiaPhone和IPhone都实现了sales()方法，所以它们都是Phone类型，但是计算售价的时候，Go会知道调用哪个对象实现的方法。</p>\n<p>接口类型还可以作为结构体的数据成员。</p>\n<p>假设有个败家子，iPhone没有出的时候，买了好几款Nokia，iPhone出来后，又买了好多部iPhone，老爸要来看看这小子一共花了多少钱。<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Phone <span class=\"keyword\">interface</span> &#123;</span><br><span class=\"line\">\tsales() <span class=\"keyword\">int</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> NokiaPhone <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tprice <span class=\"keyword\">int</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(nokiaPhone NokiaPhone)</span> <span class=\"title\">sales</span><span class=\"params\">()</span> <span class=\"title\">int</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> nokiaPhone.price</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> IPhone <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tprice <span class=\"keyword\">int</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(iPhone IPhone)</span> <span class=\"title\">sales</span><span class=\"params\">()</span> <span class=\"title\">int</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> iPhone.price</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Person <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tphones []Phone</span><br><span class=\"line\">\tname   <span class=\"keyword\">string</span></span><br><span class=\"line\">\tage    <span class=\"keyword\">int</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(person Person)</span> <span class=\"title\">total_cost</span><span class=\"params\">()</span> <span class=\"title\">int</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> sum = <span class=\"number\">0</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> _, phone := <span class=\"keyword\">range</span> person.phones &#123;</span><br><span class=\"line\">\t\tsum += phone.sales()</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> sum</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> bought_phones = [<span class=\"number\">5</span>]Phone&#123;</span><br><span class=\"line\">\t\tNokiaPhone&#123;price: <span class=\"number\">350</span>&#125;,</span><br><span class=\"line\">\t\tIPhone&#123;price: <span class=\"number\">5000</span>&#125;,</span><br><span class=\"line\">\t\tIPhone&#123;price: <span class=\"number\">3400</span>&#125;,</span><br><span class=\"line\">\t\tNokiaPhone&#123;price: <span class=\"number\">450</span>&#125;,</span><br><span class=\"line\">\t\tIPhone&#123;price: <span class=\"number\">5000</span>&#125;,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> person = Person&#123;name: <span class=\"string\">\"Jemy\"</span>, age: <span class=\"number\">25</span>, phones: bought_phones[:]&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tfmt.Println(person.name)</span><br><span class=\"line\">\tfmt.Println(person.age)</span><br><span class=\"line\">\tfmt.Println(person.total_cost())</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这个例子纯为演示接口作为结构体数据成员，如有雷同，纯属巧合。这里面我们定义了一个Person结构体，结构体内部定义了一个手机类型切片。另外我们定义了Person的total_cost()方法用来计算手机花费总额。输出结果如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Jemy</span><br><span class=\"line\">25</span><br><span class=\"line\">14200</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"小结-1\"><a href=\"#小结-1\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p>Go的结构体和接口的实现方法可谓删繁就简，去除了很多别的语言令人困惑的地方，而且学习难度也不大，很容易上手。不过由于思想比较独到，也有可能会有人觉得功能太简单而无用，这个就各有看法了，不过在逐渐的使用过程中，我们会慢慢领悟到这种设计所带来的好处，以及所避免的问题。</p>"},{"title":"go语言基础--数据类型、变量、控制","date":"2017-07-06T02:43:48.000Z","comment":false,"_content":"# Go语言内置基础数据类型\n\n在自然界里面，有猫，有狗，有猪。有各种动物。每种动物都是不同的。  \n比如猫会喵喵叫，狗会旺旺叫，猪会哼哼叫。。。  \nStop!!!  \n好了，大家毕竟不是幼儿园的小朋友。介绍到这里就可以了。\n<!--more-->\n论点就是每个东西都有自己归属的类别(Type)。  \n那么在Go语言里面，每个变量也都是有类别的，这种类别叫做`数据类型(Data Type)`。  \nGo的数据类型有两种：一种是`语言内置的数据类型`，另外一种是`通过语言提供的自定义数据类型方法自己定义的自定义数据类型`。\n\n先看看语言`内置的基础数据类型`\n\n## 数值型(Number)\n\n数值型有`三种`，一种是`整数类型`，另外一种是`带小数的类型`(一般计算机里面叫做`浮点数类型`)，还有一种`虚数类型`。  \n\n整数类型不用说了，和数学里面的是一样的。和数学里面不同的地方在于计算机里面`正整数和零`统称为`无符号整型`，而`负整数`则称为`有符号整型`。  \n\nGo的内置整型有`uint8`, `uint16`, `uint32`, `uint64`, `int8`, `int16`, `int32`和`int64`。其中`u`开头的类型就是`无符号整型`。无符号类型能够表示正整数和零。而有符号类型除了能够表示正整数和零外，还可以表示负整数。\n另外还有一些别名类型，比如`byte`类型，这个类型和`uint8`是一样的，表示`字节类型`。另外一个是`rune类型`，这个类型和`int32`是一样的，用来表示`unicode的代码点`，就是unicode字符所对应的整数。\n\nGo还定义了三个`依赖系统`的类型，`uint`，`int`和`uintptr`。因为在32位系统和64位系统上用来表示这些类型的位数是不一样的。\n\n*对于32位系统*\n\nuint=uint32  \nint=int32  \nuintptr为32位的指针  \n\n*对于64位系统*\n\nuint=uint64  \nint=int64  \nuintptr为64位的指针  \n\n至于类型后面跟的数字8，16，32或是64则表示用来表示这个类型的位不同，`位越多，能表示的整数范围越大`。\n比如对于用N位来表示的整数，如果是`有符号的整数`，能够表示的整数范围为`-2^(N-1) ~ 2^(N-1)－1`；如果是`无符号的整数`，则能表示的整数范围为`0 ～ 2^N`。\n\nGo的浮点数类型有两种，`float32`和`float64`。float32又叫`单精度浮点型`，float64又叫做`双精度浮点型`。其`最主要的区别就是小数点后面能跟的小数位数不同`。\n\n另外Go还有两个其他语言所没有的类型，`虚数类型`。`complex64`和`complex128`。\n\n对于数值类型，其所共有的操作为`加法(＋)`，`减法(－)`，`乘法(＊)`和`除法(/)`。另外对于`整数类型`，还定义了`求余运算(%)`\n\n求余运算为整型所独有。如果对浮点数使用求余，比如这样\n```go\n    package main\n\n    import (\n        \"fmt\"\n    )\n\n    func main() {\n        var a float64 = 12\n        var b float64 = 3\n\n        fmt.Println(a % b)\n    }\n```\n\n编译时候会报错\n\n    invalid operation: a % b (operator % not defined on float64)\n\n所以，这里我们可以知道所谓的`数据类型有两层意思`，一个是定义了`该类型所能表示的数`，另一个是定义了`该类型所能进行的操作`。\n简单地说，对于一只小狗，你能想到的一定是狗的面貌和它会汪汪叫，而不是猫的面容和喵喵叫。\n\n\n## 字符串类型(String)\n\n字符串就是一串固定长度的字符连接起来的字符序列。Go的字符串是由`单个字节`连接起来的。（对于汉字，通常由多个字节组成）。这就是说，传统的字符串是由字符组成的，而`Go的字符串不同`，是`由字节组成`的。这一点需要注意。\n\n字符串的表示很简单。用(双引号\"\")或者(``号)来描述。\n\n    \"hello world\"\n\n或者\n\n    `hello world`\n\n唯一的区别是，**双引号之间的转义字符会被转义，而``号之间的转义字符保持原样不变**。\n```go\n    package main\n\n    import (\n        \"fmt\"\n    )\n\n    func main() {\n        var a = \"hello \\n world\"\n        var b = `hello \\n world`\n\n        fmt.Println(a)\n        fmt.Println(\"----------\")\n        fmt.Println(b)\n    }\n```\n输出结果为\n```go\n    hello \n     world\n    ----------\n    hello \\n world\n```\n字符串所能进行的一些基本操作包括:  \n（1）`获取字符长度`  \n（2）`获取字符串中单个字节`  \n（3）`字符串连接`  \n```go\n    package main\n\n    import (\n        \"fmt\"\n    )\n\n    func main() {\n        var a string = \"hello\"\n        var b string = \"world\"\n\n        fmt.Println(len(a))\n        fmt.Println(a[1])\n        fmt.Println(a + b)\n    }\n```\n输出如下 \n```\n    5\n    101\n    helloworld\n```\n这里我们看到a[1]得到的是一个整数，这就证明了上面`\"Go的字符串是由字节组成的这句话\"`。我们还可以再验证一下。\n```go\n\tpackage main\n\n\timport (\n\t\t\"fmt\"\n\t)\n\n\tfunc main() {\n\t\tvar a string = \"你\"\n\t\tvar b string = \"好\"\n\t\tfmt.Println(len(a))\n\t\tfmt.Println(len(b))\n\t\tfmt.Println(len(a + b))\n\t\tfmt.Println(a[0])\n\t\tfmt.Println(a[1])\n\t\tfmt.Println(a[2])\n\t}\n```\n输出\n```\n    3\n    3\n    6\n    228\n    189\n    160\n```\n我们开始的时候，从上面的三行输出知道，\"你\"和\"好\"分别是用三个字节组成的。我们依次获取a的三个字节，输出，得到结果。\n\n\n## 布尔型(Bool)\n\n布尔型是表示`真值`和`假值`的类型。可选值为`true`和`false`。\n\n所能进行的操作如下：\n`&& and 与`\n`|| or 或`\n`!  not 非`\n\nGo的布尔型取值`就是true`或`false`。`任何空值(nil)或者零值(0, 0.0, \"\")都不能作为布尔型来直接判断`。\n```go\n\tpackage main\n\n\timport (\n    \t\"fmt\"\n\t)\n\n\tfunc main() {\n    \tvar equal bool\n    \tvar a int = 10\n    \tvar b int = 20\n    \tequal = (a == b)\n    \tfmt.Println(equal)\n\t}\n```\n输出结果\n\n    false\n\n下面是错误的用法\n```go\n\tpackage main\n\n\timport (\n    \t\"fmt\"\n\t)\n\n\tfunc main() {\n    \tif 0 {\n        \tfmt.Println(\"hello world\")\n    \t}\n    \tif nil {\n        \tfmt.Println(\"hello world\")\n    \t}\n    \tif \"\" {\n     \t\tfmt.Println(\"hello world\")\n    \t}\n\t}\n```\n编译错误\n```\n    ./t.go:8: non-bool 0 (type untyped number) used as if condition\n    ./t.go:11: non-bool nil used as if condition\n    ./t.go:14: non-bool \"\" (type untyped string) used as if condition\n```\n\n上面介绍的是Go语言内置的基础数据类型。\n\n# 变量和常量定义\n现在我们讨论一下Go语言的变量定义。\n \n## 变量定义 \n\n所谓的变量就是一个拥有指定`名称`和`类型`的`数据存储位置`。  \n在上面我们使用过变量的定义，现在我们来仔细看一个例子。  \n ```go \n\tpackage main\n\n\timport (\n\t\t\"fmt\"\n\t)\n\n\tfunc main() {\n\t\tvar x string = \"hello world\"\n\t\tfmt.Println(x)\n\t}\n```\n变量的定义首先使用`var`关键字，然后指定变量的名称`x`，再指定变量的类型`string`，在本例中，还对变量`x`进行了赋值，然后在命令行输出该变量。Go这种变量定义的方式和其他的语言有些不同，但是在使用的过程中，你会逐渐喜欢的。当然上面的变量定义方式还可以如下，即先定义变量，再赋值。\n```go\n\tpackage main\n\n\timport (\n\t\t\"fmt\"\n\t)\n\n\tfunc main() {\n\t\tvar x string\n\t\tx = \"hello world\"\n\t\tfmt.Println(x)\n\t}\n```\n或者是直接赋值，让Go语言推断变量的类型。如下：\n```go\n\tpackage main\n\n\timport (\n\t\t\"fmt\"\n\t)\n\n\tfunc main() {\n\t\tvar x = \"hello world\"\n\t\tfmt.Println(x)\n\t}\n```\n当然，上面变量的定义还有一种`快捷方式`。如果你知道变量的初始值，完全可以像下面这样定义变量，完全让`Go来推断语言的类型`。这种定义的方式连关键字`var`都省略掉了。\n```go\n\tpackage main\n\n\timport (\n\t\t\"fmt\"\n\t)\n\n\tfunc main() {\n\t\tx := \"hello world\"\n\t\tfmt.Println(x)\n\t}\n```\n注意：上面这种使用`:=`方式定义变量的方式`只能用在函数内部`。\n```go\n\tpackage main\n\n\timport (\n\t\t\"fmt\"\n\t)\n\n\tx:=\"hello world\"\n\tfunc main() {\n\t\ty := 10\n\t\tfmt.Println(x)\n\t\tfmt.Println(y)\n\t}\n```\n对于上面的变量定义x是无效的。会导致编译错误：\n\n\n\t./test_var_quick.go:7: non-declaration statement outside function body\n\n\n不过我们对上面的例子做下修改，比如这样是可以的。也就是使用var关键字定义的时候，如果给出初始值，就不需要显式指定变量类型。\n```go\n\tpackage main\n\n\timport (\n\t\t\"fmt\"\n\t)\n\n\tvar x = \"hello world\"\n\n\tfunc main() {\n\t\ty := 10\n\t\tfmt.Println(x)\n\t\tfmt.Println(y)\n\t}\n```\n\n`变量`之所以称为变量，就是因为`它们的值在程序运行过程中可以发生变化`，但是`它们的变量类型是无法改变的`。因为`Go语言是静态语言`，并`不支持`程序运行过程中`变量类型发生变化`。比如如果你强行将一个字符串值赋值给定义为int的变量，那么会发生编译错误。即使是强制类型转换也是不可以的。`强制类型转换只支持同类的变量类型`。比如数值类型之间强制转换。\n\n下面我们看几个例子：\n```go\n\tpackage main\n\n\timport (\n\t\t\"fmt\"\n\t)\n\n\tfunc main() {\n\t\tvar x string = \"hello world\"\n\t\tfmt.Println(x)\n\t\tx = \"i love go language\"\n\t\tfmt.Println(x)\n\t}\n```\n本例子演示变量的值在程序运行过程中发生变化，结果输出为\n```\n\thello world\n\ti love go language\n```\n我们尝试不同类型的变量之间转换\n```go\n\tpackage main\n\n\timport (\n\t\t\"fmt\"\n\t)\n\n\tfunc main() {\n\t\tvar x string = \"hello world\"\n\t\tfmt.Println(x)\n\t\tx = 11\n\t\tfmt.Println(x)\n\t}\n```\n在本例子中，如果试图将一个数值赋予字符串变量x，那么会发生错误：\n\n\t./test_var.go:10: cannot use 11 (type int) as type string in assignment\n\n上面的意思就是无法将整型数值11当作字符串赋予给字符串变量。\n\n但是同类的变量之间是可以强制转换的，如浮点型和整型之间的转换。\n```go\n\tpackage main\n\n\timport (\n\t\t\"fmt\"\n\t)\n\n\tfunc main() {\n\t\tvar x float64 = 32.35\n\t\tfmt.Println(x)\n\t\tfmt.Println(int(x))\n\t}\n```\n输出的结果为\n```\n\t32.35   \n\t32\n```\n\n## 变量命名\n\n上面我们看了一些变量的使用方法，那么定义一个变量名称，有哪些要求呢？\n这里我们要注意，`Go的变量名称必须以字母或下划线(_)开头，后面可以跟字母，数字，或者下划线(_)`。除此之外，Go语言并不关心你如何定义变量。我们通用的做法是定义一个用户友好的变量。假设你需要定义一个狗狗的年龄，那么使用dog_age作为变量名称要好于用x来定义变量。\n\n## 变量作用域\n\n现在我们再来讨论一下变量的作用域。所谓作用域就是可以有效访问变量的区域。比如很简单的，你不可能在一个函数func_a里面访问另一个函数func_b里面定义的局部变量x。所以变量的作用域目前分为两类，一个是`全局变量`，另一个是`局部变量`。下面我们看个全局变量的例子：\n```go\n\tpackage main\n\n\timport (\n\t\t\"fmt\"\n\t)\n\n\tvar x string = \"hello world\"\n\n\tfunc main() {\n\t\tfmt.Println(x)\n\t}\n```\n这里变量x定义在main函数之外，但是main函数仍然可以访问x。全局变量的作用域是该包中所有的函数。\n```go\n\tpackage main\n\n\timport (\n\t\t\"fmt\"\n\t)\n\n\tvar x string = \"hello world\"\n\n\tfunc change() {\n\t\tx = \"i love go\"\n\t}\n\tfunc main() {\n\t\tfmt.Println(x)\n\t\tchange()\n\t\tfmt.Println(x)\n\t}\n```\n在上面的例子用，我们用了change函数改变了x的值。输出结果如下：\n```\n\thello world\n\ti love go\n```\n\n我们再看一下局部变量的例子。\n```go\n\tpackage main\n\n\timport (\n\t\t\"fmt\"\n\t)\n\n\tfunc change() {\n\t\tx := \"i love go\"\n\t}\n\tfunc main() {\n\t\tfmt.Println(x)\n\t}\n```\n该例子中main函数试图访问change函数中定义的局部变量x，结果发生了下面的错误(未定义的变量x)：\n\n\t./test_var.go:11: undefined: x\n\n\n\n## 常量\n\nGo语言也支持常量定义。所谓`常量就是在程序运行过程中保持值不变的变量定义`。常量的定义和变量类似，只是用`const`关键字替换了var关键字，另外常量在定义的时候`必须有初始值`。\n```go\n\tpackage main\n\n\timport (\n\t\t\"fmt\"\n\t)\n\n\tfunc main() {\n\t\tconst x string = \"hello world\"\n\t\tconst y = \"hello world\"\n\t\tfmt.Println(x)\n\t\tfmt.Println(y)\n\t}\n```\n这里有一点需要注意，变量定义的类型推断方式`:=`不能够用来定义常量。因为常量的值是在编译的时候就已经确定的，但是变量的值则是运行的时候才使用的。这样常量定义就无法使用变量类型推断的方式了。\n\n常量的值在运行过程中是无法改变的，强制改变常量的值是无效的。\n\n```go\n\tpackage main\n\n\timport (\n\t\t\"fmt\"\n\t)\n\n\tfunc main() {\n\t\tconst x string = \"hello world\"\n\t\tfmt.Println(x)\n\t\tx = \"i love go language\"\n\t\tfmt.Println(x)\n\t}\n```\n比如上面的例子就会报错\n\n\t./test_var.go:10: cannot assign to x\n\n我们再看一个Go包math里面定义的常量Pi，用它来求圆的面积。\n```go\n\tpackage main\n\n\timport (\n\t\t\"fmt\"\n\t\t\"math\"\n\t)\n\n\tfunc main() {\n\t\tvar radius float64 = 10\n\t\tvar area = math.Pow(radius, 2) * math.Pi\n\t\tfmt.Println(area)\n\t}\n```\n\n## 多变量或常量定义\n\nGo还提供了一种`同时定义多个变量或者常量`的快捷方式。\n```go\n\tpackage main\n\n\timport (\n\t\t\"fmt\"\n\t)\n\n\tfunc main() {\n\t\tvar (\n\t\t\ta int     = 10\n\t\t\tb float64 = 32.45\n\t\t\tc bool    = true\n\t\t)\n\t\tconst (\n\t\t\tPi   float64 = 3.14\n\t\t\tTrue bool    = true\n\t\t)\n\n\t\tfmt.Println(a, b, c)\n\t\tfmt.Println(Pi, True)\n\t}\n```\n# 程序控制结构\n虽然剧透可耻，但是为了体现Go语言的设计简洁之处，必须要先剧透一下。\n\nGo语言的控制结构关键字只有\n\n`if..else if..else`，`for` 和 `switch`。\n\n而且在Go中，为了避免格式化战争，对程序结构做了统一的强制的规定。看下下面的例子。\n\n请比较一下A程序和B程序的不同之处。\n\n**A程序**\n```go\n\tpackage main\n\n\timport (\n\t\t\"fmt\"\n\t)\n\n\tfunc main() {\n\t\tfmt.Println(\"hello world\")\n\t}\n```\n**B程序**\n```go\n\tpackage main\n\n\timport (\n\t\t\"fmt\"\n\t)\n\n\tfunc main() \n\t{\n\t\tfmt.Println(\"hello world\")\n\t}\n```\n还记得我们前面的例子中，`{}`的格式是怎么样的么？在上面的两个例子中只有A例的写法是对的。因为在Go语言中，强制了`{}`的格式。如果我们试图去编译B程序，那么会发生如下的错误提示。\n\n\t./test_format.go:9: syntax error: unexpected semicolon or newline before {\n\n## if..else if..else\n\nif..else if..else 用来判断一个或者多个条件，然后根据条件的结果执行不同的程序块。举个简单的例子。\n```go\n\tpackage main\n\n\timport (\n\t\t\"fmt\"\n\t)\n\n\tfunc main() {\n\t\tvar dog_age = 10\n\n\t\tif dog_age > 10 {\n\t\t\tfmt.Println(\"A big dog\")\n\t\t} else if dog_age > 1 && dog_age <= 10 {\n\t\t\tfmt.Println(\"A small dog\")\n\t\t} else {\n\t\t\tfmt.Println(\"A baby dog\")\n\t\t}\n\t}\n```\n上面的例子判断狗狗的年龄如果`(if)`大于10就是一个大狗；否则判断`(else if)`狗狗的年龄是否小于等于10且大于1，这个时候狗狗是小狗狗。否则`(else)`的话（就是默认狗狗的年龄小于等于1岁），那么狗狗是Baby狗狗。\n\n在上面的例子中，我们还可以发现Go的if..else if..else语句的判断条件一般都不需要使用`()`。当然如果你还是愿意写，也是对的。另外如果为了将某两个或多个条件绑定在一起判断的话，还是需要括号`()`的。\n\n比如下面的例子也是对的。\n```go\n\tpackage main\n\n\timport (\n\t\t\"fmt\"\n\t)\n\n\tfunc main() {\n\t\tconst Male = 'M'\n\t\tconst Female = 'F'\n\n\t\tvar dog_age = 10\n\t\tvar dog_sex = 'M'\n\n\t\tif (dog_age == 10 && dog_sex == 'M') {\n\t\t\tfmt.Println(\"dog\")\n\t\t}\n\t}\n```\n但是如果你使用Go提供的格式化工具来格式化这段代码的话，Go会智能判断你的括号是否必须有，否则的话，会帮你去掉的。你可以试试。\n\n\tgo fmt test_bracket.go\n\n\n然后你会发现，咦？！果真被去掉了。\n\n另外因为每个判断条件的结果要么是true要么是false，所以可以使用`&&`，`||`来连接不同的条件。使用`!`来对一个条件取反。\n\n## switch\n\nswitch的出现是为了解决某些情况下使用if判断语句带来的繁琐之处。\n\n例如下面的例子：\n```go\n\tpackage main\n\n\timport (\n\t\t\"fmt\"\n\t)\n\n\tfunc main() {\n\t\t//score 为 [0,100]之间的整数\n\t\tvar score int = 69\n\n\t\tif score >= 90 && score <= 100 {\n\t\t\tfmt.Println(\"优秀\")\n\t\t} else if score >= 80 && score < 90 {\n\t\t\tfmt.Println(\"良好\")\n\t\t} else if score >= 70 && score < 80 {\n\t\t\tfmt.Println(\"一般\")\n\t\t} else if score >= 60 && score < 70 {\n\t\t\tfmt.Println(\"及格\")\n\t\t} else {\n\t\t\tfmt.Println(\"不及格\")\n\t\t}\n\t}\n```\n在上面的例子中，我们用if..else if..else来对分数进行分类。这个只是一般的情况下if判断条件的数量。如果if..else if..else的条件太多的话，我们可以使用switch来优化程序。比如上面的程序我们还可以这样写：\n```go\n\tpackage main\n\n\timport (\n\t\t\"fmt\"\n\t)\n\n\tfunc main() {\n\t\t//score 为 [0,100]之间的整数\n\t\tvar score int = 69\n\n\t\tswitch score / 10 {\n\t\tcase 10:\n\t\tcase 9:\n\t\t\tfmt.Println(\"优秀\")\n\t\tcase 8:\n\t\t\tfmt.Println(\"良好\")\n\t\tcase 7:\n\t\t\tfmt.Println(\"一般\")\n\t\tcase 6:\n\t\t\tfmt.Println(\"及格\")\n\t\tdefault:\n\t\t\tfmt.Println(\"不及格\")\n\t\t}\n\t}\n```\n关于switch的几点说明如下：\n\n(1) switch的判断条件可以为任何数据类型。\n```go\n\tpackage main\n\n\timport (\n\t\t\"fmt\"\n\t)\n\n\tfunc main() {\n\t\tvar dog_sex = \"F\"\n\t\tswitch dog_sex {\n\t\tcase \"M\":\n\t\t\tfmt.Println(\"A male dog\")\n\t\tcase \"F\":\n\t\t\tfmt.Println(\"A female dog\")\n\t\t}\n\t}\n```\n\n(2) 每个case后面跟的是一个完整的程序块，该程序块`不需要{}`，也`不需要break结尾`，因为每个case都是独立的。\n\n(3) 可以为switch提供一个默认选项default，在上面所有的case都没有满足的情况下，默认执行default后面的语句。\n\n\n## for\n\nfor用在Go语言的循环条件里面。比如说要你输出1...100之间的自然数。最笨的方法就是直接这样。\n```go\n\tpackage main\n\n\timport (\n\t\t\"fmt\"\n\t)\n\n\tfunc main() {\n\t\tfmt.Println(1)\n\t\tfmt.Println(2)\n\t\t...\n\t\tfmt.Println(100)\n\t}\n```\n这个不由地让我想起一个笑话。\n>以前一个地主的儿子学习写字，只学了三天就把老师赶走了。因为在这三天里面他学写了一，二，三。他觉得写字真的太简单了，不就是画横线嘛。于是有一天老爹过寿，让他来记送礼的人名单。直到中午还没有记完，老爹很奇怪就去问他怎么了。他哭着说，“不知道这个人有什么毛病，姓什么不好，姓万”。\n\n哈哈，回来继续。我们看到上面的例子也是如地主的儿子那样就不好了。所以，我们必须使用循环结构。我们用for的循环语句来实现上面的例子。\n```go\n\tpackage main\n\n\timport (\n\t\t\"fmt\"\n\t)\n\n\tfunc main() {\n\t\tvar i int = 1\n\n\t\tfor ; i <= 100; i++ {\n\t\t\tfmt.Println(i)\n\t\t}\n\t}\n```\n在上面的例子中，首先初始化变量i为1，然后在for循环里面判断是否小于等于100，如果是的话，输出i，然后再使用i++来将i的值自增1。上面的例子，还有一个更好的写法，就是将i的定义和初始化也放在for里面。如下：\n```go\n\tpackage main\n\n\timport (\n\t\t\"fmt\"\n\t)\n\n\tfunc main() {\n\t\tfor i := 1; i <= 100; i++ {\n\t\t\tfmt.Println(i)\n\t\t}\n\t}\n```\n在Go里面没有提供while关键字，如果你怀念while的写法也可以这样：\n```go\n\tpackage main\n\n\timport (\n\t\t\"fmt\"\n\t)\n\n\tfunc main() {\n\t\tvar i int = 1\n\n\t\tfor i <= 100 {\n\t\t\tfmt.Println(i)\n\t\t\ti++\n\t\t}\n\t}\n```\n或许你会问，如果我要死循环呢？是不是`for true`？呵呵，不用了，直接这样。\n```go\n\tfor{\n\t\t...\n\t}\n```\n\n以上就是Go提供的全部控制流程了。\n\n再复习一下，Go只提供了：\n\n**if**\n```go\n\tif ...{\n\t\t...\n\t}else if ...{\n\t\t...\n\t}else{\n\t\t...\n\t}\n```\n**switch**\n```go\t\n\tswitch(...){\n\tcase ...:\n\t\t\t ...\n\tcase ...:\n\t\t\t ...\n\t...\n\t\n\tdefault:\n\t\t\t  ...\n\t}\n```\n**for**\n```go\t\n\tfor ...; ...; ...{\n\t\t...\n\t}\n\t\n\tfor ...{\n\t\t...\n\t}\n\t\n\tfor{\n\t\t...\n\t}\n```\n# 数组，切片和字典\n\n在上面的章节里面，我们讲过Go内置的基本数据类型。现在我们来看一下Go内置的高级数据类型，数组，切片和字典。\n\n## 数组(Array)\n\n数组是一个具有`相同数据类型`的元素组成的`固定长度`的`有序集合`。比如下面的例子\n\n\tvar x [5]int\n\t\n表示数组x是一个整型数组，而且数值的长度为5。\n\n`Go提供了几种不同的数组定义方法。`\n\n`最基本的方式就是使用var关键字来定义，然后依次给元素赋值`。`对于没有赋值的元素，默认为零值`。比如对于整数，零值就是0，浮点数，零值就是0.0，字符串，零值就是\"\"，对象零值就是nil。\n```go\n\tpackage main\n\n\timport (\n\t\t\"fmt\"\n\t)\n\n\tfunc main() {\n\t\tvar x [5]int\n\t\tx[0] = 2\n\t\tx[1] = 3\n\t\tx[2] = 3\n\t\tx[3] = 2\n\t\tx[4] = 12\n\t\tvar sum int\n\t\tfor _, elem := range x {\n\t\t\tsum += elem\n\t\t}\n\t\tfmt.Println(sum)\n\t}\n```\n在上面的例子中，我们首先使用`var`关键字来声明，然后给出数组名称`x`，最后说明数组为整型数组，长度为5。然后我们使用索引方式给数组元素赋值。在上面的例子中，我们还使用了一种遍历数组元素的方法。该方法利用Go语言提供的内置函数range来遍历数组元素。`range函数可以用在数组，切片和字典上面`。当`range来遍历数组的时候返回数组的索引和元素值`。在这里我们是对数组元素求和，所以我们对索引不感兴趣。在Go语言里面，`当你对一个函数返回值不感兴趣的话，可以使用下划线(_)来替代它`。另外这里如果我们真的定义了一个索引，在循环结构里面却没有使用索引，Go语言编译的时候还是会报错的。所以用下划线来替代索引变量也是唯一之举了。最后我们输出数组元素的和。\n\n还有一种方式，如果知道了数组的初始值。可以像下面这样定义。\n```go\n\tpackage main\n\n\timport (\n\t\t\"fmt\"\n\t)\n\n\tfunc main() {\n\t\tvar x = [5]int{1, 2, 3, 4}\n\t\tx[4] = 5\n\n\t\tvar sum int\n\t\tfor _, i := range x {\n\t\t\tsum += i\n\t\t}\n\t\tfmt.Println(sum)\n\t}\n```\n当然，即使你不知道数组元素的初始值，也可以使用这样的定义方式。\n```go\n\tpackage main\n\n\timport (\n\t\t\"fmt\"\n\t)\n\n\tfunc main() {\n\t\tvar x = [5]int{}\n\t\tx[0] = 1\n\t\tx[1] = 2\n\t\tx[2] = 3\n\t\tx[3] = 4\n\t\tx[4] = 5\n\n\t\tvar sum int\n\t\tfor _, i := range x {\n\t\t\tsum += i\n\t\t}\n\t\tfmt.Println(sum)\n\t}\n```\n`在这里我们需要特别重视数组的一个特点，就是数组是有固定长度的。`\n\n但是如果我们有的时候也可以不显式指定数组的长度，而是使用`...`来替代数组长度，Go语言会自动计算出数组的长度。不过这种方式定义的数组一定是有初始化的值的。\n```go\n\tpackage main\n\n\timport (\n\t\t\"fmt\"\n\t)\n\n\tfunc main() {\n\t\tvar x = [...]string{\n\t\t\t\"Monday\",\n\t\t\t\"Tuesday\",\n\t\t\t\"Wednesday\",\n\t\t\t\"Thursday\",\n\t\t\t\"Friday\",\n\t\t\t\"Saturday\",\n\t\t\t\"Sunday\"}\n\n\t\tfor _, day := range x {\n\t\t\tfmt.Println(day)\n\t\t}\n\t}\n```\n在上面的例子中，还需要注意一点就是如果将数组元素定义在不同行上面，那么最后一个元素后面必须跟上`}`或者`,`。上面的例子也可以是这样的。\n```go\n\tpackage main\n\n\timport (\n\t\t\"fmt\"\n\t)\n\n\tfunc main() {\n\t\tvar x = [...]string{\n\t\t\t\"Monday\",\n\t\t\t\"Tuesday\",\n\t\t\t\"Wednesday\",\n\t\t\t\"Thursday\",\n\t\t\t\"Friday\",\n\t\t\t\"Saturday\",\n\t\t\t\"Sunday\",\n\t\t}\n\n\t\tfor _, day := range x {\n\t\t\tfmt.Println(day)\n\t\t}\n\t}\n```\n`Go提供的这种可以自动计算数组长度的方法在调试程序的时候特别方便，假设我们注释掉上面数组x的最后一个元素，我们甚至不需要去修改数组的长度。`\n\t\n## 切片(Slice)\n\n在上面我们说过数组是有固定长度的有序集合。这也就是说一旦数组长度定义，你将无法在数组里面多添加哪怕一个元素。数组的这种特点有的时候会成为很大的缺点，尤其是当数组的元素个数不确定的情况下。\n\n所以`切片`诞生了。\n\n切片和数组很类似，甚至你可以理解成数组的子集。但是`切片有一个数组所没有的特点，那就是切片的长度是可变的`。\n\n严格地讲，切片有`容量(capacity)`和`长度(length)`两个属性。\n\n首先我们来看一下切片的定义。切片有两种定义方式，一种是先声明一个变量是切片，然后使用内置函数make去初始化这个切片。另外一种是通过取数组切片来赋值。\n```go\n\tpackage main\n\n\timport (\n\t\t\"fmt\"\n\t)\n\n\tfunc main() {\n\t\tvar x = make([]float64, 5)\n\t\tfmt.Println(\"Capcity:\", cap(x), \"Length:\", len(x))\n\t\tvar y = make([]float64, 5, 10)\n\t\tfmt.Println(\"Capcity:\", cap(y), \"Length:\", len(y))\n\n\t\tfor i := 0; i < len(x); i++ {\n\t\t\tx[i] = float64(i)\n\t\t}\n\t\tfmt.Println(x)\n\n\t\tfor i := 0; i < len(y); i++ {\n\t\t\ty[i] = float64(i)\n\t\t}\n\t\tfmt.Println(y)\n\t}\n```\n输出结果为\n```\n\tCapcity: 5 Length: 5\n\tCapcity: 10 Length: 5\n\t[0 1 2 3 4]\n\t[0 1 2 3 4]\n```\n上面我们首先用make函数定义切片x，这个时候x的容量是5，长度也是5。然后使用make函数定义了切片y，这个时候y的容量是10，长度是5。然后我们再分别为切片x和y的元素赋值，最后输出。\n\n所以使用make函数定义切片的时候，有`两种方式`，一种`只指定长度，这个时候切片的长度和容量是相同的`。另外一种是`同时指定切片长度和容量`。虽然切片的容量可以大于长度，但是`赋值的时候要注意最大的索引仍然是len(x)－1`。否则会报索引超出边界错误。\n\n另外一种是通过数组切片赋值，采用`[low_index:high_index]`的方式获取数值切片，其中切片元素`包括low_index的元素`，但是`不包括high_index的元素`。\n```go\n\tpackage main\n\n\timport (\n\t\t\"fmt\"\n\t)\n\n\tfunc main() {\n\t\tvar arr1 = [5]int{1, 2, 3, 4, 5}\n\t\tvar s1 = arr1[2:3]\n\t\tvar s2 = arr1[:3]\n\t\tvar s3 = arr1[2:]\n\t\tvar s4 = arr1[:]\n\t\tfmt.Println(s1)\n\t\tfmt.Println(s2)\n\t\tfmt.Println(s3)\n\t\tfmt.Println(s4)\n\t}\n```\n输出结果为\n```\n\t[3]\n\t[1 2 3]\n\t[3 4 5]\n\t[1 2 3 4 5]\n```\n\n\n在上面的例子中，我们还省略了low_index或high_index。如果省略了low_index，那么等价于从索引0开始；如果省略了high_index，则默认high_index等于len(arr1)，即切片长度。\n\n这里为了体现切片的长度可以变化，我们看一下下面的例子：\n```go\n\tpackage main\n\n\timport (\n\t\t\"fmt\"\n\t)\n\n\tfunc main() {\n\t\tvar arr1 = make([]int, 5, 10)\n\t\tfor i := 0; i < len(arr1); i++ {\n\t\t\tarr1[i] = i\n\t\t}\n\t\tfmt.Println(arr1)\n\n\t\tarr1 = append(arr1, 5, 6, 7, 8)\n\t\tfmt.Println(\"Capacity:\", cap(arr1), \"Length:\", len(arr1))\n\t\tfmt.Println(arr1)\n\t}\n```\n输出结果为\n```\n\t[0 1 2 3 4]\n\tCapacity: 10 Length: 9\n\t[0 1 2 3 4 5 6 7 8]\n```\n这里我们初始化arr1为容量10，长度为5的切片，然后为前面的5个元素赋值。然后输出结果。然后我们再使用Go内置方法append来为arr1追加四个元素，这个时候再看一下arr1的容量和长度以及切片元素，我们发现切片的长度确实变了。\n\n另外我们再用`append`方法给arr1多追加几个元素，试图超过arr1原来定义的容量大小。\n```go\n\tpackage main\n\n\timport (\n\t\t\"fmt\"\n\t)\n\n\tfunc main() {\n\t\tvar arr1 = make([]int, 5, 10)\n\t\tfor i := 0; i < len(arr1); i++ {\n\t\t\tarr1[i] = i\n\t\t}\n\n\t\tarr1 = append(arr1, 5, 6, 7, 8, 9, 10)\n\t\tfmt.Println(\"Capacity:\", cap(arr1), \"Length:\", len(arr1))\n\t\tfmt.Println(arr1)\n\t}\n```\n输出结果为\n```\n\tCapacity: 20 Length: 11\n\t[0 1 2 3 4 5 6 7 8 9 10]\n```\n我们发现arr1的长度变为11，因为元素个数现在为11个。另外我们发现arr1的容量也变了，变为原来的两倍。这是因为`Go在默认的情况下，如果追加的元素超过了容量大小，Go会自动地重新为切片分配容量，容量大小为原来的两倍`。\n\n上面我们介绍了，可以`使用append函数给切片增加元素`，现在我们再来介绍一个`copy函数用来从一个切片拷贝元素到另一个切片`。\n```go\n\tpackage main\n\n\timport (\n\t\t\"fmt\"\n\t)\n\n\tfunc main() {\n\t\tslice1 := []int{1, 2, 3, 4, 5, 6}\n\t\tslice2 := make([]int, 5, 10)\n\t\tcopy(slice2, slice1)\n\t\tfmt.Println(slice1)\n\t\tfmt.Println(slice2)\n\t}\n```\n输出结果\n```\n\t[1 2 3 4 5 6]\n\t[1 2 3 4 5]\n```\n在上面的例子中，我们将slice1的元素拷贝到slice2，因为slice2的长度为5，所以最多拷贝5个元素。\n\n总结一下，数组和切片的区别就在于`[]`里面是否有数字或者`...`。因为数值长度是固定的，而切片是可变的。\n\n\n## 字典(Map)\n\n字典是一组`无序的`，`键值对`的`集合`。\n\n字典也叫做`关联数组`，因为数组通过`索引`来查找元素，而字典通过`键`来查找元素。当然，很显然的，字典的键是不能重复的。如果试图赋值给同一个键，后赋值的值将覆盖前面赋值的值。\n\n字典的定义也有两种，一种是`初始化数据`的定义方式，另一种是`使用神奇的make函数`来定义。\n```go\n\tpackage main\n\n\timport (\n\t\t\"fmt\"\n\t)\n\n\tfunc main() {\n\t\tvar x = map[string]string{\n\t\t\t\"A\": \"Apple\",\n\t\t\t\"B\": \"Banana\",\n\t\t\t\"O\": \"Orange\",\n\t\t\t\"P\": \"Pear\",\n\t\t}\n\n\t\tfor key, val := range x {\n\t\t\tfmt.Println(\"Key:\", key, \"Value:\", val)\n\t\t}\n\t}\n```\n输出结果为\n```\n\tKey: A Value: Apple\n\tKey: B Value: Banana\n\tKey: O Value: Orange\n\tKey: P Value: Pear\n```\n在上面的例子中，我们定义了一个string:string的字典，其中`[]`之间的是键类型，右边的是值类型。另外我们还看到了`range函数，此函数一样神奇，可以用来迭代字典元素，返回key:value键值对`。当然如果你对键或者值不感兴趣，一样可以使用`下划线(_)`来忽略返回值。\n\n```go\n\tpackage main\n\n\timport (\n\t\t\"fmt\"\n\t)\n\n\tfunc main() {\n\t\tvar x map[string]string\n\n\t\tx = make(map[string]string)\n\n\t\tx[\"A\"] = \"Apple\"\n\t\tx[\"B\"] = \"Banana\"\n\t\tx[\"O\"] = \"Orange\"\n\t\tx[\"P\"] = \"Pear\"\n\n\t\tfor key, val := range x {\n\t\t\tfmt.Println(\"Key:\", key, \"Value:\", val)\n\t\t}\n\t}\n```\n上面的方式就是使用了make函数来初始化字典，`试图为未经过初始化的字典添加元素会导致运行错误`，你可以把使用make函数初始化的那一行注释掉，然后看一下。\n\n当然上面的例子中，我们可以把定义和初始化合成一句。\n```go\n\tpackage main\n\n\timport (\n\t\t\"fmt\"\n\t)\n\n\tfunc main() {\n\t\tx := make(map[string]string)\n\n\t\tx[\"A\"] = \"Apple\"\n\t\tx[\"B\"] = \"Banana\"\n\t\tx[\"O\"] = \"Orange\"\n\t\tx[\"P\"] = \"Pear\"\n\n\t\tfor key, val := range x {\n\t\t\tfmt.Println(\"Key:\", key, \"Value:\", val)\n\t\t}\n\t}\n```\n现在我们再来看一下字典的数据访问方式。如果你访问的元素所对应的键存在于字典中，那么没有问题，如果不存在呢？\n\n这个时候会返回零值。对于字符串零值就是\"\"，对于整数零值就是0。但是对于下面的例子：\n```go\n\tpackage main\n\n\timport (\n\t\t\"fmt\"\n\t)\n\n\tfunc main() {\n\t\tx := make(map[string]int)\n\n\t\tx[\"A\"] = 0\n\t\tx[\"B\"] = 20\n\t\tx[\"O\"] = 30\n\t\tx[\"P\"] = 40\n\n\t\tfmt.Println(x[\"C\"])\n\t}\n```\n在这个例子中，很显然不存在键C，但是程序的输出结果为0，这样就和键A对应的值混淆了。\n\nGo提供了一种方法来解决这个问题：\n```go\n\tpackage main\n\n\timport (\n\t\t\"fmt\"\n\t)\n\n\tfunc main() {\n\t\tx := make(map[string]int)\n\n\t\tx[\"A\"] = 0\n\t\tx[\"B\"] = 20\n\t\tx[\"O\"] = 30\n\t\tx[\"P\"] = 40\n\n\t\tif val, ok := x[\"C\"]; ok {\n\t\t\tfmt.Println(val)\n\t\t}\n\t}\n```\n上面的例子中，我们可以看到事实上使用`x[\"C\"]`的返回值有两个，一个是值，另一个是是否存在此键的bool型变量，所以我们看到ok为true的时候就输出键C的值，如果ok为false，那就是字典中不存在这个键。\n\n现在我们再来看看`Go提供的内置函数delete，这个函数可以用来从字典中删除元素`。\n```go\n\tpackage main\n\n\timport (\n\t\t\"fmt\"\n\t)\n\n\tfunc main() {\n\t\tx := make(map[string]int)\n\n\t\tx[\"A\"] = 10\n\t\tx[\"B\"] = 20\n\t\tx[\"C\"] = 30\n\t\tx[\"D\"] = 40\n\n\t\tfmt.Println(\"Before Delete\")\n\t\tfmt.Println(\"Length:\", len(x))\n\t\tfmt.Println(x)\n\n\t\tdelete(x, \"A\")\n\n\t\tfmt.Println(\"After Delete\")\n\t\tfmt.Println(\"Length:\", len(x))\n\t\tfmt.Println(x)\n\t}\n```\n输出结果为\n```\n\tBefore Delete\n\tLength: 4\n\tmap[A:10 B:20 C:30 D:40]\n\tAfter Delete\n\tLength: 3\n\tmap[B:20 C:30 D:40]\n```\n我们在删除元素前查看一下字典长度和元素，删除之后再看一下。这里面我们还可以看到`len函数也可以用来获取字典的元素个数`。当然如果你试图删除一个不存在的键，那么程序也不会报错，只是不会对字典造成任何影响。\n\n最后我们再用一个稍微复杂的例子来结束字典的介绍。\n\n我们有一个学生登记表，登记表里面有一组学号，每个学号对应一个学生，每个学生有名字和年龄。\n```go\n\tpackage main\n\n\timport (\n\t\t\"fmt\"\n\t)\n\n\tfunc main() {\n\t\tvar facebook = make(map[string]map[string]int)\n\t\tfacebook[\"0616020432\"] = map[string]int{\"Jemy\": 25}\n\t\tfacebook[\"0616020433\"] = map[string]int{\"Andy\": 23}\n\t\tfacebook[\"0616020434\"] = map[string]int{\"Bill\": 22}\n\n\t\tfor stu_no, stu_info := range facebook {\n\t\t\tfmt.Println(\"Student:\", stu_no)\n\t\t\tfor name, age := range stu_info {\n\t\t\t\tfmt.Println(\"Name:\", name, \"Age:\", age)\n\t\t\t}\n\t\t\tfmt.Println()\n\t\t}\n\t}\n```\n输出结果为\n```\n\tStudent: 0616020432\n\tName Jemy Age 25\n\n\tStudent: 0616020433\n\tName Andy Age 23\n\n\tStudent: 0616020434\n\tName Bill Age 22\n```\n当然我们也可以用初始化的方式定义字典：\n```go\n\tpackage main\n\n\timport (\n\t\t\"fmt\"\n\t)\n\n\tfunc main() {\n\t\tvar facebook = map[string]map[string]int{\n\t\t\t\"0616020432\": {\"Jemy\": 25},\n\t\t\t\"0616020433\": {\"Andy\": 23},\n\t\t\t\"0616020434\": {\"Bill\": 22},\n\t\t}\n\n\t\tfor stu_no, stu_info := range facebook {\n\t\t\tfmt.Println(\"Student:\", stu_no)\n\t\t\tfor name, age := range stu_info {\n\t\t\t\tfmt.Println(\"Name:\", name, \"Age:\", age)\n\t\t\t}\n\t\t\tfmt.Println()\n\t\t}\n\t}\n```\n\n输出结果是一样的。\n\n","source":"_posts/goeasylearn1.md","raw":"---\ntitle: go语言基础--数据类型、变量、控制\ndate: 2017-07-06 10:43:48\ntags: go语言基础\ncategories: go语言学习笔记\ncomment: false\t\n---\n# Go语言内置基础数据类型\n\n在自然界里面，有猫，有狗，有猪。有各种动物。每种动物都是不同的。  \n比如猫会喵喵叫，狗会旺旺叫，猪会哼哼叫。。。  \nStop!!!  \n好了，大家毕竟不是幼儿园的小朋友。介绍到这里就可以了。\n<!--more-->\n论点就是每个东西都有自己归属的类别(Type)。  \n那么在Go语言里面，每个变量也都是有类别的，这种类别叫做`数据类型(Data Type)`。  \nGo的数据类型有两种：一种是`语言内置的数据类型`，另外一种是`通过语言提供的自定义数据类型方法自己定义的自定义数据类型`。\n\n先看看语言`内置的基础数据类型`\n\n## 数值型(Number)\n\n数值型有`三种`，一种是`整数类型`，另外一种是`带小数的类型`(一般计算机里面叫做`浮点数类型`)，还有一种`虚数类型`。  \n\n整数类型不用说了，和数学里面的是一样的。和数学里面不同的地方在于计算机里面`正整数和零`统称为`无符号整型`，而`负整数`则称为`有符号整型`。  \n\nGo的内置整型有`uint8`, `uint16`, `uint32`, `uint64`, `int8`, `int16`, `int32`和`int64`。其中`u`开头的类型就是`无符号整型`。无符号类型能够表示正整数和零。而有符号类型除了能够表示正整数和零外，还可以表示负整数。\n另外还有一些别名类型，比如`byte`类型，这个类型和`uint8`是一样的，表示`字节类型`。另外一个是`rune类型`，这个类型和`int32`是一样的，用来表示`unicode的代码点`，就是unicode字符所对应的整数。\n\nGo还定义了三个`依赖系统`的类型，`uint`，`int`和`uintptr`。因为在32位系统和64位系统上用来表示这些类型的位数是不一样的。\n\n*对于32位系统*\n\nuint=uint32  \nint=int32  \nuintptr为32位的指针  \n\n*对于64位系统*\n\nuint=uint64  \nint=int64  \nuintptr为64位的指针  \n\n至于类型后面跟的数字8，16，32或是64则表示用来表示这个类型的位不同，`位越多，能表示的整数范围越大`。\n比如对于用N位来表示的整数，如果是`有符号的整数`，能够表示的整数范围为`-2^(N-1) ~ 2^(N-1)－1`；如果是`无符号的整数`，则能表示的整数范围为`0 ～ 2^N`。\n\nGo的浮点数类型有两种，`float32`和`float64`。float32又叫`单精度浮点型`，float64又叫做`双精度浮点型`。其`最主要的区别就是小数点后面能跟的小数位数不同`。\n\n另外Go还有两个其他语言所没有的类型，`虚数类型`。`complex64`和`complex128`。\n\n对于数值类型，其所共有的操作为`加法(＋)`，`减法(－)`，`乘法(＊)`和`除法(/)`。另外对于`整数类型`，还定义了`求余运算(%)`\n\n求余运算为整型所独有。如果对浮点数使用求余，比如这样\n```go\n    package main\n\n    import (\n        \"fmt\"\n    )\n\n    func main() {\n        var a float64 = 12\n        var b float64 = 3\n\n        fmt.Println(a % b)\n    }\n```\n\n编译时候会报错\n\n    invalid operation: a % b (operator % not defined on float64)\n\n所以，这里我们可以知道所谓的`数据类型有两层意思`，一个是定义了`该类型所能表示的数`，另一个是定义了`该类型所能进行的操作`。\n简单地说，对于一只小狗，你能想到的一定是狗的面貌和它会汪汪叫，而不是猫的面容和喵喵叫。\n\n\n## 字符串类型(String)\n\n字符串就是一串固定长度的字符连接起来的字符序列。Go的字符串是由`单个字节`连接起来的。（对于汉字，通常由多个字节组成）。这就是说，传统的字符串是由字符组成的，而`Go的字符串不同`，是`由字节组成`的。这一点需要注意。\n\n字符串的表示很简单。用(双引号\"\")或者(``号)来描述。\n\n    \"hello world\"\n\n或者\n\n    `hello world`\n\n唯一的区别是，**双引号之间的转义字符会被转义，而``号之间的转义字符保持原样不变**。\n```go\n    package main\n\n    import (\n        \"fmt\"\n    )\n\n    func main() {\n        var a = \"hello \\n world\"\n        var b = `hello \\n world`\n\n        fmt.Println(a)\n        fmt.Println(\"----------\")\n        fmt.Println(b)\n    }\n```\n输出结果为\n```go\n    hello \n     world\n    ----------\n    hello \\n world\n```\n字符串所能进行的一些基本操作包括:  \n（1）`获取字符长度`  \n（2）`获取字符串中单个字节`  \n（3）`字符串连接`  \n```go\n    package main\n\n    import (\n        \"fmt\"\n    )\n\n    func main() {\n        var a string = \"hello\"\n        var b string = \"world\"\n\n        fmt.Println(len(a))\n        fmt.Println(a[1])\n        fmt.Println(a + b)\n    }\n```\n输出如下 \n```\n    5\n    101\n    helloworld\n```\n这里我们看到a[1]得到的是一个整数，这就证明了上面`\"Go的字符串是由字节组成的这句话\"`。我们还可以再验证一下。\n```go\n\tpackage main\n\n\timport (\n\t\t\"fmt\"\n\t)\n\n\tfunc main() {\n\t\tvar a string = \"你\"\n\t\tvar b string = \"好\"\n\t\tfmt.Println(len(a))\n\t\tfmt.Println(len(b))\n\t\tfmt.Println(len(a + b))\n\t\tfmt.Println(a[0])\n\t\tfmt.Println(a[1])\n\t\tfmt.Println(a[2])\n\t}\n```\n输出\n```\n    3\n    3\n    6\n    228\n    189\n    160\n```\n我们开始的时候，从上面的三行输出知道，\"你\"和\"好\"分别是用三个字节组成的。我们依次获取a的三个字节，输出，得到结果。\n\n\n## 布尔型(Bool)\n\n布尔型是表示`真值`和`假值`的类型。可选值为`true`和`false`。\n\n所能进行的操作如下：\n`&& and 与`\n`|| or 或`\n`!  not 非`\n\nGo的布尔型取值`就是true`或`false`。`任何空值(nil)或者零值(0, 0.0, \"\")都不能作为布尔型来直接判断`。\n```go\n\tpackage main\n\n\timport (\n    \t\"fmt\"\n\t)\n\n\tfunc main() {\n    \tvar equal bool\n    \tvar a int = 10\n    \tvar b int = 20\n    \tequal = (a == b)\n    \tfmt.Println(equal)\n\t}\n```\n输出结果\n\n    false\n\n下面是错误的用法\n```go\n\tpackage main\n\n\timport (\n    \t\"fmt\"\n\t)\n\n\tfunc main() {\n    \tif 0 {\n        \tfmt.Println(\"hello world\")\n    \t}\n    \tif nil {\n        \tfmt.Println(\"hello world\")\n    \t}\n    \tif \"\" {\n     \t\tfmt.Println(\"hello world\")\n    \t}\n\t}\n```\n编译错误\n```\n    ./t.go:8: non-bool 0 (type untyped number) used as if condition\n    ./t.go:11: non-bool nil used as if condition\n    ./t.go:14: non-bool \"\" (type untyped string) used as if condition\n```\n\n上面介绍的是Go语言内置的基础数据类型。\n\n# 变量和常量定义\n现在我们讨论一下Go语言的变量定义。\n \n## 变量定义 \n\n所谓的变量就是一个拥有指定`名称`和`类型`的`数据存储位置`。  \n在上面我们使用过变量的定义，现在我们来仔细看一个例子。  \n ```go \n\tpackage main\n\n\timport (\n\t\t\"fmt\"\n\t)\n\n\tfunc main() {\n\t\tvar x string = \"hello world\"\n\t\tfmt.Println(x)\n\t}\n```\n变量的定义首先使用`var`关键字，然后指定变量的名称`x`，再指定变量的类型`string`，在本例中，还对变量`x`进行了赋值，然后在命令行输出该变量。Go这种变量定义的方式和其他的语言有些不同，但是在使用的过程中，你会逐渐喜欢的。当然上面的变量定义方式还可以如下，即先定义变量，再赋值。\n```go\n\tpackage main\n\n\timport (\n\t\t\"fmt\"\n\t)\n\n\tfunc main() {\n\t\tvar x string\n\t\tx = \"hello world\"\n\t\tfmt.Println(x)\n\t}\n```\n或者是直接赋值，让Go语言推断变量的类型。如下：\n```go\n\tpackage main\n\n\timport (\n\t\t\"fmt\"\n\t)\n\n\tfunc main() {\n\t\tvar x = \"hello world\"\n\t\tfmt.Println(x)\n\t}\n```\n当然，上面变量的定义还有一种`快捷方式`。如果你知道变量的初始值，完全可以像下面这样定义变量，完全让`Go来推断语言的类型`。这种定义的方式连关键字`var`都省略掉了。\n```go\n\tpackage main\n\n\timport (\n\t\t\"fmt\"\n\t)\n\n\tfunc main() {\n\t\tx := \"hello world\"\n\t\tfmt.Println(x)\n\t}\n```\n注意：上面这种使用`:=`方式定义变量的方式`只能用在函数内部`。\n```go\n\tpackage main\n\n\timport (\n\t\t\"fmt\"\n\t)\n\n\tx:=\"hello world\"\n\tfunc main() {\n\t\ty := 10\n\t\tfmt.Println(x)\n\t\tfmt.Println(y)\n\t}\n```\n对于上面的变量定义x是无效的。会导致编译错误：\n\n\n\t./test_var_quick.go:7: non-declaration statement outside function body\n\n\n不过我们对上面的例子做下修改，比如这样是可以的。也就是使用var关键字定义的时候，如果给出初始值，就不需要显式指定变量类型。\n```go\n\tpackage main\n\n\timport (\n\t\t\"fmt\"\n\t)\n\n\tvar x = \"hello world\"\n\n\tfunc main() {\n\t\ty := 10\n\t\tfmt.Println(x)\n\t\tfmt.Println(y)\n\t}\n```\n\n`变量`之所以称为变量，就是因为`它们的值在程序运行过程中可以发生变化`，但是`它们的变量类型是无法改变的`。因为`Go语言是静态语言`，并`不支持`程序运行过程中`变量类型发生变化`。比如如果你强行将一个字符串值赋值给定义为int的变量，那么会发生编译错误。即使是强制类型转换也是不可以的。`强制类型转换只支持同类的变量类型`。比如数值类型之间强制转换。\n\n下面我们看几个例子：\n```go\n\tpackage main\n\n\timport (\n\t\t\"fmt\"\n\t)\n\n\tfunc main() {\n\t\tvar x string = \"hello world\"\n\t\tfmt.Println(x)\n\t\tx = \"i love go language\"\n\t\tfmt.Println(x)\n\t}\n```\n本例子演示变量的值在程序运行过程中发生变化，结果输出为\n```\n\thello world\n\ti love go language\n```\n我们尝试不同类型的变量之间转换\n```go\n\tpackage main\n\n\timport (\n\t\t\"fmt\"\n\t)\n\n\tfunc main() {\n\t\tvar x string = \"hello world\"\n\t\tfmt.Println(x)\n\t\tx = 11\n\t\tfmt.Println(x)\n\t}\n```\n在本例子中，如果试图将一个数值赋予字符串变量x，那么会发生错误：\n\n\t./test_var.go:10: cannot use 11 (type int) as type string in assignment\n\n上面的意思就是无法将整型数值11当作字符串赋予给字符串变量。\n\n但是同类的变量之间是可以强制转换的，如浮点型和整型之间的转换。\n```go\n\tpackage main\n\n\timport (\n\t\t\"fmt\"\n\t)\n\n\tfunc main() {\n\t\tvar x float64 = 32.35\n\t\tfmt.Println(x)\n\t\tfmt.Println(int(x))\n\t}\n```\n输出的结果为\n```\n\t32.35   \n\t32\n```\n\n## 变量命名\n\n上面我们看了一些变量的使用方法，那么定义一个变量名称，有哪些要求呢？\n这里我们要注意，`Go的变量名称必须以字母或下划线(_)开头，后面可以跟字母，数字，或者下划线(_)`。除此之外，Go语言并不关心你如何定义变量。我们通用的做法是定义一个用户友好的变量。假设你需要定义一个狗狗的年龄，那么使用dog_age作为变量名称要好于用x来定义变量。\n\n## 变量作用域\n\n现在我们再来讨论一下变量的作用域。所谓作用域就是可以有效访问变量的区域。比如很简单的，你不可能在一个函数func_a里面访问另一个函数func_b里面定义的局部变量x。所以变量的作用域目前分为两类，一个是`全局变量`，另一个是`局部变量`。下面我们看个全局变量的例子：\n```go\n\tpackage main\n\n\timport (\n\t\t\"fmt\"\n\t)\n\n\tvar x string = \"hello world\"\n\n\tfunc main() {\n\t\tfmt.Println(x)\n\t}\n```\n这里变量x定义在main函数之外，但是main函数仍然可以访问x。全局变量的作用域是该包中所有的函数。\n```go\n\tpackage main\n\n\timport (\n\t\t\"fmt\"\n\t)\n\n\tvar x string = \"hello world\"\n\n\tfunc change() {\n\t\tx = \"i love go\"\n\t}\n\tfunc main() {\n\t\tfmt.Println(x)\n\t\tchange()\n\t\tfmt.Println(x)\n\t}\n```\n在上面的例子用，我们用了change函数改变了x的值。输出结果如下：\n```\n\thello world\n\ti love go\n```\n\n我们再看一下局部变量的例子。\n```go\n\tpackage main\n\n\timport (\n\t\t\"fmt\"\n\t)\n\n\tfunc change() {\n\t\tx := \"i love go\"\n\t}\n\tfunc main() {\n\t\tfmt.Println(x)\n\t}\n```\n该例子中main函数试图访问change函数中定义的局部变量x，结果发生了下面的错误(未定义的变量x)：\n\n\t./test_var.go:11: undefined: x\n\n\n\n## 常量\n\nGo语言也支持常量定义。所谓`常量就是在程序运行过程中保持值不变的变量定义`。常量的定义和变量类似，只是用`const`关键字替换了var关键字，另外常量在定义的时候`必须有初始值`。\n```go\n\tpackage main\n\n\timport (\n\t\t\"fmt\"\n\t)\n\n\tfunc main() {\n\t\tconst x string = \"hello world\"\n\t\tconst y = \"hello world\"\n\t\tfmt.Println(x)\n\t\tfmt.Println(y)\n\t}\n```\n这里有一点需要注意，变量定义的类型推断方式`:=`不能够用来定义常量。因为常量的值是在编译的时候就已经确定的，但是变量的值则是运行的时候才使用的。这样常量定义就无法使用变量类型推断的方式了。\n\n常量的值在运行过程中是无法改变的，强制改变常量的值是无效的。\n\n```go\n\tpackage main\n\n\timport (\n\t\t\"fmt\"\n\t)\n\n\tfunc main() {\n\t\tconst x string = \"hello world\"\n\t\tfmt.Println(x)\n\t\tx = \"i love go language\"\n\t\tfmt.Println(x)\n\t}\n```\n比如上面的例子就会报错\n\n\t./test_var.go:10: cannot assign to x\n\n我们再看一个Go包math里面定义的常量Pi，用它来求圆的面积。\n```go\n\tpackage main\n\n\timport (\n\t\t\"fmt\"\n\t\t\"math\"\n\t)\n\n\tfunc main() {\n\t\tvar radius float64 = 10\n\t\tvar area = math.Pow(radius, 2) * math.Pi\n\t\tfmt.Println(area)\n\t}\n```\n\n## 多变量或常量定义\n\nGo还提供了一种`同时定义多个变量或者常量`的快捷方式。\n```go\n\tpackage main\n\n\timport (\n\t\t\"fmt\"\n\t)\n\n\tfunc main() {\n\t\tvar (\n\t\t\ta int     = 10\n\t\t\tb float64 = 32.45\n\t\t\tc bool    = true\n\t\t)\n\t\tconst (\n\t\t\tPi   float64 = 3.14\n\t\t\tTrue bool    = true\n\t\t)\n\n\t\tfmt.Println(a, b, c)\n\t\tfmt.Println(Pi, True)\n\t}\n```\n# 程序控制结构\n虽然剧透可耻，但是为了体现Go语言的设计简洁之处，必须要先剧透一下。\n\nGo语言的控制结构关键字只有\n\n`if..else if..else`，`for` 和 `switch`。\n\n而且在Go中，为了避免格式化战争，对程序结构做了统一的强制的规定。看下下面的例子。\n\n请比较一下A程序和B程序的不同之处。\n\n**A程序**\n```go\n\tpackage main\n\n\timport (\n\t\t\"fmt\"\n\t)\n\n\tfunc main() {\n\t\tfmt.Println(\"hello world\")\n\t}\n```\n**B程序**\n```go\n\tpackage main\n\n\timport (\n\t\t\"fmt\"\n\t)\n\n\tfunc main() \n\t{\n\t\tfmt.Println(\"hello world\")\n\t}\n```\n还记得我们前面的例子中，`{}`的格式是怎么样的么？在上面的两个例子中只有A例的写法是对的。因为在Go语言中，强制了`{}`的格式。如果我们试图去编译B程序，那么会发生如下的错误提示。\n\n\t./test_format.go:9: syntax error: unexpected semicolon or newline before {\n\n## if..else if..else\n\nif..else if..else 用来判断一个或者多个条件，然后根据条件的结果执行不同的程序块。举个简单的例子。\n```go\n\tpackage main\n\n\timport (\n\t\t\"fmt\"\n\t)\n\n\tfunc main() {\n\t\tvar dog_age = 10\n\n\t\tif dog_age > 10 {\n\t\t\tfmt.Println(\"A big dog\")\n\t\t} else if dog_age > 1 && dog_age <= 10 {\n\t\t\tfmt.Println(\"A small dog\")\n\t\t} else {\n\t\t\tfmt.Println(\"A baby dog\")\n\t\t}\n\t}\n```\n上面的例子判断狗狗的年龄如果`(if)`大于10就是一个大狗；否则判断`(else if)`狗狗的年龄是否小于等于10且大于1，这个时候狗狗是小狗狗。否则`(else)`的话（就是默认狗狗的年龄小于等于1岁），那么狗狗是Baby狗狗。\n\n在上面的例子中，我们还可以发现Go的if..else if..else语句的判断条件一般都不需要使用`()`。当然如果你还是愿意写，也是对的。另外如果为了将某两个或多个条件绑定在一起判断的话，还是需要括号`()`的。\n\n比如下面的例子也是对的。\n```go\n\tpackage main\n\n\timport (\n\t\t\"fmt\"\n\t)\n\n\tfunc main() {\n\t\tconst Male = 'M'\n\t\tconst Female = 'F'\n\n\t\tvar dog_age = 10\n\t\tvar dog_sex = 'M'\n\n\t\tif (dog_age == 10 && dog_sex == 'M') {\n\t\t\tfmt.Println(\"dog\")\n\t\t}\n\t}\n```\n但是如果你使用Go提供的格式化工具来格式化这段代码的话，Go会智能判断你的括号是否必须有，否则的话，会帮你去掉的。你可以试试。\n\n\tgo fmt test_bracket.go\n\n\n然后你会发现，咦？！果真被去掉了。\n\n另外因为每个判断条件的结果要么是true要么是false，所以可以使用`&&`，`||`来连接不同的条件。使用`!`来对一个条件取反。\n\n## switch\n\nswitch的出现是为了解决某些情况下使用if判断语句带来的繁琐之处。\n\n例如下面的例子：\n```go\n\tpackage main\n\n\timport (\n\t\t\"fmt\"\n\t)\n\n\tfunc main() {\n\t\t//score 为 [0,100]之间的整数\n\t\tvar score int = 69\n\n\t\tif score >= 90 && score <= 100 {\n\t\t\tfmt.Println(\"优秀\")\n\t\t} else if score >= 80 && score < 90 {\n\t\t\tfmt.Println(\"良好\")\n\t\t} else if score >= 70 && score < 80 {\n\t\t\tfmt.Println(\"一般\")\n\t\t} else if score >= 60 && score < 70 {\n\t\t\tfmt.Println(\"及格\")\n\t\t} else {\n\t\t\tfmt.Println(\"不及格\")\n\t\t}\n\t}\n```\n在上面的例子中，我们用if..else if..else来对分数进行分类。这个只是一般的情况下if判断条件的数量。如果if..else if..else的条件太多的话，我们可以使用switch来优化程序。比如上面的程序我们还可以这样写：\n```go\n\tpackage main\n\n\timport (\n\t\t\"fmt\"\n\t)\n\n\tfunc main() {\n\t\t//score 为 [0,100]之间的整数\n\t\tvar score int = 69\n\n\t\tswitch score / 10 {\n\t\tcase 10:\n\t\tcase 9:\n\t\t\tfmt.Println(\"优秀\")\n\t\tcase 8:\n\t\t\tfmt.Println(\"良好\")\n\t\tcase 7:\n\t\t\tfmt.Println(\"一般\")\n\t\tcase 6:\n\t\t\tfmt.Println(\"及格\")\n\t\tdefault:\n\t\t\tfmt.Println(\"不及格\")\n\t\t}\n\t}\n```\n关于switch的几点说明如下：\n\n(1) switch的判断条件可以为任何数据类型。\n```go\n\tpackage main\n\n\timport (\n\t\t\"fmt\"\n\t)\n\n\tfunc main() {\n\t\tvar dog_sex = \"F\"\n\t\tswitch dog_sex {\n\t\tcase \"M\":\n\t\t\tfmt.Println(\"A male dog\")\n\t\tcase \"F\":\n\t\t\tfmt.Println(\"A female dog\")\n\t\t}\n\t}\n```\n\n(2) 每个case后面跟的是一个完整的程序块，该程序块`不需要{}`，也`不需要break结尾`，因为每个case都是独立的。\n\n(3) 可以为switch提供一个默认选项default，在上面所有的case都没有满足的情况下，默认执行default后面的语句。\n\n\n## for\n\nfor用在Go语言的循环条件里面。比如说要你输出1...100之间的自然数。最笨的方法就是直接这样。\n```go\n\tpackage main\n\n\timport (\n\t\t\"fmt\"\n\t)\n\n\tfunc main() {\n\t\tfmt.Println(1)\n\t\tfmt.Println(2)\n\t\t...\n\t\tfmt.Println(100)\n\t}\n```\n这个不由地让我想起一个笑话。\n>以前一个地主的儿子学习写字，只学了三天就把老师赶走了。因为在这三天里面他学写了一，二，三。他觉得写字真的太简单了，不就是画横线嘛。于是有一天老爹过寿，让他来记送礼的人名单。直到中午还没有记完，老爹很奇怪就去问他怎么了。他哭着说，“不知道这个人有什么毛病，姓什么不好，姓万”。\n\n哈哈，回来继续。我们看到上面的例子也是如地主的儿子那样就不好了。所以，我们必须使用循环结构。我们用for的循环语句来实现上面的例子。\n```go\n\tpackage main\n\n\timport (\n\t\t\"fmt\"\n\t)\n\n\tfunc main() {\n\t\tvar i int = 1\n\n\t\tfor ; i <= 100; i++ {\n\t\t\tfmt.Println(i)\n\t\t}\n\t}\n```\n在上面的例子中，首先初始化变量i为1，然后在for循环里面判断是否小于等于100，如果是的话，输出i，然后再使用i++来将i的值自增1。上面的例子，还有一个更好的写法，就是将i的定义和初始化也放在for里面。如下：\n```go\n\tpackage main\n\n\timport (\n\t\t\"fmt\"\n\t)\n\n\tfunc main() {\n\t\tfor i := 1; i <= 100; i++ {\n\t\t\tfmt.Println(i)\n\t\t}\n\t}\n```\n在Go里面没有提供while关键字，如果你怀念while的写法也可以这样：\n```go\n\tpackage main\n\n\timport (\n\t\t\"fmt\"\n\t)\n\n\tfunc main() {\n\t\tvar i int = 1\n\n\t\tfor i <= 100 {\n\t\t\tfmt.Println(i)\n\t\t\ti++\n\t\t}\n\t}\n```\n或许你会问，如果我要死循环呢？是不是`for true`？呵呵，不用了，直接这样。\n```go\n\tfor{\n\t\t...\n\t}\n```\n\n以上就是Go提供的全部控制流程了。\n\n再复习一下，Go只提供了：\n\n**if**\n```go\n\tif ...{\n\t\t...\n\t}else if ...{\n\t\t...\n\t}else{\n\t\t...\n\t}\n```\n**switch**\n```go\t\n\tswitch(...){\n\tcase ...:\n\t\t\t ...\n\tcase ...:\n\t\t\t ...\n\t...\n\t\n\tdefault:\n\t\t\t  ...\n\t}\n```\n**for**\n```go\t\n\tfor ...; ...; ...{\n\t\t...\n\t}\n\t\n\tfor ...{\n\t\t...\n\t}\n\t\n\tfor{\n\t\t...\n\t}\n```\n# 数组，切片和字典\n\n在上面的章节里面，我们讲过Go内置的基本数据类型。现在我们来看一下Go内置的高级数据类型，数组，切片和字典。\n\n## 数组(Array)\n\n数组是一个具有`相同数据类型`的元素组成的`固定长度`的`有序集合`。比如下面的例子\n\n\tvar x [5]int\n\t\n表示数组x是一个整型数组，而且数值的长度为5。\n\n`Go提供了几种不同的数组定义方法。`\n\n`最基本的方式就是使用var关键字来定义，然后依次给元素赋值`。`对于没有赋值的元素，默认为零值`。比如对于整数，零值就是0，浮点数，零值就是0.0，字符串，零值就是\"\"，对象零值就是nil。\n```go\n\tpackage main\n\n\timport (\n\t\t\"fmt\"\n\t)\n\n\tfunc main() {\n\t\tvar x [5]int\n\t\tx[0] = 2\n\t\tx[1] = 3\n\t\tx[2] = 3\n\t\tx[3] = 2\n\t\tx[4] = 12\n\t\tvar sum int\n\t\tfor _, elem := range x {\n\t\t\tsum += elem\n\t\t}\n\t\tfmt.Println(sum)\n\t}\n```\n在上面的例子中，我们首先使用`var`关键字来声明，然后给出数组名称`x`，最后说明数组为整型数组，长度为5。然后我们使用索引方式给数组元素赋值。在上面的例子中，我们还使用了一种遍历数组元素的方法。该方法利用Go语言提供的内置函数range来遍历数组元素。`range函数可以用在数组，切片和字典上面`。当`range来遍历数组的时候返回数组的索引和元素值`。在这里我们是对数组元素求和，所以我们对索引不感兴趣。在Go语言里面，`当你对一个函数返回值不感兴趣的话，可以使用下划线(_)来替代它`。另外这里如果我们真的定义了一个索引，在循环结构里面却没有使用索引，Go语言编译的时候还是会报错的。所以用下划线来替代索引变量也是唯一之举了。最后我们输出数组元素的和。\n\n还有一种方式，如果知道了数组的初始值。可以像下面这样定义。\n```go\n\tpackage main\n\n\timport (\n\t\t\"fmt\"\n\t)\n\n\tfunc main() {\n\t\tvar x = [5]int{1, 2, 3, 4}\n\t\tx[4] = 5\n\n\t\tvar sum int\n\t\tfor _, i := range x {\n\t\t\tsum += i\n\t\t}\n\t\tfmt.Println(sum)\n\t}\n```\n当然，即使你不知道数组元素的初始值，也可以使用这样的定义方式。\n```go\n\tpackage main\n\n\timport (\n\t\t\"fmt\"\n\t)\n\n\tfunc main() {\n\t\tvar x = [5]int{}\n\t\tx[0] = 1\n\t\tx[1] = 2\n\t\tx[2] = 3\n\t\tx[3] = 4\n\t\tx[4] = 5\n\n\t\tvar sum int\n\t\tfor _, i := range x {\n\t\t\tsum += i\n\t\t}\n\t\tfmt.Println(sum)\n\t}\n```\n`在这里我们需要特别重视数组的一个特点，就是数组是有固定长度的。`\n\n但是如果我们有的时候也可以不显式指定数组的长度，而是使用`...`来替代数组长度，Go语言会自动计算出数组的长度。不过这种方式定义的数组一定是有初始化的值的。\n```go\n\tpackage main\n\n\timport (\n\t\t\"fmt\"\n\t)\n\n\tfunc main() {\n\t\tvar x = [...]string{\n\t\t\t\"Monday\",\n\t\t\t\"Tuesday\",\n\t\t\t\"Wednesday\",\n\t\t\t\"Thursday\",\n\t\t\t\"Friday\",\n\t\t\t\"Saturday\",\n\t\t\t\"Sunday\"}\n\n\t\tfor _, day := range x {\n\t\t\tfmt.Println(day)\n\t\t}\n\t}\n```\n在上面的例子中，还需要注意一点就是如果将数组元素定义在不同行上面，那么最后一个元素后面必须跟上`}`或者`,`。上面的例子也可以是这样的。\n```go\n\tpackage main\n\n\timport (\n\t\t\"fmt\"\n\t)\n\n\tfunc main() {\n\t\tvar x = [...]string{\n\t\t\t\"Monday\",\n\t\t\t\"Tuesday\",\n\t\t\t\"Wednesday\",\n\t\t\t\"Thursday\",\n\t\t\t\"Friday\",\n\t\t\t\"Saturday\",\n\t\t\t\"Sunday\",\n\t\t}\n\n\t\tfor _, day := range x {\n\t\t\tfmt.Println(day)\n\t\t}\n\t}\n```\n`Go提供的这种可以自动计算数组长度的方法在调试程序的时候特别方便，假设我们注释掉上面数组x的最后一个元素，我们甚至不需要去修改数组的长度。`\n\t\n## 切片(Slice)\n\n在上面我们说过数组是有固定长度的有序集合。这也就是说一旦数组长度定义，你将无法在数组里面多添加哪怕一个元素。数组的这种特点有的时候会成为很大的缺点，尤其是当数组的元素个数不确定的情况下。\n\n所以`切片`诞生了。\n\n切片和数组很类似，甚至你可以理解成数组的子集。但是`切片有一个数组所没有的特点，那就是切片的长度是可变的`。\n\n严格地讲，切片有`容量(capacity)`和`长度(length)`两个属性。\n\n首先我们来看一下切片的定义。切片有两种定义方式，一种是先声明一个变量是切片，然后使用内置函数make去初始化这个切片。另外一种是通过取数组切片来赋值。\n```go\n\tpackage main\n\n\timport (\n\t\t\"fmt\"\n\t)\n\n\tfunc main() {\n\t\tvar x = make([]float64, 5)\n\t\tfmt.Println(\"Capcity:\", cap(x), \"Length:\", len(x))\n\t\tvar y = make([]float64, 5, 10)\n\t\tfmt.Println(\"Capcity:\", cap(y), \"Length:\", len(y))\n\n\t\tfor i := 0; i < len(x); i++ {\n\t\t\tx[i] = float64(i)\n\t\t}\n\t\tfmt.Println(x)\n\n\t\tfor i := 0; i < len(y); i++ {\n\t\t\ty[i] = float64(i)\n\t\t}\n\t\tfmt.Println(y)\n\t}\n```\n输出结果为\n```\n\tCapcity: 5 Length: 5\n\tCapcity: 10 Length: 5\n\t[0 1 2 3 4]\n\t[0 1 2 3 4]\n```\n上面我们首先用make函数定义切片x，这个时候x的容量是5，长度也是5。然后使用make函数定义了切片y，这个时候y的容量是10，长度是5。然后我们再分别为切片x和y的元素赋值，最后输出。\n\n所以使用make函数定义切片的时候，有`两种方式`，一种`只指定长度，这个时候切片的长度和容量是相同的`。另外一种是`同时指定切片长度和容量`。虽然切片的容量可以大于长度，但是`赋值的时候要注意最大的索引仍然是len(x)－1`。否则会报索引超出边界错误。\n\n另外一种是通过数组切片赋值，采用`[low_index:high_index]`的方式获取数值切片，其中切片元素`包括low_index的元素`，但是`不包括high_index的元素`。\n```go\n\tpackage main\n\n\timport (\n\t\t\"fmt\"\n\t)\n\n\tfunc main() {\n\t\tvar arr1 = [5]int{1, 2, 3, 4, 5}\n\t\tvar s1 = arr1[2:3]\n\t\tvar s2 = arr1[:3]\n\t\tvar s3 = arr1[2:]\n\t\tvar s4 = arr1[:]\n\t\tfmt.Println(s1)\n\t\tfmt.Println(s2)\n\t\tfmt.Println(s3)\n\t\tfmt.Println(s4)\n\t}\n```\n输出结果为\n```\n\t[3]\n\t[1 2 3]\n\t[3 4 5]\n\t[1 2 3 4 5]\n```\n\n\n在上面的例子中，我们还省略了low_index或high_index。如果省略了low_index，那么等价于从索引0开始；如果省略了high_index，则默认high_index等于len(arr1)，即切片长度。\n\n这里为了体现切片的长度可以变化，我们看一下下面的例子：\n```go\n\tpackage main\n\n\timport (\n\t\t\"fmt\"\n\t)\n\n\tfunc main() {\n\t\tvar arr1 = make([]int, 5, 10)\n\t\tfor i := 0; i < len(arr1); i++ {\n\t\t\tarr1[i] = i\n\t\t}\n\t\tfmt.Println(arr1)\n\n\t\tarr1 = append(arr1, 5, 6, 7, 8)\n\t\tfmt.Println(\"Capacity:\", cap(arr1), \"Length:\", len(arr1))\n\t\tfmt.Println(arr1)\n\t}\n```\n输出结果为\n```\n\t[0 1 2 3 4]\n\tCapacity: 10 Length: 9\n\t[0 1 2 3 4 5 6 7 8]\n```\n这里我们初始化arr1为容量10，长度为5的切片，然后为前面的5个元素赋值。然后输出结果。然后我们再使用Go内置方法append来为arr1追加四个元素，这个时候再看一下arr1的容量和长度以及切片元素，我们发现切片的长度确实变了。\n\n另外我们再用`append`方法给arr1多追加几个元素，试图超过arr1原来定义的容量大小。\n```go\n\tpackage main\n\n\timport (\n\t\t\"fmt\"\n\t)\n\n\tfunc main() {\n\t\tvar arr1 = make([]int, 5, 10)\n\t\tfor i := 0; i < len(arr1); i++ {\n\t\t\tarr1[i] = i\n\t\t}\n\n\t\tarr1 = append(arr1, 5, 6, 7, 8, 9, 10)\n\t\tfmt.Println(\"Capacity:\", cap(arr1), \"Length:\", len(arr1))\n\t\tfmt.Println(arr1)\n\t}\n```\n输出结果为\n```\n\tCapacity: 20 Length: 11\n\t[0 1 2 3 4 5 6 7 8 9 10]\n```\n我们发现arr1的长度变为11，因为元素个数现在为11个。另外我们发现arr1的容量也变了，变为原来的两倍。这是因为`Go在默认的情况下，如果追加的元素超过了容量大小，Go会自动地重新为切片分配容量，容量大小为原来的两倍`。\n\n上面我们介绍了，可以`使用append函数给切片增加元素`，现在我们再来介绍一个`copy函数用来从一个切片拷贝元素到另一个切片`。\n```go\n\tpackage main\n\n\timport (\n\t\t\"fmt\"\n\t)\n\n\tfunc main() {\n\t\tslice1 := []int{1, 2, 3, 4, 5, 6}\n\t\tslice2 := make([]int, 5, 10)\n\t\tcopy(slice2, slice1)\n\t\tfmt.Println(slice1)\n\t\tfmt.Println(slice2)\n\t}\n```\n输出结果\n```\n\t[1 2 3 4 5 6]\n\t[1 2 3 4 5]\n```\n在上面的例子中，我们将slice1的元素拷贝到slice2，因为slice2的长度为5，所以最多拷贝5个元素。\n\n总结一下，数组和切片的区别就在于`[]`里面是否有数字或者`...`。因为数值长度是固定的，而切片是可变的。\n\n\n## 字典(Map)\n\n字典是一组`无序的`，`键值对`的`集合`。\n\n字典也叫做`关联数组`，因为数组通过`索引`来查找元素，而字典通过`键`来查找元素。当然，很显然的，字典的键是不能重复的。如果试图赋值给同一个键，后赋值的值将覆盖前面赋值的值。\n\n字典的定义也有两种，一种是`初始化数据`的定义方式，另一种是`使用神奇的make函数`来定义。\n```go\n\tpackage main\n\n\timport (\n\t\t\"fmt\"\n\t)\n\n\tfunc main() {\n\t\tvar x = map[string]string{\n\t\t\t\"A\": \"Apple\",\n\t\t\t\"B\": \"Banana\",\n\t\t\t\"O\": \"Orange\",\n\t\t\t\"P\": \"Pear\",\n\t\t}\n\n\t\tfor key, val := range x {\n\t\t\tfmt.Println(\"Key:\", key, \"Value:\", val)\n\t\t}\n\t}\n```\n输出结果为\n```\n\tKey: A Value: Apple\n\tKey: B Value: Banana\n\tKey: O Value: Orange\n\tKey: P Value: Pear\n```\n在上面的例子中，我们定义了一个string:string的字典，其中`[]`之间的是键类型，右边的是值类型。另外我们还看到了`range函数，此函数一样神奇，可以用来迭代字典元素，返回key:value键值对`。当然如果你对键或者值不感兴趣，一样可以使用`下划线(_)`来忽略返回值。\n\n```go\n\tpackage main\n\n\timport (\n\t\t\"fmt\"\n\t)\n\n\tfunc main() {\n\t\tvar x map[string]string\n\n\t\tx = make(map[string]string)\n\n\t\tx[\"A\"] = \"Apple\"\n\t\tx[\"B\"] = \"Banana\"\n\t\tx[\"O\"] = \"Orange\"\n\t\tx[\"P\"] = \"Pear\"\n\n\t\tfor key, val := range x {\n\t\t\tfmt.Println(\"Key:\", key, \"Value:\", val)\n\t\t}\n\t}\n```\n上面的方式就是使用了make函数来初始化字典，`试图为未经过初始化的字典添加元素会导致运行错误`，你可以把使用make函数初始化的那一行注释掉，然后看一下。\n\n当然上面的例子中，我们可以把定义和初始化合成一句。\n```go\n\tpackage main\n\n\timport (\n\t\t\"fmt\"\n\t)\n\n\tfunc main() {\n\t\tx := make(map[string]string)\n\n\t\tx[\"A\"] = \"Apple\"\n\t\tx[\"B\"] = \"Banana\"\n\t\tx[\"O\"] = \"Orange\"\n\t\tx[\"P\"] = \"Pear\"\n\n\t\tfor key, val := range x {\n\t\t\tfmt.Println(\"Key:\", key, \"Value:\", val)\n\t\t}\n\t}\n```\n现在我们再来看一下字典的数据访问方式。如果你访问的元素所对应的键存在于字典中，那么没有问题，如果不存在呢？\n\n这个时候会返回零值。对于字符串零值就是\"\"，对于整数零值就是0。但是对于下面的例子：\n```go\n\tpackage main\n\n\timport (\n\t\t\"fmt\"\n\t)\n\n\tfunc main() {\n\t\tx := make(map[string]int)\n\n\t\tx[\"A\"] = 0\n\t\tx[\"B\"] = 20\n\t\tx[\"O\"] = 30\n\t\tx[\"P\"] = 40\n\n\t\tfmt.Println(x[\"C\"])\n\t}\n```\n在这个例子中，很显然不存在键C，但是程序的输出结果为0，这样就和键A对应的值混淆了。\n\nGo提供了一种方法来解决这个问题：\n```go\n\tpackage main\n\n\timport (\n\t\t\"fmt\"\n\t)\n\n\tfunc main() {\n\t\tx := make(map[string]int)\n\n\t\tx[\"A\"] = 0\n\t\tx[\"B\"] = 20\n\t\tx[\"O\"] = 30\n\t\tx[\"P\"] = 40\n\n\t\tif val, ok := x[\"C\"]; ok {\n\t\t\tfmt.Println(val)\n\t\t}\n\t}\n```\n上面的例子中，我们可以看到事实上使用`x[\"C\"]`的返回值有两个，一个是值，另一个是是否存在此键的bool型变量，所以我们看到ok为true的时候就输出键C的值，如果ok为false，那就是字典中不存在这个键。\n\n现在我们再来看看`Go提供的内置函数delete，这个函数可以用来从字典中删除元素`。\n```go\n\tpackage main\n\n\timport (\n\t\t\"fmt\"\n\t)\n\n\tfunc main() {\n\t\tx := make(map[string]int)\n\n\t\tx[\"A\"] = 10\n\t\tx[\"B\"] = 20\n\t\tx[\"C\"] = 30\n\t\tx[\"D\"] = 40\n\n\t\tfmt.Println(\"Before Delete\")\n\t\tfmt.Println(\"Length:\", len(x))\n\t\tfmt.Println(x)\n\n\t\tdelete(x, \"A\")\n\n\t\tfmt.Println(\"After Delete\")\n\t\tfmt.Println(\"Length:\", len(x))\n\t\tfmt.Println(x)\n\t}\n```\n输出结果为\n```\n\tBefore Delete\n\tLength: 4\n\tmap[A:10 B:20 C:30 D:40]\n\tAfter Delete\n\tLength: 3\n\tmap[B:20 C:30 D:40]\n```\n我们在删除元素前查看一下字典长度和元素，删除之后再看一下。这里面我们还可以看到`len函数也可以用来获取字典的元素个数`。当然如果你试图删除一个不存在的键，那么程序也不会报错，只是不会对字典造成任何影响。\n\n最后我们再用一个稍微复杂的例子来结束字典的介绍。\n\n我们有一个学生登记表，登记表里面有一组学号，每个学号对应一个学生，每个学生有名字和年龄。\n```go\n\tpackage main\n\n\timport (\n\t\t\"fmt\"\n\t)\n\n\tfunc main() {\n\t\tvar facebook = make(map[string]map[string]int)\n\t\tfacebook[\"0616020432\"] = map[string]int{\"Jemy\": 25}\n\t\tfacebook[\"0616020433\"] = map[string]int{\"Andy\": 23}\n\t\tfacebook[\"0616020434\"] = map[string]int{\"Bill\": 22}\n\n\t\tfor stu_no, stu_info := range facebook {\n\t\t\tfmt.Println(\"Student:\", stu_no)\n\t\t\tfor name, age := range stu_info {\n\t\t\t\tfmt.Println(\"Name:\", name, \"Age:\", age)\n\t\t\t}\n\t\t\tfmt.Println()\n\t\t}\n\t}\n```\n输出结果为\n```\n\tStudent: 0616020432\n\tName Jemy Age 25\n\n\tStudent: 0616020433\n\tName Andy Age 23\n\n\tStudent: 0616020434\n\tName Bill Age 22\n```\n当然我们也可以用初始化的方式定义字典：\n```go\n\tpackage main\n\n\timport (\n\t\t\"fmt\"\n\t)\n\n\tfunc main() {\n\t\tvar facebook = map[string]map[string]int{\n\t\t\t\"0616020432\": {\"Jemy\": 25},\n\t\t\t\"0616020433\": {\"Andy\": 23},\n\t\t\t\"0616020434\": {\"Bill\": 22},\n\t\t}\n\n\t\tfor stu_no, stu_info := range facebook {\n\t\t\tfmt.Println(\"Student:\", stu_no)\n\t\t\tfor name, age := range stu_info {\n\t\t\t\tfmt.Println(\"Name:\", name, \"Age:\", age)\n\t\t\t}\n\t\t\tfmt.Println()\n\t\t}\n\t}\n```\n\n输出结果是一样的。\n\n","slug":"goeasylearn1","published":1,"updated":"2018-01-02T00:50:36.835Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjbwxj0yt000kh0vowosdvt8e","content":"<h1 id=\"Go语言内置基础数据类型\"><a href=\"#Go语言内置基础数据类型\" class=\"headerlink\" title=\"Go语言内置基础数据类型\"></a>Go语言内置基础数据类型</h1><p>在自然界里面，有猫，有狗，有猪。有各种动物。每种动物都是不同的。<br>比如猫会喵喵叫，狗会旺旺叫，猪会哼哼叫。。。<br>Stop!!!<br>好了，大家毕竟不是幼儿园的小朋友。介绍到这里就可以了。<br><a id=\"more\"></a><br>论点就是每个东西都有自己归属的类别(Type)。<br>那么在Go语言里面，每个变量也都是有类别的，这种类别叫做<code>数据类型(Data Type)</code>。<br>Go的数据类型有两种：一种是<code>语言内置的数据类型</code>，另外一种是<code>通过语言提供的自定义数据类型方法自己定义的自定义数据类型</code>。</p>\n<p>先看看语言<code>内置的基础数据类型</code></p>\n<h2 id=\"数值型-Number\"><a href=\"#数值型-Number\" class=\"headerlink\" title=\"数值型(Number)\"></a>数值型(Number)</h2><p>数值型有<code>三种</code>，一种是<code>整数类型</code>，另外一种是<code>带小数的类型</code>(一般计算机里面叫做<code>浮点数类型</code>)，还有一种<code>虚数类型</code>。  </p>\n<p>整数类型不用说了，和数学里面的是一样的。和数学里面不同的地方在于计算机里面<code>正整数和零</code>统称为<code>无符号整型</code>，而<code>负整数</code>则称为<code>有符号整型</code>。  </p>\n<p>Go的内置整型有<code>uint8</code>, <code>uint16</code>, <code>uint32</code>, <code>uint64</code>, <code>int8</code>, <code>int16</code>, <code>int32</code>和<code>int64</code>。其中<code>u</code>开头的类型就是<code>无符号整型</code>。无符号类型能够表示正整数和零。而有符号类型除了能够表示正整数和零外，还可以表示负整数。<br>另外还有一些别名类型，比如<code>byte</code>类型，这个类型和<code>uint8</code>是一样的，表示<code>字节类型</code>。另外一个是<code>rune类型</code>，这个类型和<code>int32</code>是一样的，用来表示<code>unicode的代码点</code>，就是unicode字符所对应的整数。</p>\n<p>Go还定义了三个<code>依赖系统</code>的类型，<code>uint</code>，<code>int</code>和<code>uintptr</code>。因为在32位系统和64位系统上用来表示这些类型的位数是不一样的。</p>\n<p><em>对于32位系统</em></p>\n<p>uint=uint32<br>int=int32<br>uintptr为32位的指针  </p>\n<p><em>对于64位系统</em></p>\n<p>uint=uint64<br>int=int64<br>uintptr为64位的指针  </p>\n<p>至于类型后面跟的数字8，16，32或是64则表示用来表示这个类型的位不同，<code>位越多，能表示的整数范围越大</code>。<br>比如对于用N位来表示的整数，如果是<code>有符号的整数</code>，能够表示的整数范围为<code>-2^(N-1) ~ 2^(N-1)－1</code>；如果是<code>无符号的整数</code>，则能表示的整数范围为<code>0 ～ 2^N</code>。</p>\n<p>Go的浮点数类型有两种，<code>float32</code>和<code>float64</code>。float32又叫<code>单精度浮点型</code>，float64又叫做<code>双精度浮点型</code>。其<code>最主要的区别就是小数点后面能跟的小数位数不同</code>。</p>\n<p>另外Go还有两个其他语言所没有的类型，<code>虚数类型</code>。<code>complex64</code>和<code>complex128</code>。</p>\n<p>对于数值类型，其所共有的操作为<code>加法(＋)</code>，<code>减法(－)</code>，<code>乘法(＊)</code>和<code>除法(/)</code>。另外对于<code>整数类型</code>，还定义了<code>求余运算(%)</code></p>\n<p>求余运算为整型所独有。如果对浮点数使用求余，比如这样<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">    <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> a <span class=\"keyword\">float64</span> = <span class=\"number\">12</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> b <span class=\"keyword\">float64</span> = <span class=\"number\">3</span></span><br><span class=\"line\"></span><br><span class=\"line\">    fmt.Println(a % b)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>编译时候会报错</p>\n<pre><code>invalid operation: a % b (operator % not defined on float64)\n</code></pre><p>所以，这里我们可以知道所谓的<code>数据类型有两层意思</code>，一个是定义了<code>该类型所能表示的数</code>，另一个是定义了<code>该类型所能进行的操作</code>。<br>简单地说，对于一只小狗，你能想到的一定是狗的面貌和它会汪汪叫，而不是猫的面容和喵喵叫。</p>\n<h2 id=\"字符串类型-String\"><a href=\"#字符串类型-String\" class=\"headerlink\" title=\"字符串类型(String)\"></a>字符串类型(String)</h2><p>字符串就是一串固定长度的字符连接起来的字符序列。Go的字符串是由<code>单个字节</code>连接起来的。（对于汉字，通常由多个字节组成）。这就是说，传统的字符串是由字符组成的，而<code>Go的字符串不同</code>，是<code>由字节组成</code>的。这一点需要注意。</p>\n<p>字符串的表示很简单。用(双引号””)或者(``号)来描述。</p>\n<pre><code>&quot;hello world&quot;\n</code></pre><p>或者</p>\n<pre><code>`hello world`\n</code></pre><p>唯一的区别是，<strong>双引号之间的转义字符会被转义，而``号之间的转义字符保持原样不变</strong>。<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">    <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> a = <span class=\"string\">\"hello \\n world\"</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> b = <span class=\"string\">`hello \\n world`</span></span><br><span class=\"line\"></span><br><span class=\"line\">    fmt.Println(a)</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">\"----------\"</span>)</span><br><span class=\"line\">    fmt.Println(b)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>输出结果为<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hello </span><br><span class=\"line\"> world</span><br><span class=\"line\">----------</span><br><span class=\"line\">hello \\n world</span><br></pre></td></tr></table></figure></p>\n<p>字符串所能进行的一些基本操作包括:<br>（1）<code>获取字符长度</code><br>（2）<code>获取字符串中单个字节</code><br>（3）<code>字符串连接</code><br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">    <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> a <span class=\"keyword\">string</span> = <span class=\"string\">\"hello\"</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> b <span class=\"keyword\">string</span> = <span class=\"string\">\"world\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">    fmt.Println(<span class=\"built_in\">len</span>(a))</span><br><span class=\"line\">    fmt.Println(a[<span class=\"number\">1</span>])</span><br><span class=\"line\">    fmt.Println(a + b)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>输出如下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">5</span><br><span class=\"line\">101</span><br><span class=\"line\">helloworld</span><br></pre></td></tr></table></figure></p>\n<p>这里我们看到a[1]得到的是一个整数，这就证明了上面<code>&quot;Go的字符串是由字节组成的这句话&quot;</code>。我们还可以再验证一下。<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> a <span class=\"keyword\">string</span> = <span class=\"string\">\"你\"</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> b <span class=\"keyword\">string</span> = <span class=\"string\">\"好\"</span></span><br><span class=\"line\">\tfmt.Println(<span class=\"built_in\">len</span>(a))</span><br><span class=\"line\">\tfmt.Println(<span class=\"built_in\">len</span>(b))</span><br><span class=\"line\">\tfmt.Println(<span class=\"built_in\">len</span>(a + b))</span><br><span class=\"line\">\tfmt.Println(a[<span class=\"number\">0</span>])</span><br><span class=\"line\">\tfmt.Println(a[<span class=\"number\">1</span>])</span><br><span class=\"line\">\tfmt.Println(a[<span class=\"number\">2</span>])</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>输出<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">3</span><br><span class=\"line\">3</span><br><span class=\"line\">6</span><br><span class=\"line\">228</span><br><span class=\"line\">189</span><br><span class=\"line\">160</span><br></pre></td></tr></table></figure></p>\n<p>我们开始的时候，从上面的三行输出知道，”你”和”好”分别是用三个字节组成的。我们依次获取a的三个字节，输出，得到结果。</p>\n<h2 id=\"布尔型-Bool\"><a href=\"#布尔型-Bool\" class=\"headerlink\" title=\"布尔型(Bool)\"></a>布尔型(Bool)</h2><p>布尔型是表示<code>真值</code>和<code>假值</code>的类型。可选值为<code>true</code>和<code>false</code>。</p>\n<p>所能进行的操作如下：<br><code>&amp;&amp; and 与</code><br><code>|| or 或</code><br><code>!  not 非</code></p>\n<p>Go的布尔型取值<code>就是true</code>或<code>false</code>。<code>任何空值(nil)或者零值(0, 0.0, &quot;&quot;)都不能作为布尔型来直接判断</code>。<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">   \t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">   \t<span class=\"keyword\">var</span> equal <span class=\"keyword\">bool</span></span><br><span class=\"line\">   \t<span class=\"keyword\">var</span> a <span class=\"keyword\">int</span> = <span class=\"number\">10</span></span><br><span class=\"line\">   \t<span class=\"keyword\">var</span> b <span class=\"keyword\">int</span> = <span class=\"number\">20</span></span><br><span class=\"line\">   \tequal = (a == b)</span><br><span class=\"line\">   \tfmt.Println(equal)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>输出结果</p>\n<pre><code>false\n</code></pre><p>下面是错误的用法<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">   \t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">   \t<span class=\"keyword\">if</span> <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">       \tfmt.Println(<span class=\"string\">\"hello world\"</span>)</span><br><span class=\"line\">   \t&#125;</span><br><span class=\"line\">   \t<span class=\"keyword\">if</span> <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">       \tfmt.Println(<span class=\"string\">\"hello world\"</span>)</span><br><span class=\"line\">   \t&#125;</span><br><span class=\"line\">   \t<span class=\"keyword\">if</span> <span class=\"string\">\"\"</span> &#123;</span><br><span class=\"line\">    \t\tfmt.Println(<span class=\"string\">\"hello world\"</span>)</span><br><span class=\"line\">   \t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>编译错误<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./t.go:8: non-bool 0 (type untyped number) used as if condition</span><br><span class=\"line\">./t.go:11: non-bool nil used as if condition</span><br><span class=\"line\">./t.go:14: non-bool &quot;&quot; (type untyped string) used as if condition</span><br></pre></td></tr></table></figure></p>\n<p>上面介绍的是Go语言内置的基础数据类型。</p>\n<h1 id=\"变量和常量定义\"><a href=\"#变量和常量定义\" class=\"headerlink\" title=\"变量和常量定义\"></a>变量和常量定义</h1><p>现在我们讨论一下Go语言的变量定义。</p>\n<h2 id=\"变量定义\"><a href=\"#变量定义\" class=\"headerlink\" title=\"变量定义\"></a>变量定义</h2><p>所谓的变量就是一个拥有指定<code>名称</code>和<code>类型</code>的<code>数据存储位置</code>。<br>在上面我们使用过变量的定义，现在我们来仔细看一个例子。<br> <figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> x <span class=\"keyword\">string</span> = <span class=\"string\">\"hello world\"</span></span><br><span class=\"line\">\tfmt.Println(x)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>变量的定义首先使用<code>var</code>关键字，然后指定变量的名称<code>x</code>，再指定变量的类型<code>string</code>，在本例中，还对变量<code>x</code>进行了赋值，然后在命令行输出该变量。Go这种变量定义的方式和其他的语言有些不同，但是在使用的过程中，你会逐渐喜欢的。当然上面的变量定义方式还可以如下，即先定义变量，再赋值。<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> x <span class=\"keyword\">string</span></span><br><span class=\"line\">\tx = <span class=\"string\">\"hello world\"</span></span><br><span class=\"line\">\tfmt.Println(x)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>或者是直接赋值，让Go语言推断变量的类型。如下：<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> x = <span class=\"string\">\"hello world\"</span></span><br><span class=\"line\">\tfmt.Println(x)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>当然，上面变量的定义还有一种<code>快捷方式</code>。如果你知道变量的初始值，完全可以像下面这样定义变量，完全让<code>Go来推断语言的类型</code>。这种定义的方式连关键字<code>var</code>都省略掉了。<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tx := <span class=\"string\">\"hello world\"</span></span><br><span class=\"line\">\tfmt.Println(x)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>注意：上面这种使用<code>:=</code>方式定义变量的方式<code>只能用在函数内部</code>。<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">x:=<span class=\"string\">\"hello world\"</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\ty := <span class=\"number\">10</span></span><br><span class=\"line\">\tfmt.Println(x)</span><br><span class=\"line\">\tfmt.Println(y)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>对于上面的变量定义x是无效的。会导致编译错误：</p>\n<pre><code>./test_var_quick.go:7: non-declaration statement outside function body\n</code></pre><p>不过我们对上面的例子做下修改，比如这样是可以的。也就是使用var关键字定义的时候，如果给出初始值，就不需要显式指定变量类型。<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> x = <span class=\"string\">\"hello world\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\ty := <span class=\"number\">10</span></span><br><span class=\"line\">\tfmt.Println(x)</span><br><span class=\"line\">\tfmt.Println(y)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><code>变量</code>之所以称为变量，就是因为<code>它们的值在程序运行过程中可以发生变化</code>，但是<code>它们的变量类型是无法改变的</code>。因为<code>Go语言是静态语言</code>，并<code>不支持</code>程序运行过程中<code>变量类型发生变化</code>。比如如果你强行将一个字符串值赋值给定义为int的变量，那么会发生编译错误。即使是强制类型转换也是不可以的。<code>强制类型转换只支持同类的变量类型</code>。比如数值类型之间强制转换。</p>\n<p>下面我们看几个例子：<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> x <span class=\"keyword\">string</span> = <span class=\"string\">\"hello world\"</span></span><br><span class=\"line\">\tfmt.Println(x)</span><br><span class=\"line\">\tx = <span class=\"string\">\"i love go language\"</span></span><br><span class=\"line\">\tfmt.Println(x)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>本例子演示变量的值在程序运行过程中发生变化，结果输出为<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hello world</span><br><span class=\"line\">i love go language</span><br></pre></td></tr></table></figure></p>\n<p>我们尝试不同类型的变量之间转换<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> x <span class=\"keyword\">string</span> = <span class=\"string\">\"hello world\"</span></span><br><span class=\"line\">\tfmt.Println(x)</span><br><span class=\"line\">\tx = <span class=\"number\">11</span></span><br><span class=\"line\">\tfmt.Println(x)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>在本例子中，如果试图将一个数值赋予字符串变量x，那么会发生错误：</p>\n<pre><code>./test_var.go:10: cannot use 11 (type int) as type string in assignment\n</code></pre><p>上面的意思就是无法将整型数值11当作字符串赋予给字符串变量。</p>\n<p>但是同类的变量之间是可以强制转换的，如浮点型和整型之间的转换。<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> x <span class=\"keyword\">float64</span> = <span class=\"number\">32.35</span></span><br><span class=\"line\">\tfmt.Println(x)</span><br><span class=\"line\">\tfmt.Println(<span class=\"keyword\">int</span>(x))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>输出的结果为<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">32.35   </span><br><span class=\"line\">32</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"变量命名\"><a href=\"#变量命名\" class=\"headerlink\" title=\"变量命名\"></a>变量命名</h2><p>上面我们看了一些变量的使用方法，那么定义一个变量名称，有哪些要求呢？<br>这里我们要注意，<code>Go的变量名称必须以字母或下划线(_)开头，后面可以跟字母，数字，或者下划线(_)</code>。除此之外，Go语言并不关心你如何定义变量。我们通用的做法是定义一个用户友好的变量。假设你需要定义一个狗狗的年龄，那么使用dog_age作为变量名称要好于用x来定义变量。</p>\n<h2 id=\"变量作用域\"><a href=\"#变量作用域\" class=\"headerlink\" title=\"变量作用域\"></a>变量作用域</h2><p>现在我们再来讨论一下变量的作用域。所谓作用域就是可以有效访问变量的区域。比如很简单的，你不可能在一个函数func_a里面访问另一个函数func_b里面定义的局部变量x。所以变量的作用域目前分为两类，一个是<code>全局变量</code>，另一个是<code>局部变量</code>。下面我们看个全局变量的例子：<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> x <span class=\"keyword\">string</span> = <span class=\"string\">\"hello world\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tfmt.Println(x)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这里变量x定义在main函数之外，但是main函数仍然可以访问x。全局变量的作用域是该包中所有的函数。<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> x <span class=\"keyword\">string</span> = <span class=\"string\">\"hello world\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">change</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tx = <span class=\"string\">\"i love go\"</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tfmt.Println(x)</span><br><span class=\"line\">\tchange()</span><br><span class=\"line\">\tfmt.Println(x)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>在上面的例子用，我们用了change函数改变了x的值。输出结果如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hello world</span><br><span class=\"line\">i love go</span><br></pre></td></tr></table></figure></p>\n<p>我们再看一下局部变量的例子。<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">change</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tx := <span class=\"string\">\"i love go\"</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tfmt.Println(x)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>该例子中main函数试图访问change函数中定义的局部变量x，结果发生了下面的错误(未定义的变量x)：</p>\n<pre><code>./test_var.go:11: undefined: x\n</code></pre><h2 id=\"常量\"><a href=\"#常量\" class=\"headerlink\" title=\"常量\"></a>常量</h2><p>Go语言也支持常量定义。所谓<code>常量就是在程序运行过程中保持值不变的变量定义</code>。常量的定义和变量类似，只是用<code>const</code>关键字替换了var关键字，另外常量在定义的时候<code>必须有初始值</code>。<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> x <span class=\"keyword\">string</span> = <span class=\"string\">\"hello world\"</span></span><br><span class=\"line\">\t<span class=\"keyword\">const</span> y = <span class=\"string\">\"hello world\"</span></span><br><span class=\"line\">\tfmt.Println(x)</span><br><span class=\"line\">\tfmt.Println(y)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这里有一点需要注意，变量定义的类型推断方式<code>:=</code>不能够用来定义常量。因为常量的值是在编译的时候就已经确定的，但是变量的值则是运行的时候才使用的。这样常量定义就无法使用变量类型推断的方式了。</p>\n<p>常量的值在运行过程中是无法改变的，强制改变常量的值是无效的。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> x <span class=\"keyword\">string</span> = <span class=\"string\">\"hello world\"</span></span><br><span class=\"line\">\tfmt.Println(x)</span><br><span class=\"line\">\tx = <span class=\"string\">\"i love go language\"</span></span><br><span class=\"line\">\tfmt.Println(x)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>比如上面的例子就会报错</p>\n<pre><code>./test_var.go:10: cannot assign to x\n</code></pre><p>我们再看一个Go包math里面定义的常量Pi，用它来求圆的面积。<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"math\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> radius <span class=\"keyword\">float64</span> = <span class=\"number\">10</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> area = math.Pow(radius, <span class=\"number\">2</span>) * math.Pi</span><br><span class=\"line\">\tfmt.Println(area)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"多变量或常量定义\"><a href=\"#多变量或常量定义\" class=\"headerlink\" title=\"多变量或常量定义\"></a>多变量或常量定义</h2><p>Go还提供了一种<code>同时定义多个变量或者常量</code>的快捷方式。<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> (</span><br><span class=\"line\">\t\ta <span class=\"keyword\">int</span>     = <span class=\"number\">10</span></span><br><span class=\"line\">\t\tb <span class=\"keyword\">float64</span> = <span class=\"number\">32.45</span></span><br><span class=\"line\">\t\tc <span class=\"keyword\">bool</span>    = <span class=\"literal\">true</span></span><br><span class=\"line\">\t)</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> (</span><br><span class=\"line\">\t\tPi   <span class=\"keyword\">float64</span> = <span class=\"number\">3.14</span></span><br><span class=\"line\">\t\tTrue <span class=\"keyword\">bool</span>    = <span class=\"literal\">true</span></span><br><span class=\"line\">\t)</span><br><span class=\"line\"></span><br><span class=\"line\">\tfmt.Println(a, b, c)</span><br><span class=\"line\">\tfmt.Println(Pi, True)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"程序控制结构\"><a href=\"#程序控制结构\" class=\"headerlink\" title=\"程序控制结构\"></a>程序控制结构</h1><p>虽然剧透可耻，但是为了体现Go语言的设计简洁之处，必须要先剧透一下。</p>\n<p>Go语言的控制结构关键字只有</p>\n<p><code>if..else if..else</code>，<code>for</code> 和 <code>switch</code>。</p>\n<p>而且在Go中，为了避免格式化战争，对程序结构做了统一的强制的规定。看下下面的例子。</p>\n<p>请比较一下A程序和B程序的不同之处。</p>\n<p><strong>A程序</strong><br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"hello world\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong>B程序</strong><br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"hello world\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>还记得我们前面的例子中，<code>{}</code>的格式是怎么样的么？在上面的两个例子中只有A例的写法是对的。因为在Go语言中，强制了<code>{}</code>的格式。如果我们试图去编译B程序，那么会发生如下的错误提示。</p>\n<pre><code>./test_format.go:9: syntax error: unexpected semicolon or newline before {\n</code></pre><h2 id=\"if-else-if-else\"><a href=\"#if-else-if-else\" class=\"headerlink\" title=\"if..else if..else\"></a>if..else if..else</h2><p>if..else if..else 用来判断一个或者多个条件，然后根据条件的结果执行不同的程序块。举个简单的例子。<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> dog_age = <span class=\"number\">10</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> dog_age &gt; <span class=\"number\">10</span> &#123;</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">\"A big dog\"</span>)</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> dog_age &gt; <span class=\"number\">1</span> &amp;&amp; dog_age &lt;= <span class=\"number\">10</span> &#123;</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">\"A small dog\"</span>)</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">\"A baby dog\"</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>上面的例子判断狗狗的年龄如果<code>(if)</code>大于10就是一个大狗；否则判断<code>(else if)</code>狗狗的年龄是否小于等于10且大于1，这个时候狗狗是小狗狗。否则<code>(else)</code>的话（就是默认狗狗的年龄小于等于1岁），那么狗狗是Baby狗狗。</p>\n<p>在上面的例子中，我们还可以发现Go的if..else if..else语句的判断条件一般都不需要使用<code>()</code>。当然如果你还是愿意写，也是对的。另外如果为了将某两个或多个条件绑定在一起判断的话，还是需要括号<code>()</code>的。</p>\n<p>比如下面的例子也是对的。<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> Male = <span class=\"string\">'M'</span></span><br><span class=\"line\">\t<span class=\"keyword\">const</span> Female = <span class=\"string\">'F'</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> dog_age = <span class=\"number\">10</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> dog_sex = <span class=\"string\">'M'</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (dog_age == <span class=\"number\">10</span> &amp;&amp; dog_sex == <span class=\"string\">'M'</span>) &#123;</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">\"dog\"</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>但是如果你使用Go提供的格式化工具来格式化这段代码的话，Go会智能判断你的括号是否必须有，否则的话，会帮你去掉的。你可以试试。</p>\n<pre><code>go fmt test_bracket.go\n</code></pre><p>然后你会发现，咦？！果真被去掉了。</p>\n<p>另外因为每个判断条件的结果要么是true要么是false，所以可以使用<code>&amp;&amp;</code>，<code>||</code>来连接不同的条件。使用<code>!</code>来对一个条件取反。</p>\n<h2 id=\"switch\"><a href=\"#switch\" class=\"headerlink\" title=\"switch\"></a>switch</h2><p>switch的出现是为了解决某些情况下使用if判断语句带来的繁琐之处。</p>\n<p>例如下面的例子：<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">//score 为 [0,100]之间的整数</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> score <span class=\"keyword\">int</span> = <span class=\"number\">69</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> score &gt;= <span class=\"number\">90</span> &amp;&amp; score &lt;= <span class=\"number\">100</span> &#123;</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">\"优秀\"</span>)</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> score &gt;= <span class=\"number\">80</span> &amp;&amp; score &lt; <span class=\"number\">90</span> &#123;</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">\"良好\"</span>)</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> score &gt;= <span class=\"number\">70</span> &amp;&amp; score &lt; <span class=\"number\">80</span> &#123;</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">\"一般\"</span>)</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> score &gt;= <span class=\"number\">60</span> &amp;&amp; score &lt; <span class=\"number\">70</span> &#123;</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">\"及格\"</span>)</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">\"不及格\"</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>在上面的例子中，我们用if..else if..else来对分数进行分类。这个只是一般的情况下if判断条件的数量。如果if..else if..else的条件太多的话，我们可以使用switch来优化程序。比如上面的程序我们还可以这样写：<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">//score 为 [0,100]之间的整数</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> score <span class=\"keyword\">int</span> = <span class=\"number\">69</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">switch</span> score / <span class=\"number\">10</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> <span class=\"number\">10</span>:</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> <span class=\"number\">9</span>:</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">\"优秀\"</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> <span class=\"number\">8</span>:</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">\"良好\"</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> <span class=\"number\">7</span>:</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">\"一般\"</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> <span class=\"number\">6</span>:</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">\"及格\"</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">default</span>:</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">\"不及格\"</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>关于switch的几点说明如下：</p>\n<p>(1) switch的判断条件可以为任何数据类型。<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> dog_sex = <span class=\"string\">\"F\"</span></span><br><span class=\"line\">\t<span class=\"keyword\">switch</span> dog_sex &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> <span class=\"string\">\"M\"</span>:</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">\"A male dog\"</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> <span class=\"string\">\"F\"</span>:</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">\"A female dog\"</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>(2) 每个case后面跟的是一个完整的程序块，该程序块<code>不需要{}</code>，也<code>不需要break结尾</code>，因为每个case都是独立的。</p>\n<p>(3) 可以为switch提供一个默认选项default，在上面所有的case都没有满足的情况下，默认执行default后面的语句。</p>\n<h2 id=\"for\"><a href=\"#for\" class=\"headerlink\" title=\"for\"></a>for</h2><p>for用在Go语言的循环条件里面。比如说要你输出1…100之间的自然数。最笨的方法就是直接这样。<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tfmt.Println(<span class=\"number\">1</span>)</span><br><span class=\"line\">\tfmt.Println(<span class=\"number\">2</span>)</span><br><span class=\"line\">\t...</span><br><span class=\"line\">\tfmt.Println(<span class=\"number\">100</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这个不由地让我想起一个笑话。</p>\n<blockquote>\n<p>以前一个地主的儿子学习写字，只学了三天就把老师赶走了。因为在这三天里面他学写了一，二，三。他觉得写字真的太简单了，不就是画横线嘛。于是有一天老爹过寿，让他来记送礼的人名单。直到中午还没有记完，老爹很奇怪就去问他怎么了。他哭着说，“不知道这个人有什么毛病，姓什么不好，姓万”。</p>\n</blockquote>\n<p>哈哈，回来继续。我们看到上面的例子也是如地主的儿子那样就不好了。所以，我们必须使用循环结构。我们用for的循环语句来实现上面的例子。<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> i <span class=\"keyword\">int</span> = <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> ; i &lt;= <span class=\"number\">100</span>; i++ &#123;</span><br><span class=\"line\">\t\tfmt.Println(i)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>在上面的例子中，首先初始化变量i为1，然后在for循环里面判断是否小于等于100，如果是的话，输出i，然后再使用i++来将i的值自增1。上面的例子，还有一个更好的写法，就是将i的定义和初始化也放在for里面。如下：<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">1</span>; i &lt;= <span class=\"number\">100</span>; i++ &#123;</span><br><span class=\"line\">\t\tfmt.Println(i)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>在Go里面没有提供while关键字，如果你怀念while的写法也可以这样：<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> i <span class=\"keyword\">int</span> = <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i &lt;= <span class=\"number\">100</span> &#123;</span><br><span class=\"line\">\t\tfmt.Println(i)</span><br><span class=\"line\">\t\ti++</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>或许你会问，如果我要死循环呢？是不是<code>for true</code>？呵呵，不用了，直接这样。<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>&#123;</span><br><span class=\"line\">\t...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>以上就是Go提供的全部控制流程了。</p>\n<p>再复习一下，Go只提供了：</p>\n<p><strong>if</strong><br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> ...&#123;</span><br><span class=\"line\">\t...</span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ...&#123;</span><br><span class=\"line\">\t...</span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong>switch</strong><br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">switch</span>(...)&#123;</span><br><span class=\"line\"><span class=\"keyword\">case</span> ...:</span><br><span class=\"line\">\t\t ...</span><br><span class=\"line\"><span class=\"keyword\">case</span> ...:</span><br><span class=\"line\">\t\t ...</span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">default</span>:</span><br><span class=\"line\">\t\t  ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong>for</strong><br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> ...; ...; ...&#123;</span><br><span class=\"line\">\t...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> ...&#123;</span><br><span class=\"line\">\t...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span>&#123;</span><br><span class=\"line\">\t...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"数组，切片和字典\"><a href=\"#数组，切片和字典\" class=\"headerlink\" title=\"数组，切片和字典\"></a>数组，切片和字典</h1><p>在上面的章节里面，我们讲过Go内置的基本数据类型。现在我们来看一下Go内置的高级数据类型，数组，切片和字典。</p>\n<h2 id=\"数组-Array\"><a href=\"#数组-Array\" class=\"headerlink\" title=\"数组(Array)\"></a>数组(Array)</h2><p>数组是一个具有<code>相同数据类型</code>的元素组成的<code>固定长度</code>的<code>有序集合</code>。比如下面的例子</p>\n<pre><code>var x [5]int\n</code></pre><p>表示数组x是一个整型数组，而且数值的长度为5。</p>\n<p><code>Go提供了几种不同的数组定义方法。</code></p>\n<p><code>最基本的方式就是使用var关键字来定义，然后依次给元素赋值</code>。<code>对于没有赋值的元素，默认为零值</code>。比如对于整数，零值就是0，浮点数，零值就是0.0，字符串，零值就是””，对象零值就是nil。<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> x [<span class=\"number\">5</span>]<span class=\"keyword\">int</span></span><br><span class=\"line\">\tx[<span class=\"number\">0</span>] = <span class=\"number\">2</span></span><br><span class=\"line\">\tx[<span class=\"number\">1</span>] = <span class=\"number\">3</span></span><br><span class=\"line\">\tx[<span class=\"number\">2</span>] = <span class=\"number\">3</span></span><br><span class=\"line\">\tx[<span class=\"number\">3</span>] = <span class=\"number\">2</span></span><br><span class=\"line\">\tx[<span class=\"number\">4</span>] = <span class=\"number\">12</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> sum <span class=\"keyword\">int</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> _, elem := <span class=\"keyword\">range</span> x &#123;</span><br><span class=\"line\">\t\tsum += elem</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfmt.Println(sum)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>在上面的例子中，我们首先使用<code>var</code>关键字来声明，然后给出数组名称<code>x</code>，最后说明数组为整型数组，长度为5。然后我们使用索引方式给数组元素赋值。在上面的例子中，我们还使用了一种遍历数组元素的方法。该方法利用Go语言提供的内置函数range来遍历数组元素。<code>range函数可以用在数组，切片和字典上面</code>。当<code>range来遍历数组的时候返回数组的索引和元素值</code>。在这里我们是对数组元素求和，所以我们对索引不感兴趣。在Go语言里面，<code>当你对一个函数返回值不感兴趣的话，可以使用下划线(_)来替代它</code>。另外这里如果我们真的定义了一个索引，在循环结构里面却没有使用索引，Go语言编译的时候还是会报错的。所以用下划线来替代索引变量也是唯一之举了。最后我们输出数组元素的和。</p>\n<p>还有一种方式，如果知道了数组的初始值。可以像下面这样定义。<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> x = [<span class=\"number\">5</span>]<span class=\"keyword\">int</span>&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>&#125;</span><br><span class=\"line\">\tx[<span class=\"number\">4</span>] = <span class=\"number\">5</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> sum <span class=\"keyword\">int</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> _, i := <span class=\"keyword\">range</span> x &#123;</span><br><span class=\"line\">\t\tsum += i</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfmt.Println(sum)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>当然，即使你不知道数组元素的初始值，也可以使用这样的定义方式。<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> x = [<span class=\"number\">5</span>]<span class=\"keyword\">int</span>&#123;&#125;</span><br><span class=\"line\">\tx[<span class=\"number\">0</span>] = <span class=\"number\">1</span></span><br><span class=\"line\">\tx[<span class=\"number\">1</span>] = <span class=\"number\">2</span></span><br><span class=\"line\">\tx[<span class=\"number\">2</span>] = <span class=\"number\">3</span></span><br><span class=\"line\">\tx[<span class=\"number\">3</span>] = <span class=\"number\">4</span></span><br><span class=\"line\">\tx[<span class=\"number\">4</span>] = <span class=\"number\">5</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> sum <span class=\"keyword\">int</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> _, i := <span class=\"keyword\">range</span> x &#123;</span><br><span class=\"line\">\t\tsum += i</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfmt.Println(sum)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><code>在这里我们需要特别重视数组的一个特点，就是数组是有固定长度的。</code></p>\n<p>但是如果我们有的时候也可以不显式指定数组的长度，而是使用<code>...</code>来替代数组长度，Go语言会自动计算出数组的长度。不过这种方式定义的数组一定是有初始化的值的。<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> x = [...]<span class=\"keyword\">string</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"string\">\"Monday\"</span>,</span><br><span class=\"line\">\t\t<span class=\"string\">\"Tuesday\"</span>,</span><br><span class=\"line\">\t\t<span class=\"string\">\"Wednesday\"</span>,</span><br><span class=\"line\">\t\t<span class=\"string\">\"Thursday\"</span>,</span><br><span class=\"line\">\t\t<span class=\"string\">\"Friday\"</span>,</span><br><span class=\"line\">\t\t<span class=\"string\">\"Saturday\"</span>,</span><br><span class=\"line\">\t\t<span class=\"string\">\"Sunday\"</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> _, day := <span class=\"keyword\">range</span> x &#123;</span><br><span class=\"line\">\t\tfmt.Println(day)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>在上面的例子中，还需要注意一点就是如果将数组元素定义在不同行上面，那么最后一个元素后面必须跟上<code>}</code>或者<code>,</code>。上面的例子也可以是这样的。<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> x = [...]<span class=\"keyword\">string</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"string\">\"Monday\"</span>,</span><br><span class=\"line\">\t\t<span class=\"string\">\"Tuesday\"</span>,</span><br><span class=\"line\">\t\t<span class=\"string\">\"Wednesday\"</span>,</span><br><span class=\"line\">\t\t<span class=\"string\">\"Thursday\"</span>,</span><br><span class=\"line\">\t\t<span class=\"string\">\"Friday\"</span>,</span><br><span class=\"line\">\t\t<span class=\"string\">\"Saturday\"</span>,</span><br><span class=\"line\">\t\t<span class=\"string\">\"Sunday\"</span>,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> _, day := <span class=\"keyword\">range</span> x &#123;</span><br><span class=\"line\">\t\tfmt.Println(day)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><code>Go提供的这种可以自动计算数组长度的方法在调试程序的时候特别方便，假设我们注释掉上面数组x的最后一个元素，我们甚至不需要去修改数组的长度。</code></p>\n<h2 id=\"切片-Slice\"><a href=\"#切片-Slice\" class=\"headerlink\" title=\"切片(Slice)\"></a>切片(Slice)</h2><p>在上面我们说过数组是有固定长度的有序集合。这也就是说一旦数组长度定义，你将无法在数组里面多添加哪怕一个元素。数组的这种特点有的时候会成为很大的缺点，尤其是当数组的元素个数不确定的情况下。</p>\n<p>所以<code>切片</code>诞生了。</p>\n<p>切片和数组很类似，甚至你可以理解成数组的子集。但是<code>切片有一个数组所没有的特点，那就是切片的长度是可变的</code>。</p>\n<p>严格地讲，切片有<code>容量(capacity)</code>和<code>长度(length)</code>两个属性。</p>\n<p>首先我们来看一下切片的定义。切片有两种定义方式，一种是先声明一个变量是切片，然后使用内置函数make去初始化这个切片。另外一种是通过取数组切片来赋值。<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> x = <span class=\"built_in\">make</span>([]<span class=\"keyword\">float64</span>, <span class=\"number\">5</span>)</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"Capcity:\"</span>, <span class=\"built_in\">cap</span>(x), <span class=\"string\">\"Length:\"</span>, <span class=\"built_in\">len</span>(x))</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> y = <span class=\"built_in\">make</span>([]<span class=\"keyword\">float64</span>, <span class=\"number\">5</span>, <span class=\"number\">10</span>)</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"Capcity:\"</span>, <span class=\"built_in\">cap</span>(y), <span class=\"string\">\"Length:\"</span>, <span class=\"built_in\">len</span>(y))</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"built_in\">len</span>(x); i++ &#123;</span><br><span class=\"line\">\t\tx[i] = <span class=\"keyword\">float64</span>(i)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfmt.Println(x)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"built_in\">len</span>(y); i++ &#123;</span><br><span class=\"line\">\t\ty[i] = <span class=\"keyword\">float64</span>(i)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfmt.Println(y)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>输出结果为<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Capcity: 5 Length: 5</span><br><span class=\"line\">Capcity: 10 Length: 5</span><br><span class=\"line\">[0 1 2 3 4]</span><br><span class=\"line\">[0 1 2 3 4]</span><br></pre></td></tr></table></figure></p>\n<p>上面我们首先用make函数定义切片x，这个时候x的容量是5，长度也是5。然后使用make函数定义了切片y，这个时候y的容量是10，长度是5。然后我们再分别为切片x和y的元素赋值，最后输出。</p>\n<p>所以使用make函数定义切片的时候，有<code>两种方式</code>，一种<code>只指定长度，这个时候切片的长度和容量是相同的</code>。另外一种是<code>同时指定切片长度和容量</code>。虽然切片的容量可以大于长度，但是<code>赋值的时候要注意最大的索引仍然是len(x)－1</code>。否则会报索引超出边界错误。</p>\n<p>另外一种是通过数组切片赋值，采用<code>[low_index:high_index]</code>的方式获取数值切片，其中切片元素<code>包括low_index的元素</code>，但是<code>不包括high_index的元素</code>。<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> arr1 = [<span class=\"number\">5</span>]<span class=\"keyword\">int</span>&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> s1 = arr1[<span class=\"number\">2</span>:<span class=\"number\">3</span>]</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> s2 = arr1[:<span class=\"number\">3</span>]</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> s3 = arr1[<span class=\"number\">2</span>:]</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> s4 = arr1[:]</span><br><span class=\"line\">\tfmt.Println(s1)</span><br><span class=\"line\">\tfmt.Println(s2)</span><br><span class=\"line\">\tfmt.Println(s3)</span><br><span class=\"line\">\tfmt.Println(s4)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>输出结果为<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[3]</span><br><span class=\"line\">[1 2 3]</span><br><span class=\"line\">[3 4 5]</span><br><span class=\"line\">[1 2 3 4 5]</span><br></pre></td></tr></table></figure></p>\n<p>在上面的例子中，我们还省略了low_index或high_index。如果省略了low_index，那么等价于从索引0开始；如果省略了high_index，则默认high_index等于len(arr1)，即切片长度。</p>\n<p>这里为了体现切片的长度可以变化，我们看一下下面的例子：<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> arr1 = <span class=\"built_in\">make</span>([]<span class=\"keyword\">int</span>, <span class=\"number\">5</span>, <span class=\"number\">10</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"built_in\">len</span>(arr1); i++ &#123;</span><br><span class=\"line\">\t\tarr1[i] = i</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfmt.Println(arr1)</span><br><span class=\"line\"></span><br><span class=\"line\">\tarr1 = <span class=\"built_in\">append</span>(arr1, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>)</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"Capacity:\"</span>, <span class=\"built_in\">cap</span>(arr1), <span class=\"string\">\"Length:\"</span>, <span class=\"built_in\">len</span>(arr1))</span><br><span class=\"line\">\tfmt.Println(arr1)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>输出结果为<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[0 1 2 3 4]</span><br><span class=\"line\">Capacity: 10 Length: 9</span><br><span class=\"line\">[0 1 2 3 4 5 6 7 8]</span><br></pre></td></tr></table></figure></p>\n<p>这里我们初始化arr1为容量10，长度为5的切片，然后为前面的5个元素赋值。然后输出结果。然后我们再使用Go内置方法append来为arr1追加四个元素，这个时候再看一下arr1的容量和长度以及切片元素，我们发现切片的长度确实变了。</p>\n<p>另外我们再用<code>append</code>方法给arr1多追加几个元素，试图超过arr1原来定义的容量大小。<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> arr1 = <span class=\"built_in\">make</span>([]<span class=\"keyword\">int</span>, <span class=\"number\">5</span>, <span class=\"number\">10</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"built_in\">len</span>(arr1); i++ &#123;</span><br><span class=\"line\">\t\tarr1[i] = i</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tarr1 = <span class=\"built_in\">append</span>(arr1, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>, <span class=\"number\">10</span>)</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"Capacity:\"</span>, <span class=\"built_in\">cap</span>(arr1), <span class=\"string\">\"Length:\"</span>, <span class=\"built_in\">len</span>(arr1))</span><br><span class=\"line\">\tfmt.Println(arr1)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>输出结果为<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Capacity: 20 Length: 11</span><br><span class=\"line\">[0 1 2 3 4 5 6 7 8 9 10]</span><br></pre></td></tr></table></figure></p>\n<p>我们发现arr1的长度变为11，因为元素个数现在为11个。另外我们发现arr1的容量也变了，变为原来的两倍。这是因为<code>Go在默认的情况下，如果追加的元素超过了容量大小，Go会自动地重新为切片分配容量，容量大小为原来的两倍</code>。</p>\n<p>上面我们介绍了，可以<code>使用append函数给切片增加元素</code>，现在我们再来介绍一个<code>copy函数用来从一个切片拷贝元素到另一个切片</code>。<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tslice1 := []<span class=\"keyword\">int</span>&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>&#125;</span><br><span class=\"line\">\tslice2 := <span class=\"built_in\">make</span>([]<span class=\"keyword\">int</span>, <span class=\"number\">5</span>, <span class=\"number\">10</span>)</span><br><span class=\"line\">\t<span class=\"built_in\">copy</span>(slice2, slice1)</span><br><span class=\"line\">\tfmt.Println(slice1)</span><br><span class=\"line\">\tfmt.Println(slice2)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>输出结果<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[1 2 3 4 5 6]</span><br><span class=\"line\">[1 2 3 4 5]</span><br></pre></td></tr></table></figure></p>\n<p>在上面的例子中，我们将slice1的元素拷贝到slice2，因为slice2的长度为5，所以最多拷贝5个元素。</p>\n<p>总结一下，数组和切片的区别就在于<code>[]</code>里面是否有数字或者<code>...</code>。因为数值长度是固定的，而切片是可变的。</p>\n<h2 id=\"字典-Map\"><a href=\"#字典-Map\" class=\"headerlink\" title=\"字典(Map)\"></a>字典(Map)</h2><p>字典是一组<code>无序的</code>，<code>键值对</code>的<code>集合</code>。</p>\n<p>字典也叫做<code>关联数组</code>，因为数组通过<code>索引</code>来查找元素，而字典通过<code>键</code>来查找元素。当然，很显然的，字典的键是不能重复的。如果试图赋值给同一个键，后赋值的值将覆盖前面赋值的值。</p>\n<p>字典的定义也有两种，一种是<code>初始化数据</code>的定义方式，另一种是<code>使用神奇的make函数</code>来定义。<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> x = <span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">string</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"string\">\"A\"</span>: <span class=\"string\">\"Apple\"</span>,</span><br><span class=\"line\">\t\t<span class=\"string\">\"B\"</span>: <span class=\"string\">\"Banana\"</span>,</span><br><span class=\"line\">\t\t<span class=\"string\">\"O\"</span>: <span class=\"string\">\"Orange\"</span>,</span><br><span class=\"line\">\t\t<span class=\"string\">\"P\"</span>: <span class=\"string\">\"Pear\"</span>,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> key, val := <span class=\"keyword\">range</span> x &#123;</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">\"Key:\"</span>, key, <span class=\"string\">\"Value:\"</span>, val)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>输出结果为<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Key: A Value: Apple</span><br><span class=\"line\">Key: B Value: Banana</span><br><span class=\"line\">Key: O Value: Orange</span><br><span class=\"line\">Key: P Value: Pear</span><br></pre></td></tr></table></figure></p>\n<p>在上面的例子中，我们定义了一个string:string的字典，其中<code>[]</code>之间的是键类型，右边的是值类型。另外我们还看到了<code>range函数，此函数一样神奇，可以用来迭代字典元素，返回key:value键值对</code>。当然如果你对键或者值不感兴趣，一样可以使用<code>下划线(_)</code>来忽略返回值。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> x <span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">string</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tx = <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">string</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">\tx[<span class=\"string\">\"A\"</span>] = <span class=\"string\">\"Apple\"</span></span><br><span class=\"line\">\tx[<span class=\"string\">\"B\"</span>] = <span class=\"string\">\"Banana\"</span></span><br><span class=\"line\">\tx[<span class=\"string\">\"O\"</span>] = <span class=\"string\">\"Orange\"</span></span><br><span class=\"line\">\tx[<span class=\"string\">\"P\"</span>] = <span class=\"string\">\"Pear\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> key, val := <span class=\"keyword\">range</span> x &#123;</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">\"Key:\"</span>, key, <span class=\"string\">\"Value:\"</span>, val)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面的方式就是使用了make函数来初始化字典，<code>试图为未经过初始化的字典添加元素会导致运行错误</code>，你可以把使用make函数初始化的那一行注释掉，然后看一下。</p>\n<p>当然上面的例子中，我们可以把定义和初始化合成一句。<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tx := <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">string</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">\tx[<span class=\"string\">\"A\"</span>] = <span class=\"string\">\"Apple\"</span></span><br><span class=\"line\">\tx[<span class=\"string\">\"B\"</span>] = <span class=\"string\">\"Banana\"</span></span><br><span class=\"line\">\tx[<span class=\"string\">\"O\"</span>] = <span class=\"string\">\"Orange\"</span></span><br><span class=\"line\">\tx[<span class=\"string\">\"P\"</span>] = <span class=\"string\">\"Pear\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> key, val := <span class=\"keyword\">range</span> x &#123;</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">\"Key:\"</span>, key, <span class=\"string\">\"Value:\"</span>, val)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>现在我们再来看一下字典的数据访问方式。如果你访问的元素所对应的键存在于字典中，那么没有问题，如果不存在呢？</p>\n<p>这个时候会返回零值。对于字符串零值就是””，对于整数零值就是0。但是对于下面的例子：<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tx := <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">int</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">\tx[<span class=\"string\">\"A\"</span>] = <span class=\"number\">0</span></span><br><span class=\"line\">\tx[<span class=\"string\">\"B\"</span>] = <span class=\"number\">20</span></span><br><span class=\"line\">\tx[<span class=\"string\">\"O\"</span>] = <span class=\"number\">30</span></span><br><span class=\"line\">\tx[<span class=\"string\">\"P\"</span>] = <span class=\"number\">40</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tfmt.Println(x[<span class=\"string\">\"C\"</span>])</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>在这个例子中，很显然不存在键C，但是程序的输出结果为0，这样就和键A对应的值混淆了。</p>\n<p>Go提供了一种方法来解决这个问题：<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tx := <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">int</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">\tx[<span class=\"string\">\"A\"</span>] = <span class=\"number\">0</span></span><br><span class=\"line\">\tx[<span class=\"string\">\"B\"</span>] = <span class=\"number\">20</span></span><br><span class=\"line\">\tx[<span class=\"string\">\"O\"</span>] = <span class=\"number\">30</span></span><br><span class=\"line\">\tx[<span class=\"string\">\"P\"</span>] = <span class=\"number\">40</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> val, ok := x[<span class=\"string\">\"C\"</span>]; ok &#123;</span><br><span class=\"line\">\t\tfmt.Println(val)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>上面的例子中，我们可以看到事实上使用<code>x[&quot;C&quot;]</code>的返回值有两个，一个是值，另一个是是否存在此键的bool型变量，所以我们看到ok为true的时候就输出键C的值，如果ok为false，那就是字典中不存在这个键。</p>\n<p>现在我们再来看看<code>Go提供的内置函数delete，这个函数可以用来从字典中删除元素</code>。<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tx := <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">int</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">\tx[<span class=\"string\">\"A\"</span>] = <span class=\"number\">10</span></span><br><span class=\"line\">\tx[<span class=\"string\">\"B\"</span>] = <span class=\"number\">20</span></span><br><span class=\"line\">\tx[<span class=\"string\">\"C\"</span>] = <span class=\"number\">30</span></span><br><span class=\"line\">\tx[<span class=\"string\">\"D\"</span>] = <span class=\"number\">40</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"Before Delete\"</span>)</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"Length:\"</span>, <span class=\"built_in\">len</span>(x))</span><br><span class=\"line\">\tfmt.Println(x)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">delete</span>(x, <span class=\"string\">\"A\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"After Delete\"</span>)</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"Length:\"</span>, <span class=\"built_in\">len</span>(x))</span><br><span class=\"line\">\tfmt.Println(x)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>输出结果为<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Before Delete</span><br><span class=\"line\">Length: 4</span><br><span class=\"line\">map[A:10 B:20 C:30 D:40]</span><br><span class=\"line\">After Delete</span><br><span class=\"line\">Length: 3</span><br><span class=\"line\">map[B:20 C:30 D:40]</span><br></pre></td></tr></table></figure></p>\n<p>我们在删除元素前查看一下字典长度和元素，删除之后再看一下。这里面我们还可以看到<code>len函数也可以用来获取字典的元素个数</code>。当然如果你试图删除一个不存在的键，那么程序也不会报错，只是不会对字典造成任何影响。</p>\n<p>最后我们再用一个稍微复杂的例子来结束字典的介绍。</p>\n<p>我们有一个学生登记表，登记表里面有一组学号，每个学号对应一个学生，每个学生有名字和年龄。<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> facebook = <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">int</span>)</span><br><span class=\"line\">\tfacebook[<span class=\"string\">\"0616020432\"</span>] = <span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">int</span>&#123;<span class=\"string\">\"Jemy\"</span>: <span class=\"number\">25</span>&#125;</span><br><span class=\"line\">\tfacebook[<span class=\"string\">\"0616020433\"</span>] = <span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">int</span>&#123;<span class=\"string\">\"Andy\"</span>: <span class=\"number\">23</span>&#125;</span><br><span class=\"line\">\tfacebook[<span class=\"string\">\"0616020434\"</span>] = <span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">int</span>&#123;<span class=\"string\">\"Bill\"</span>: <span class=\"number\">22</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> stu_no, stu_info := <span class=\"keyword\">range</span> facebook &#123;</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">\"Student:\"</span>, stu_no)</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> name, age := <span class=\"keyword\">range</span> stu_info &#123;</span><br><span class=\"line\">\t\t\tfmt.Println(<span class=\"string\">\"Name:\"</span>, name, <span class=\"string\">\"Age:\"</span>, age)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tfmt.Println()</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>输出结果为<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Student: 0616020432</span><br><span class=\"line\">Name Jemy Age 25</span><br><span class=\"line\"></span><br><span class=\"line\">Student: 0616020433</span><br><span class=\"line\">Name Andy Age 23</span><br><span class=\"line\"></span><br><span class=\"line\">Student: 0616020434</span><br><span class=\"line\">Name Bill Age 22</span><br></pre></td></tr></table></figure></p>\n<p>当然我们也可以用初始化的方式定义字典：<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> facebook = <span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">int</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"string\">\"0616020432\"</span>: &#123;<span class=\"string\">\"Jemy\"</span>: <span class=\"number\">25</span>&#125;,</span><br><span class=\"line\">\t\t<span class=\"string\">\"0616020433\"</span>: &#123;<span class=\"string\">\"Andy\"</span>: <span class=\"number\">23</span>&#125;,</span><br><span class=\"line\">\t\t<span class=\"string\">\"0616020434\"</span>: &#123;<span class=\"string\">\"Bill\"</span>: <span class=\"number\">22</span>&#125;,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> stu_no, stu_info := <span class=\"keyword\">range</span> facebook &#123;</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">\"Student:\"</span>, stu_no)</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> name, age := <span class=\"keyword\">range</span> stu_info &#123;</span><br><span class=\"line\">\t\t\tfmt.Println(<span class=\"string\">\"Name:\"</span>, name, <span class=\"string\">\"Age:\"</span>, age)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tfmt.Println()</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>输出结果是一样的。</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"Go语言内置基础数据类型\"><a href=\"#Go语言内置基础数据类型\" class=\"headerlink\" title=\"Go语言内置基础数据类型\"></a>Go语言内置基础数据类型</h1><p>在自然界里面，有猫，有狗，有猪。有各种动物。每种动物都是不同的。<br>比如猫会喵喵叫，狗会旺旺叫，猪会哼哼叫。。。<br>Stop!!!<br>好了，大家毕竟不是幼儿园的小朋友。介绍到这里就可以了。<br>","more":"<br>论点就是每个东西都有自己归属的类别(Type)。<br>那么在Go语言里面，每个变量也都是有类别的，这种类别叫做<code>数据类型(Data Type)</code>。<br>Go的数据类型有两种：一种是<code>语言内置的数据类型</code>，另外一种是<code>通过语言提供的自定义数据类型方法自己定义的自定义数据类型</code>。</p>\n<p>先看看语言<code>内置的基础数据类型</code></p>\n<h2 id=\"数值型-Number\"><a href=\"#数值型-Number\" class=\"headerlink\" title=\"数值型(Number)\"></a>数值型(Number)</h2><p>数值型有<code>三种</code>，一种是<code>整数类型</code>，另外一种是<code>带小数的类型</code>(一般计算机里面叫做<code>浮点数类型</code>)，还有一种<code>虚数类型</code>。  </p>\n<p>整数类型不用说了，和数学里面的是一样的。和数学里面不同的地方在于计算机里面<code>正整数和零</code>统称为<code>无符号整型</code>，而<code>负整数</code>则称为<code>有符号整型</code>。  </p>\n<p>Go的内置整型有<code>uint8</code>, <code>uint16</code>, <code>uint32</code>, <code>uint64</code>, <code>int8</code>, <code>int16</code>, <code>int32</code>和<code>int64</code>。其中<code>u</code>开头的类型就是<code>无符号整型</code>。无符号类型能够表示正整数和零。而有符号类型除了能够表示正整数和零外，还可以表示负整数。<br>另外还有一些别名类型，比如<code>byte</code>类型，这个类型和<code>uint8</code>是一样的，表示<code>字节类型</code>。另外一个是<code>rune类型</code>，这个类型和<code>int32</code>是一样的，用来表示<code>unicode的代码点</code>，就是unicode字符所对应的整数。</p>\n<p>Go还定义了三个<code>依赖系统</code>的类型，<code>uint</code>，<code>int</code>和<code>uintptr</code>。因为在32位系统和64位系统上用来表示这些类型的位数是不一样的。</p>\n<p><em>对于32位系统</em></p>\n<p>uint=uint32<br>int=int32<br>uintptr为32位的指针  </p>\n<p><em>对于64位系统</em></p>\n<p>uint=uint64<br>int=int64<br>uintptr为64位的指针  </p>\n<p>至于类型后面跟的数字8，16，32或是64则表示用来表示这个类型的位不同，<code>位越多，能表示的整数范围越大</code>。<br>比如对于用N位来表示的整数，如果是<code>有符号的整数</code>，能够表示的整数范围为<code>-2^(N-1) ~ 2^(N-1)－1</code>；如果是<code>无符号的整数</code>，则能表示的整数范围为<code>0 ～ 2^N</code>。</p>\n<p>Go的浮点数类型有两种，<code>float32</code>和<code>float64</code>。float32又叫<code>单精度浮点型</code>，float64又叫做<code>双精度浮点型</code>。其<code>最主要的区别就是小数点后面能跟的小数位数不同</code>。</p>\n<p>另外Go还有两个其他语言所没有的类型，<code>虚数类型</code>。<code>complex64</code>和<code>complex128</code>。</p>\n<p>对于数值类型，其所共有的操作为<code>加法(＋)</code>，<code>减法(－)</code>，<code>乘法(＊)</code>和<code>除法(/)</code>。另外对于<code>整数类型</code>，还定义了<code>求余运算(%)</code></p>\n<p>求余运算为整型所独有。如果对浮点数使用求余，比如这样<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">    <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> a <span class=\"keyword\">float64</span> = <span class=\"number\">12</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> b <span class=\"keyword\">float64</span> = <span class=\"number\">3</span></span><br><span class=\"line\"></span><br><span class=\"line\">    fmt.Println(a % b)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>编译时候会报错</p>\n<pre><code>invalid operation: a % b (operator % not defined on float64)\n</code></pre><p>所以，这里我们可以知道所谓的<code>数据类型有两层意思</code>，一个是定义了<code>该类型所能表示的数</code>，另一个是定义了<code>该类型所能进行的操作</code>。<br>简单地说，对于一只小狗，你能想到的一定是狗的面貌和它会汪汪叫，而不是猫的面容和喵喵叫。</p>\n<h2 id=\"字符串类型-String\"><a href=\"#字符串类型-String\" class=\"headerlink\" title=\"字符串类型(String)\"></a>字符串类型(String)</h2><p>字符串就是一串固定长度的字符连接起来的字符序列。Go的字符串是由<code>单个字节</code>连接起来的。（对于汉字，通常由多个字节组成）。这就是说，传统的字符串是由字符组成的，而<code>Go的字符串不同</code>，是<code>由字节组成</code>的。这一点需要注意。</p>\n<p>字符串的表示很简单。用(双引号””)或者(``号)来描述。</p>\n<pre><code>&quot;hello world&quot;\n</code></pre><p>或者</p>\n<pre><code>`hello world`\n</code></pre><p>唯一的区别是，<strong>双引号之间的转义字符会被转义，而``号之间的转义字符保持原样不变</strong>。<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">    <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> a = <span class=\"string\">\"hello \\n world\"</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> b = <span class=\"string\">`hello \\n world`</span></span><br><span class=\"line\"></span><br><span class=\"line\">    fmt.Println(a)</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">\"----------\"</span>)</span><br><span class=\"line\">    fmt.Println(b)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>输出结果为<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hello </span><br><span class=\"line\"> world</span><br><span class=\"line\">----------</span><br><span class=\"line\">hello \\n world</span><br></pre></td></tr></table></figure></p>\n<p>字符串所能进行的一些基本操作包括:<br>（1）<code>获取字符长度</code><br>（2）<code>获取字符串中单个字节</code><br>（3）<code>字符串连接</code><br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">    <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> a <span class=\"keyword\">string</span> = <span class=\"string\">\"hello\"</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> b <span class=\"keyword\">string</span> = <span class=\"string\">\"world\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">    fmt.Println(<span class=\"built_in\">len</span>(a))</span><br><span class=\"line\">    fmt.Println(a[<span class=\"number\">1</span>])</span><br><span class=\"line\">    fmt.Println(a + b)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>输出如下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">5</span><br><span class=\"line\">101</span><br><span class=\"line\">helloworld</span><br></pre></td></tr></table></figure></p>\n<p>这里我们看到a[1]得到的是一个整数，这就证明了上面<code>&quot;Go的字符串是由字节组成的这句话&quot;</code>。我们还可以再验证一下。<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> a <span class=\"keyword\">string</span> = <span class=\"string\">\"你\"</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> b <span class=\"keyword\">string</span> = <span class=\"string\">\"好\"</span></span><br><span class=\"line\">\tfmt.Println(<span class=\"built_in\">len</span>(a))</span><br><span class=\"line\">\tfmt.Println(<span class=\"built_in\">len</span>(b))</span><br><span class=\"line\">\tfmt.Println(<span class=\"built_in\">len</span>(a + b))</span><br><span class=\"line\">\tfmt.Println(a[<span class=\"number\">0</span>])</span><br><span class=\"line\">\tfmt.Println(a[<span class=\"number\">1</span>])</span><br><span class=\"line\">\tfmt.Println(a[<span class=\"number\">2</span>])</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>输出<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">3</span><br><span class=\"line\">3</span><br><span class=\"line\">6</span><br><span class=\"line\">228</span><br><span class=\"line\">189</span><br><span class=\"line\">160</span><br></pre></td></tr></table></figure></p>\n<p>我们开始的时候，从上面的三行输出知道，”你”和”好”分别是用三个字节组成的。我们依次获取a的三个字节，输出，得到结果。</p>\n<h2 id=\"布尔型-Bool\"><a href=\"#布尔型-Bool\" class=\"headerlink\" title=\"布尔型(Bool)\"></a>布尔型(Bool)</h2><p>布尔型是表示<code>真值</code>和<code>假值</code>的类型。可选值为<code>true</code>和<code>false</code>。</p>\n<p>所能进行的操作如下：<br><code>&amp;&amp; and 与</code><br><code>|| or 或</code><br><code>!  not 非</code></p>\n<p>Go的布尔型取值<code>就是true</code>或<code>false</code>。<code>任何空值(nil)或者零值(0, 0.0, &quot;&quot;)都不能作为布尔型来直接判断</code>。<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">   \t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">   \t<span class=\"keyword\">var</span> equal <span class=\"keyword\">bool</span></span><br><span class=\"line\">   \t<span class=\"keyword\">var</span> a <span class=\"keyword\">int</span> = <span class=\"number\">10</span></span><br><span class=\"line\">   \t<span class=\"keyword\">var</span> b <span class=\"keyword\">int</span> = <span class=\"number\">20</span></span><br><span class=\"line\">   \tequal = (a == b)</span><br><span class=\"line\">   \tfmt.Println(equal)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>输出结果</p>\n<pre><code>false\n</code></pre><p>下面是错误的用法<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">   \t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">   \t<span class=\"keyword\">if</span> <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">       \tfmt.Println(<span class=\"string\">\"hello world\"</span>)</span><br><span class=\"line\">   \t&#125;</span><br><span class=\"line\">   \t<span class=\"keyword\">if</span> <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">       \tfmt.Println(<span class=\"string\">\"hello world\"</span>)</span><br><span class=\"line\">   \t&#125;</span><br><span class=\"line\">   \t<span class=\"keyword\">if</span> <span class=\"string\">\"\"</span> &#123;</span><br><span class=\"line\">    \t\tfmt.Println(<span class=\"string\">\"hello world\"</span>)</span><br><span class=\"line\">   \t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>编译错误<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./t.go:8: non-bool 0 (type untyped number) used as if condition</span><br><span class=\"line\">./t.go:11: non-bool nil used as if condition</span><br><span class=\"line\">./t.go:14: non-bool &quot;&quot; (type untyped string) used as if condition</span><br></pre></td></tr></table></figure></p>\n<p>上面介绍的是Go语言内置的基础数据类型。</p>\n<h1 id=\"变量和常量定义\"><a href=\"#变量和常量定义\" class=\"headerlink\" title=\"变量和常量定义\"></a>变量和常量定义</h1><p>现在我们讨论一下Go语言的变量定义。</p>\n<h2 id=\"变量定义\"><a href=\"#变量定义\" class=\"headerlink\" title=\"变量定义\"></a>变量定义</h2><p>所谓的变量就是一个拥有指定<code>名称</code>和<code>类型</code>的<code>数据存储位置</code>。<br>在上面我们使用过变量的定义，现在我们来仔细看一个例子。<br> <figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> x <span class=\"keyword\">string</span> = <span class=\"string\">\"hello world\"</span></span><br><span class=\"line\">\tfmt.Println(x)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>变量的定义首先使用<code>var</code>关键字，然后指定变量的名称<code>x</code>，再指定变量的类型<code>string</code>，在本例中，还对变量<code>x</code>进行了赋值，然后在命令行输出该变量。Go这种变量定义的方式和其他的语言有些不同，但是在使用的过程中，你会逐渐喜欢的。当然上面的变量定义方式还可以如下，即先定义变量，再赋值。<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> x <span class=\"keyword\">string</span></span><br><span class=\"line\">\tx = <span class=\"string\">\"hello world\"</span></span><br><span class=\"line\">\tfmt.Println(x)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>或者是直接赋值，让Go语言推断变量的类型。如下：<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> x = <span class=\"string\">\"hello world\"</span></span><br><span class=\"line\">\tfmt.Println(x)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>当然，上面变量的定义还有一种<code>快捷方式</code>。如果你知道变量的初始值，完全可以像下面这样定义变量，完全让<code>Go来推断语言的类型</code>。这种定义的方式连关键字<code>var</code>都省略掉了。<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tx := <span class=\"string\">\"hello world\"</span></span><br><span class=\"line\">\tfmt.Println(x)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>注意：上面这种使用<code>:=</code>方式定义变量的方式<code>只能用在函数内部</code>。<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">x:=<span class=\"string\">\"hello world\"</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\ty := <span class=\"number\">10</span></span><br><span class=\"line\">\tfmt.Println(x)</span><br><span class=\"line\">\tfmt.Println(y)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>对于上面的变量定义x是无效的。会导致编译错误：</p>\n<pre><code>./test_var_quick.go:7: non-declaration statement outside function body\n</code></pre><p>不过我们对上面的例子做下修改，比如这样是可以的。也就是使用var关键字定义的时候，如果给出初始值，就不需要显式指定变量类型。<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> x = <span class=\"string\">\"hello world\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\ty := <span class=\"number\">10</span></span><br><span class=\"line\">\tfmt.Println(x)</span><br><span class=\"line\">\tfmt.Println(y)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><code>变量</code>之所以称为变量，就是因为<code>它们的值在程序运行过程中可以发生变化</code>，但是<code>它们的变量类型是无法改变的</code>。因为<code>Go语言是静态语言</code>，并<code>不支持</code>程序运行过程中<code>变量类型发生变化</code>。比如如果你强行将一个字符串值赋值给定义为int的变量，那么会发生编译错误。即使是强制类型转换也是不可以的。<code>强制类型转换只支持同类的变量类型</code>。比如数值类型之间强制转换。</p>\n<p>下面我们看几个例子：<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> x <span class=\"keyword\">string</span> = <span class=\"string\">\"hello world\"</span></span><br><span class=\"line\">\tfmt.Println(x)</span><br><span class=\"line\">\tx = <span class=\"string\">\"i love go language\"</span></span><br><span class=\"line\">\tfmt.Println(x)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>本例子演示变量的值在程序运行过程中发生变化，结果输出为<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hello world</span><br><span class=\"line\">i love go language</span><br></pre></td></tr></table></figure></p>\n<p>我们尝试不同类型的变量之间转换<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> x <span class=\"keyword\">string</span> = <span class=\"string\">\"hello world\"</span></span><br><span class=\"line\">\tfmt.Println(x)</span><br><span class=\"line\">\tx = <span class=\"number\">11</span></span><br><span class=\"line\">\tfmt.Println(x)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>在本例子中，如果试图将一个数值赋予字符串变量x，那么会发生错误：</p>\n<pre><code>./test_var.go:10: cannot use 11 (type int) as type string in assignment\n</code></pre><p>上面的意思就是无法将整型数值11当作字符串赋予给字符串变量。</p>\n<p>但是同类的变量之间是可以强制转换的，如浮点型和整型之间的转换。<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> x <span class=\"keyword\">float64</span> = <span class=\"number\">32.35</span></span><br><span class=\"line\">\tfmt.Println(x)</span><br><span class=\"line\">\tfmt.Println(<span class=\"keyword\">int</span>(x))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>输出的结果为<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">32.35   </span><br><span class=\"line\">32</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"变量命名\"><a href=\"#变量命名\" class=\"headerlink\" title=\"变量命名\"></a>变量命名</h2><p>上面我们看了一些变量的使用方法，那么定义一个变量名称，有哪些要求呢？<br>这里我们要注意，<code>Go的变量名称必须以字母或下划线(_)开头，后面可以跟字母，数字，或者下划线(_)</code>。除此之外，Go语言并不关心你如何定义变量。我们通用的做法是定义一个用户友好的变量。假设你需要定义一个狗狗的年龄，那么使用dog_age作为变量名称要好于用x来定义变量。</p>\n<h2 id=\"变量作用域\"><a href=\"#变量作用域\" class=\"headerlink\" title=\"变量作用域\"></a>变量作用域</h2><p>现在我们再来讨论一下变量的作用域。所谓作用域就是可以有效访问变量的区域。比如很简单的，你不可能在一个函数func_a里面访问另一个函数func_b里面定义的局部变量x。所以变量的作用域目前分为两类，一个是<code>全局变量</code>，另一个是<code>局部变量</code>。下面我们看个全局变量的例子：<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> x <span class=\"keyword\">string</span> = <span class=\"string\">\"hello world\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tfmt.Println(x)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这里变量x定义在main函数之外，但是main函数仍然可以访问x。全局变量的作用域是该包中所有的函数。<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> x <span class=\"keyword\">string</span> = <span class=\"string\">\"hello world\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">change</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tx = <span class=\"string\">\"i love go\"</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tfmt.Println(x)</span><br><span class=\"line\">\tchange()</span><br><span class=\"line\">\tfmt.Println(x)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>在上面的例子用，我们用了change函数改变了x的值。输出结果如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hello world</span><br><span class=\"line\">i love go</span><br></pre></td></tr></table></figure></p>\n<p>我们再看一下局部变量的例子。<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">change</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tx := <span class=\"string\">\"i love go\"</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tfmt.Println(x)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>该例子中main函数试图访问change函数中定义的局部变量x，结果发生了下面的错误(未定义的变量x)：</p>\n<pre><code>./test_var.go:11: undefined: x\n</code></pre><h2 id=\"常量\"><a href=\"#常量\" class=\"headerlink\" title=\"常量\"></a>常量</h2><p>Go语言也支持常量定义。所谓<code>常量就是在程序运行过程中保持值不变的变量定义</code>。常量的定义和变量类似，只是用<code>const</code>关键字替换了var关键字，另外常量在定义的时候<code>必须有初始值</code>。<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> x <span class=\"keyword\">string</span> = <span class=\"string\">\"hello world\"</span></span><br><span class=\"line\">\t<span class=\"keyword\">const</span> y = <span class=\"string\">\"hello world\"</span></span><br><span class=\"line\">\tfmt.Println(x)</span><br><span class=\"line\">\tfmt.Println(y)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这里有一点需要注意，变量定义的类型推断方式<code>:=</code>不能够用来定义常量。因为常量的值是在编译的时候就已经确定的，但是变量的值则是运行的时候才使用的。这样常量定义就无法使用变量类型推断的方式了。</p>\n<p>常量的值在运行过程中是无法改变的，强制改变常量的值是无效的。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> x <span class=\"keyword\">string</span> = <span class=\"string\">\"hello world\"</span></span><br><span class=\"line\">\tfmt.Println(x)</span><br><span class=\"line\">\tx = <span class=\"string\">\"i love go language\"</span></span><br><span class=\"line\">\tfmt.Println(x)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>比如上面的例子就会报错</p>\n<pre><code>./test_var.go:10: cannot assign to x\n</code></pre><p>我们再看一个Go包math里面定义的常量Pi，用它来求圆的面积。<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"math\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> radius <span class=\"keyword\">float64</span> = <span class=\"number\">10</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> area = math.Pow(radius, <span class=\"number\">2</span>) * math.Pi</span><br><span class=\"line\">\tfmt.Println(area)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"多变量或常量定义\"><a href=\"#多变量或常量定义\" class=\"headerlink\" title=\"多变量或常量定义\"></a>多变量或常量定义</h2><p>Go还提供了一种<code>同时定义多个变量或者常量</code>的快捷方式。<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> (</span><br><span class=\"line\">\t\ta <span class=\"keyword\">int</span>     = <span class=\"number\">10</span></span><br><span class=\"line\">\t\tb <span class=\"keyword\">float64</span> = <span class=\"number\">32.45</span></span><br><span class=\"line\">\t\tc <span class=\"keyword\">bool</span>    = <span class=\"literal\">true</span></span><br><span class=\"line\">\t)</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> (</span><br><span class=\"line\">\t\tPi   <span class=\"keyword\">float64</span> = <span class=\"number\">3.14</span></span><br><span class=\"line\">\t\tTrue <span class=\"keyword\">bool</span>    = <span class=\"literal\">true</span></span><br><span class=\"line\">\t)</span><br><span class=\"line\"></span><br><span class=\"line\">\tfmt.Println(a, b, c)</span><br><span class=\"line\">\tfmt.Println(Pi, True)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"程序控制结构\"><a href=\"#程序控制结构\" class=\"headerlink\" title=\"程序控制结构\"></a>程序控制结构</h1><p>虽然剧透可耻，但是为了体现Go语言的设计简洁之处，必须要先剧透一下。</p>\n<p>Go语言的控制结构关键字只有</p>\n<p><code>if..else if..else</code>，<code>for</code> 和 <code>switch</code>。</p>\n<p>而且在Go中，为了避免格式化战争，对程序结构做了统一的强制的规定。看下下面的例子。</p>\n<p>请比较一下A程序和B程序的不同之处。</p>\n<p><strong>A程序</strong><br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"hello world\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong>B程序</strong><br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"hello world\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>还记得我们前面的例子中，<code>{}</code>的格式是怎么样的么？在上面的两个例子中只有A例的写法是对的。因为在Go语言中，强制了<code>{}</code>的格式。如果我们试图去编译B程序，那么会发生如下的错误提示。</p>\n<pre><code>./test_format.go:9: syntax error: unexpected semicolon or newline before {\n</code></pre><h2 id=\"if-else-if-else\"><a href=\"#if-else-if-else\" class=\"headerlink\" title=\"if..else if..else\"></a>if..else if..else</h2><p>if..else if..else 用来判断一个或者多个条件，然后根据条件的结果执行不同的程序块。举个简单的例子。<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> dog_age = <span class=\"number\">10</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> dog_age &gt; <span class=\"number\">10</span> &#123;</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">\"A big dog\"</span>)</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> dog_age &gt; <span class=\"number\">1</span> &amp;&amp; dog_age &lt;= <span class=\"number\">10</span> &#123;</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">\"A small dog\"</span>)</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">\"A baby dog\"</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>上面的例子判断狗狗的年龄如果<code>(if)</code>大于10就是一个大狗；否则判断<code>(else if)</code>狗狗的年龄是否小于等于10且大于1，这个时候狗狗是小狗狗。否则<code>(else)</code>的话（就是默认狗狗的年龄小于等于1岁），那么狗狗是Baby狗狗。</p>\n<p>在上面的例子中，我们还可以发现Go的if..else if..else语句的判断条件一般都不需要使用<code>()</code>。当然如果你还是愿意写，也是对的。另外如果为了将某两个或多个条件绑定在一起判断的话，还是需要括号<code>()</code>的。</p>\n<p>比如下面的例子也是对的。<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> Male = <span class=\"string\">'M'</span></span><br><span class=\"line\">\t<span class=\"keyword\">const</span> Female = <span class=\"string\">'F'</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> dog_age = <span class=\"number\">10</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> dog_sex = <span class=\"string\">'M'</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (dog_age == <span class=\"number\">10</span> &amp;&amp; dog_sex == <span class=\"string\">'M'</span>) &#123;</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">\"dog\"</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>但是如果你使用Go提供的格式化工具来格式化这段代码的话，Go会智能判断你的括号是否必须有，否则的话，会帮你去掉的。你可以试试。</p>\n<pre><code>go fmt test_bracket.go\n</code></pre><p>然后你会发现，咦？！果真被去掉了。</p>\n<p>另外因为每个判断条件的结果要么是true要么是false，所以可以使用<code>&amp;&amp;</code>，<code>||</code>来连接不同的条件。使用<code>!</code>来对一个条件取反。</p>\n<h2 id=\"switch\"><a href=\"#switch\" class=\"headerlink\" title=\"switch\"></a>switch</h2><p>switch的出现是为了解决某些情况下使用if判断语句带来的繁琐之处。</p>\n<p>例如下面的例子：<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">//score 为 [0,100]之间的整数</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> score <span class=\"keyword\">int</span> = <span class=\"number\">69</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> score &gt;= <span class=\"number\">90</span> &amp;&amp; score &lt;= <span class=\"number\">100</span> &#123;</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">\"优秀\"</span>)</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> score &gt;= <span class=\"number\">80</span> &amp;&amp; score &lt; <span class=\"number\">90</span> &#123;</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">\"良好\"</span>)</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> score &gt;= <span class=\"number\">70</span> &amp;&amp; score &lt; <span class=\"number\">80</span> &#123;</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">\"一般\"</span>)</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> score &gt;= <span class=\"number\">60</span> &amp;&amp; score &lt; <span class=\"number\">70</span> &#123;</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">\"及格\"</span>)</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">\"不及格\"</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>在上面的例子中，我们用if..else if..else来对分数进行分类。这个只是一般的情况下if判断条件的数量。如果if..else if..else的条件太多的话，我们可以使用switch来优化程序。比如上面的程序我们还可以这样写：<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">//score 为 [0,100]之间的整数</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> score <span class=\"keyword\">int</span> = <span class=\"number\">69</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">switch</span> score / <span class=\"number\">10</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> <span class=\"number\">10</span>:</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> <span class=\"number\">9</span>:</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">\"优秀\"</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> <span class=\"number\">8</span>:</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">\"良好\"</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> <span class=\"number\">7</span>:</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">\"一般\"</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> <span class=\"number\">6</span>:</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">\"及格\"</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">default</span>:</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">\"不及格\"</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>关于switch的几点说明如下：</p>\n<p>(1) switch的判断条件可以为任何数据类型。<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> dog_sex = <span class=\"string\">\"F\"</span></span><br><span class=\"line\">\t<span class=\"keyword\">switch</span> dog_sex &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> <span class=\"string\">\"M\"</span>:</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">\"A male dog\"</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> <span class=\"string\">\"F\"</span>:</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">\"A female dog\"</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>(2) 每个case后面跟的是一个完整的程序块，该程序块<code>不需要{}</code>，也<code>不需要break结尾</code>，因为每个case都是独立的。</p>\n<p>(3) 可以为switch提供一个默认选项default，在上面所有的case都没有满足的情况下，默认执行default后面的语句。</p>\n<h2 id=\"for\"><a href=\"#for\" class=\"headerlink\" title=\"for\"></a>for</h2><p>for用在Go语言的循环条件里面。比如说要你输出1…100之间的自然数。最笨的方法就是直接这样。<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tfmt.Println(<span class=\"number\">1</span>)</span><br><span class=\"line\">\tfmt.Println(<span class=\"number\">2</span>)</span><br><span class=\"line\">\t...</span><br><span class=\"line\">\tfmt.Println(<span class=\"number\">100</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这个不由地让我想起一个笑话。</p>\n<blockquote>\n<p>以前一个地主的儿子学习写字，只学了三天就把老师赶走了。因为在这三天里面他学写了一，二，三。他觉得写字真的太简单了，不就是画横线嘛。于是有一天老爹过寿，让他来记送礼的人名单。直到中午还没有记完，老爹很奇怪就去问他怎么了。他哭着说，“不知道这个人有什么毛病，姓什么不好，姓万”。</p>\n</blockquote>\n<p>哈哈，回来继续。我们看到上面的例子也是如地主的儿子那样就不好了。所以，我们必须使用循环结构。我们用for的循环语句来实现上面的例子。<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> i <span class=\"keyword\">int</span> = <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> ; i &lt;= <span class=\"number\">100</span>; i++ &#123;</span><br><span class=\"line\">\t\tfmt.Println(i)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>在上面的例子中，首先初始化变量i为1，然后在for循环里面判断是否小于等于100，如果是的话，输出i，然后再使用i++来将i的值自增1。上面的例子，还有一个更好的写法，就是将i的定义和初始化也放在for里面。如下：<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">1</span>; i &lt;= <span class=\"number\">100</span>; i++ &#123;</span><br><span class=\"line\">\t\tfmt.Println(i)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>在Go里面没有提供while关键字，如果你怀念while的写法也可以这样：<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> i <span class=\"keyword\">int</span> = <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i &lt;= <span class=\"number\">100</span> &#123;</span><br><span class=\"line\">\t\tfmt.Println(i)</span><br><span class=\"line\">\t\ti++</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>或许你会问，如果我要死循环呢？是不是<code>for true</code>？呵呵，不用了，直接这样。<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>&#123;</span><br><span class=\"line\">\t...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>以上就是Go提供的全部控制流程了。</p>\n<p>再复习一下，Go只提供了：</p>\n<p><strong>if</strong><br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> ...&#123;</span><br><span class=\"line\">\t...</span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ...&#123;</span><br><span class=\"line\">\t...</span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong>switch</strong><br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">switch</span>(...)&#123;</span><br><span class=\"line\"><span class=\"keyword\">case</span> ...:</span><br><span class=\"line\">\t\t ...</span><br><span class=\"line\"><span class=\"keyword\">case</span> ...:</span><br><span class=\"line\">\t\t ...</span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">default</span>:</span><br><span class=\"line\">\t\t  ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong>for</strong><br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> ...; ...; ...&#123;</span><br><span class=\"line\">\t...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> ...&#123;</span><br><span class=\"line\">\t...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span>&#123;</span><br><span class=\"line\">\t...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"数组，切片和字典\"><a href=\"#数组，切片和字典\" class=\"headerlink\" title=\"数组，切片和字典\"></a>数组，切片和字典</h1><p>在上面的章节里面，我们讲过Go内置的基本数据类型。现在我们来看一下Go内置的高级数据类型，数组，切片和字典。</p>\n<h2 id=\"数组-Array\"><a href=\"#数组-Array\" class=\"headerlink\" title=\"数组(Array)\"></a>数组(Array)</h2><p>数组是一个具有<code>相同数据类型</code>的元素组成的<code>固定长度</code>的<code>有序集合</code>。比如下面的例子</p>\n<pre><code>var x [5]int\n</code></pre><p>表示数组x是一个整型数组，而且数值的长度为5。</p>\n<p><code>Go提供了几种不同的数组定义方法。</code></p>\n<p><code>最基本的方式就是使用var关键字来定义，然后依次给元素赋值</code>。<code>对于没有赋值的元素，默认为零值</code>。比如对于整数，零值就是0，浮点数，零值就是0.0，字符串，零值就是””，对象零值就是nil。<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> x [<span class=\"number\">5</span>]<span class=\"keyword\">int</span></span><br><span class=\"line\">\tx[<span class=\"number\">0</span>] = <span class=\"number\">2</span></span><br><span class=\"line\">\tx[<span class=\"number\">1</span>] = <span class=\"number\">3</span></span><br><span class=\"line\">\tx[<span class=\"number\">2</span>] = <span class=\"number\">3</span></span><br><span class=\"line\">\tx[<span class=\"number\">3</span>] = <span class=\"number\">2</span></span><br><span class=\"line\">\tx[<span class=\"number\">4</span>] = <span class=\"number\">12</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> sum <span class=\"keyword\">int</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> _, elem := <span class=\"keyword\">range</span> x &#123;</span><br><span class=\"line\">\t\tsum += elem</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfmt.Println(sum)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>在上面的例子中，我们首先使用<code>var</code>关键字来声明，然后给出数组名称<code>x</code>，最后说明数组为整型数组，长度为5。然后我们使用索引方式给数组元素赋值。在上面的例子中，我们还使用了一种遍历数组元素的方法。该方法利用Go语言提供的内置函数range来遍历数组元素。<code>range函数可以用在数组，切片和字典上面</code>。当<code>range来遍历数组的时候返回数组的索引和元素值</code>。在这里我们是对数组元素求和，所以我们对索引不感兴趣。在Go语言里面，<code>当你对一个函数返回值不感兴趣的话，可以使用下划线(_)来替代它</code>。另外这里如果我们真的定义了一个索引，在循环结构里面却没有使用索引，Go语言编译的时候还是会报错的。所以用下划线来替代索引变量也是唯一之举了。最后我们输出数组元素的和。</p>\n<p>还有一种方式，如果知道了数组的初始值。可以像下面这样定义。<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> x = [<span class=\"number\">5</span>]<span class=\"keyword\">int</span>&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>&#125;</span><br><span class=\"line\">\tx[<span class=\"number\">4</span>] = <span class=\"number\">5</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> sum <span class=\"keyword\">int</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> _, i := <span class=\"keyword\">range</span> x &#123;</span><br><span class=\"line\">\t\tsum += i</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfmt.Println(sum)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>当然，即使你不知道数组元素的初始值，也可以使用这样的定义方式。<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> x = [<span class=\"number\">5</span>]<span class=\"keyword\">int</span>&#123;&#125;</span><br><span class=\"line\">\tx[<span class=\"number\">0</span>] = <span class=\"number\">1</span></span><br><span class=\"line\">\tx[<span class=\"number\">1</span>] = <span class=\"number\">2</span></span><br><span class=\"line\">\tx[<span class=\"number\">2</span>] = <span class=\"number\">3</span></span><br><span class=\"line\">\tx[<span class=\"number\">3</span>] = <span class=\"number\">4</span></span><br><span class=\"line\">\tx[<span class=\"number\">4</span>] = <span class=\"number\">5</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> sum <span class=\"keyword\">int</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> _, i := <span class=\"keyword\">range</span> x &#123;</span><br><span class=\"line\">\t\tsum += i</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfmt.Println(sum)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><code>在这里我们需要特别重视数组的一个特点，就是数组是有固定长度的。</code></p>\n<p>但是如果我们有的时候也可以不显式指定数组的长度，而是使用<code>...</code>来替代数组长度，Go语言会自动计算出数组的长度。不过这种方式定义的数组一定是有初始化的值的。<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> x = [...]<span class=\"keyword\">string</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"string\">\"Monday\"</span>,</span><br><span class=\"line\">\t\t<span class=\"string\">\"Tuesday\"</span>,</span><br><span class=\"line\">\t\t<span class=\"string\">\"Wednesday\"</span>,</span><br><span class=\"line\">\t\t<span class=\"string\">\"Thursday\"</span>,</span><br><span class=\"line\">\t\t<span class=\"string\">\"Friday\"</span>,</span><br><span class=\"line\">\t\t<span class=\"string\">\"Saturday\"</span>,</span><br><span class=\"line\">\t\t<span class=\"string\">\"Sunday\"</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> _, day := <span class=\"keyword\">range</span> x &#123;</span><br><span class=\"line\">\t\tfmt.Println(day)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>在上面的例子中，还需要注意一点就是如果将数组元素定义在不同行上面，那么最后一个元素后面必须跟上<code>}</code>或者<code>,</code>。上面的例子也可以是这样的。<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> x = [...]<span class=\"keyword\">string</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"string\">\"Monday\"</span>,</span><br><span class=\"line\">\t\t<span class=\"string\">\"Tuesday\"</span>,</span><br><span class=\"line\">\t\t<span class=\"string\">\"Wednesday\"</span>,</span><br><span class=\"line\">\t\t<span class=\"string\">\"Thursday\"</span>,</span><br><span class=\"line\">\t\t<span class=\"string\">\"Friday\"</span>,</span><br><span class=\"line\">\t\t<span class=\"string\">\"Saturday\"</span>,</span><br><span class=\"line\">\t\t<span class=\"string\">\"Sunday\"</span>,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> _, day := <span class=\"keyword\">range</span> x &#123;</span><br><span class=\"line\">\t\tfmt.Println(day)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><code>Go提供的这种可以自动计算数组长度的方法在调试程序的时候特别方便，假设我们注释掉上面数组x的最后一个元素，我们甚至不需要去修改数组的长度。</code></p>\n<h2 id=\"切片-Slice\"><a href=\"#切片-Slice\" class=\"headerlink\" title=\"切片(Slice)\"></a>切片(Slice)</h2><p>在上面我们说过数组是有固定长度的有序集合。这也就是说一旦数组长度定义，你将无法在数组里面多添加哪怕一个元素。数组的这种特点有的时候会成为很大的缺点，尤其是当数组的元素个数不确定的情况下。</p>\n<p>所以<code>切片</code>诞生了。</p>\n<p>切片和数组很类似，甚至你可以理解成数组的子集。但是<code>切片有一个数组所没有的特点，那就是切片的长度是可变的</code>。</p>\n<p>严格地讲，切片有<code>容量(capacity)</code>和<code>长度(length)</code>两个属性。</p>\n<p>首先我们来看一下切片的定义。切片有两种定义方式，一种是先声明一个变量是切片，然后使用内置函数make去初始化这个切片。另外一种是通过取数组切片来赋值。<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> x = <span class=\"built_in\">make</span>([]<span class=\"keyword\">float64</span>, <span class=\"number\">5</span>)</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"Capcity:\"</span>, <span class=\"built_in\">cap</span>(x), <span class=\"string\">\"Length:\"</span>, <span class=\"built_in\">len</span>(x))</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> y = <span class=\"built_in\">make</span>([]<span class=\"keyword\">float64</span>, <span class=\"number\">5</span>, <span class=\"number\">10</span>)</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"Capcity:\"</span>, <span class=\"built_in\">cap</span>(y), <span class=\"string\">\"Length:\"</span>, <span class=\"built_in\">len</span>(y))</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"built_in\">len</span>(x); i++ &#123;</span><br><span class=\"line\">\t\tx[i] = <span class=\"keyword\">float64</span>(i)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfmt.Println(x)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"built_in\">len</span>(y); i++ &#123;</span><br><span class=\"line\">\t\ty[i] = <span class=\"keyword\">float64</span>(i)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfmt.Println(y)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>输出结果为<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Capcity: 5 Length: 5</span><br><span class=\"line\">Capcity: 10 Length: 5</span><br><span class=\"line\">[0 1 2 3 4]</span><br><span class=\"line\">[0 1 2 3 4]</span><br></pre></td></tr></table></figure></p>\n<p>上面我们首先用make函数定义切片x，这个时候x的容量是5，长度也是5。然后使用make函数定义了切片y，这个时候y的容量是10，长度是5。然后我们再分别为切片x和y的元素赋值，最后输出。</p>\n<p>所以使用make函数定义切片的时候，有<code>两种方式</code>，一种<code>只指定长度，这个时候切片的长度和容量是相同的</code>。另外一种是<code>同时指定切片长度和容量</code>。虽然切片的容量可以大于长度，但是<code>赋值的时候要注意最大的索引仍然是len(x)－1</code>。否则会报索引超出边界错误。</p>\n<p>另外一种是通过数组切片赋值，采用<code>[low_index:high_index]</code>的方式获取数值切片，其中切片元素<code>包括low_index的元素</code>，但是<code>不包括high_index的元素</code>。<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> arr1 = [<span class=\"number\">5</span>]<span class=\"keyword\">int</span>&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> s1 = arr1[<span class=\"number\">2</span>:<span class=\"number\">3</span>]</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> s2 = arr1[:<span class=\"number\">3</span>]</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> s3 = arr1[<span class=\"number\">2</span>:]</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> s4 = arr1[:]</span><br><span class=\"line\">\tfmt.Println(s1)</span><br><span class=\"line\">\tfmt.Println(s2)</span><br><span class=\"line\">\tfmt.Println(s3)</span><br><span class=\"line\">\tfmt.Println(s4)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>输出结果为<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[3]</span><br><span class=\"line\">[1 2 3]</span><br><span class=\"line\">[3 4 5]</span><br><span class=\"line\">[1 2 3 4 5]</span><br></pre></td></tr></table></figure></p>\n<p>在上面的例子中，我们还省略了low_index或high_index。如果省略了low_index，那么等价于从索引0开始；如果省略了high_index，则默认high_index等于len(arr1)，即切片长度。</p>\n<p>这里为了体现切片的长度可以变化，我们看一下下面的例子：<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> arr1 = <span class=\"built_in\">make</span>([]<span class=\"keyword\">int</span>, <span class=\"number\">5</span>, <span class=\"number\">10</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"built_in\">len</span>(arr1); i++ &#123;</span><br><span class=\"line\">\t\tarr1[i] = i</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfmt.Println(arr1)</span><br><span class=\"line\"></span><br><span class=\"line\">\tarr1 = <span class=\"built_in\">append</span>(arr1, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>)</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"Capacity:\"</span>, <span class=\"built_in\">cap</span>(arr1), <span class=\"string\">\"Length:\"</span>, <span class=\"built_in\">len</span>(arr1))</span><br><span class=\"line\">\tfmt.Println(arr1)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>输出结果为<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[0 1 2 3 4]</span><br><span class=\"line\">Capacity: 10 Length: 9</span><br><span class=\"line\">[0 1 2 3 4 5 6 7 8]</span><br></pre></td></tr></table></figure></p>\n<p>这里我们初始化arr1为容量10，长度为5的切片，然后为前面的5个元素赋值。然后输出结果。然后我们再使用Go内置方法append来为arr1追加四个元素，这个时候再看一下arr1的容量和长度以及切片元素，我们发现切片的长度确实变了。</p>\n<p>另外我们再用<code>append</code>方法给arr1多追加几个元素，试图超过arr1原来定义的容量大小。<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> arr1 = <span class=\"built_in\">make</span>([]<span class=\"keyword\">int</span>, <span class=\"number\">5</span>, <span class=\"number\">10</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"built_in\">len</span>(arr1); i++ &#123;</span><br><span class=\"line\">\t\tarr1[i] = i</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tarr1 = <span class=\"built_in\">append</span>(arr1, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>, <span class=\"number\">10</span>)</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"Capacity:\"</span>, <span class=\"built_in\">cap</span>(arr1), <span class=\"string\">\"Length:\"</span>, <span class=\"built_in\">len</span>(arr1))</span><br><span class=\"line\">\tfmt.Println(arr1)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>输出结果为<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Capacity: 20 Length: 11</span><br><span class=\"line\">[0 1 2 3 4 5 6 7 8 9 10]</span><br></pre></td></tr></table></figure></p>\n<p>我们发现arr1的长度变为11，因为元素个数现在为11个。另外我们发现arr1的容量也变了，变为原来的两倍。这是因为<code>Go在默认的情况下，如果追加的元素超过了容量大小，Go会自动地重新为切片分配容量，容量大小为原来的两倍</code>。</p>\n<p>上面我们介绍了，可以<code>使用append函数给切片增加元素</code>，现在我们再来介绍一个<code>copy函数用来从一个切片拷贝元素到另一个切片</code>。<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tslice1 := []<span class=\"keyword\">int</span>&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>&#125;</span><br><span class=\"line\">\tslice2 := <span class=\"built_in\">make</span>([]<span class=\"keyword\">int</span>, <span class=\"number\">5</span>, <span class=\"number\">10</span>)</span><br><span class=\"line\">\t<span class=\"built_in\">copy</span>(slice2, slice1)</span><br><span class=\"line\">\tfmt.Println(slice1)</span><br><span class=\"line\">\tfmt.Println(slice2)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>输出结果<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[1 2 3 4 5 6]</span><br><span class=\"line\">[1 2 3 4 5]</span><br></pre></td></tr></table></figure></p>\n<p>在上面的例子中，我们将slice1的元素拷贝到slice2，因为slice2的长度为5，所以最多拷贝5个元素。</p>\n<p>总结一下，数组和切片的区别就在于<code>[]</code>里面是否有数字或者<code>...</code>。因为数值长度是固定的，而切片是可变的。</p>\n<h2 id=\"字典-Map\"><a href=\"#字典-Map\" class=\"headerlink\" title=\"字典(Map)\"></a>字典(Map)</h2><p>字典是一组<code>无序的</code>，<code>键值对</code>的<code>集合</code>。</p>\n<p>字典也叫做<code>关联数组</code>，因为数组通过<code>索引</code>来查找元素，而字典通过<code>键</code>来查找元素。当然，很显然的，字典的键是不能重复的。如果试图赋值给同一个键，后赋值的值将覆盖前面赋值的值。</p>\n<p>字典的定义也有两种，一种是<code>初始化数据</code>的定义方式，另一种是<code>使用神奇的make函数</code>来定义。<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> x = <span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">string</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"string\">\"A\"</span>: <span class=\"string\">\"Apple\"</span>,</span><br><span class=\"line\">\t\t<span class=\"string\">\"B\"</span>: <span class=\"string\">\"Banana\"</span>,</span><br><span class=\"line\">\t\t<span class=\"string\">\"O\"</span>: <span class=\"string\">\"Orange\"</span>,</span><br><span class=\"line\">\t\t<span class=\"string\">\"P\"</span>: <span class=\"string\">\"Pear\"</span>,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> key, val := <span class=\"keyword\">range</span> x &#123;</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">\"Key:\"</span>, key, <span class=\"string\">\"Value:\"</span>, val)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>输出结果为<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Key: A Value: Apple</span><br><span class=\"line\">Key: B Value: Banana</span><br><span class=\"line\">Key: O Value: Orange</span><br><span class=\"line\">Key: P Value: Pear</span><br></pre></td></tr></table></figure></p>\n<p>在上面的例子中，我们定义了一个string:string的字典，其中<code>[]</code>之间的是键类型，右边的是值类型。另外我们还看到了<code>range函数，此函数一样神奇，可以用来迭代字典元素，返回key:value键值对</code>。当然如果你对键或者值不感兴趣，一样可以使用<code>下划线(_)</code>来忽略返回值。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> x <span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">string</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tx = <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">string</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">\tx[<span class=\"string\">\"A\"</span>] = <span class=\"string\">\"Apple\"</span></span><br><span class=\"line\">\tx[<span class=\"string\">\"B\"</span>] = <span class=\"string\">\"Banana\"</span></span><br><span class=\"line\">\tx[<span class=\"string\">\"O\"</span>] = <span class=\"string\">\"Orange\"</span></span><br><span class=\"line\">\tx[<span class=\"string\">\"P\"</span>] = <span class=\"string\">\"Pear\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> key, val := <span class=\"keyword\">range</span> x &#123;</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">\"Key:\"</span>, key, <span class=\"string\">\"Value:\"</span>, val)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面的方式就是使用了make函数来初始化字典，<code>试图为未经过初始化的字典添加元素会导致运行错误</code>，你可以把使用make函数初始化的那一行注释掉，然后看一下。</p>\n<p>当然上面的例子中，我们可以把定义和初始化合成一句。<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tx := <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">string</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">\tx[<span class=\"string\">\"A\"</span>] = <span class=\"string\">\"Apple\"</span></span><br><span class=\"line\">\tx[<span class=\"string\">\"B\"</span>] = <span class=\"string\">\"Banana\"</span></span><br><span class=\"line\">\tx[<span class=\"string\">\"O\"</span>] = <span class=\"string\">\"Orange\"</span></span><br><span class=\"line\">\tx[<span class=\"string\">\"P\"</span>] = <span class=\"string\">\"Pear\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> key, val := <span class=\"keyword\">range</span> x &#123;</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">\"Key:\"</span>, key, <span class=\"string\">\"Value:\"</span>, val)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>现在我们再来看一下字典的数据访问方式。如果你访问的元素所对应的键存在于字典中，那么没有问题，如果不存在呢？</p>\n<p>这个时候会返回零值。对于字符串零值就是””，对于整数零值就是0。但是对于下面的例子：<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tx := <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">int</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">\tx[<span class=\"string\">\"A\"</span>] = <span class=\"number\">0</span></span><br><span class=\"line\">\tx[<span class=\"string\">\"B\"</span>] = <span class=\"number\">20</span></span><br><span class=\"line\">\tx[<span class=\"string\">\"O\"</span>] = <span class=\"number\">30</span></span><br><span class=\"line\">\tx[<span class=\"string\">\"P\"</span>] = <span class=\"number\">40</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tfmt.Println(x[<span class=\"string\">\"C\"</span>])</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>在这个例子中，很显然不存在键C，但是程序的输出结果为0，这样就和键A对应的值混淆了。</p>\n<p>Go提供了一种方法来解决这个问题：<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tx := <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">int</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">\tx[<span class=\"string\">\"A\"</span>] = <span class=\"number\">0</span></span><br><span class=\"line\">\tx[<span class=\"string\">\"B\"</span>] = <span class=\"number\">20</span></span><br><span class=\"line\">\tx[<span class=\"string\">\"O\"</span>] = <span class=\"number\">30</span></span><br><span class=\"line\">\tx[<span class=\"string\">\"P\"</span>] = <span class=\"number\">40</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> val, ok := x[<span class=\"string\">\"C\"</span>]; ok &#123;</span><br><span class=\"line\">\t\tfmt.Println(val)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>上面的例子中，我们可以看到事实上使用<code>x[&quot;C&quot;]</code>的返回值有两个，一个是值，另一个是是否存在此键的bool型变量，所以我们看到ok为true的时候就输出键C的值，如果ok为false，那就是字典中不存在这个键。</p>\n<p>现在我们再来看看<code>Go提供的内置函数delete，这个函数可以用来从字典中删除元素</code>。<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tx := <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">int</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">\tx[<span class=\"string\">\"A\"</span>] = <span class=\"number\">10</span></span><br><span class=\"line\">\tx[<span class=\"string\">\"B\"</span>] = <span class=\"number\">20</span></span><br><span class=\"line\">\tx[<span class=\"string\">\"C\"</span>] = <span class=\"number\">30</span></span><br><span class=\"line\">\tx[<span class=\"string\">\"D\"</span>] = <span class=\"number\">40</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"Before Delete\"</span>)</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"Length:\"</span>, <span class=\"built_in\">len</span>(x))</span><br><span class=\"line\">\tfmt.Println(x)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">delete</span>(x, <span class=\"string\">\"A\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"After Delete\"</span>)</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"Length:\"</span>, <span class=\"built_in\">len</span>(x))</span><br><span class=\"line\">\tfmt.Println(x)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>输出结果为<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Before Delete</span><br><span class=\"line\">Length: 4</span><br><span class=\"line\">map[A:10 B:20 C:30 D:40]</span><br><span class=\"line\">After Delete</span><br><span class=\"line\">Length: 3</span><br><span class=\"line\">map[B:20 C:30 D:40]</span><br></pre></td></tr></table></figure></p>\n<p>我们在删除元素前查看一下字典长度和元素，删除之后再看一下。这里面我们还可以看到<code>len函数也可以用来获取字典的元素个数</code>。当然如果你试图删除一个不存在的键，那么程序也不会报错，只是不会对字典造成任何影响。</p>\n<p>最后我们再用一个稍微复杂的例子来结束字典的介绍。</p>\n<p>我们有一个学生登记表，登记表里面有一组学号，每个学号对应一个学生，每个学生有名字和年龄。<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> facebook = <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">int</span>)</span><br><span class=\"line\">\tfacebook[<span class=\"string\">\"0616020432\"</span>] = <span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">int</span>&#123;<span class=\"string\">\"Jemy\"</span>: <span class=\"number\">25</span>&#125;</span><br><span class=\"line\">\tfacebook[<span class=\"string\">\"0616020433\"</span>] = <span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">int</span>&#123;<span class=\"string\">\"Andy\"</span>: <span class=\"number\">23</span>&#125;</span><br><span class=\"line\">\tfacebook[<span class=\"string\">\"0616020434\"</span>] = <span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">int</span>&#123;<span class=\"string\">\"Bill\"</span>: <span class=\"number\">22</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> stu_no, stu_info := <span class=\"keyword\">range</span> facebook &#123;</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">\"Student:\"</span>, stu_no)</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> name, age := <span class=\"keyword\">range</span> stu_info &#123;</span><br><span class=\"line\">\t\t\tfmt.Println(<span class=\"string\">\"Name:\"</span>, name, <span class=\"string\">\"Age:\"</span>, age)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tfmt.Println()</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>输出结果为<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Student: 0616020432</span><br><span class=\"line\">Name Jemy Age 25</span><br><span class=\"line\"></span><br><span class=\"line\">Student: 0616020433</span><br><span class=\"line\">Name Andy Age 23</span><br><span class=\"line\"></span><br><span class=\"line\">Student: 0616020434</span><br><span class=\"line\">Name Bill Age 22</span><br></pre></td></tr></table></figure></p>\n<p>当然我们也可以用初始化的方式定义字典：<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> facebook = <span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">int</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"string\">\"0616020432\"</span>: &#123;<span class=\"string\">\"Jemy\"</span>: <span class=\"number\">25</span>&#125;,</span><br><span class=\"line\">\t\t<span class=\"string\">\"0616020433\"</span>: &#123;<span class=\"string\">\"Andy\"</span>: <span class=\"number\">23</span>&#125;,</span><br><span class=\"line\">\t\t<span class=\"string\">\"0616020434\"</span>: &#123;<span class=\"string\">\"Bill\"</span>: <span class=\"number\">22</span>&#125;,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> stu_no, stu_info := <span class=\"keyword\">range</span> facebook &#123;</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">\"Student:\"</span>, stu_no)</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> name, age := <span class=\"keyword\">range</span> stu_info &#123;</span><br><span class=\"line\">\t\t\tfmt.Println(<span class=\"string\">\"Name:\"</span>, name, <span class=\"string\">\"Age:\"</span>, age)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tfmt.Println()</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>输出结果是一样的。</p>"},{"title":"go语言基础--并行计算、包、测试","date":"2017-07-06T03:40:38.000Z","_content":"# Go并行计算\n\n如果说Go有什么让人一见钟情的特性，那大概就是并行计算了吧。\n\n做个题目\n\n>如果我们列出10以下所有能够被3或者5整除的自然数，那么我们得到的是3，5，6和9。这四个数的和是23。\n那么请计算1000以下（不包括1000）的所有能够被3或者5整除的自然数的和。\n\n<!--more-->\n这个题目的一个思路就是：\n\n(1) 先计算1000以下所有能够被3整除的整数的和A，  \n(2) 然后计算1000以下所有能够被5整除的整数和B，\n(3) 然后再计算1000以下所有能够被3和5整除的整数和C， \n(4) 使用A+B-C就得到了最后的结果。  \n\n按照上面的方法，传统的方法当然就是一步一步计算，然后再到第(4)步汇总了。\n\n但是一旦有了Go，我们就可以让前面三个步骤并行计算，然后再在第(4)步汇总。\n\n并行计算涉及到一个新的`数据类型chan`和一个新的`关键字go`。\n\n先看例子：\n\n``` go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"time\"\n)\n\nfunc get_sum_of_divisible(num int, divider int, resultChan chan int) {\n\tsum := 0\n\tfor value := 0; value < num; value++ {\n\t\tif value%divider == 0 {\n\t\t\tsum += value\n\t\t}\n\t}\n\tresultChan <- sum\n}\n\nfunc main() {\n\tLIMIT := 10\n\tresultChan := make(chan int, 3)\n\tt_start := time.Now()\n\tgo get_sum_of_divisible(LIMIT, 3, resultChan)\n\tgo get_sum_of_divisible(LIMIT, 5, resultChan)\n\t//这里其实那个是被3整除，哪个是被5整除看具体调度方法，不过由于是求和，所以没关系\n\tsum3, sum5 := <-resultChan, <-resultChan\n\n\t//单独算被15整除的\n\tgo get_sum_of_divisible(LIMIT, 15, resultChan)\n\tsum15 := <-resultChan\n\n\tsum := sum3 + sum5 - sum15\n\tt_end := time.Now()\n\tfmt.Println(sum)\n\tfmt.Println(t_end.Sub(t_start))\n}\n```\n\n(1) 在上面的例子中，我们首先定义了一个普通的函数get_sum_of_divisible，这个函数的`最后一个参数是一个整型chan类型`，这种类型，你可以把它当作一个先进先出的队列。你可以`向它写入数据`，也可以`从它读出数据`。它`所能接受的数据类型`就是`由chan关键字后面的类型所决定`的。在上面的例子中，我们使用`<-`运算符将函数计算的结果写入channel。channel是go提供的用来协程之间通信的方式。本例中main是一个协程，三个get_sum_of_divisible调用是协程。要在这四个协程间通信，必须有一种可靠的手段。\n\n(2) 在main函数中，我们使用go关键字来开启并行计算。并行计算是由goroutine来支持的，`goroutine`又叫做`协程`，你可以把它看作为比线程更轻量级的运算。开启一个协程很简单，就是`go关键字`后面`跟上所要运行的函数`。\n\n(3) 最后，我们要从channel中取出并行计算的结果。使用`<-`运算符从channel里面取出数据。\n\n在本例中，我们为了演示go并行计算的速度，还引进了time包来计算程序执行时间。在同普通的顺序计算相比，并行计算的速度是非同凡响的。\n\n好了，上面的例子看完，我们来详细讲解Go的并行计算。\n\n## Go Routine 协程\n\n所谓协程，就是Go提供的轻量级的独立运算过程，比线程还轻。创建一个协程很简单，就是go关键字加上所要运行的函数。看个例子：\n```go\n\tpackage main\n\n\timport (\n\t\t\"fmt\"\n\t)\n\n\tfunc list_elem(n int) {\n\t\tfor i := 0; i < n; i++ {\n\t\t\tfmt.Println(i)\n\t\t}\n\t}\n\tfunc main() {\n\t\tgo list_elem(10)\n\t}\n```\n上面的例子是创建一个协程遍历一下元素。但是当你运行的时候，你会`发现什么都没有输出`！`为什么呢？`\n因为上面的`main函数`在`创建完协程后`就`立刻退出`了，所以`协程`还`没有来得及运行`呢！修改一下：\n```go\n\tpackage main\n\n\timport (\n\t\t\"fmt\"\n\t)\n\n\tfunc list_elem(n int) {\n\t\tfor i := 0; i < n; i++ {\n\t\t\tfmt.Println(i)\n\t\t}\n\t}\n\tfunc main() {\n\t\tgo list_elem(10)\n\t\tvar input string\n\t\tfmt.Scanln(&input)\n\t}\n```\n这里，我们在main函数创建协程后，要求用户输入任何数据后才退出，这样协程就有了运行的时间，故而输出结果：\n```\n\t0\n\t1\n\t2\n\t3\n\t4\n\t5\n\t6\n\t7\n\t8\n\t9\n```\n其实在开头的例子里面，我们的main函数事实上也被阻塞了，因为`sum3, sum5, sum15 := <-resultChan, <-resultChan, <-resultChan`这行代码在channel里面没有数据或者数据个数不符的时候，都会阻塞在那里，直到协程结束，写入结果。\n\n不过既然是并行计算，我们还是得看看协程是否真的并行计算了。\n```go\n\tpackage main\n\n\timport (\n\t\t\"fmt\"\n\t\t\"math/rand\"\n\t\t\"time\"\n\t)\n\n\tfunc list_elem(n int, tag string) {\n\t\tfor i := 0; i < n; i++ {\n\t\t\tfmt.Println(tag, i)\n\t\t\ttick := time.Duration(rand.Intn(100))\n\t\t\ttime.Sleep(time.Millisecond * tick)\n\t\t}\n\t}\n\tfunc main() {\n\t\tgo list_elem(10, \"go_a\")\n\t\tgo list_elem(20, \"go_b\")\n\t\tvar input string\n\t\tfmt.Scanln(&input)\n\t}\n```\n输出结果\n```\n\tgo_a 0\n\tgo_b 0\n\tgo_a 1\n\tgo_b 1\n\tgo_a 2\n\tgo_b 2\n\tgo_b 3\n\tgo_b 4\n\tgo_a 3\n\tgo_b 5\n\tgo_b 6\n\tgo_a 4\n\tgo_a 5\n\tgo_b 7\n\tgo_a 6\n\tgo_a 7\n\tgo_b 8\n\tgo_b 9\n\tgo_a 8\n\tgo_b 10\n\tgo_b 11\n\tgo_a 9\n\tgo_b 12\n\tgo_b 13\n\tgo_b 14\n\tgo_b 15\n\tgo_b 16\n\tgo_b 17\n\tgo_b 18\n\tgo_b 19\n```\n在上面的例子中，我们让两个协程在每输出一个数字的时候，随机Sleep了一会儿。如果是并行计算，那么输出是无序的。从上面的例子中，我们可以看出两个协程确实并行运行了。\n\n\n## Channel通道\n\nChannel提供了`协程之间`的`通信方式`以及`运行同步机制`。\n\n假设训练定点投篮和三分投篮，教练在计数。\n```go\n\tpackage main\n\n\timport (\n\t\t\"fmt\"\n\t\t\"time\"\n\t)\n\n\tfunc fixed_shooting(msg_chan chan string) {\n\t\tfor {\n\t\t\tmsg_chan <- \"fixed shooting\"\n\t\t\tfmt.Println(\"continue fixed shooting...\")\n\t\t}\n\t}\n\n\tfunc count(msg_chan chan string) {\n\t\tfor {\n\t\t\tmsg := <-msg_chan\n\t\t\tfmt.Println(msg)\n\t\t\ttime.Sleep(time.Second * 1)\n\t\t}\n\t}\n\n\tfunc main() {\n\t\tvar c chan string\n\t\tc = make(chan string)\n\n\t\tgo fixed_shooting(c)\n\t\tgo count(c)\n\n\t\tvar input string\n\t\tfmt.Scanln(&input)\n\t}\n```\n输出结果为：\n```\n\tfixed shooting\n\tcontinue fixed shooting...\n\tfixed shooting\n\tcontinue fixed shooting...\n\tfixed shooting\n\tcontinue fixed shooting...\n```\n我们看到在fixed_shooting函数里面我们将消息传递到channel，然后输出提示信息\"continue fixed shooting...\"，而在count函数里面，我们从channel里面取出消息输出，然后间隔1秒再去取消息输出。这里面我们可以考虑一下，如果我们不去从channel中取消息会出现什么情况？我们把main函数里面的`go count(c)`注释掉，然后再运行一下。发现程序再也不会输出消息和提示信息了。这是因为channel中根本就没有信息了，因为`如果你要向channel里面写信息`，`必须有配对的取信息的一端`，否则是不会写的。\n\n我们再把三分投篮加上。\n```go\n\tpackage main\n\n\timport (\n\t\t\"fmt\"\n\t\t\"time\"\n\t)\n\n\tfunc fixed_shooting(msg_chan chan string) {\n\t\tfor {\n\t\t\tmsg_chan <- \"fixed shooting\"\n\t\t}\n\t}\n\n\tfunc three_point_shooting(msg_chan chan string) {\n\t\tfor {\n\t\t\tmsg_chan <- \"three point shooting\"\n\t\t}\n\t}\n\n\tfunc count(msg_chan chan string) {\n\t\tfor {\n\t\t\tmsg := <-msg_chan\n\t\t\tfmt.Println(msg)\n\t\t\ttime.Sleep(time.Second * 1)\n\t\t}\n\t}\n\n\tfunc main() {\n\t\tvar c chan string\n\t\tc = make(chan string)\n\n\t\tgo fixed_shooting(c)\n\t\tgo three_point_shooting(c)\n\t\tgo count(c)\n\n\t\tvar input string\n\t\tfmt.Scanln(&input)\n\t}\n```\n输出结果为：\n```\n\tfixed shooting\n\tthree point shooting\n\tfixed shooting\n\tthree point shooting\n\tfixed shooting\n\tthree point shooting\n```\n我们看到程序交替输出定点投篮和三分投篮，这是因为写入channel的信息必须要读取出来，否则尝试再次写入就失败了。\n\n在上面的例子中，我们发现`定义一个channel信息变量`的方式就是多加一个`chan`关键字。并且你能够`向channel写入数据`和`从channel读取数据`。这里我们还可以设置channel通道的方向。\n\n## Channel通道方向\n\n所谓的`通道方向`就是`写`和`读`。如果我们如下定义\n\n\tc chan<- string //那么你只能向channel写入数据\n\t\n而这种定义\n\n\tc <-chan string //那么你只能从channel读取数据\n\t\n`试图向只读chan变量写入数据或者试图从只写chan变量读取数据都会导致编译错误。`\n\n如果是默认的定义方式\n\n\tc chan string //那么你既可以向channel写入数据也可以从channnel读取数据\n\t\n\t\n## 多通道(Select)\n\n如果上面的投篮训练现在有两个教练了，各自负责一个训练项目。而且还在不同的篮球场，这个时候很显然，我们一个channel就不够用了。修改一下：\n```go\n\tpackage main\n\n\timport (\n\t\t\"fmt\"\n\t\t\"time\"\n\t)\n\n\tfunc fixed_shooting(msg_chan chan string) {\n\t\tfor {\n\t\t\tmsg_chan <- \"fixed shooting\"\n\t\t\ttime.Sleep(time.Second * 1)\n\t\t}\n\t}\n\n\tfunc three_point_shooting(msg_chan chan string) {\n\t\tfor {\n\t\t\tmsg_chan <- \"three point shooting\"\n\t\t\ttime.Sleep(time.Second * 1)\n\t\t}\n\t}\n\n\tfunc main() {\n\t\tc_fixed := make(chan string)\n\t\tc_3_point := make(chan string)\n\n\t\tgo fixed_shooting(c_fixed)\n\t\tgo three_point_shooting(c_3_point)\n\n\t\tgo func() {\n\t\t\tfor {\n\t\t\t\tselect {\n\t\t\t\tcase msg1 := <-c_fixed:\n\t\t\t\t\tfmt.Println(msg1)\n\t\t\t\tcase msg2 := <-c_3_point:\n\t\t\t\t\tfmt.Println(msg2)\n\t\t\t\t}\n\t\t\t}\n\n\t\t}()\n\n\t\tvar input string\n\t\tfmt.Scanln(&input)\n\t}\n```\n其他的和上面的一样，唯一不同的是我们将定点投篮和三分投篮的消息写入了不同的channel，那么main函数如何知道从哪个channel读取消息呢？使用select方法，select方法依次检查每个channel是否有消息传递过来，如果有就取出来输出。如果同时有多个消息到达，那么select闭上眼睛随机选一个channel来从中读取消息，如果没有一个channel有消息到达，那么select语句就阻塞在这里一直等待。\n\n在某些情况下，比如学生投篮中受伤了，那么就轮到医护人员上场了，教练在一般看看，如果是重伤，教练就不等了，就回去了休息了，待会儿再过来看看情况。我们可以给select加上一个case用来判断是否等待各个消息到达超时。\n```go\n\tpackage main\n\n\timport (\n\t\t\"fmt\"\n\t\t\"time\"\n\t)\n\n\tfunc fixed_shooting(msg_chan chan string) {\n\t\tvar times = 3\n\t\tvar t = 1\n\t\tfor {\n\t\t\tif t <= times {\n\t\t\t\tmsg_chan <- \"fixed shooting\"\n\t\t\t}\n\t\t\tt++\n\t\t\ttime.Sleep(time.Second * 1)\n\t\t}\n\t}\n\n\tfunc three_point_shooting(msg_chan chan string) {\n\t\tvar times = 5\n\t\tvar t = 1\n\t\tfor {\n\t\t\tif t <= times {\n\t\t\t\tmsg_chan <- \"three point shooting\"\n\t\t\t}\n\t\t\tt++\n\t\t\ttime.Sleep(time.Second * 1)\n\t\t}\n\t}\n\n\tfunc main() {\n\t\tc_fixed := make(chan string)\n\t\tc_3_point := make(chan string)\n\n\t\tgo fixed_shooting(c_fixed)\n\t\tgo three_point_shooting(c_3_point)\n\n\t\tgo func() {\n\t\t\tfor {\n\t\t\t\tselect {\n\t\t\t\tcase msg1 := <-c_fixed:\n\t\t\t\t\tfmt.Println(msg1)\n\t\t\t\tcase msg2 := <-c_3_point:\n\t\t\t\t\tfmt.Println(msg2)\n\t\t\t\tcase <-time.After(time.Second * 5):\n\t\t\t\t\tfmt.Println(\"timeout, check again...\")\n\t\t\t\t}\n\t\t\t}\n\n\t\t}()\n\n\t\tvar input string\n\t\tfmt.Scanln(&input)\n\t}\n```\n在上面的例子中，我们让投篮的人在几次过后挂掉，然后教练就每次等5秒出来看看情况（累死丫的，:-P），因为我们对等待的时间不感兴趣就不用变量存储了，直接`<-time.After(time.Second*5)`，或许你会奇怪，为什么各个channel消息都没有到达，select为什么不阻塞？就是因为这个time.After，虽然它没有显式地告诉你这是一个channel消息，但是记得么？main函数也是一个channel啊！哈哈！至于time.After的功能实际上让main阻塞了5秒后返回给main的channel一个时间。所以我们在case里面把这个时间消息读出来，select就不阻塞了。\n\n输出结果如下：\n```\n\tfixed shooting\n\tthree point shooting\n\tfixed shooting\n\tthree point shooting\n\tfixed shooting\n\tthree point shooting\n\tthree point shooting\n\tthree point shooting\n\ttimeout, check again...\n\ttimeout, check again...\n\ttimeout, check again...\n\ttimeout, check again...\n```\n这里select还有一个`default的选项`，如果你指定了default选项，那么当select发现`没有消息到达`的时候`也不会阻塞`，直接开始转回去再次判断。\n\n## Channel Buffer通道缓冲区\n\n我们定义chan变量的时候，还可以指定它的`缓冲区大小`。一般我们`定义的channel都是同步的`，也就是说接受端和发送端彼此等待对方ok才开始。但是如果你给一个channel`指定了一个缓冲区`，那么`消息的发送和接受式异步的`，`除非channel缓冲区已经满了`。\n\n\tc:=make(chan int, 1)\n\t\n我们看个例子：\n```go\n\tpackage main\n\n\timport (\n\t\t\"fmt\"\n\t\t\"strconv\"\n\t\t\"time\"\n\t)\n\n\tfunc shooting(msg_chan chan string) {\n\t\tvar group = 1\n\t\tfor {\n\t\t\tfor i := 1; i <= 10; i++ {\n\t\t\t\tmsg_chan <- strconv.Itoa(group) + \":\" + strconv.Itoa(i)\n\t\t\t}\n\t\t\tgroup++\n\t\t\ttime.Sleep(time.Second * 10)\n\t\t}\n\t}\n\n\tfunc count(msg_chan chan string) {\n\t\tfor {\n\t\t\tfmt.Println(<-msg_chan)\n\t\t}\n\t}\n\n\tfunc main() {\n\t\tvar c = make(chan string, 20)\n\t\tgo shooting(c)\n\t\tgo count(c)\n\n\t\tvar input string\n\t\tfmt.Scanln(&input)\n\t}\n```\n输出结果为：\n```\n\t1:1\n\t1:2\n\t1:3\n\t1:4\n\t1:5\n\t1:6\n\t1:7\n\t1:8\n\t1:9\n\t1:10\n\t2:1\n\t2:2\n\t2:3\n\t2:4\n\t2:5\n\t2:6\n\t2:7\n\t2:8\n\t2:9\n\t2:10\n\t3:1\n\t3:2\n\t3:3\n\t3:4\n\t3:5\n\t3:6\n\t3:7\n\t3:8\n\t3:9\n\t3:10\n\t4:1\n\t4:2\n\t4:3\n\t4:4\n\t4:5\n\t4:6\n\t4:7\n\t4:8\n\t4:9\n\t4:10\n```\n你可以尝试运行一下，每次都是一下子输出10个数据。然后等待10秒再输出一批。\n\n\n## 小结\n\n并行计算这种特点最适合用来开发网站服务器，因为一般网站服务都是高并发的，逻辑十分复杂。而使用Go的这种特性恰是提供了一种极好的方法。\n\n# 使用包和测试管理项目\n\nGo天生就是为了支持良好的项目管理体验而设计的。\n\n## 包\n\n在软件工程的实践中，我们会遇到很多功能重复的代码，比如去除字符串首尾的空格。高质量软件产品的特点就是它的部分代码是可以重用的，比如你不必每次写个函数去去除字符串首尾的空格。\n\n我们上面讲过变量，结构体，接口和函数等，事实上所谓的包，就是把一些用的多的这些变量，结构体，接口和函数等统一放置在一个逻辑块中。并且给它们起一个名字，这个名字就叫做包名。\n\n例如我们上面用的最多的fmt包，这个包提供了很多格式化输出的函数，你可以在自己的代码中引用这个包，来做格式化输出，而不用你自己每次去写个函数。一门成熟的语言都会提供齐全的基础功能包供人调用。\n\n使用包有三个好处\n\n1. 可以减少函数名称重复，因为不同包中可以存在名称相同的函数。否则得话，你得给这些函数加上前缀或者后缀以示区别。\n2. 包把函数等组织在一起，方便你查找和重用。比如你想用Println()函数输出一行字符串，你可以很方便地知道它在fmt包中，直接引用过来用就可以了。\n3. 使用包可以加速程序编译。因为包是预编译好的，你改动自己代码得时候，不必每次去把包编译一下。\n\n## 创建包\n\n我们现在来举个例子，用来演示Go的项目管理。\n\n首先我们在目录`/Users/jemy/JemyGraw/GoLang`下面创建文件夹`pkg_demo`。然后在`pkg_demo`里面创建`src`文件夹\n。然后再在`main`文件夹里面创建`main.go`文件。另外为了演示包的创建，我们在`src`目录下面创建文件夹`net.duokr`，然后再在`net.duokr`文件夹里面创建`math`文件夹，这个文件夹名称就是这个文件夹下面go文件的包名称。然后我们再创建一个`math_pkg.go`文件，之所以取这个名字而不是`math.go`只是为了说明这个文件名称和包名不需要一致。然后我们还创建了一个`math_pkg_test.go`文件作为包的测试用例文件。整体结构如下：\n\n\t.\n\t└── src\n\t    ├── main\n\t    │   ├── build.sh\n\t    │   └── main.go\n\t    └── net.duokr\n\t        └── math\n\t            ├── math_pkg.go\n\t            └── math_pkg_test.go\n\n\n其中build.sh是我们为了编译这个项目而写的脚本，因为编译项目需要几条命令，把它写在脚本文件中方便使用。另外为了能够让build.sh能够执行，使用`chmod +x build.sh`为它赋予可执行权限。build.bat是Windows下面的编译脚本。\n我们来看一下`math_pkg.go`的定义：\n```go\n\tpackage math\n\n\tfunc Add(a, b int) int {\n\t\treturn a + b\n\t}\n\tfunc Subtract(a, b int) int {\n\t\treturn a - b\n\t}\n\tfunc Multiply(a, b int) int {\n\t\treturn a * b\n\t}\n\n\tfunc Divide(a, b int) int {\n\t\tif b == 0 {\n\t\t\tpanic(\"Can not divided by zero\")\n\t\t}\n\t\treturn a / b\n\t}\n```\n首先是包名，然后是几个函数定义，这里我们会发现这些`函数定义首字母都是大写`，`Go规定了只有首字母大写的函数才能从包导出使用，即其他调用这个包中函数的代码只能调用那些导出的函数`。\n\n我们再看一下`main.go`的定义：\n```go\n\tpackage main\n\n\timport (\n\t\t\"fmt\"\n\t\tmath \"net.duokr/math\"\n\t)\n\n\tfunc main() {\n\t\tvar a = 100\n\t\tvar b = 200\n\n\t\tfmt.Println(\"Add demo:\", math.Add(a, b))\n\t\tfmt.Println(\"Substract demo:\", math.Subtract(a, b))\n\t\tfmt.Println(\"Multiply demo:\", math.Multiply(a, b))\n\t\tfmt.Println(\"Divide demo:\", math.Divide(a, b))\n\t}\n```\n在main.go里面，我们使用import关键字引用我们自定义的包math，引用的方法是从main包平行的文件夹net.duokr开始，后面跟上包名math。这里面我们给这个长长的包名起了一个别名就叫math。然后分别调用math包里面的函数。\n\n最后我们看一下我们的编译脚本：\n```sh\n\texport GOPATH=$GOPATH:/Users/jemy/JemyGraw/GoLang/pkg_demo\n\texport GOBIN=/Users/jemy/JemyGraw/GoLang/pkg_demo/bin\n\tgo build net.duokr/math\n\tgo build main.go\n\tgo install main\n```\n第一行，我们将项目路径加入GOPATH中，这样待会儿编译main.go的时候才能找到我们自定义的包；\n\n第二行，我们设置本项目的安装目录，第五行的命令将编译好的文件放到这个目录下面；\n\n第三行，我们编译我们的自定义包；\n\n第四行，我们编译我们main.go文件；\n\n第五行，将编译好的文件安装到指定目录下。\n\n这里还有一个Windows下面的编译脚本build.bat：\n```sh\n\t@echo off\n\tset GOPATH=GOPATH;C:\\JemyGraw\\GoLang\\pkg_demo\n\tset GOBIN=C:\\JemyGraw\\GoLang\\pkg_demo\\bin\n\tgo build net.duokr\\math\n\tgo build main.go\n\tgo install main\n```\n好了，运行脚本编译一下，在main文件夹和bin文件夹下面都会生成一个可执行文件。\n\n这个时候文件夹结构为：\n\n\t.\n\t├── bin\n\t│   └── main\n\t├── pkg\n\t│   └── darwin_386\n\t│       └── net.duokr\n\t│           └── math.a\n\t└── src\n\t    ├── main\n\t    │   ├── build.bat\n\t    │   ├── build.sh\n\t    │   ├── main\n\t    │   └── main.go\n\t    └── net.duokr\n\t        └── math\n\t            ├── math_pkg.go\n\t            └── math_pkg_test.go\n\n运行一下，输出结果为：\n```\n\tAdd demo: 300\n\tSubstract demo: -100\n\tMultiply demo: 20000\n\tDivide demo: 0\n```\n好了，包的使用介绍完毕，我们再来看一下测试用例怎么写。\n\n## 测试\n\n在上面的例子中，我们发现我们自定义的包下面还有一个math_pkg_test.go文件，这个文件包含了本包的一些测试用例。而且Go会把以`_test.go`结尾的文件当作是测试文件。\n\n测试怎么写，当然是用assert来判断程序的运行结果是否和预期的相同了。\n\n我们来看看这个math包的测试用例。\n```\n\tpackage math\n\n\timport (\n\t\t\"testing\"\n\t)\n\n\tfunc TestAdd(t *testing.T) {\n\t\tvar a = 100\n\t\tvar b = 200\n\n\t\tvar val = Add(a, b)\n\t\tif val != a+b {\n\t\t\tt.Error(\"Test Case [\", \"TestAdd\", \"] Failed!\")\n\t\t}\n\t}\n\n\tfunc TestSubtract(t *testing.T) {\n\t\tvar a = 100\n\t\tvar b = 200\n\n\t\tvar val = Subtract(a, b)\n\t\tif val != a-b {\n\t\t\tt.Error(\"Test Case [\", \"TestSubtract\", \"] Failed!\")\n\t\t}\n\t}\n\n\tfunc TestMultiply(t *testing.T) {\n\t\tvar a = 100\n\t\tvar b = 200\n\n\t\tvar val = Multiply(a, b)\n\t\tif val != a*b {\n\t\t\tt.Error(\"Test Case [\", \"TestMultiply\", \"] Failed!\")\n\t\t}\n\t}\n\n\tfunc TestDivideNormal(t *testing.T) {\n\t\tvar a = 100\n\t\tvar b = 200\n\n\t\tvar val = Divide(a, b)\n\t\tif val != a/b {\n\t\t\tt.Error(\"Test Case [\", \"TestDivideNormal\", \"] Failed!\")\n\t\t}\n\t}\n```\n将路径切换到测试文件所在目录，运行`go test`命令，go会自动测试所有的测试用例。\n\n在上面的例子中，测试用例的特点是以函数名以`Test`开始，而且具有唯一参数`t *testing.T`。\n\n## 小结\n\nGo提供的包和用例测试是构建优秀的软件产品的基础，只要我们不断学习，努力去做，一定可以做的很好。\n\t\n\n","source":"_posts/goeasylearn3.md","raw":"---\ntitle: go语言基础--并行计算、包、测试\ndate: 2017-07-06 11:40:38\ntags: go语言基础\ncategories: go语言学习笔记\n---\n# Go并行计算\n\n如果说Go有什么让人一见钟情的特性，那大概就是并行计算了吧。\n\n做个题目\n\n>如果我们列出10以下所有能够被3或者5整除的自然数，那么我们得到的是3，5，6和9。这四个数的和是23。\n那么请计算1000以下（不包括1000）的所有能够被3或者5整除的自然数的和。\n\n<!--more-->\n这个题目的一个思路就是：\n\n(1) 先计算1000以下所有能够被3整除的整数的和A，  \n(2) 然后计算1000以下所有能够被5整除的整数和B，\n(3) 然后再计算1000以下所有能够被3和5整除的整数和C， \n(4) 使用A+B-C就得到了最后的结果。  \n\n按照上面的方法，传统的方法当然就是一步一步计算，然后再到第(4)步汇总了。\n\n但是一旦有了Go，我们就可以让前面三个步骤并行计算，然后再在第(4)步汇总。\n\n并行计算涉及到一个新的`数据类型chan`和一个新的`关键字go`。\n\n先看例子：\n\n``` go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"time\"\n)\n\nfunc get_sum_of_divisible(num int, divider int, resultChan chan int) {\n\tsum := 0\n\tfor value := 0; value < num; value++ {\n\t\tif value%divider == 0 {\n\t\t\tsum += value\n\t\t}\n\t}\n\tresultChan <- sum\n}\n\nfunc main() {\n\tLIMIT := 10\n\tresultChan := make(chan int, 3)\n\tt_start := time.Now()\n\tgo get_sum_of_divisible(LIMIT, 3, resultChan)\n\tgo get_sum_of_divisible(LIMIT, 5, resultChan)\n\t//这里其实那个是被3整除，哪个是被5整除看具体调度方法，不过由于是求和，所以没关系\n\tsum3, sum5 := <-resultChan, <-resultChan\n\n\t//单独算被15整除的\n\tgo get_sum_of_divisible(LIMIT, 15, resultChan)\n\tsum15 := <-resultChan\n\n\tsum := sum3 + sum5 - sum15\n\tt_end := time.Now()\n\tfmt.Println(sum)\n\tfmt.Println(t_end.Sub(t_start))\n}\n```\n\n(1) 在上面的例子中，我们首先定义了一个普通的函数get_sum_of_divisible，这个函数的`最后一个参数是一个整型chan类型`，这种类型，你可以把它当作一个先进先出的队列。你可以`向它写入数据`，也可以`从它读出数据`。它`所能接受的数据类型`就是`由chan关键字后面的类型所决定`的。在上面的例子中，我们使用`<-`运算符将函数计算的结果写入channel。channel是go提供的用来协程之间通信的方式。本例中main是一个协程，三个get_sum_of_divisible调用是协程。要在这四个协程间通信，必须有一种可靠的手段。\n\n(2) 在main函数中，我们使用go关键字来开启并行计算。并行计算是由goroutine来支持的，`goroutine`又叫做`协程`，你可以把它看作为比线程更轻量级的运算。开启一个协程很简单，就是`go关键字`后面`跟上所要运行的函数`。\n\n(3) 最后，我们要从channel中取出并行计算的结果。使用`<-`运算符从channel里面取出数据。\n\n在本例中，我们为了演示go并行计算的速度，还引进了time包来计算程序执行时间。在同普通的顺序计算相比，并行计算的速度是非同凡响的。\n\n好了，上面的例子看完，我们来详细讲解Go的并行计算。\n\n## Go Routine 协程\n\n所谓协程，就是Go提供的轻量级的独立运算过程，比线程还轻。创建一个协程很简单，就是go关键字加上所要运行的函数。看个例子：\n```go\n\tpackage main\n\n\timport (\n\t\t\"fmt\"\n\t)\n\n\tfunc list_elem(n int) {\n\t\tfor i := 0; i < n; i++ {\n\t\t\tfmt.Println(i)\n\t\t}\n\t}\n\tfunc main() {\n\t\tgo list_elem(10)\n\t}\n```\n上面的例子是创建一个协程遍历一下元素。但是当你运行的时候，你会`发现什么都没有输出`！`为什么呢？`\n因为上面的`main函数`在`创建完协程后`就`立刻退出`了，所以`协程`还`没有来得及运行`呢！修改一下：\n```go\n\tpackage main\n\n\timport (\n\t\t\"fmt\"\n\t)\n\n\tfunc list_elem(n int) {\n\t\tfor i := 0; i < n; i++ {\n\t\t\tfmt.Println(i)\n\t\t}\n\t}\n\tfunc main() {\n\t\tgo list_elem(10)\n\t\tvar input string\n\t\tfmt.Scanln(&input)\n\t}\n```\n这里，我们在main函数创建协程后，要求用户输入任何数据后才退出，这样协程就有了运行的时间，故而输出结果：\n```\n\t0\n\t1\n\t2\n\t3\n\t4\n\t5\n\t6\n\t7\n\t8\n\t9\n```\n其实在开头的例子里面，我们的main函数事实上也被阻塞了，因为`sum3, sum5, sum15 := <-resultChan, <-resultChan, <-resultChan`这行代码在channel里面没有数据或者数据个数不符的时候，都会阻塞在那里，直到协程结束，写入结果。\n\n不过既然是并行计算，我们还是得看看协程是否真的并行计算了。\n```go\n\tpackage main\n\n\timport (\n\t\t\"fmt\"\n\t\t\"math/rand\"\n\t\t\"time\"\n\t)\n\n\tfunc list_elem(n int, tag string) {\n\t\tfor i := 0; i < n; i++ {\n\t\t\tfmt.Println(tag, i)\n\t\t\ttick := time.Duration(rand.Intn(100))\n\t\t\ttime.Sleep(time.Millisecond * tick)\n\t\t}\n\t}\n\tfunc main() {\n\t\tgo list_elem(10, \"go_a\")\n\t\tgo list_elem(20, \"go_b\")\n\t\tvar input string\n\t\tfmt.Scanln(&input)\n\t}\n```\n输出结果\n```\n\tgo_a 0\n\tgo_b 0\n\tgo_a 1\n\tgo_b 1\n\tgo_a 2\n\tgo_b 2\n\tgo_b 3\n\tgo_b 4\n\tgo_a 3\n\tgo_b 5\n\tgo_b 6\n\tgo_a 4\n\tgo_a 5\n\tgo_b 7\n\tgo_a 6\n\tgo_a 7\n\tgo_b 8\n\tgo_b 9\n\tgo_a 8\n\tgo_b 10\n\tgo_b 11\n\tgo_a 9\n\tgo_b 12\n\tgo_b 13\n\tgo_b 14\n\tgo_b 15\n\tgo_b 16\n\tgo_b 17\n\tgo_b 18\n\tgo_b 19\n```\n在上面的例子中，我们让两个协程在每输出一个数字的时候，随机Sleep了一会儿。如果是并行计算，那么输出是无序的。从上面的例子中，我们可以看出两个协程确实并行运行了。\n\n\n## Channel通道\n\nChannel提供了`协程之间`的`通信方式`以及`运行同步机制`。\n\n假设训练定点投篮和三分投篮，教练在计数。\n```go\n\tpackage main\n\n\timport (\n\t\t\"fmt\"\n\t\t\"time\"\n\t)\n\n\tfunc fixed_shooting(msg_chan chan string) {\n\t\tfor {\n\t\t\tmsg_chan <- \"fixed shooting\"\n\t\t\tfmt.Println(\"continue fixed shooting...\")\n\t\t}\n\t}\n\n\tfunc count(msg_chan chan string) {\n\t\tfor {\n\t\t\tmsg := <-msg_chan\n\t\t\tfmt.Println(msg)\n\t\t\ttime.Sleep(time.Second * 1)\n\t\t}\n\t}\n\n\tfunc main() {\n\t\tvar c chan string\n\t\tc = make(chan string)\n\n\t\tgo fixed_shooting(c)\n\t\tgo count(c)\n\n\t\tvar input string\n\t\tfmt.Scanln(&input)\n\t}\n```\n输出结果为：\n```\n\tfixed shooting\n\tcontinue fixed shooting...\n\tfixed shooting\n\tcontinue fixed shooting...\n\tfixed shooting\n\tcontinue fixed shooting...\n```\n我们看到在fixed_shooting函数里面我们将消息传递到channel，然后输出提示信息\"continue fixed shooting...\"，而在count函数里面，我们从channel里面取出消息输出，然后间隔1秒再去取消息输出。这里面我们可以考虑一下，如果我们不去从channel中取消息会出现什么情况？我们把main函数里面的`go count(c)`注释掉，然后再运行一下。发现程序再也不会输出消息和提示信息了。这是因为channel中根本就没有信息了，因为`如果你要向channel里面写信息`，`必须有配对的取信息的一端`，否则是不会写的。\n\n我们再把三分投篮加上。\n```go\n\tpackage main\n\n\timport (\n\t\t\"fmt\"\n\t\t\"time\"\n\t)\n\n\tfunc fixed_shooting(msg_chan chan string) {\n\t\tfor {\n\t\t\tmsg_chan <- \"fixed shooting\"\n\t\t}\n\t}\n\n\tfunc three_point_shooting(msg_chan chan string) {\n\t\tfor {\n\t\t\tmsg_chan <- \"three point shooting\"\n\t\t}\n\t}\n\n\tfunc count(msg_chan chan string) {\n\t\tfor {\n\t\t\tmsg := <-msg_chan\n\t\t\tfmt.Println(msg)\n\t\t\ttime.Sleep(time.Second * 1)\n\t\t}\n\t}\n\n\tfunc main() {\n\t\tvar c chan string\n\t\tc = make(chan string)\n\n\t\tgo fixed_shooting(c)\n\t\tgo three_point_shooting(c)\n\t\tgo count(c)\n\n\t\tvar input string\n\t\tfmt.Scanln(&input)\n\t}\n```\n输出结果为：\n```\n\tfixed shooting\n\tthree point shooting\n\tfixed shooting\n\tthree point shooting\n\tfixed shooting\n\tthree point shooting\n```\n我们看到程序交替输出定点投篮和三分投篮，这是因为写入channel的信息必须要读取出来，否则尝试再次写入就失败了。\n\n在上面的例子中，我们发现`定义一个channel信息变量`的方式就是多加一个`chan`关键字。并且你能够`向channel写入数据`和`从channel读取数据`。这里我们还可以设置channel通道的方向。\n\n## Channel通道方向\n\n所谓的`通道方向`就是`写`和`读`。如果我们如下定义\n\n\tc chan<- string //那么你只能向channel写入数据\n\t\n而这种定义\n\n\tc <-chan string //那么你只能从channel读取数据\n\t\n`试图向只读chan变量写入数据或者试图从只写chan变量读取数据都会导致编译错误。`\n\n如果是默认的定义方式\n\n\tc chan string //那么你既可以向channel写入数据也可以从channnel读取数据\n\t\n\t\n## 多通道(Select)\n\n如果上面的投篮训练现在有两个教练了，各自负责一个训练项目。而且还在不同的篮球场，这个时候很显然，我们一个channel就不够用了。修改一下：\n```go\n\tpackage main\n\n\timport (\n\t\t\"fmt\"\n\t\t\"time\"\n\t)\n\n\tfunc fixed_shooting(msg_chan chan string) {\n\t\tfor {\n\t\t\tmsg_chan <- \"fixed shooting\"\n\t\t\ttime.Sleep(time.Second * 1)\n\t\t}\n\t}\n\n\tfunc three_point_shooting(msg_chan chan string) {\n\t\tfor {\n\t\t\tmsg_chan <- \"three point shooting\"\n\t\t\ttime.Sleep(time.Second * 1)\n\t\t}\n\t}\n\n\tfunc main() {\n\t\tc_fixed := make(chan string)\n\t\tc_3_point := make(chan string)\n\n\t\tgo fixed_shooting(c_fixed)\n\t\tgo three_point_shooting(c_3_point)\n\n\t\tgo func() {\n\t\t\tfor {\n\t\t\t\tselect {\n\t\t\t\tcase msg1 := <-c_fixed:\n\t\t\t\t\tfmt.Println(msg1)\n\t\t\t\tcase msg2 := <-c_3_point:\n\t\t\t\t\tfmt.Println(msg2)\n\t\t\t\t}\n\t\t\t}\n\n\t\t}()\n\n\t\tvar input string\n\t\tfmt.Scanln(&input)\n\t}\n```\n其他的和上面的一样，唯一不同的是我们将定点投篮和三分投篮的消息写入了不同的channel，那么main函数如何知道从哪个channel读取消息呢？使用select方法，select方法依次检查每个channel是否有消息传递过来，如果有就取出来输出。如果同时有多个消息到达，那么select闭上眼睛随机选一个channel来从中读取消息，如果没有一个channel有消息到达，那么select语句就阻塞在这里一直等待。\n\n在某些情况下，比如学生投篮中受伤了，那么就轮到医护人员上场了，教练在一般看看，如果是重伤，教练就不等了，就回去了休息了，待会儿再过来看看情况。我们可以给select加上一个case用来判断是否等待各个消息到达超时。\n```go\n\tpackage main\n\n\timport (\n\t\t\"fmt\"\n\t\t\"time\"\n\t)\n\n\tfunc fixed_shooting(msg_chan chan string) {\n\t\tvar times = 3\n\t\tvar t = 1\n\t\tfor {\n\t\t\tif t <= times {\n\t\t\t\tmsg_chan <- \"fixed shooting\"\n\t\t\t}\n\t\t\tt++\n\t\t\ttime.Sleep(time.Second * 1)\n\t\t}\n\t}\n\n\tfunc three_point_shooting(msg_chan chan string) {\n\t\tvar times = 5\n\t\tvar t = 1\n\t\tfor {\n\t\t\tif t <= times {\n\t\t\t\tmsg_chan <- \"three point shooting\"\n\t\t\t}\n\t\t\tt++\n\t\t\ttime.Sleep(time.Second * 1)\n\t\t}\n\t}\n\n\tfunc main() {\n\t\tc_fixed := make(chan string)\n\t\tc_3_point := make(chan string)\n\n\t\tgo fixed_shooting(c_fixed)\n\t\tgo three_point_shooting(c_3_point)\n\n\t\tgo func() {\n\t\t\tfor {\n\t\t\t\tselect {\n\t\t\t\tcase msg1 := <-c_fixed:\n\t\t\t\t\tfmt.Println(msg1)\n\t\t\t\tcase msg2 := <-c_3_point:\n\t\t\t\t\tfmt.Println(msg2)\n\t\t\t\tcase <-time.After(time.Second * 5):\n\t\t\t\t\tfmt.Println(\"timeout, check again...\")\n\t\t\t\t}\n\t\t\t}\n\n\t\t}()\n\n\t\tvar input string\n\t\tfmt.Scanln(&input)\n\t}\n```\n在上面的例子中，我们让投篮的人在几次过后挂掉，然后教练就每次等5秒出来看看情况（累死丫的，:-P），因为我们对等待的时间不感兴趣就不用变量存储了，直接`<-time.After(time.Second*5)`，或许你会奇怪，为什么各个channel消息都没有到达，select为什么不阻塞？就是因为这个time.After，虽然它没有显式地告诉你这是一个channel消息，但是记得么？main函数也是一个channel啊！哈哈！至于time.After的功能实际上让main阻塞了5秒后返回给main的channel一个时间。所以我们在case里面把这个时间消息读出来，select就不阻塞了。\n\n输出结果如下：\n```\n\tfixed shooting\n\tthree point shooting\n\tfixed shooting\n\tthree point shooting\n\tfixed shooting\n\tthree point shooting\n\tthree point shooting\n\tthree point shooting\n\ttimeout, check again...\n\ttimeout, check again...\n\ttimeout, check again...\n\ttimeout, check again...\n```\n这里select还有一个`default的选项`，如果你指定了default选项，那么当select发现`没有消息到达`的时候`也不会阻塞`，直接开始转回去再次判断。\n\n## Channel Buffer通道缓冲区\n\n我们定义chan变量的时候，还可以指定它的`缓冲区大小`。一般我们`定义的channel都是同步的`，也就是说接受端和发送端彼此等待对方ok才开始。但是如果你给一个channel`指定了一个缓冲区`，那么`消息的发送和接受式异步的`，`除非channel缓冲区已经满了`。\n\n\tc:=make(chan int, 1)\n\t\n我们看个例子：\n```go\n\tpackage main\n\n\timport (\n\t\t\"fmt\"\n\t\t\"strconv\"\n\t\t\"time\"\n\t)\n\n\tfunc shooting(msg_chan chan string) {\n\t\tvar group = 1\n\t\tfor {\n\t\t\tfor i := 1; i <= 10; i++ {\n\t\t\t\tmsg_chan <- strconv.Itoa(group) + \":\" + strconv.Itoa(i)\n\t\t\t}\n\t\t\tgroup++\n\t\t\ttime.Sleep(time.Second * 10)\n\t\t}\n\t}\n\n\tfunc count(msg_chan chan string) {\n\t\tfor {\n\t\t\tfmt.Println(<-msg_chan)\n\t\t}\n\t}\n\n\tfunc main() {\n\t\tvar c = make(chan string, 20)\n\t\tgo shooting(c)\n\t\tgo count(c)\n\n\t\tvar input string\n\t\tfmt.Scanln(&input)\n\t}\n```\n输出结果为：\n```\n\t1:1\n\t1:2\n\t1:3\n\t1:4\n\t1:5\n\t1:6\n\t1:7\n\t1:8\n\t1:9\n\t1:10\n\t2:1\n\t2:2\n\t2:3\n\t2:4\n\t2:5\n\t2:6\n\t2:7\n\t2:8\n\t2:9\n\t2:10\n\t3:1\n\t3:2\n\t3:3\n\t3:4\n\t3:5\n\t3:6\n\t3:7\n\t3:8\n\t3:9\n\t3:10\n\t4:1\n\t4:2\n\t4:3\n\t4:4\n\t4:5\n\t4:6\n\t4:7\n\t4:8\n\t4:9\n\t4:10\n```\n你可以尝试运行一下，每次都是一下子输出10个数据。然后等待10秒再输出一批。\n\n\n## 小结\n\n并行计算这种特点最适合用来开发网站服务器，因为一般网站服务都是高并发的，逻辑十分复杂。而使用Go的这种特性恰是提供了一种极好的方法。\n\n# 使用包和测试管理项目\n\nGo天生就是为了支持良好的项目管理体验而设计的。\n\n## 包\n\n在软件工程的实践中，我们会遇到很多功能重复的代码，比如去除字符串首尾的空格。高质量软件产品的特点就是它的部分代码是可以重用的，比如你不必每次写个函数去去除字符串首尾的空格。\n\n我们上面讲过变量，结构体，接口和函数等，事实上所谓的包，就是把一些用的多的这些变量，结构体，接口和函数等统一放置在一个逻辑块中。并且给它们起一个名字，这个名字就叫做包名。\n\n例如我们上面用的最多的fmt包，这个包提供了很多格式化输出的函数，你可以在自己的代码中引用这个包，来做格式化输出，而不用你自己每次去写个函数。一门成熟的语言都会提供齐全的基础功能包供人调用。\n\n使用包有三个好处\n\n1. 可以减少函数名称重复，因为不同包中可以存在名称相同的函数。否则得话，你得给这些函数加上前缀或者后缀以示区别。\n2. 包把函数等组织在一起，方便你查找和重用。比如你想用Println()函数输出一行字符串，你可以很方便地知道它在fmt包中，直接引用过来用就可以了。\n3. 使用包可以加速程序编译。因为包是预编译好的，你改动自己代码得时候，不必每次去把包编译一下。\n\n## 创建包\n\n我们现在来举个例子，用来演示Go的项目管理。\n\n首先我们在目录`/Users/jemy/JemyGraw/GoLang`下面创建文件夹`pkg_demo`。然后在`pkg_demo`里面创建`src`文件夹\n。然后再在`main`文件夹里面创建`main.go`文件。另外为了演示包的创建，我们在`src`目录下面创建文件夹`net.duokr`，然后再在`net.duokr`文件夹里面创建`math`文件夹，这个文件夹名称就是这个文件夹下面go文件的包名称。然后我们再创建一个`math_pkg.go`文件，之所以取这个名字而不是`math.go`只是为了说明这个文件名称和包名不需要一致。然后我们还创建了一个`math_pkg_test.go`文件作为包的测试用例文件。整体结构如下：\n\n\t.\n\t└── src\n\t    ├── main\n\t    │   ├── build.sh\n\t    │   └── main.go\n\t    └── net.duokr\n\t        └── math\n\t            ├── math_pkg.go\n\t            └── math_pkg_test.go\n\n\n其中build.sh是我们为了编译这个项目而写的脚本，因为编译项目需要几条命令，把它写在脚本文件中方便使用。另外为了能够让build.sh能够执行，使用`chmod +x build.sh`为它赋予可执行权限。build.bat是Windows下面的编译脚本。\n我们来看一下`math_pkg.go`的定义：\n```go\n\tpackage math\n\n\tfunc Add(a, b int) int {\n\t\treturn a + b\n\t}\n\tfunc Subtract(a, b int) int {\n\t\treturn a - b\n\t}\n\tfunc Multiply(a, b int) int {\n\t\treturn a * b\n\t}\n\n\tfunc Divide(a, b int) int {\n\t\tif b == 0 {\n\t\t\tpanic(\"Can not divided by zero\")\n\t\t}\n\t\treturn a / b\n\t}\n```\n首先是包名，然后是几个函数定义，这里我们会发现这些`函数定义首字母都是大写`，`Go规定了只有首字母大写的函数才能从包导出使用，即其他调用这个包中函数的代码只能调用那些导出的函数`。\n\n我们再看一下`main.go`的定义：\n```go\n\tpackage main\n\n\timport (\n\t\t\"fmt\"\n\t\tmath \"net.duokr/math\"\n\t)\n\n\tfunc main() {\n\t\tvar a = 100\n\t\tvar b = 200\n\n\t\tfmt.Println(\"Add demo:\", math.Add(a, b))\n\t\tfmt.Println(\"Substract demo:\", math.Subtract(a, b))\n\t\tfmt.Println(\"Multiply demo:\", math.Multiply(a, b))\n\t\tfmt.Println(\"Divide demo:\", math.Divide(a, b))\n\t}\n```\n在main.go里面，我们使用import关键字引用我们自定义的包math，引用的方法是从main包平行的文件夹net.duokr开始，后面跟上包名math。这里面我们给这个长长的包名起了一个别名就叫math。然后分别调用math包里面的函数。\n\n最后我们看一下我们的编译脚本：\n```sh\n\texport GOPATH=$GOPATH:/Users/jemy/JemyGraw/GoLang/pkg_demo\n\texport GOBIN=/Users/jemy/JemyGraw/GoLang/pkg_demo/bin\n\tgo build net.duokr/math\n\tgo build main.go\n\tgo install main\n```\n第一行，我们将项目路径加入GOPATH中，这样待会儿编译main.go的时候才能找到我们自定义的包；\n\n第二行，我们设置本项目的安装目录，第五行的命令将编译好的文件放到这个目录下面；\n\n第三行，我们编译我们的自定义包；\n\n第四行，我们编译我们main.go文件；\n\n第五行，将编译好的文件安装到指定目录下。\n\n这里还有一个Windows下面的编译脚本build.bat：\n```sh\n\t@echo off\n\tset GOPATH=GOPATH;C:\\JemyGraw\\GoLang\\pkg_demo\n\tset GOBIN=C:\\JemyGraw\\GoLang\\pkg_demo\\bin\n\tgo build net.duokr\\math\n\tgo build main.go\n\tgo install main\n```\n好了，运行脚本编译一下，在main文件夹和bin文件夹下面都会生成一个可执行文件。\n\n这个时候文件夹结构为：\n\n\t.\n\t├── bin\n\t│   └── main\n\t├── pkg\n\t│   └── darwin_386\n\t│       └── net.duokr\n\t│           └── math.a\n\t└── src\n\t    ├── main\n\t    │   ├── build.bat\n\t    │   ├── build.sh\n\t    │   ├── main\n\t    │   └── main.go\n\t    └── net.duokr\n\t        └── math\n\t            ├── math_pkg.go\n\t            └── math_pkg_test.go\n\n运行一下，输出结果为：\n```\n\tAdd demo: 300\n\tSubstract demo: -100\n\tMultiply demo: 20000\n\tDivide demo: 0\n```\n好了，包的使用介绍完毕，我们再来看一下测试用例怎么写。\n\n## 测试\n\n在上面的例子中，我们发现我们自定义的包下面还有一个math_pkg_test.go文件，这个文件包含了本包的一些测试用例。而且Go会把以`_test.go`结尾的文件当作是测试文件。\n\n测试怎么写，当然是用assert来判断程序的运行结果是否和预期的相同了。\n\n我们来看看这个math包的测试用例。\n```\n\tpackage math\n\n\timport (\n\t\t\"testing\"\n\t)\n\n\tfunc TestAdd(t *testing.T) {\n\t\tvar a = 100\n\t\tvar b = 200\n\n\t\tvar val = Add(a, b)\n\t\tif val != a+b {\n\t\t\tt.Error(\"Test Case [\", \"TestAdd\", \"] Failed!\")\n\t\t}\n\t}\n\n\tfunc TestSubtract(t *testing.T) {\n\t\tvar a = 100\n\t\tvar b = 200\n\n\t\tvar val = Subtract(a, b)\n\t\tif val != a-b {\n\t\t\tt.Error(\"Test Case [\", \"TestSubtract\", \"] Failed!\")\n\t\t}\n\t}\n\n\tfunc TestMultiply(t *testing.T) {\n\t\tvar a = 100\n\t\tvar b = 200\n\n\t\tvar val = Multiply(a, b)\n\t\tif val != a*b {\n\t\t\tt.Error(\"Test Case [\", \"TestMultiply\", \"] Failed!\")\n\t\t}\n\t}\n\n\tfunc TestDivideNormal(t *testing.T) {\n\t\tvar a = 100\n\t\tvar b = 200\n\n\t\tvar val = Divide(a, b)\n\t\tif val != a/b {\n\t\t\tt.Error(\"Test Case [\", \"TestDivideNormal\", \"] Failed!\")\n\t\t}\n\t}\n```\n将路径切换到测试文件所在目录，运行`go test`命令，go会自动测试所有的测试用例。\n\n在上面的例子中，测试用例的特点是以函数名以`Test`开始，而且具有唯一参数`t *testing.T`。\n\n## 小结\n\nGo提供的包和用例测试是构建优秀的软件产品的基础，只要我们不断学习，努力去做，一定可以做的很好。\n\t\n\n","slug":"goeasylearn3","published":1,"updated":"2018-01-02T00:50:36.835Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjbwxj0z8000oh0voe23z1g3y","content":"<h1 id=\"Go并行计算\"><a href=\"#Go并行计算\" class=\"headerlink\" title=\"Go并行计算\"></a>Go并行计算</h1><p>如果说Go有什么让人一见钟情的特性，那大概就是并行计算了吧。</p>\n<p>做个题目</p>\n<blockquote>\n<p>如果我们列出10以下所有能够被3或者5整除的自然数，那么我们得到的是3，5，6和9。这四个数的和是23。<br>那么请计算1000以下（不包括1000）的所有能够被3或者5整除的自然数的和。</p>\n</blockquote>\n<a id=\"more\"></a>\n<p>这个题目的一个思路就是：</p>\n<p>(1) 先计算1000以下所有能够被3整除的整数的和A，<br>(2) 然后计算1000以下所有能够被5整除的整数和B，<br>(3) 然后再计算1000以下所有能够被3和5整除的整数和C，<br>(4) 使用A+B-C就得到了最后的结果。  </p>\n<p>按照上面的方法，传统的方法当然就是一步一步计算，然后再到第(4)步汇总了。</p>\n<p>但是一旦有了Go，我们就可以让前面三个步骤并行计算，然后再在第(4)步汇总。</p>\n<p>并行计算涉及到一个新的<code>数据类型chan</code>和一个新的<code>关键字go</code>。</p>\n<p>先看例子：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"time\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">get_sum_of_divisible</span><span class=\"params\">(num <span class=\"keyword\">int</span>, divider <span class=\"keyword\">int</span>, resultChan <span class=\"keyword\">chan</span> <span class=\"keyword\">int</span>)</span></span> &#123;</span><br><span class=\"line\">\tsum := <span class=\"number\">0</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> value := <span class=\"number\">0</span>; value &lt; num; value++ &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> value%divider == <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t\tsum += value</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tresultChan &lt;- sum</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tLIMIT := <span class=\"number\">10</span></span><br><span class=\"line\">\tresultChan := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"keyword\">int</span>, <span class=\"number\">3</span>)</span><br><span class=\"line\">\tt_start := time.Now()</span><br><span class=\"line\">\t<span class=\"keyword\">go</span> get_sum_of_divisible(LIMIT, <span class=\"number\">3</span>, resultChan)</span><br><span class=\"line\">\t<span class=\"keyword\">go</span> get_sum_of_divisible(LIMIT, <span class=\"number\">5</span>, resultChan)</span><br><span class=\"line\">\t<span class=\"comment\">//这里其实那个是被3整除，哪个是被5整除看具体调度方法，不过由于是求和，所以没关系</span></span><br><span class=\"line\">\tsum3, sum5 := &lt;-resultChan, &lt;-resultChan</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//单独算被15整除的</span></span><br><span class=\"line\">\t<span class=\"keyword\">go</span> get_sum_of_divisible(LIMIT, <span class=\"number\">15</span>, resultChan)</span><br><span class=\"line\">\tsum15 := &lt;-resultChan</span><br><span class=\"line\"></span><br><span class=\"line\">\tsum := sum3 + sum5 - sum15</span><br><span class=\"line\">\tt_end := time.Now()</span><br><span class=\"line\">\tfmt.Println(sum)</span><br><span class=\"line\">\tfmt.Println(t_end.Sub(t_start))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>(1) 在上面的例子中，我们首先定义了一个普通的函数get_sum_of_divisible，这个函数的<code>最后一个参数是一个整型chan类型</code>，这种类型，你可以把它当作一个先进先出的队列。你可以<code>向它写入数据</code>，也可以<code>从它读出数据</code>。它<code>所能接受的数据类型</code>就是<code>由chan关键字后面的类型所决定</code>的。在上面的例子中，我们使用<code>&lt;-</code>运算符将函数计算的结果写入channel。channel是go提供的用来协程之间通信的方式。本例中main是一个协程，三个get_sum_of_divisible调用是协程。要在这四个协程间通信，必须有一种可靠的手段。</p>\n<p>(2) 在main函数中，我们使用go关键字来开启并行计算。并行计算是由goroutine来支持的，<code>goroutine</code>又叫做<code>协程</code>，你可以把它看作为比线程更轻量级的运算。开启一个协程很简单，就是<code>go关键字</code>后面<code>跟上所要运行的函数</code>。</p>\n<p>(3) 最后，我们要从channel中取出并行计算的结果。使用<code>&lt;-</code>运算符从channel里面取出数据。</p>\n<p>在本例中，我们为了演示go并行计算的速度，还引进了time包来计算程序执行时间。在同普通的顺序计算相比，并行计算的速度是非同凡响的。</p>\n<p>好了，上面的例子看完，我们来详细讲解Go的并行计算。</p>\n<h2 id=\"Go-Routine-协程\"><a href=\"#Go-Routine-协程\" class=\"headerlink\" title=\"Go Routine 协程\"></a>Go Routine 协程</h2><p>所谓协程，就是Go提供的轻量级的独立运算过程，比线程还轻。创建一个协程很简单，就是go关键字加上所要运行的函数。看个例子：<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">list_elem</span><span class=\"params\">(n <span class=\"keyword\">int</span>)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; n; i++ &#123;</span><br><span class=\"line\">\t\tfmt.Println(i)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">go</span> list_elem(<span class=\"number\">10</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>上面的例子是创建一个协程遍历一下元素。但是当你运行的时候，你会<code>发现什么都没有输出</code>！<code>为什么呢？</code><br>因为上面的<code>main函数</code>在<code>创建完协程后</code>就<code>立刻退出</code>了，所以<code>协程</code>还<code>没有来得及运行</code>呢！修改一下：<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">list_elem</span><span class=\"params\">(n <span class=\"keyword\">int</span>)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; n; i++ &#123;</span><br><span class=\"line\">\t\tfmt.Println(i)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">go</span> list_elem(<span class=\"number\">10</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> input <span class=\"keyword\">string</span></span><br><span class=\"line\">\tfmt.Scanln(&amp;input)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这里，我们在main函数创建协程后，要求用户输入任何数据后才退出，这样协程就有了运行的时间，故而输出结果：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0</span><br><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td></tr></table></figure></p>\n<p>其实在开头的例子里面，我们的main函数事实上也被阻塞了，因为<code>sum3, sum5, sum15 := &lt;-resultChan, &lt;-resultChan, &lt;-resultChan</code>这行代码在channel里面没有数据或者数据个数不符的时候，都会阻塞在那里，直到协程结束，写入结果。</p>\n<p>不过既然是并行计算，我们还是得看看协程是否真的并行计算了。<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"math/rand\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"time\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">list_elem</span><span class=\"params\">(n <span class=\"keyword\">int</span>, tag <span class=\"keyword\">string</span>)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; n; i++ &#123;</span><br><span class=\"line\">\t\tfmt.Println(tag, i)</span><br><span class=\"line\">\t\ttick := time.Duration(rand.Intn(<span class=\"number\">100</span>))</span><br><span class=\"line\">\t\ttime.Sleep(time.Millisecond * tick)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">go</span> list_elem(<span class=\"number\">10</span>, <span class=\"string\">\"go_a\"</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">go</span> list_elem(<span class=\"number\">20</span>, <span class=\"string\">\"go_b\"</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> input <span class=\"keyword\">string</span></span><br><span class=\"line\">\tfmt.Scanln(&amp;input)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>输出结果<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">go_a 0</span><br><span class=\"line\">go_b 0</span><br><span class=\"line\">go_a 1</span><br><span class=\"line\">go_b 1</span><br><span class=\"line\">go_a 2</span><br><span class=\"line\">go_b 2</span><br><span class=\"line\">go_b 3</span><br><span class=\"line\">go_b 4</span><br><span class=\"line\">go_a 3</span><br><span class=\"line\">go_b 5</span><br><span class=\"line\">go_b 6</span><br><span class=\"line\">go_a 4</span><br><span class=\"line\">go_a 5</span><br><span class=\"line\">go_b 7</span><br><span class=\"line\">go_a 6</span><br><span class=\"line\">go_a 7</span><br><span class=\"line\">go_b 8</span><br><span class=\"line\">go_b 9</span><br><span class=\"line\">go_a 8</span><br><span class=\"line\">go_b 10</span><br><span class=\"line\">go_b 11</span><br><span class=\"line\">go_a 9</span><br><span class=\"line\">go_b 12</span><br><span class=\"line\">go_b 13</span><br><span class=\"line\">go_b 14</span><br><span class=\"line\">go_b 15</span><br><span class=\"line\">go_b 16</span><br><span class=\"line\">go_b 17</span><br><span class=\"line\">go_b 18</span><br><span class=\"line\">go_b 19</span><br></pre></td></tr></table></figure></p>\n<p>在上面的例子中，我们让两个协程在每输出一个数字的时候，随机Sleep了一会儿。如果是并行计算，那么输出是无序的。从上面的例子中，我们可以看出两个协程确实并行运行了。</p>\n<h2 id=\"Channel通道\"><a href=\"#Channel通道\" class=\"headerlink\" title=\"Channel通道\"></a>Channel通道</h2><p>Channel提供了<code>协程之间</code>的<code>通信方式</code>以及<code>运行同步机制</code>。</p>\n<p>假设训练定点投篮和三分投篮，教练在计数。<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"time\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">fixed_shooting</span><span class=\"params\">(msg_chan <span class=\"keyword\">chan</span> <span class=\"keyword\">string</span>)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">\t\tmsg_chan &lt;- <span class=\"string\">\"fixed shooting\"</span></span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">\"continue fixed shooting...\"</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">count</span><span class=\"params\">(msg_chan <span class=\"keyword\">chan</span> <span class=\"keyword\">string</span>)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">\t\tmsg := &lt;-msg_chan</span><br><span class=\"line\">\t\tfmt.Println(msg)</span><br><span class=\"line\">\t\ttime.Sleep(time.Second * <span class=\"number\">1</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> c <span class=\"keyword\">chan</span> <span class=\"keyword\">string</span></span><br><span class=\"line\">\tc = <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"keyword\">string</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">go</span> fixed_shooting(c)</span><br><span class=\"line\">\t<span class=\"keyword\">go</span> count(c)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> input <span class=\"keyword\">string</span></span><br><span class=\"line\">\tfmt.Scanln(&amp;input)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>输出结果为：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fixed shooting</span><br><span class=\"line\">continue fixed shooting...</span><br><span class=\"line\">fixed shooting</span><br><span class=\"line\">continue fixed shooting...</span><br><span class=\"line\">fixed shooting</span><br><span class=\"line\">continue fixed shooting...</span><br></pre></td></tr></table></figure></p>\n<p>我们看到在fixed_shooting函数里面我们将消息传递到channel，然后输出提示信息”continue fixed shooting…”，而在count函数里面，我们从channel里面取出消息输出，然后间隔1秒再去取消息输出。这里面我们可以考虑一下，如果我们不去从channel中取消息会出现什么情况？我们把main函数里面的<code>go count(c)</code>注释掉，然后再运行一下。发现程序再也不会输出消息和提示信息了。这是因为channel中根本就没有信息了，因为<code>如果你要向channel里面写信息</code>，<code>必须有配对的取信息的一端</code>，否则是不会写的。</p>\n<p>我们再把三分投篮加上。<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"time\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">fixed_shooting</span><span class=\"params\">(msg_chan <span class=\"keyword\">chan</span> <span class=\"keyword\">string</span>)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">\t\tmsg_chan &lt;- <span class=\"string\">\"fixed shooting\"</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">three_point_shooting</span><span class=\"params\">(msg_chan <span class=\"keyword\">chan</span> <span class=\"keyword\">string</span>)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">\t\tmsg_chan &lt;- <span class=\"string\">\"three point shooting\"</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">count</span><span class=\"params\">(msg_chan <span class=\"keyword\">chan</span> <span class=\"keyword\">string</span>)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">\t\tmsg := &lt;-msg_chan</span><br><span class=\"line\">\t\tfmt.Println(msg)</span><br><span class=\"line\">\t\ttime.Sleep(time.Second * <span class=\"number\">1</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> c <span class=\"keyword\">chan</span> <span class=\"keyword\">string</span></span><br><span class=\"line\">\tc = <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"keyword\">string</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">go</span> fixed_shooting(c)</span><br><span class=\"line\">\t<span class=\"keyword\">go</span> three_point_shooting(c)</span><br><span class=\"line\">\t<span class=\"keyword\">go</span> count(c)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> input <span class=\"keyword\">string</span></span><br><span class=\"line\">\tfmt.Scanln(&amp;input)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>输出结果为：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fixed shooting</span><br><span class=\"line\">three point shooting</span><br><span class=\"line\">fixed shooting</span><br><span class=\"line\">three point shooting</span><br><span class=\"line\">fixed shooting</span><br><span class=\"line\">three point shooting</span><br></pre></td></tr></table></figure></p>\n<p>我们看到程序交替输出定点投篮和三分投篮，这是因为写入channel的信息必须要读取出来，否则尝试再次写入就失败了。</p>\n<p>在上面的例子中，我们发现<code>定义一个channel信息变量</code>的方式就是多加一个<code>chan</code>关键字。并且你能够<code>向channel写入数据</code>和<code>从channel读取数据</code>。这里我们还可以设置channel通道的方向。</p>\n<h2 id=\"Channel通道方向\"><a href=\"#Channel通道方向\" class=\"headerlink\" title=\"Channel通道方向\"></a>Channel通道方向</h2><p>所谓的<code>通道方向</code>就是<code>写</code>和<code>读</code>。如果我们如下定义</p>\n<pre><code>c chan&lt;- string //那么你只能向channel写入数据\n</code></pre><p>而这种定义</p>\n<pre><code>c &lt;-chan string //那么你只能从channel读取数据\n</code></pre><p><code>试图向只读chan变量写入数据或者试图从只写chan变量读取数据都会导致编译错误。</code></p>\n<p>如果是默认的定义方式</p>\n<pre><code>c chan string //那么你既可以向channel写入数据也可以从channnel读取数据\n</code></pre><h2 id=\"多通道-Select\"><a href=\"#多通道-Select\" class=\"headerlink\" title=\"多通道(Select)\"></a>多通道(Select)</h2><p>如果上面的投篮训练现在有两个教练了，各自负责一个训练项目。而且还在不同的篮球场，这个时候很显然，我们一个channel就不够用了。修改一下：<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"time\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">fixed_shooting</span><span class=\"params\">(msg_chan <span class=\"keyword\">chan</span> <span class=\"keyword\">string</span>)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">\t\tmsg_chan &lt;- <span class=\"string\">\"fixed shooting\"</span></span><br><span class=\"line\">\t\ttime.Sleep(time.Second * <span class=\"number\">1</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">three_point_shooting</span><span class=\"params\">(msg_chan <span class=\"keyword\">chan</span> <span class=\"keyword\">string</span>)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">\t\tmsg_chan &lt;- <span class=\"string\">\"three point shooting\"</span></span><br><span class=\"line\">\t\ttime.Sleep(time.Second * <span class=\"number\">1</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tc_fixed := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"keyword\">string</span>)</span><br><span class=\"line\">\tc_3_point := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"keyword\">string</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">go</span> fixed_shooting(c_fixed)</span><br><span class=\"line\">\t<span class=\"keyword\">go</span> three_point_shooting(c_3_point)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">select</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">case</span> msg1 := &lt;-c_fixed:</span><br><span class=\"line\">\t\t\t\tfmt.Println(msg1)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">case</span> msg2 := &lt;-c_3_point:</span><br><span class=\"line\">\t\t\t\tfmt.Println(msg2)</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;()</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> input <span class=\"keyword\">string</span></span><br><span class=\"line\">\tfmt.Scanln(&amp;input)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>其他的和上面的一样，唯一不同的是我们将定点投篮和三分投篮的消息写入了不同的channel，那么main函数如何知道从哪个channel读取消息呢？使用select方法，select方法依次检查每个channel是否有消息传递过来，如果有就取出来输出。如果同时有多个消息到达，那么select闭上眼睛随机选一个channel来从中读取消息，如果没有一个channel有消息到达，那么select语句就阻塞在这里一直等待。</p>\n<p>在某些情况下，比如学生投篮中受伤了，那么就轮到医护人员上场了，教练在一般看看，如果是重伤，教练就不等了，就回去了休息了，待会儿再过来看看情况。我们可以给select加上一个case用来判断是否等待各个消息到达超时。<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"time\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">fixed_shooting</span><span class=\"params\">(msg_chan <span class=\"keyword\">chan</span> <span class=\"keyword\">string</span>)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> times = <span class=\"number\">3</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> t = <span class=\"number\">1</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> t &lt;= times &#123;</span><br><span class=\"line\">\t\t\tmsg_chan &lt;- <span class=\"string\">\"fixed shooting\"</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tt++</span><br><span class=\"line\">\t\ttime.Sleep(time.Second * <span class=\"number\">1</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">three_point_shooting</span><span class=\"params\">(msg_chan <span class=\"keyword\">chan</span> <span class=\"keyword\">string</span>)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> times = <span class=\"number\">5</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> t = <span class=\"number\">1</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> t &lt;= times &#123;</span><br><span class=\"line\">\t\t\tmsg_chan &lt;- <span class=\"string\">\"three point shooting\"</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tt++</span><br><span class=\"line\">\t\ttime.Sleep(time.Second * <span class=\"number\">1</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tc_fixed := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"keyword\">string</span>)</span><br><span class=\"line\">\tc_3_point := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"keyword\">string</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">go</span> fixed_shooting(c_fixed)</span><br><span class=\"line\">\t<span class=\"keyword\">go</span> three_point_shooting(c_3_point)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">select</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">case</span> msg1 := &lt;-c_fixed:</span><br><span class=\"line\">\t\t\t\tfmt.Println(msg1)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">case</span> msg2 := &lt;-c_3_point:</span><br><span class=\"line\">\t\t\t\tfmt.Println(msg2)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">case</span> &lt;-time.After(time.Second * <span class=\"number\">5</span>):</span><br><span class=\"line\">\t\t\t\tfmt.Println(<span class=\"string\">\"timeout, check again...\"</span>)</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;()</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> input <span class=\"keyword\">string</span></span><br><span class=\"line\">\tfmt.Scanln(&amp;input)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>在上面的例子中，我们让投篮的人在几次过后挂掉，然后教练就每次等5秒出来看看情况（累死丫的，:-P），因为我们对等待的时间不感兴趣就不用变量存储了，直接<code>&lt;-time.After(time.Second*5)</code>，或许你会奇怪，为什么各个channel消息都没有到达，select为什么不阻塞？就是因为这个time.After，虽然它没有显式地告诉你这是一个channel消息，但是记得么？main函数也是一个channel啊！哈哈！至于time.After的功能实际上让main阻塞了5秒后返回给main的channel一个时间。所以我们在case里面把这个时间消息读出来，select就不阻塞了。</p>\n<p>输出结果如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fixed shooting</span><br><span class=\"line\">three point shooting</span><br><span class=\"line\">fixed shooting</span><br><span class=\"line\">three point shooting</span><br><span class=\"line\">fixed shooting</span><br><span class=\"line\">three point shooting</span><br><span class=\"line\">three point shooting</span><br><span class=\"line\">three point shooting</span><br><span class=\"line\">timeout, check again...</span><br><span class=\"line\">timeout, check again...</span><br><span class=\"line\">timeout, check again...</span><br><span class=\"line\">timeout, check again...</span><br></pre></td></tr></table></figure></p>\n<p>这里select还有一个<code>default的选项</code>，如果你指定了default选项，那么当select发现<code>没有消息到达</code>的时候<code>也不会阻塞</code>，直接开始转回去再次判断。</p>\n<h2 id=\"Channel-Buffer通道缓冲区\"><a href=\"#Channel-Buffer通道缓冲区\" class=\"headerlink\" title=\"Channel Buffer通道缓冲区\"></a>Channel Buffer通道缓冲区</h2><p>我们定义chan变量的时候，还可以指定它的<code>缓冲区大小</code>。一般我们<code>定义的channel都是同步的</code>，也就是说接受端和发送端彼此等待对方ok才开始。但是如果你给一个channel<code>指定了一个缓冲区</code>，那么<code>消息的发送和接受式异步的</code>，<code>除非channel缓冲区已经满了</code>。</p>\n<pre><code>c:=make(chan int, 1)\n</code></pre><p>我们看个例子：<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"strconv\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"time\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">shooting</span><span class=\"params\">(msg_chan <span class=\"keyword\">chan</span> <span class=\"keyword\">string</span>)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> group = <span class=\"number\">1</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> i := <span class=\"number\">1</span>; i &lt;= <span class=\"number\">10</span>; i++ &#123;</span><br><span class=\"line\">\t\t\tmsg_chan &lt;- strconv.Itoa(group) + <span class=\"string\">\":\"</span> + strconv.Itoa(i)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tgroup++</span><br><span class=\"line\">\t\ttime.Sleep(time.Second * <span class=\"number\">10</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">count</span><span class=\"params\">(msg_chan <span class=\"keyword\">chan</span> <span class=\"keyword\">string</span>)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">\t\tfmt.Println(&lt;-msg_chan)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> c = <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"keyword\">string</span>, <span class=\"number\">20</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">go</span> shooting(c)</span><br><span class=\"line\">\t<span class=\"keyword\">go</span> count(c)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> input <span class=\"keyword\">string</span></span><br><span class=\"line\">\tfmt.Scanln(&amp;input)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>输出结果为：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1:1</span><br><span class=\"line\">1:2</span><br><span class=\"line\">1:3</span><br><span class=\"line\">1:4</span><br><span class=\"line\">1:5</span><br><span class=\"line\">1:6</span><br><span class=\"line\">1:7</span><br><span class=\"line\">1:8</span><br><span class=\"line\">1:9</span><br><span class=\"line\">1:10</span><br><span class=\"line\">2:1</span><br><span class=\"line\">2:2</span><br><span class=\"line\">2:3</span><br><span class=\"line\">2:4</span><br><span class=\"line\">2:5</span><br><span class=\"line\">2:6</span><br><span class=\"line\">2:7</span><br><span class=\"line\">2:8</span><br><span class=\"line\">2:9</span><br><span class=\"line\">2:10</span><br><span class=\"line\">3:1</span><br><span class=\"line\">3:2</span><br><span class=\"line\">3:3</span><br><span class=\"line\">3:4</span><br><span class=\"line\">3:5</span><br><span class=\"line\">3:6</span><br><span class=\"line\">3:7</span><br><span class=\"line\">3:8</span><br><span class=\"line\">3:9</span><br><span class=\"line\">3:10</span><br><span class=\"line\">4:1</span><br><span class=\"line\">4:2</span><br><span class=\"line\">4:3</span><br><span class=\"line\">4:4</span><br><span class=\"line\">4:5</span><br><span class=\"line\">4:6</span><br><span class=\"line\">4:7</span><br><span class=\"line\">4:8</span><br><span class=\"line\">4:9</span><br><span class=\"line\">4:10</span><br></pre></td></tr></table></figure></p>\n<p>你可以尝试运行一下，每次都是一下子输出10个数据。然后等待10秒再输出一批。</p>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p>并行计算这种特点最适合用来开发网站服务器，因为一般网站服务都是高并发的，逻辑十分复杂。而使用Go的这种特性恰是提供了一种极好的方法。</p>\n<h1 id=\"使用包和测试管理项目\"><a href=\"#使用包和测试管理项目\" class=\"headerlink\" title=\"使用包和测试管理项目\"></a>使用包和测试管理项目</h1><p>Go天生就是为了支持良好的项目管理体验而设计的。</p>\n<h2 id=\"包\"><a href=\"#包\" class=\"headerlink\" title=\"包\"></a>包</h2><p>在软件工程的实践中，我们会遇到很多功能重复的代码，比如去除字符串首尾的空格。高质量软件产品的特点就是它的部分代码是可以重用的，比如你不必每次写个函数去去除字符串首尾的空格。</p>\n<p>我们上面讲过变量，结构体，接口和函数等，事实上所谓的包，就是把一些用的多的这些变量，结构体，接口和函数等统一放置在一个逻辑块中。并且给它们起一个名字，这个名字就叫做包名。</p>\n<p>例如我们上面用的最多的fmt包，这个包提供了很多格式化输出的函数，你可以在自己的代码中引用这个包，来做格式化输出，而不用你自己每次去写个函数。一门成熟的语言都会提供齐全的基础功能包供人调用。</p>\n<p>使用包有三个好处</p>\n<ol>\n<li>可以减少函数名称重复，因为不同包中可以存在名称相同的函数。否则得话，你得给这些函数加上前缀或者后缀以示区别。</li>\n<li>包把函数等组织在一起，方便你查找和重用。比如你想用Println()函数输出一行字符串，你可以很方便地知道它在fmt包中，直接引用过来用就可以了。</li>\n<li>使用包可以加速程序编译。因为包是预编译好的，你改动自己代码得时候，不必每次去把包编译一下。</li>\n</ol>\n<h2 id=\"创建包\"><a href=\"#创建包\" class=\"headerlink\" title=\"创建包\"></a>创建包</h2><p>我们现在来举个例子，用来演示Go的项目管理。</p>\n<p>首先我们在目录<code>/Users/jemy/JemyGraw/GoLang</code>下面创建文件夹<code>pkg_demo</code>。然后在<code>pkg_demo</code>里面创建<code>src</code>文件夹<br>。然后再在<code>main</code>文件夹里面创建<code>main.go</code>文件。另外为了演示包的创建，我们在<code>src</code>目录下面创建文件夹<code>net.duokr</code>，然后再在<code>net.duokr</code>文件夹里面创建<code>math</code>文件夹，这个文件夹名称就是这个文件夹下面go文件的包名称。然后我们再创建一个<code>math_pkg.go</code>文件，之所以取这个名字而不是<code>math.go</code>只是为了说明这个文件名称和包名不需要一致。然后我们还创建了一个<code>math_pkg_test.go</code>文件作为包的测试用例文件。整体结构如下：</p>\n<pre><code>.\n└── src\n    ├── main\n    │   ├── build.sh\n    │   └── main.go\n    └── net.duokr\n        └── math\n            ├── math_pkg.go\n            └── math_pkg_test.go\n</code></pre><p>其中build.sh是我们为了编译这个项目而写的脚本，因为编译项目需要几条命令，把它写在脚本文件中方便使用。另外为了能够让build.sh能够执行，使用<code>chmod +x build.sh</code>为它赋予可执行权限。build.bat是Windows下面的编译脚本。<br>我们来看一下<code>math_pkg.go</code>的定义：<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> math</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Add</span><span class=\"params\">(a, b <span class=\"keyword\">int</span>)</span> <span class=\"title\">int</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> a + b</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Subtract</span><span class=\"params\">(a, b <span class=\"keyword\">int</span>)</span> <span class=\"title\">int</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> a - b</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Multiply</span><span class=\"params\">(a, b <span class=\"keyword\">int</span>)</span> <span class=\"title\">int</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> a * b</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Divide</span><span class=\"params\">(a, b <span class=\"keyword\">int</span>)</span> <span class=\"title\">int</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> b == <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">panic</span>(<span class=\"string\">\"Can not divided by zero\"</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> a / b</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>首先是包名，然后是几个函数定义，这里我们会发现这些<code>函数定义首字母都是大写</code>，<code>Go规定了只有首字母大写的函数才能从包导出使用，即其他调用这个包中函数的代码只能调用那些导出的函数</code>。</p>\n<p>我们再看一下<code>main.go</code>的定义：<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">\tmath <span class=\"string\">\"net.duokr/math\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> a = <span class=\"number\">100</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> b = <span class=\"number\">200</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"Add demo:\"</span>, math.Add(a, b))</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"Substract demo:\"</span>, math.Subtract(a, b))</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"Multiply demo:\"</span>, math.Multiply(a, b))</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"Divide demo:\"</span>, math.Divide(a, b))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>在main.go里面，我们使用import关键字引用我们自定义的包math，引用的方法是从main包平行的文件夹net.duokr开始，后面跟上包名math。这里面我们给这个长长的包名起了一个别名就叫math。然后分别调用math包里面的函数。</p>\n<p>最后我们看一下我们的编译脚本：<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">export</span> GOPATH=<span class=\"variable\">$GOPATH</span>:/Users/jemy/JemyGraw/GoLang/pkg_demo</span><br><span class=\"line\"><span class=\"built_in\">export</span> GOBIN=/Users/jemy/JemyGraw/GoLang/pkg_demo/bin</span><br><span class=\"line\">go build net.duokr/math</span><br><span class=\"line\">go build main.go</span><br><span class=\"line\">go install main</span><br></pre></td></tr></table></figure></p>\n<p>第一行，我们将项目路径加入GOPATH中，这样待会儿编译main.go的时候才能找到我们自定义的包；</p>\n<p>第二行，我们设置本项目的安装目录，第五行的命令将编译好的文件放到这个目录下面；</p>\n<p>第三行，我们编译我们的自定义包；</p>\n<p>第四行，我们编译我们main.go文件；</p>\n<p>第五行，将编译好的文件安装到指定目录下。</p>\n<p>这里还有一个Windows下面的编译脚本build.bat：<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@<span class=\"built_in\">echo</span> off</span><br><span class=\"line\"><span class=\"built_in\">set</span> GOPATH=GOPATH;C:\\JemyGraw\\GoLang\\pkg_demo</span><br><span class=\"line\"><span class=\"built_in\">set</span> GOBIN=C:\\JemyGraw\\GoLang\\pkg_demo\\bin</span><br><span class=\"line\">go build net.duokr\\math</span><br><span class=\"line\">go build main.go</span><br><span class=\"line\">go install main</span><br></pre></td></tr></table></figure></p>\n<p>好了，运行脚本编译一下，在main文件夹和bin文件夹下面都会生成一个可执行文件。</p>\n<p>这个时候文件夹结构为：</p>\n<pre><code>.\n├── bin\n│   └── main\n├── pkg\n│   └── darwin_386\n│       └── net.duokr\n│           └── math.a\n└── src\n    ├── main\n    │   ├── build.bat\n    │   ├── build.sh\n    │   ├── main\n    │   └── main.go\n    └── net.duokr\n        └── math\n            ├── math_pkg.go\n            └── math_pkg_test.go\n</code></pre><p>运行一下，输出结果为：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Add demo: 300</span><br><span class=\"line\">Substract demo: -100</span><br><span class=\"line\">Multiply demo: 20000</span><br><span class=\"line\">Divide demo: 0</span><br></pre></td></tr></table></figure></p>\n<p>好了，包的使用介绍完毕，我们再来看一下测试用例怎么写。</p>\n<h2 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h2><p>在上面的例子中，我们发现我们自定义的包下面还有一个math_pkg_test.go文件，这个文件包含了本包的一些测试用例。而且Go会把以<code>_test.go</code>结尾的文件当作是测试文件。</p>\n<p>测试怎么写，当然是用assert来判断程序的运行结果是否和预期的相同了。</p>\n<p>我们来看看这个math包的测试用例。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package math</span><br><span class=\"line\"></span><br><span class=\"line\">import (</span><br><span class=\"line\">\t&quot;testing&quot;</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">func TestAdd(t *testing.T) &#123;</span><br><span class=\"line\">\tvar a = 100</span><br><span class=\"line\">\tvar b = 200</span><br><span class=\"line\"></span><br><span class=\"line\">\tvar val = Add(a, b)</span><br><span class=\"line\">\tif val != a+b &#123;</span><br><span class=\"line\">\t\tt.Error(&quot;Test Case [&quot;, &quot;TestAdd&quot;, &quot;] Failed!&quot;)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func TestSubtract(t *testing.T) &#123;</span><br><span class=\"line\">\tvar a = 100</span><br><span class=\"line\">\tvar b = 200</span><br><span class=\"line\"></span><br><span class=\"line\">\tvar val = Subtract(a, b)</span><br><span class=\"line\">\tif val != a-b &#123;</span><br><span class=\"line\">\t\tt.Error(&quot;Test Case [&quot;, &quot;TestSubtract&quot;, &quot;] Failed!&quot;)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func TestMultiply(t *testing.T) &#123;</span><br><span class=\"line\">\tvar a = 100</span><br><span class=\"line\">\tvar b = 200</span><br><span class=\"line\"></span><br><span class=\"line\">\tvar val = Multiply(a, b)</span><br><span class=\"line\">\tif val != a*b &#123;</span><br><span class=\"line\">\t\tt.Error(&quot;Test Case [&quot;, &quot;TestMultiply&quot;, &quot;] Failed!&quot;)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func TestDivideNormal(t *testing.T) &#123;</span><br><span class=\"line\">\tvar a = 100</span><br><span class=\"line\">\tvar b = 200</span><br><span class=\"line\"></span><br><span class=\"line\">\tvar val = Divide(a, b)</span><br><span class=\"line\">\tif val != a/b &#123;</span><br><span class=\"line\">\t\tt.Error(&quot;Test Case [&quot;, &quot;TestDivideNormal&quot;, &quot;] Failed!&quot;)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>将路径切换到测试文件所在目录，运行<code>go test</code>命令，go会自动测试所有的测试用例。</p>\n<p>在上面的例子中，测试用例的特点是以函数名以<code>Test</code>开始，而且具有唯一参数<code>t *testing.T</code>。</p>\n<h2 id=\"小结-1\"><a href=\"#小结-1\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p>Go提供的包和用例测试是构建优秀的软件产品的基础，只要我们不断学习，努力去做，一定可以做的很好。</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"Go并行计算\"><a href=\"#Go并行计算\" class=\"headerlink\" title=\"Go并行计算\"></a>Go并行计算</h1><p>如果说Go有什么让人一见钟情的特性，那大概就是并行计算了吧。</p>\n<p>做个题目</p>\n<blockquote>\n<p>如果我们列出10以下所有能够被3或者5整除的自然数，那么我们得到的是3，5，6和9。这四个数的和是23。<br>那么请计算1000以下（不包括1000）的所有能够被3或者5整除的自然数的和。</p>\n</blockquote>","more":"<p>这个题目的一个思路就是：</p>\n<p>(1) 先计算1000以下所有能够被3整除的整数的和A，<br>(2) 然后计算1000以下所有能够被5整除的整数和B，<br>(3) 然后再计算1000以下所有能够被3和5整除的整数和C，<br>(4) 使用A+B-C就得到了最后的结果。  </p>\n<p>按照上面的方法，传统的方法当然就是一步一步计算，然后再到第(4)步汇总了。</p>\n<p>但是一旦有了Go，我们就可以让前面三个步骤并行计算，然后再在第(4)步汇总。</p>\n<p>并行计算涉及到一个新的<code>数据类型chan</code>和一个新的<code>关键字go</code>。</p>\n<p>先看例子：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"time\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">get_sum_of_divisible</span><span class=\"params\">(num <span class=\"keyword\">int</span>, divider <span class=\"keyword\">int</span>, resultChan <span class=\"keyword\">chan</span> <span class=\"keyword\">int</span>)</span></span> &#123;</span><br><span class=\"line\">\tsum := <span class=\"number\">0</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> value := <span class=\"number\">0</span>; value &lt; num; value++ &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> value%divider == <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t\tsum += value</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tresultChan &lt;- sum</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tLIMIT := <span class=\"number\">10</span></span><br><span class=\"line\">\tresultChan := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"keyword\">int</span>, <span class=\"number\">3</span>)</span><br><span class=\"line\">\tt_start := time.Now()</span><br><span class=\"line\">\t<span class=\"keyword\">go</span> get_sum_of_divisible(LIMIT, <span class=\"number\">3</span>, resultChan)</span><br><span class=\"line\">\t<span class=\"keyword\">go</span> get_sum_of_divisible(LIMIT, <span class=\"number\">5</span>, resultChan)</span><br><span class=\"line\">\t<span class=\"comment\">//这里其实那个是被3整除，哪个是被5整除看具体调度方法，不过由于是求和，所以没关系</span></span><br><span class=\"line\">\tsum3, sum5 := &lt;-resultChan, &lt;-resultChan</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//单独算被15整除的</span></span><br><span class=\"line\">\t<span class=\"keyword\">go</span> get_sum_of_divisible(LIMIT, <span class=\"number\">15</span>, resultChan)</span><br><span class=\"line\">\tsum15 := &lt;-resultChan</span><br><span class=\"line\"></span><br><span class=\"line\">\tsum := sum3 + sum5 - sum15</span><br><span class=\"line\">\tt_end := time.Now()</span><br><span class=\"line\">\tfmt.Println(sum)</span><br><span class=\"line\">\tfmt.Println(t_end.Sub(t_start))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>(1) 在上面的例子中，我们首先定义了一个普通的函数get_sum_of_divisible，这个函数的<code>最后一个参数是一个整型chan类型</code>，这种类型，你可以把它当作一个先进先出的队列。你可以<code>向它写入数据</code>，也可以<code>从它读出数据</code>。它<code>所能接受的数据类型</code>就是<code>由chan关键字后面的类型所决定</code>的。在上面的例子中，我们使用<code>&lt;-</code>运算符将函数计算的结果写入channel。channel是go提供的用来协程之间通信的方式。本例中main是一个协程，三个get_sum_of_divisible调用是协程。要在这四个协程间通信，必须有一种可靠的手段。</p>\n<p>(2) 在main函数中，我们使用go关键字来开启并行计算。并行计算是由goroutine来支持的，<code>goroutine</code>又叫做<code>协程</code>，你可以把它看作为比线程更轻量级的运算。开启一个协程很简单，就是<code>go关键字</code>后面<code>跟上所要运行的函数</code>。</p>\n<p>(3) 最后，我们要从channel中取出并行计算的结果。使用<code>&lt;-</code>运算符从channel里面取出数据。</p>\n<p>在本例中，我们为了演示go并行计算的速度，还引进了time包来计算程序执行时间。在同普通的顺序计算相比，并行计算的速度是非同凡响的。</p>\n<p>好了，上面的例子看完，我们来详细讲解Go的并行计算。</p>\n<h2 id=\"Go-Routine-协程\"><a href=\"#Go-Routine-协程\" class=\"headerlink\" title=\"Go Routine 协程\"></a>Go Routine 协程</h2><p>所谓协程，就是Go提供的轻量级的独立运算过程，比线程还轻。创建一个协程很简单，就是go关键字加上所要运行的函数。看个例子：<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">list_elem</span><span class=\"params\">(n <span class=\"keyword\">int</span>)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; n; i++ &#123;</span><br><span class=\"line\">\t\tfmt.Println(i)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">go</span> list_elem(<span class=\"number\">10</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>上面的例子是创建一个协程遍历一下元素。但是当你运行的时候，你会<code>发现什么都没有输出</code>！<code>为什么呢？</code><br>因为上面的<code>main函数</code>在<code>创建完协程后</code>就<code>立刻退出</code>了，所以<code>协程</code>还<code>没有来得及运行</code>呢！修改一下：<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">list_elem</span><span class=\"params\">(n <span class=\"keyword\">int</span>)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; n; i++ &#123;</span><br><span class=\"line\">\t\tfmt.Println(i)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">go</span> list_elem(<span class=\"number\">10</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> input <span class=\"keyword\">string</span></span><br><span class=\"line\">\tfmt.Scanln(&amp;input)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这里，我们在main函数创建协程后，要求用户输入任何数据后才退出，这样协程就有了运行的时间，故而输出结果：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0</span><br><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td></tr></table></figure></p>\n<p>其实在开头的例子里面，我们的main函数事实上也被阻塞了，因为<code>sum3, sum5, sum15 := &lt;-resultChan, &lt;-resultChan, &lt;-resultChan</code>这行代码在channel里面没有数据或者数据个数不符的时候，都会阻塞在那里，直到协程结束，写入结果。</p>\n<p>不过既然是并行计算，我们还是得看看协程是否真的并行计算了。<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"math/rand\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"time\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">list_elem</span><span class=\"params\">(n <span class=\"keyword\">int</span>, tag <span class=\"keyword\">string</span>)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; n; i++ &#123;</span><br><span class=\"line\">\t\tfmt.Println(tag, i)</span><br><span class=\"line\">\t\ttick := time.Duration(rand.Intn(<span class=\"number\">100</span>))</span><br><span class=\"line\">\t\ttime.Sleep(time.Millisecond * tick)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">go</span> list_elem(<span class=\"number\">10</span>, <span class=\"string\">\"go_a\"</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">go</span> list_elem(<span class=\"number\">20</span>, <span class=\"string\">\"go_b\"</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> input <span class=\"keyword\">string</span></span><br><span class=\"line\">\tfmt.Scanln(&amp;input)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>输出结果<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">go_a 0</span><br><span class=\"line\">go_b 0</span><br><span class=\"line\">go_a 1</span><br><span class=\"line\">go_b 1</span><br><span class=\"line\">go_a 2</span><br><span class=\"line\">go_b 2</span><br><span class=\"line\">go_b 3</span><br><span class=\"line\">go_b 4</span><br><span class=\"line\">go_a 3</span><br><span class=\"line\">go_b 5</span><br><span class=\"line\">go_b 6</span><br><span class=\"line\">go_a 4</span><br><span class=\"line\">go_a 5</span><br><span class=\"line\">go_b 7</span><br><span class=\"line\">go_a 6</span><br><span class=\"line\">go_a 7</span><br><span class=\"line\">go_b 8</span><br><span class=\"line\">go_b 9</span><br><span class=\"line\">go_a 8</span><br><span class=\"line\">go_b 10</span><br><span class=\"line\">go_b 11</span><br><span class=\"line\">go_a 9</span><br><span class=\"line\">go_b 12</span><br><span class=\"line\">go_b 13</span><br><span class=\"line\">go_b 14</span><br><span class=\"line\">go_b 15</span><br><span class=\"line\">go_b 16</span><br><span class=\"line\">go_b 17</span><br><span class=\"line\">go_b 18</span><br><span class=\"line\">go_b 19</span><br></pre></td></tr></table></figure></p>\n<p>在上面的例子中，我们让两个协程在每输出一个数字的时候，随机Sleep了一会儿。如果是并行计算，那么输出是无序的。从上面的例子中，我们可以看出两个协程确实并行运行了。</p>\n<h2 id=\"Channel通道\"><a href=\"#Channel通道\" class=\"headerlink\" title=\"Channel通道\"></a>Channel通道</h2><p>Channel提供了<code>协程之间</code>的<code>通信方式</code>以及<code>运行同步机制</code>。</p>\n<p>假设训练定点投篮和三分投篮，教练在计数。<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"time\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">fixed_shooting</span><span class=\"params\">(msg_chan <span class=\"keyword\">chan</span> <span class=\"keyword\">string</span>)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">\t\tmsg_chan &lt;- <span class=\"string\">\"fixed shooting\"</span></span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">\"continue fixed shooting...\"</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">count</span><span class=\"params\">(msg_chan <span class=\"keyword\">chan</span> <span class=\"keyword\">string</span>)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">\t\tmsg := &lt;-msg_chan</span><br><span class=\"line\">\t\tfmt.Println(msg)</span><br><span class=\"line\">\t\ttime.Sleep(time.Second * <span class=\"number\">1</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> c <span class=\"keyword\">chan</span> <span class=\"keyword\">string</span></span><br><span class=\"line\">\tc = <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"keyword\">string</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">go</span> fixed_shooting(c)</span><br><span class=\"line\">\t<span class=\"keyword\">go</span> count(c)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> input <span class=\"keyword\">string</span></span><br><span class=\"line\">\tfmt.Scanln(&amp;input)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>输出结果为：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fixed shooting</span><br><span class=\"line\">continue fixed shooting...</span><br><span class=\"line\">fixed shooting</span><br><span class=\"line\">continue fixed shooting...</span><br><span class=\"line\">fixed shooting</span><br><span class=\"line\">continue fixed shooting...</span><br></pre></td></tr></table></figure></p>\n<p>我们看到在fixed_shooting函数里面我们将消息传递到channel，然后输出提示信息”continue fixed shooting…”，而在count函数里面，我们从channel里面取出消息输出，然后间隔1秒再去取消息输出。这里面我们可以考虑一下，如果我们不去从channel中取消息会出现什么情况？我们把main函数里面的<code>go count(c)</code>注释掉，然后再运行一下。发现程序再也不会输出消息和提示信息了。这是因为channel中根本就没有信息了，因为<code>如果你要向channel里面写信息</code>，<code>必须有配对的取信息的一端</code>，否则是不会写的。</p>\n<p>我们再把三分投篮加上。<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"time\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">fixed_shooting</span><span class=\"params\">(msg_chan <span class=\"keyword\">chan</span> <span class=\"keyword\">string</span>)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">\t\tmsg_chan &lt;- <span class=\"string\">\"fixed shooting\"</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">three_point_shooting</span><span class=\"params\">(msg_chan <span class=\"keyword\">chan</span> <span class=\"keyword\">string</span>)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">\t\tmsg_chan &lt;- <span class=\"string\">\"three point shooting\"</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">count</span><span class=\"params\">(msg_chan <span class=\"keyword\">chan</span> <span class=\"keyword\">string</span>)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">\t\tmsg := &lt;-msg_chan</span><br><span class=\"line\">\t\tfmt.Println(msg)</span><br><span class=\"line\">\t\ttime.Sleep(time.Second * <span class=\"number\">1</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> c <span class=\"keyword\">chan</span> <span class=\"keyword\">string</span></span><br><span class=\"line\">\tc = <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"keyword\">string</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">go</span> fixed_shooting(c)</span><br><span class=\"line\">\t<span class=\"keyword\">go</span> three_point_shooting(c)</span><br><span class=\"line\">\t<span class=\"keyword\">go</span> count(c)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> input <span class=\"keyword\">string</span></span><br><span class=\"line\">\tfmt.Scanln(&amp;input)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>输出结果为：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fixed shooting</span><br><span class=\"line\">three point shooting</span><br><span class=\"line\">fixed shooting</span><br><span class=\"line\">three point shooting</span><br><span class=\"line\">fixed shooting</span><br><span class=\"line\">three point shooting</span><br></pre></td></tr></table></figure></p>\n<p>我们看到程序交替输出定点投篮和三分投篮，这是因为写入channel的信息必须要读取出来，否则尝试再次写入就失败了。</p>\n<p>在上面的例子中，我们发现<code>定义一个channel信息变量</code>的方式就是多加一个<code>chan</code>关键字。并且你能够<code>向channel写入数据</code>和<code>从channel读取数据</code>。这里我们还可以设置channel通道的方向。</p>\n<h2 id=\"Channel通道方向\"><a href=\"#Channel通道方向\" class=\"headerlink\" title=\"Channel通道方向\"></a>Channel通道方向</h2><p>所谓的<code>通道方向</code>就是<code>写</code>和<code>读</code>。如果我们如下定义</p>\n<pre><code>c chan&lt;- string //那么你只能向channel写入数据\n</code></pre><p>而这种定义</p>\n<pre><code>c &lt;-chan string //那么你只能从channel读取数据\n</code></pre><p><code>试图向只读chan变量写入数据或者试图从只写chan变量读取数据都会导致编译错误。</code></p>\n<p>如果是默认的定义方式</p>\n<pre><code>c chan string //那么你既可以向channel写入数据也可以从channnel读取数据\n</code></pre><h2 id=\"多通道-Select\"><a href=\"#多通道-Select\" class=\"headerlink\" title=\"多通道(Select)\"></a>多通道(Select)</h2><p>如果上面的投篮训练现在有两个教练了，各自负责一个训练项目。而且还在不同的篮球场，这个时候很显然，我们一个channel就不够用了。修改一下：<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"time\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">fixed_shooting</span><span class=\"params\">(msg_chan <span class=\"keyword\">chan</span> <span class=\"keyword\">string</span>)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">\t\tmsg_chan &lt;- <span class=\"string\">\"fixed shooting\"</span></span><br><span class=\"line\">\t\ttime.Sleep(time.Second * <span class=\"number\">1</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">three_point_shooting</span><span class=\"params\">(msg_chan <span class=\"keyword\">chan</span> <span class=\"keyword\">string</span>)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">\t\tmsg_chan &lt;- <span class=\"string\">\"three point shooting\"</span></span><br><span class=\"line\">\t\ttime.Sleep(time.Second * <span class=\"number\">1</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tc_fixed := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"keyword\">string</span>)</span><br><span class=\"line\">\tc_3_point := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"keyword\">string</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">go</span> fixed_shooting(c_fixed)</span><br><span class=\"line\">\t<span class=\"keyword\">go</span> three_point_shooting(c_3_point)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">select</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">case</span> msg1 := &lt;-c_fixed:</span><br><span class=\"line\">\t\t\t\tfmt.Println(msg1)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">case</span> msg2 := &lt;-c_3_point:</span><br><span class=\"line\">\t\t\t\tfmt.Println(msg2)</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;()</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> input <span class=\"keyword\">string</span></span><br><span class=\"line\">\tfmt.Scanln(&amp;input)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>其他的和上面的一样，唯一不同的是我们将定点投篮和三分投篮的消息写入了不同的channel，那么main函数如何知道从哪个channel读取消息呢？使用select方法，select方法依次检查每个channel是否有消息传递过来，如果有就取出来输出。如果同时有多个消息到达，那么select闭上眼睛随机选一个channel来从中读取消息，如果没有一个channel有消息到达，那么select语句就阻塞在这里一直等待。</p>\n<p>在某些情况下，比如学生投篮中受伤了，那么就轮到医护人员上场了，教练在一般看看，如果是重伤，教练就不等了，就回去了休息了，待会儿再过来看看情况。我们可以给select加上一个case用来判断是否等待各个消息到达超时。<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"time\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">fixed_shooting</span><span class=\"params\">(msg_chan <span class=\"keyword\">chan</span> <span class=\"keyword\">string</span>)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> times = <span class=\"number\">3</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> t = <span class=\"number\">1</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> t &lt;= times &#123;</span><br><span class=\"line\">\t\t\tmsg_chan &lt;- <span class=\"string\">\"fixed shooting\"</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tt++</span><br><span class=\"line\">\t\ttime.Sleep(time.Second * <span class=\"number\">1</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">three_point_shooting</span><span class=\"params\">(msg_chan <span class=\"keyword\">chan</span> <span class=\"keyword\">string</span>)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> times = <span class=\"number\">5</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> t = <span class=\"number\">1</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> t &lt;= times &#123;</span><br><span class=\"line\">\t\t\tmsg_chan &lt;- <span class=\"string\">\"three point shooting\"</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tt++</span><br><span class=\"line\">\t\ttime.Sleep(time.Second * <span class=\"number\">1</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tc_fixed := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"keyword\">string</span>)</span><br><span class=\"line\">\tc_3_point := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"keyword\">string</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">go</span> fixed_shooting(c_fixed)</span><br><span class=\"line\">\t<span class=\"keyword\">go</span> three_point_shooting(c_3_point)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">select</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">case</span> msg1 := &lt;-c_fixed:</span><br><span class=\"line\">\t\t\t\tfmt.Println(msg1)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">case</span> msg2 := &lt;-c_3_point:</span><br><span class=\"line\">\t\t\t\tfmt.Println(msg2)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">case</span> &lt;-time.After(time.Second * <span class=\"number\">5</span>):</span><br><span class=\"line\">\t\t\t\tfmt.Println(<span class=\"string\">\"timeout, check again...\"</span>)</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;()</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> input <span class=\"keyword\">string</span></span><br><span class=\"line\">\tfmt.Scanln(&amp;input)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>在上面的例子中，我们让投篮的人在几次过后挂掉，然后教练就每次等5秒出来看看情况（累死丫的，:-P），因为我们对等待的时间不感兴趣就不用变量存储了，直接<code>&lt;-time.After(time.Second*5)</code>，或许你会奇怪，为什么各个channel消息都没有到达，select为什么不阻塞？就是因为这个time.After，虽然它没有显式地告诉你这是一个channel消息，但是记得么？main函数也是一个channel啊！哈哈！至于time.After的功能实际上让main阻塞了5秒后返回给main的channel一个时间。所以我们在case里面把这个时间消息读出来，select就不阻塞了。</p>\n<p>输出结果如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fixed shooting</span><br><span class=\"line\">three point shooting</span><br><span class=\"line\">fixed shooting</span><br><span class=\"line\">three point shooting</span><br><span class=\"line\">fixed shooting</span><br><span class=\"line\">three point shooting</span><br><span class=\"line\">three point shooting</span><br><span class=\"line\">three point shooting</span><br><span class=\"line\">timeout, check again...</span><br><span class=\"line\">timeout, check again...</span><br><span class=\"line\">timeout, check again...</span><br><span class=\"line\">timeout, check again...</span><br></pre></td></tr></table></figure></p>\n<p>这里select还有一个<code>default的选项</code>，如果你指定了default选项，那么当select发现<code>没有消息到达</code>的时候<code>也不会阻塞</code>，直接开始转回去再次判断。</p>\n<h2 id=\"Channel-Buffer通道缓冲区\"><a href=\"#Channel-Buffer通道缓冲区\" class=\"headerlink\" title=\"Channel Buffer通道缓冲区\"></a>Channel Buffer通道缓冲区</h2><p>我们定义chan变量的时候，还可以指定它的<code>缓冲区大小</code>。一般我们<code>定义的channel都是同步的</code>，也就是说接受端和发送端彼此等待对方ok才开始。但是如果你给一个channel<code>指定了一个缓冲区</code>，那么<code>消息的发送和接受式异步的</code>，<code>除非channel缓冲区已经满了</code>。</p>\n<pre><code>c:=make(chan int, 1)\n</code></pre><p>我们看个例子：<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"strconv\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"time\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">shooting</span><span class=\"params\">(msg_chan <span class=\"keyword\">chan</span> <span class=\"keyword\">string</span>)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> group = <span class=\"number\">1</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> i := <span class=\"number\">1</span>; i &lt;= <span class=\"number\">10</span>; i++ &#123;</span><br><span class=\"line\">\t\t\tmsg_chan &lt;- strconv.Itoa(group) + <span class=\"string\">\":\"</span> + strconv.Itoa(i)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tgroup++</span><br><span class=\"line\">\t\ttime.Sleep(time.Second * <span class=\"number\">10</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">count</span><span class=\"params\">(msg_chan <span class=\"keyword\">chan</span> <span class=\"keyword\">string</span>)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">\t\tfmt.Println(&lt;-msg_chan)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> c = <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"keyword\">string</span>, <span class=\"number\">20</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">go</span> shooting(c)</span><br><span class=\"line\">\t<span class=\"keyword\">go</span> count(c)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> input <span class=\"keyword\">string</span></span><br><span class=\"line\">\tfmt.Scanln(&amp;input)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>输出结果为：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1:1</span><br><span class=\"line\">1:2</span><br><span class=\"line\">1:3</span><br><span class=\"line\">1:4</span><br><span class=\"line\">1:5</span><br><span class=\"line\">1:6</span><br><span class=\"line\">1:7</span><br><span class=\"line\">1:8</span><br><span class=\"line\">1:9</span><br><span class=\"line\">1:10</span><br><span class=\"line\">2:1</span><br><span class=\"line\">2:2</span><br><span class=\"line\">2:3</span><br><span class=\"line\">2:4</span><br><span class=\"line\">2:5</span><br><span class=\"line\">2:6</span><br><span class=\"line\">2:7</span><br><span class=\"line\">2:8</span><br><span class=\"line\">2:9</span><br><span class=\"line\">2:10</span><br><span class=\"line\">3:1</span><br><span class=\"line\">3:2</span><br><span class=\"line\">3:3</span><br><span class=\"line\">3:4</span><br><span class=\"line\">3:5</span><br><span class=\"line\">3:6</span><br><span class=\"line\">3:7</span><br><span class=\"line\">3:8</span><br><span class=\"line\">3:9</span><br><span class=\"line\">3:10</span><br><span class=\"line\">4:1</span><br><span class=\"line\">4:2</span><br><span class=\"line\">4:3</span><br><span class=\"line\">4:4</span><br><span class=\"line\">4:5</span><br><span class=\"line\">4:6</span><br><span class=\"line\">4:7</span><br><span class=\"line\">4:8</span><br><span class=\"line\">4:9</span><br><span class=\"line\">4:10</span><br></pre></td></tr></table></figure></p>\n<p>你可以尝试运行一下，每次都是一下子输出10个数据。然后等待10秒再输出一批。</p>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p>并行计算这种特点最适合用来开发网站服务器，因为一般网站服务都是高并发的，逻辑十分复杂。而使用Go的这种特性恰是提供了一种极好的方法。</p>\n<h1 id=\"使用包和测试管理项目\"><a href=\"#使用包和测试管理项目\" class=\"headerlink\" title=\"使用包和测试管理项目\"></a>使用包和测试管理项目</h1><p>Go天生就是为了支持良好的项目管理体验而设计的。</p>\n<h2 id=\"包\"><a href=\"#包\" class=\"headerlink\" title=\"包\"></a>包</h2><p>在软件工程的实践中，我们会遇到很多功能重复的代码，比如去除字符串首尾的空格。高质量软件产品的特点就是它的部分代码是可以重用的，比如你不必每次写个函数去去除字符串首尾的空格。</p>\n<p>我们上面讲过变量，结构体，接口和函数等，事实上所谓的包，就是把一些用的多的这些变量，结构体，接口和函数等统一放置在一个逻辑块中。并且给它们起一个名字，这个名字就叫做包名。</p>\n<p>例如我们上面用的最多的fmt包，这个包提供了很多格式化输出的函数，你可以在自己的代码中引用这个包，来做格式化输出，而不用你自己每次去写个函数。一门成熟的语言都会提供齐全的基础功能包供人调用。</p>\n<p>使用包有三个好处</p>\n<ol>\n<li>可以减少函数名称重复，因为不同包中可以存在名称相同的函数。否则得话，你得给这些函数加上前缀或者后缀以示区别。</li>\n<li>包把函数等组织在一起，方便你查找和重用。比如你想用Println()函数输出一行字符串，你可以很方便地知道它在fmt包中，直接引用过来用就可以了。</li>\n<li>使用包可以加速程序编译。因为包是预编译好的，你改动自己代码得时候，不必每次去把包编译一下。</li>\n</ol>\n<h2 id=\"创建包\"><a href=\"#创建包\" class=\"headerlink\" title=\"创建包\"></a>创建包</h2><p>我们现在来举个例子，用来演示Go的项目管理。</p>\n<p>首先我们在目录<code>/Users/jemy/JemyGraw/GoLang</code>下面创建文件夹<code>pkg_demo</code>。然后在<code>pkg_demo</code>里面创建<code>src</code>文件夹<br>。然后再在<code>main</code>文件夹里面创建<code>main.go</code>文件。另外为了演示包的创建，我们在<code>src</code>目录下面创建文件夹<code>net.duokr</code>，然后再在<code>net.duokr</code>文件夹里面创建<code>math</code>文件夹，这个文件夹名称就是这个文件夹下面go文件的包名称。然后我们再创建一个<code>math_pkg.go</code>文件，之所以取这个名字而不是<code>math.go</code>只是为了说明这个文件名称和包名不需要一致。然后我们还创建了一个<code>math_pkg_test.go</code>文件作为包的测试用例文件。整体结构如下：</p>\n<pre><code>.\n└── src\n    ├── main\n    │   ├── build.sh\n    │   └── main.go\n    └── net.duokr\n        └── math\n            ├── math_pkg.go\n            └── math_pkg_test.go\n</code></pre><p>其中build.sh是我们为了编译这个项目而写的脚本，因为编译项目需要几条命令，把它写在脚本文件中方便使用。另外为了能够让build.sh能够执行，使用<code>chmod +x build.sh</code>为它赋予可执行权限。build.bat是Windows下面的编译脚本。<br>我们来看一下<code>math_pkg.go</code>的定义：<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> math</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Add</span><span class=\"params\">(a, b <span class=\"keyword\">int</span>)</span> <span class=\"title\">int</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> a + b</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Subtract</span><span class=\"params\">(a, b <span class=\"keyword\">int</span>)</span> <span class=\"title\">int</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> a - b</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Multiply</span><span class=\"params\">(a, b <span class=\"keyword\">int</span>)</span> <span class=\"title\">int</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> a * b</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Divide</span><span class=\"params\">(a, b <span class=\"keyword\">int</span>)</span> <span class=\"title\">int</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> b == <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">panic</span>(<span class=\"string\">\"Can not divided by zero\"</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> a / b</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>首先是包名，然后是几个函数定义，这里我们会发现这些<code>函数定义首字母都是大写</code>，<code>Go规定了只有首字母大写的函数才能从包导出使用，即其他调用这个包中函数的代码只能调用那些导出的函数</code>。</p>\n<p>我们再看一下<code>main.go</code>的定义：<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">\tmath <span class=\"string\">\"net.duokr/math\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> a = <span class=\"number\">100</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> b = <span class=\"number\">200</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"Add demo:\"</span>, math.Add(a, b))</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"Substract demo:\"</span>, math.Subtract(a, b))</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"Multiply demo:\"</span>, math.Multiply(a, b))</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"Divide demo:\"</span>, math.Divide(a, b))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>在main.go里面，我们使用import关键字引用我们自定义的包math，引用的方法是从main包平行的文件夹net.duokr开始，后面跟上包名math。这里面我们给这个长长的包名起了一个别名就叫math。然后分别调用math包里面的函数。</p>\n<p>最后我们看一下我们的编译脚本：<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">export</span> GOPATH=<span class=\"variable\">$GOPATH</span>:/Users/jemy/JemyGraw/GoLang/pkg_demo</span><br><span class=\"line\"><span class=\"built_in\">export</span> GOBIN=/Users/jemy/JemyGraw/GoLang/pkg_demo/bin</span><br><span class=\"line\">go build net.duokr/math</span><br><span class=\"line\">go build main.go</span><br><span class=\"line\">go install main</span><br></pre></td></tr></table></figure></p>\n<p>第一行，我们将项目路径加入GOPATH中，这样待会儿编译main.go的时候才能找到我们自定义的包；</p>\n<p>第二行，我们设置本项目的安装目录，第五行的命令将编译好的文件放到这个目录下面；</p>\n<p>第三行，我们编译我们的自定义包；</p>\n<p>第四行，我们编译我们main.go文件；</p>\n<p>第五行，将编译好的文件安装到指定目录下。</p>\n<p>这里还有一个Windows下面的编译脚本build.bat：<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@<span class=\"built_in\">echo</span> off</span><br><span class=\"line\"><span class=\"built_in\">set</span> GOPATH=GOPATH;C:\\JemyGraw\\GoLang\\pkg_demo</span><br><span class=\"line\"><span class=\"built_in\">set</span> GOBIN=C:\\JemyGraw\\GoLang\\pkg_demo\\bin</span><br><span class=\"line\">go build net.duokr\\math</span><br><span class=\"line\">go build main.go</span><br><span class=\"line\">go install main</span><br></pre></td></tr></table></figure></p>\n<p>好了，运行脚本编译一下，在main文件夹和bin文件夹下面都会生成一个可执行文件。</p>\n<p>这个时候文件夹结构为：</p>\n<pre><code>.\n├── bin\n│   └── main\n├── pkg\n│   └── darwin_386\n│       └── net.duokr\n│           └── math.a\n└── src\n    ├── main\n    │   ├── build.bat\n    │   ├── build.sh\n    │   ├── main\n    │   └── main.go\n    └── net.duokr\n        └── math\n            ├── math_pkg.go\n            └── math_pkg_test.go\n</code></pre><p>运行一下，输出结果为：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Add demo: 300</span><br><span class=\"line\">Substract demo: -100</span><br><span class=\"line\">Multiply demo: 20000</span><br><span class=\"line\">Divide demo: 0</span><br></pre></td></tr></table></figure></p>\n<p>好了，包的使用介绍完毕，我们再来看一下测试用例怎么写。</p>\n<h2 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h2><p>在上面的例子中，我们发现我们自定义的包下面还有一个math_pkg_test.go文件，这个文件包含了本包的一些测试用例。而且Go会把以<code>_test.go</code>结尾的文件当作是测试文件。</p>\n<p>测试怎么写，当然是用assert来判断程序的运行结果是否和预期的相同了。</p>\n<p>我们来看看这个math包的测试用例。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package math</span><br><span class=\"line\"></span><br><span class=\"line\">import (</span><br><span class=\"line\">\t&quot;testing&quot;</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">func TestAdd(t *testing.T) &#123;</span><br><span class=\"line\">\tvar a = 100</span><br><span class=\"line\">\tvar b = 200</span><br><span class=\"line\"></span><br><span class=\"line\">\tvar val = Add(a, b)</span><br><span class=\"line\">\tif val != a+b &#123;</span><br><span class=\"line\">\t\tt.Error(&quot;Test Case [&quot;, &quot;TestAdd&quot;, &quot;] Failed!&quot;)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func TestSubtract(t *testing.T) &#123;</span><br><span class=\"line\">\tvar a = 100</span><br><span class=\"line\">\tvar b = 200</span><br><span class=\"line\"></span><br><span class=\"line\">\tvar val = Subtract(a, b)</span><br><span class=\"line\">\tif val != a-b &#123;</span><br><span class=\"line\">\t\tt.Error(&quot;Test Case [&quot;, &quot;TestSubtract&quot;, &quot;] Failed!&quot;)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func TestMultiply(t *testing.T) &#123;</span><br><span class=\"line\">\tvar a = 100</span><br><span class=\"line\">\tvar b = 200</span><br><span class=\"line\"></span><br><span class=\"line\">\tvar val = Multiply(a, b)</span><br><span class=\"line\">\tif val != a*b &#123;</span><br><span class=\"line\">\t\tt.Error(&quot;Test Case [&quot;, &quot;TestMultiply&quot;, &quot;] Failed!&quot;)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func TestDivideNormal(t *testing.T) &#123;</span><br><span class=\"line\">\tvar a = 100</span><br><span class=\"line\">\tvar b = 200</span><br><span class=\"line\"></span><br><span class=\"line\">\tvar val = Divide(a, b)</span><br><span class=\"line\">\tif val != a/b &#123;</span><br><span class=\"line\">\t\tt.Error(&quot;Test Case [&quot;, &quot;TestDivideNormal&quot;, &quot;] Failed!&quot;)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>将路径切换到测试文件所在目录，运行<code>go test</code>命令，go会自动测试所有的测试用例。</p>\n<p>在上面的例子中，测试用例的特点是以函数名以<code>Test</code>开始，而且具有唯一参数<code>t *testing.T</code>。</p>\n<h2 id=\"小结-1\"><a href=\"#小结-1\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p>Go提供的包和用例测试是构建优秀的软件产品的基础，只要我们不断学习，努力去做，一定可以做的很好。</p>"},{"title":"horizon 二次开发环境配置","date":"2017-11-13T03:30:48.000Z","_content":"\n## openstack源代码的获取\n\n我们可以从[***OpenStack Releases***](https://releases.openstack.org/)下载所有发行版本的openstack，openstack每6个月发行一个版本。选择相应的openstac版本和相应组件版本。\n<!--more-->\n\n![](http://otl4ekdmf.bkt.clouddn.com/openstackrelease.png)\n\n## Horizon UI开发环境部署\n这里认为以及部署好一个openstack ocata基础环境，仅演示手动部署horizon ui开发环境\n\n### 开发准备\n#### 安装pip\n```shell\nsudo apt-get install python-pip\nsudo apt-get install -y libxml2-dev libxslt1-dev zlib1g-dev python3-pip\n```\n#### 下载horizon源码:\n```shell\ngit clone https://github.com/openstack/horizon.git\ncd horizon/\n```\n#### 环境配置\n```shell\ncp openstack_dashboard/local/local_settings.py.example openstack_dashboard/local/local_settings.py\n```\nvi openstack_dashboard/local/local_settings.py\n```python\nALLOWED_HOSTS = '*'\n# ...\nOPENSTACK_KEYSTONE_DEFAULT_DOMAIN = 'default' # 如果 Domain 的 ID 不是 default，则为对应的 ID  \n# ...\nOPENSTACK_KEYSTONE_MULTIDOMAIN_SUPPORT = True\n# ...\nOPENSTACK_HOST = \"192.168.89.11\" # 控制节点IP地址\nOPENSTACK_KEYSTONE_URL = \"http://%s:5000/v3\" % OPENSTACK_HOST\nOPENSTACK_KEYSTONE_DEFAULT_ROLE = \"user\" #根据你的环境自己配置这个参数，这里我是‘user’\n# ...\nOPENSTACK_API_VERSIONS = {\n  \"identity\": 3,\n  \"image\": 2,\n  \"volume\": 2,\n}\n# ...\n# 根据你的网络环境配置这里的参数\nOPENSTACK_NEUTRON_NETWORK = {\n  #...\n  'enable_router': False,\n  'enable_quotas': False,\n  'enable_distributed_router': False,\n  'enable_ha_router': False,\n  'enable_lb': False,\n  'enable_firewall': False,\n  'enable_vpn': False,\n  'enable_fip_topology_check': False,\n}\n```\n#### django session cache选择\n1.依赖安装\n```shell\nsudo apt-get install memcached\npip install python-memcached\nsudo apt-get install python-dev\nsudo apt-get install libmemcached-dev\npip install pylibmc\n```\n2.配置local_setting.py\n```python\nCACHES = {\n   'default': {\n       'BACKEND': 'django.core.cache.backends.memcached.MemcachedCache',\n       'LOCATION': '127.0.0.1:11211',\n   },\n}\n```\n#### 设定hosts\nvim /etc/hosts\n```python\n192.168.89.11 controller\n```\n#### 压缩静态文件\n初始化静态文件 注意：一定要先执行此步骤再启动服务！否则再执行因为缓存还是不能正常运行，需要在 collectstatic 时增加 -c 参数\n```python\npython manage.py collectstatic -l\npython manage.py compress --force\n```\n#### 语言环境切换\n1.修改horizon/openstack_dashboard/locale/zh_CN/LC_MESSAGES/django.po\n\t注意按照下面的格式\n```python\n#: templates/403.html:25 templates/404.html:24\nmsgid \"Projects\"\nmsgstr \"项目\"\n```\n2.编译\n```python\ncd horizon/openstack_dashboard\ndjango-admin compilemessages\n```\n3.done\n\n`注意`：以上的环境为python3.5和pip3\n\n\n### 运行效果\n打开pycharm，加载运行horizon源码，选择编译器版本为python3,安装requirements.txt中的依赖，安装以上步骤配置完成后，点击运行，得到如下效果：\n![](http://otl4ekdmf.bkt.clouddn.com/horilogin.png)\n\n登录进去效果如下:\n![](http://otl4ekdmf.bkt.clouddn.com/horizonmainpage.png)\n","source":"_posts/horizondevelop1.md","raw":"---\ntitle: 'horizon 二次开发环境配置'\ndate: 2017-11-13 11:30:48\ntags: dashborad\ncategories: openstack学习\n---\n\n## openstack源代码的获取\n\n我们可以从[***OpenStack Releases***](https://releases.openstack.org/)下载所有发行版本的openstack，openstack每6个月发行一个版本。选择相应的openstac版本和相应组件版本。\n<!--more-->\n\n![](http://otl4ekdmf.bkt.clouddn.com/openstackrelease.png)\n\n## Horizon UI开发环境部署\n这里认为以及部署好一个openstack ocata基础环境，仅演示手动部署horizon ui开发环境\n\n### 开发准备\n#### 安装pip\n```shell\nsudo apt-get install python-pip\nsudo apt-get install -y libxml2-dev libxslt1-dev zlib1g-dev python3-pip\n```\n#### 下载horizon源码:\n```shell\ngit clone https://github.com/openstack/horizon.git\ncd horizon/\n```\n#### 环境配置\n```shell\ncp openstack_dashboard/local/local_settings.py.example openstack_dashboard/local/local_settings.py\n```\nvi openstack_dashboard/local/local_settings.py\n```python\nALLOWED_HOSTS = '*'\n# ...\nOPENSTACK_KEYSTONE_DEFAULT_DOMAIN = 'default' # 如果 Domain 的 ID 不是 default，则为对应的 ID  \n# ...\nOPENSTACK_KEYSTONE_MULTIDOMAIN_SUPPORT = True\n# ...\nOPENSTACK_HOST = \"192.168.89.11\" # 控制节点IP地址\nOPENSTACK_KEYSTONE_URL = \"http://%s:5000/v3\" % OPENSTACK_HOST\nOPENSTACK_KEYSTONE_DEFAULT_ROLE = \"user\" #根据你的环境自己配置这个参数，这里我是‘user’\n# ...\nOPENSTACK_API_VERSIONS = {\n  \"identity\": 3,\n  \"image\": 2,\n  \"volume\": 2,\n}\n# ...\n# 根据你的网络环境配置这里的参数\nOPENSTACK_NEUTRON_NETWORK = {\n  #...\n  'enable_router': False,\n  'enable_quotas': False,\n  'enable_distributed_router': False,\n  'enable_ha_router': False,\n  'enable_lb': False,\n  'enable_firewall': False,\n  'enable_vpn': False,\n  'enable_fip_topology_check': False,\n}\n```\n#### django session cache选择\n1.依赖安装\n```shell\nsudo apt-get install memcached\npip install python-memcached\nsudo apt-get install python-dev\nsudo apt-get install libmemcached-dev\npip install pylibmc\n```\n2.配置local_setting.py\n```python\nCACHES = {\n   'default': {\n       'BACKEND': 'django.core.cache.backends.memcached.MemcachedCache',\n       'LOCATION': '127.0.0.1:11211',\n   },\n}\n```\n#### 设定hosts\nvim /etc/hosts\n```python\n192.168.89.11 controller\n```\n#### 压缩静态文件\n初始化静态文件 注意：一定要先执行此步骤再启动服务！否则再执行因为缓存还是不能正常运行，需要在 collectstatic 时增加 -c 参数\n```python\npython manage.py collectstatic -l\npython manage.py compress --force\n```\n#### 语言环境切换\n1.修改horizon/openstack_dashboard/locale/zh_CN/LC_MESSAGES/django.po\n\t注意按照下面的格式\n```python\n#: templates/403.html:25 templates/404.html:24\nmsgid \"Projects\"\nmsgstr \"项目\"\n```\n2.编译\n```python\ncd horizon/openstack_dashboard\ndjango-admin compilemessages\n```\n3.done\n\n`注意`：以上的环境为python3.5和pip3\n\n\n### 运行效果\n打开pycharm，加载运行horizon源码，选择编译器版本为python3,安装requirements.txt中的依赖，安装以上步骤配置完成后，点击运行，得到如下效果：\n![](http://otl4ekdmf.bkt.clouddn.com/horilogin.png)\n\n登录进去效果如下:\n![](http://otl4ekdmf.bkt.clouddn.com/horizonmainpage.png)\n","slug":"horizondevelop1","published":1,"updated":"2018-01-02T00:50:36.835Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjbwxj0z8000qh0vo9099jlih","content":"<h2 id=\"openstack源代码的获取\"><a href=\"#openstack源代码的获取\" class=\"headerlink\" title=\"openstack源代码的获取\"></a>openstack源代码的获取</h2><p>我们可以从<a href=\"https://releases.openstack.org/\" target=\"_blank\" rel=\"noopener\"><strong><em>OpenStack Releases</em></strong></a>下载所有发行版本的openstack，openstack每6个月发行一个版本。选择相应的openstac版本和相应组件版本。<br><a id=\"more\"></a></p>\n<p><img src=\"http://otl4ekdmf.bkt.clouddn.com/openstackrelease.png\" alt=\"\"></p>\n<h2 id=\"Horizon-UI开发环境部署\"><a href=\"#Horizon-UI开发环境部署\" class=\"headerlink\" title=\"Horizon UI开发环境部署\"></a>Horizon UI开发环境部署</h2><p>这里认为以及部署好一个openstack ocata基础环境，仅演示手动部署horizon ui开发环境</p>\n<h3 id=\"开发准备\"><a href=\"#开发准备\" class=\"headerlink\" title=\"开发准备\"></a>开发准备</h3><h4 id=\"安装pip\"><a href=\"#安装pip\" class=\"headerlink\" title=\"安装pip\"></a>安装pip</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install python-pip</span><br><span class=\"line\">sudo apt-get install -y libxml2-dev libxslt1-dev zlib1g-dev python3-pip</span><br></pre></td></tr></table></figure>\n<h4 id=\"下载horizon源码\"><a href=\"#下载horizon源码\" class=\"headerlink\" title=\"下载horizon源码:\"></a>下载horizon源码:</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone https://github.com/openstack/horizon.git</span><br><span class=\"line\">cd horizon/</span><br></pre></td></tr></table></figure>\n<h4 id=\"环境配置\"><a href=\"#环境配置\" class=\"headerlink\" title=\"环境配置\"></a>环境配置</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cp openstack_dashboard/local/local_settings.py.example openstack_dashboard/local/local_settings.py</span><br></pre></td></tr></table></figure>\n<p>vi openstack_dashboard/local/local_settings.py<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ALLOWED_HOSTS = <span class=\"string\">'*'</span></span><br><span class=\"line\"><span class=\"comment\"># ...</span></span><br><span class=\"line\">OPENSTACK_KEYSTONE_DEFAULT_DOMAIN = <span class=\"string\">'default'</span> <span class=\"comment\"># 如果 Domain 的 ID 不是 default，则为对应的 ID  </span></span><br><span class=\"line\"><span class=\"comment\"># ...</span></span><br><span class=\"line\">OPENSTACK_KEYSTONE_MULTIDOMAIN_SUPPORT = <span class=\"keyword\">True</span></span><br><span class=\"line\"><span class=\"comment\"># ...</span></span><br><span class=\"line\">OPENSTACK_HOST = <span class=\"string\">\"192.168.89.11\"</span> <span class=\"comment\"># 控制节点IP地址</span></span><br><span class=\"line\">OPENSTACK_KEYSTONE_URL = <span class=\"string\">\"http://%s:5000/v3\"</span> % OPENSTACK_HOST</span><br><span class=\"line\">OPENSTACK_KEYSTONE_DEFAULT_ROLE = <span class=\"string\">\"user\"</span> <span class=\"comment\">#根据你的环境自己配置这个参数，这里我是‘user’</span></span><br><span class=\"line\"><span class=\"comment\"># ...</span></span><br><span class=\"line\">OPENSTACK_API_VERSIONS = &#123;</span><br><span class=\"line\">  <span class=\"string\">\"identity\"</span>: <span class=\"number\">3</span>,</span><br><span class=\"line\">  <span class=\"string\">\"image\"</span>: <span class=\"number\">2</span>,</span><br><span class=\"line\">  <span class=\"string\">\"volume\"</span>: <span class=\"number\">2</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\"># ...</span></span><br><span class=\"line\"><span class=\"comment\"># 根据你的网络环境配置这里的参数</span></span><br><span class=\"line\">OPENSTACK_NEUTRON_NETWORK = &#123;</span><br><span class=\"line\">  <span class=\"comment\">#...</span></span><br><span class=\"line\">  <span class=\"string\">'enable_router'</span>: <span class=\"keyword\">False</span>,</span><br><span class=\"line\">  <span class=\"string\">'enable_quotas'</span>: <span class=\"keyword\">False</span>,</span><br><span class=\"line\">  <span class=\"string\">'enable_distributed_router'</span>: <span class=\"keyword\">False</span>,</span><br><span class=\"line\">  <span class=\"string\">'enable_ha_router'</span>: <span class=\"keyword\">False</span>,</span><br><span class=\"line\">  <span class=\"string\">'enable_lb'</span>: <span class=\"keyword\">False</span>,</span><br><span class=\"line\">  <span class=\"string\">'enable_firewall'</span>: <span class=\"keyword\">False</span>,</span><br><span class=\"line\">  <span class=\"string\">'enable_vpn'</span>: <span class=\"keyword\">False</span>,</span><br><span class=\"line\">  <span class=\"string\">'enable_fip_topology_check'</span>: <span class=\"keyword\">False</span>,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"django-session-cache选择\"><a href=\"#django-session-cache选择\" class=\"headerlink\" title=\"django session cache选择\"></a>django session cache选择</h4><p>1.依赖安装<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install memcached</span><br><span class=\"line\">pip install python-memcached</span><br><span class=\"line\">sudo apt-get install python-dev</span><br><span class=\"line\">sudo apt-get install libmemcached-dev</span><br><span class=\"line\">pip install pylibmc</span><br></pre></td></tr></table></figure></p>\n<p>2.配置local_setting.py<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CACHES = &#123;</span><br><span class=\"line\">   <span class=\"string\">'default'</span>: &#123;</span><br><span class=\"line\">       <span class=\"string\">'BACKEND'</span>: <span class=\"string\">'django.core.cache.backends.memcached.MemcachedCache'</span>,</span><br><span class=\"line\">       <span class=\"string\">'LOCATION'</span>: <span class=\"string\">'127.0.0.1:11211'</span>,</span><br><span class=\"line\">   &#125;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"设定hosts\"><a href=\"#设定hosts\" class=\"headerlink\" title=\"设定hosts\"></a>设定hosts</h4><p>vim /etc/hosts<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">192.168</span><span class=\"number\">.89</span><span class=\"number\">.11</span> controller</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"压缩静态文件\"><a href=\"#压缩静态文件\" class=\"headerlink\" title=\"压缩静态文件\"></a>压缩静态文件</h4><p>初始化静态文件 注意：一定要先执行此步骤再启动服务！否则再执行因为缓存还是不能正常运行，需要在 collectstatic 时增加 -c 参数<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python manage.py collectstatic -l</span><br><span class=\"line\">python manage.py compress --force</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"语言环境切换\"><a href=\"#语言环境切换\" class=\"headerlink\" title=\"语言环境切换\"></a>语言环境切换</h4><p>1.修改horizon/openstack_dashboard/locale/zh_CN/LC_MESSAGES/django.po<br>    注意按照下面的格式<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#: templates/403.html:25 templates/404.html:24</span></span><br><span class=\"line\">msgid <span class=\"string\">\"Projects\"</span></span><br><span class=\"line\">msgstr <span class=\"string\">\"项目\"</span></span><br></pre></td></tr></table></figure></p>\n<p>2.编译<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd horizon/openstack_dashboard</span><br><span class=\"line\">django-admin compilemessages</span><br></pre></td></tr></table></figure></p>\n<p>3.done</p>\n<p><code>注意</code>：以上的环境为python3.5和pip3</p>\n<h3 id=\"运行效果\"><a href=\"#运行效果\" class=\"headerlink\" title=\"运行效果\"></a>运行效果</h3><p>打开pycharm，加载运行horizon源码，选择编译器版本为python3,安装requirements.txt中的依赖，安装以上步骤配置完成后，点击运行，得到如下效果：<br><img src=\"http://otl4ekdmf.bkt.clouddn.com/horilogin.png\" alt=\"\"></p>\n<p>登录进去效果如下:<br><img src=\"http://otl4ekdmf.bkt.clouddn.com/horizonmainpage.png\" alt=\"\"></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"openstack源代码的获取\"><a href=\"#openstack源代码的获取\" class=\"headerlink\" title=\"openstack源代码的获取\"></a>openstack源代码的获取</h2><p>我们可以从<a href=\"https://releases.openstack.org/\" target=\"_blank\" rel=\"noopener\"><strong><em>OpenStack Releases</em></strong></a>下载所有发行版本的openstack，openstack每6个月发行一个版本。选择相应的openstac版本和相应组件版本。<br>","more":"</p>\n<p><img src=\"http://otl4ekdmf.bkt.clouddn.com/openstackrelease.png\" alt=\"\"></p>\n<h2 id=\"Horizon-UI开发环境部署\"><a href=\"#Horizon-UI开发环境部署\" class=\"headerlink\" title=\"Horizon UI开发环境部署\"></a>Horizon UI开发环境部署</h2><p>这里认为以及部署好一个openstack ocata基础环境，仅演示手动部署horizon ui开发环境</p>\n<h3 id=\"开发准备\"><a href=\"#开发准备\" class=\"headerlink\" title=\"开发准备\"></a>开发准备</h3><h4 id=\"安装pip\"><a href=\"#安装pip\" class=\"headerlink\" title=\"安装pip\"></a>安装pip</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install python-pip</span><br><span class=\"line\">sudo apt-get install -y libxml2-dev libxslt1-dev zlib1g-dev python3-pip</span><br></pre></td></tr></table></figure>\n<h4 id=\"下载horizon源码\"><a href=\"#下载horizon源码\" class=\"headerlink\" title=\"下载horizon源码:\"></a>下载horizon源码:</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone https://github.com/openstack/horizon.git</span><br><span class=\"line\">cd horizon/</span><br></pre></td></tr></table></figure>\n<h4 id=\"环境配置\"><a href=\"#环境配置\" class=\"headerlink\" title=\"环境配置\"></a>环境配置</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cp openstack_dashboard/local/local_settings.py.example openstack_dashboard/local/local_settings.py</span><br></pre></td></tr></table></figure>\n<p>vi openstack_dashboard/local/local_settings.py<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ALLOWED_HOSTS = <span class=\"string\">'*'</span></span><br><span class=\"line\"><span class=\"comment\"># ...</span></span><br><span class=\"line\">OPENSTACK_KEYSTONE_DEFAULT_DOMAIN = <span class=\"string\">'default'</span> <span class=\"comment\"># 如果 Domain 的 ID 不是 default，则为对应的 ID  </span></span><br><span class=\"line\"><span class=\"comment\"># ...</span></span><br><span class=\"line\">OPENSTACK_KEYSTONE_MULTIDOMAIN_SUPPORT = <span class=\"keyword\">True</span></span><br><span class=\"line\"><span class=\"comment\"># ...</span></span><br><span class=\"line\">OPENSTACK_HOST = <span class=\"string\">\"192.168.89.11\"</span> <span class=\"comment\"># 控制节点IP地址</span></span><br><span class=\"line\">OPENSTACK_KEYSTONE_URL = <span class=\"string\">\"http://%s:5000/v3\"</span> % OPENSTACK_HOST</span><br><span class=\"line\">OPENSTACK_KEYSTONE_DEFAULT_ROLE = <span class=\"string\">\"user\"</span> <span class=\"comment\">#根据你的环境自己配置这个参数，这里我是‘user’</span></span><br><span class=\"line\"><span class=\"comment\"># ...</span></span><br><span class=\"line\">OPENSTACK_API_VERSIONS = &#123;</span><br><span class=\"line\">  <span class=\"string\">\"identity\"</span>: <span class=\"number\">3</span>,</span><br><span class=\"line\">  <span class=\"string\">\"image\"</span>: <span class=\"number\">2</span>,</span><br><span class=\"line\">  <span class=\"string\">\"volume\"</span>: <span class=\"number\">2</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\"># ...</span></span><br><span class=\"line\"><span class=\"comment\"># 根据你的网络环境配置这里的参数</span></span><br><span class=\"line\">OPENSTACK_NEUTRON_NETWORK = &#123;</span><br><span class=\"line\">  <span class=\"comment\">#...</span></span><br><span class=\"line\">  <span class=\"string\">'enable_router'</span>: <span class=\"keyword\">False</span>,</span><br><span class=\"line\">  <span class=\"string\">'enable_quotas'</span>: <span class=\"keyword\">False</span>,</span><br><span class=\"line\">  <span class=\"string\">'enable_distributed_router'</span>: <span class=\"keyword\">False</span>,</span><br><span class=\"line\">  <span class=\"string\">'enable_ha_router'</span>: <span class=\"keyword\">False</span>,</span><br><span class=\"line\">  <span class=\"string\">'enable_lb'</span>: <span class=\"keyword\">False</span>,</span><br><span class=\"line\">  <span class=\"string\">'enable_firewall'</span>: <span class=\"keyword\">False</span>,</span><br><span class=\"line\">  <span class=\"string\">'enable_vpn'</span>: <span class=\"keyword\">False</span>,</span><br><span class=\"line\">  <span class=\"string\">'enable_fip_topology_check'</span>: <span class=\"keyword\">False</span>,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"django-session-cache选择\"><a href=\"#django-session-cache选择\" class=\"headerlink\" title=\"django session cache选择\"></a>django session cache选择</h4><p>1.依赖安装<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install memcached</span><br><span class=\"line\">pip install python-memcached</span><br><span class=\"line\">sudo apt-get install python-dev</span><br><span class=\"line\">sudo apt-get install libmemcached-dev</span><br><span class=\"line\">pip install pylibmc</span><br></pre></td></tr></table></figure></p>\n<p>2.配置local_setting.py<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CACHES = &#123;</span><br><span class=\"line\">   <span class=\"string\">'default'</span>: &#123;</span><br><span class=\"line\">       <span class=\"string\">'BACKEND'</span>: <span class=\"string\">'django.core.cache.backends.memcached.MemcachedCache'</span>,</span><br><span class=\"line\">       <span class=\"string\">'LOCATION'</span>: <span class=\"string\">'127.0.0.1:11211'</span>,</span><br><span class=\"line\">   &#125;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"设定hosts\"><a href=\"#设定hosts\" class=\"headerlink\" title=\"设定hosts\"></a>设定hosts</h4><p>vim /etc/hosts<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">192.168</span><span class=\"number\">.89</span><span class=\"number\">.11</span> controller</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"压缩静态文件\"><a href=\"#压缩静态文件\" class=\"headerlink\" title=\"压缩静态文件\"></a>压缩静态文件</h4><p>初始化静态文件 注意：一定要先执行此步骤再启动服务！否则再执行因为缓存还是不能正常运行，需要在 collectstatic 时增加 -c 参数<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python manage.py collectstatic -l</span><br><span class=\"line\">python manage.py compress --force</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"语言环境切换\"><a href=\"#语言环境切换\" class=\"headerlink\" title=\"语言环境切换\"></a>语言环境切换</h4><p>1.修改horizon/openstack_dashboard/locale/zh_CN/LC_MESSAGES/django.po<br>    注意按照下面的格式<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#: templates/403.html:25 templates/404.html:24</span></span><br><span class=\"line\">msgid <span class=\"string\">\"Projects\"</span></span><br><span class=\"line\">msgstr <span class=\"string\">\"项目\"</span></span><br></pre></td></tr></table></figure></p>\n<p>2.编译<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd horizon/openstack_dashboard</span><br><span class=\"line\">django-admin compilemessages</span><br></pre></td></tr></table></figure></p>\n<p>3.done</p>\n<p><code>注意</code>：以上的环境为python3.5和pip3</p>\n<h3 id=\"运行效果\"><a href=\"#运行效果\" class=\"headerlink\" title=\"运行效果\"></a>运行效果</h3><p>打开pycharm，加载运行horizon源码，选择编译器版本为python3,安装requirements.txt中的依赖，安装以上步骤配置完成后，点击运行，得到如下效果：<br><img src=\"http://otl4ekdmf.bkt.clouddn.com/horilogin.png\" alt=\"\"></p>\n<p>登录进去效果如下:<br><img src=\"http://otl4ekdmf.bkt.clouddn.com/horizonmainpage.png\" alt=\"\"></p>"},{"title":"markdown学习","date":"2017-04-03T06:13:40.000Z","_content":"\n> ~~简书居然没有官方 Markdown 教程，我来写一个~~。原来官方是有的。。。[献给写作者的 Markdown 新手指南][official_md_guide]。不过我这个更简，而且还有独门秘籍。\n\n首先，“Markdown 其实很简单。在简书上学习 Markdown 最方便。”  \n\n[official_md_guide]: http://jianshu.io/p/q81RER\n\n<!--more-->\n\n---\n\n# 1. 标题\n\n为了获得上面的 “`1. 标题`”， 在 Markdown 编辑器里输入：\n\n~~~\n# 1. 标题\n~~~\n\n“`#`” 后最好加个空格。除此之外，还有 5 级标题，依次有不同的字体大小，即\n\n~~~\n## 二级标题\n### 三级标题\n#### 四级标题\n##### 五级标题\n###### 六级标题\n~~~\n\n这样就有：\n\n## 二级标题\n### 三级标题\n#### 四级标题\n##### 五级标题\n###### 六级标题\n\n---\n\n# 2. 加粗，斜体\n\n最常用的强调方式，那就是 **加粗** 了，你得这样：\n\n~~~\n最常用的强调方式，那就是 **加粗** 了，你得这样：\n~~~\n\n通常我喜欢在 “`**加粗的部分**`” 旁边各加一个空格，当然你也可以不这样。\n斜体则多用在于书名，比如：我从来没看过 *Jane Eyre*\n\n~~~\n斜体则多用在于书名，比如：我从来没看过 *Jane Eyre*\n~~~\n\n但中文的斜体我觉得真是不美，像：《*简 · 爱*》，一般还是别用了。\n\n\n\n---\n\n# 3. 层次\n\n比如写个读书笔记，你得\n![](http://otl4ekdmf.bkt.clouddn.com/markdown00.png)\n也不难：\n~~~\n#### 第一章\n\n1. 第一节\n* 第二节(你不用敲 \"2\"，自动就有了）\n    * 第一小节（推荐每层次缩进四个空格）\n        * 小小节 1\n        * 小小节 2\n    * 第二小节\n~~~\n\n“`*`” 后面要加空格，这是必须的，除了 `*`，还可以使用 `+` 或者 `-`。\n\n如果格式出现问题，多加个空行，一般就好了。\n\n\n\n---\n\n# 4. 链接，图片\n\n你：我没读过 *Jane Eyre*\n我：以后别跟我说话！\n你：。。。\n我：我也没读过，但是， [***Jane Eyre***](http://book.douban.com/subject/1141406/) is not just ***Jane Eyre***\n![](https://img5.doubanio.com/lpic/s5924326.jpg)\n\n~~~\n我：我也没读过，但是， [***Jane Eyre***](http://book.douban.com/subject/1141406/) is not just ***Jane Eyre***\n![](http://img3.douban.com/mpic/s1108264.jpg)\n~~~\n\n\n\n---\n\n# [5. 其他][null-link]\n\n你可能还没注意到本文每部分之间的分割线和 `其他` 的链接其实没有链接\n我爱 `分割线`， 我爱 [**链接**][null-link]，哪怕它只有颜色~\n\n[null-link]: chrome://not-a-link\n\n~~~\n---\n\n# [5. 其他][null-link]\n\n你可能还没注意到本文每部分之间的分割线和 `其他` 的链接其实没有链接\n我爱 `分割线`， 我爱 [**链接**][null-link]，哪怕它只有颜色~\n\n[null-link]: chrome://not-a-link\n~~~\n\n“`---`” 的上下最好各空一行\n\n---\n\n**P.S.** 补充一种高端的链接: [鼠标移过来，**先别单击** ~][hover]\n[hover]: http://www.google.com.sg \"Google Sg 更快，更好用。好，现在单击吧\"\n\n代码如下：\n\n~~~\n**P.S.** 补充一种高端的链接: [鼠标移过来，**先别单击** ~][hover]\n[hover]: http://www.google.com.sg \"Google Sg 更快，更好用。好，现在单击吧\"\n~~~\n\n（可惜 Google 被墙了）\n\n**P.P.S.** 图片链接：(点击图片可跳转）\n[![][jane-eyre-pic]][jane-eyre-douban]\n[jane-eyre-pic]: http://img3.douban.com/mpic/s1108264.jpg\n[jane-eyre-douban]: http://book.douban.com/subject/1141406/\n\n代码如下： \n```\n[![][jane-eyre-pic]][jane-eyre-douban]\n[jane-eyre-pic]: http://img3.douban.com/mpic/s1108264.jpg\n[jane-eyre-douban]: http://book.douban.com/subject/1141406/\n```\n\n（简书最新的 Markdown 不能使用图片链接。。。感受不爱）\n**P.P.P.S.**\n\n更多的 Markdown 特性测试，见我的 [Markdown 一篇博客](http://jianshu.io/p/6827f850f723)\n\n在简书中输入数学公式：见我的 [简书中编辑数学公式](http://jianshu.io/p/e8a14ec1c614)\n\n如何写出漂亮的 Markdown 文章？戳 [Markdown 写作规范参考](http://jianshu.io/p/3bd994e702a7)\n","source":"_posts/markdownLearn.md","raw":"---\ntitle: markdown学习\ndate: 2017-04-03 14:13:40\ntags: markdown\ncategories: MD学习\n---\n\n> ~~简书居然没有官方 Markdown 教程，我来写一个~~。原来官方是有的。。。[献给写作者的 Markdown 新手指南][official_md_guide]。不过我这个更简，而且还有独门秘籍。\n\n首先，“Markdown 其实很简单。在简书上学习 Markdown 最方便。”  \n\n[official_md_guide]: http://jianshu.io/p/q81RER\n\n<!--more-->\n\n---\n\n# 1. 标题\n\n为了获得上面的 “`1. 标题`”， 在 Markdown 编辑器里输入：\n\n~~~\n# 1. 标题\n~~~\n\n“`#`” 后最好加个空格。除此之外，还有 5 级标题，依次有不同的字体大小，即\n\n~~~\n## 二级标题\n### 三级标题\n#### 四级标题\n##### 五级标题\n###### 六级标题\n~~~\n\n这样就有：\n\n## 二级标题\n### 三级标题\n#### 四级标题\n##### 五级标题\n###### 六级标题\n\n---\n\n# 2. 加粗，斜体\n\n最常用的强调方式，那就是 **加粗** 了，你得这样：\n\n~~~\n最常用的强调方式，那就是 **加粗** 了，你得这样：\n~~~\n\n通常我喜欢在 “`**加粗的部分**`” 旁边各加一个空格，当然你也可以不这样。\n斜体则多用在于书名，比如：我从来没看过 *Jane Eyre*\n\n~~~\n斜体则多用在于书名，比如：我从来没看过 *Jane Eyre*\n~~~\n\n但中文的斜体我觉得真是不美，像：《*简 · 爱*》，一般还是别用了。\n\n\n\n---\n\n# 3. 层次\n\n比如写个读书笔记，你得\n![](http://otl4ekdmf.bkt.clouddn.com/markdown00.png)\n也不难：\n~~~\n#### 第一章\n\n1. 第一节\n* 第二节(你不用敲 \"2\"，自动就有了）\n    * 第一小节（推荐每层次缩进四个空格）\n        * 小小节 1\n        * 小小节 2\n    * 第二小节\n~~~\n\n“`*`” 后面要加空格，这是必须的，除了 `*`，还可以使用 `+` 或者 `-`。\n\n如果格式出现问题，多加个空行，一般就好了。\n\n\n\n---\n\n# 4. 链接，图片\n\n你：我没读过 *Jane Eyre*\n我：以后别跟我说话！\n你：。。。\n我：我也没读过，但是， [***Jane Eyre***](http://book.douban.com/subject/1141406/) is not just ***Jane Eyre***\n![](https://img5.doubanio.com/lpic/s5924326.jpg)\n\n~~~\n我：我也没读过，但是， [***Jane Eyre***](http://book.douban.com/subject/1141406/) is not just ***Jane Eyre***\n![](http://img3.douban.com/mpic/s1108264.jpg)\n~~~\n\n\n\n---\n\n# [5. 其他][null-link]\n\n你可能还没注意到本文每部分之间的分割线和 `其他` 的链接其实没有链接\n我爱 `分割线`， 我爱 [**链接**][null-link]，哪怕它只有颜色~\n\n[null-link]: chrome://not-a-link\n\n~~~\n---\n\n# [5. 其他][null-link]\n\n你可能还没注意到本文每部分之间的分割线和 `其他` 的链接其实没有链接\n我爱 `分割线`， 我爱 [**链接**][null-link]，哪怕它只有颜色~\n\n[null-link]: chrome://not-a-link\n~~~\n\n“`---`” 的上下最好各空一行\n\n---\n\n**P.S.** 补充一种高端的链接: [鼠标移过来，**先别单击** ~][hover]\n[hover]: http://www.google.com.sg \"Google Sg 更快，更好用。好，现在单击吧\"\n\n代码如下：\n\n~~~\n**P.S.** 补充一种高端的链接: [鼠标移过来，**先别单击** ~][hover]\n[hover]: http://www.google.com.sg \"Google Sg 更快，更好用。好，现在单击吧\"\n~~~\n\n（可惜 Google 被墙了）\n\n**P.P.S.** 图片链接：(点击图片可跳转）\n[![][jane-eyre-pic]][jane-eyre-douban]\n[jane-eyre-pic]: http://img3.douban.com/mpic/s1108264.jpg\n[jane-eyre-douban]: http://book.douban.com/subject/1141406/\n\n代码如下： \n```\n[![][jane-eyre-pic]][jane-eyre-douban]\n[jane-eyre-pic]: http://img3.douban.com/mpic/s1108264.jpg\n[jane-eyre-douban]: http://book.douban.com/subject/1141406/\n```\n\n（简书最新的 Markdown 不能使用图片链接。。。感受不爱）\n**P.P.P.S.**\n\n更多的 Markdown 特性测试，见我的 [Markdown 一篇博客](http://jianshu.io/p/6827f850f723)\n\n在简书中输入数学公式：见我的 [简书中编辑数学公式](http://jianshu.io/p/e8a14ec1c614)\n\n如何写出漂亮的 Markdown 文章？戳 [Markdown 写作规范参考](http://jianshu.io/p/3bd994e702a7)\n","slug":"markdownLearn","published":1,"updated":"2018-01-02T00:50:36.835Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjbwxj0z8000uh0voirhic654","content":"<blockquote>\n<p><del>简书居然没有官方 Markdown 教程，我来写一个</del>。原来官方是有的。。。<a href=\"http://jianshu.io/p/q81RER\" target=\"_blank\" rel=\"noopener\">献给写作者的 Markdown 新手指南</a>。不过我这个更简，而且还有独门秘籍。</p>\n</blockquote>\n<p>首先，“Markdown 其实很简单。在简书上学习 Markdown 最方便。”  </p>\n<a id=\"more\"></a>\n<hr>\n<h1 id=\"1-标题\"><a href=\"#1-标题\" class=\"headerlink\" title=\"1. 标题\"></a>1. 标题</h1><p>为了获得上面的 “<code>1. 标题</code>”， 在 Markdown 编辑器里输入：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 1. 标题</span><br></pre></td></tr></table></figure>\n<p>“<code>#</code>” 后最好加个空格。除此之外，还有 5 级标题，依次有不同的字体大小，即</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">## 二级标题</span><br><span class=\"line\">### 三级标题</span><br><span class=\"line\">#### 四级标题</span><br><span class=\"line\">##### 五级标题</span><br><span class=\"line\">###### 六级标题</span><br></pre></td></tr></table></figure>\n<p>这样就有：</p>\n<h2 id=\"二级标题\"><a href=\"#二级标题\" class=\"headerlink\" title=\"二级标题\"></a>二级标题</h2><h3 id=\"三级标题\"><a href=\"#三级标题\" class=\"headerlink\" title=\"三级标题\"></a>三级标题</h3><h4 id=\"四级标题\"><a href=\"#四级标题\" class=\"headerlink\" title=\"四级标题\"></a>四级标题</h4><h5 id=\"五级标题\"><a href=\"#五级标题\" class=\"headerlink\" title=\"五级标题\"></a>五级标题</h5><h6 id=\"六级标题\"><a href=\"#六级标题\" class=\"headerlink\" title=\"六级标题\"></a>六级标题</h6><hr>\n<h1 id=\"2-加粗，斜体\"><a href=\"#2-加粗，斜体\" class=\"headerlink\" title=\"2. 加粗，斜体\"></a>2. 加粗，斜体</h1><p>最常用的强调方式，那就是 <strong>加粗</strong> 了，你得这样：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">最常用的强调方式，那就是 **加粗** 了，你得这样：</span><br></pre></td></tr></table></figure>\n<p>通常我喜欢在 “<code>**加粗的部分**</code>” 旁边各加一个空格，当然你也可以不这样。<br>斜体则多用在于书名，比如：我从来没看过 <em>Jane Eyre</em></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">斜体则多用在于书名，比如：我从来没看过 *Jane Eyre*</span><br></pre></td></tr></table></figure>\n<p>但中文的斜体我觉得真是不美，像：《<em>简 · 爱</em>》，一般还是别用了。</p>\n<hr>\n<h1 id=\"3-层次\"><a href=\"#3-层次\" class=\"headerlink\" title=\"3. 层次\"></a>3. 层次</h1><p>比如写个读书笔记，你得<br><img src=\"http://otl4ekdmf.bkt.clouddn.com/markdown00.png\" alt=\"\"><br>也不难：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#### 第一章</span><br><span class=\"line\"></span><br><span class=\"line\">1. 第一节</span><br><span class=\"line\">* 第二节(你不用敲 &quot;2&quot;，自动就有了）</span><br><span class=\"line\">    * 第一小节（推荐每层次缩进四个空格）</span><br><span class=\"line\">        * 小小节 1</span><br><span class=\"line\">        * 小小节 2</span><br><span class=\"line\">    * 第二小节</span><br></pre></td></tr></table></figure></p>\n<p>“<code>*</code>” 后面要加空格，这是必须的，除了 <code>*</code>，还可以使用 <code>+</code> 或者 <code>-</code>。</p>\n<p>如果格式出现问题，多加个空行，一般就好了。</p>\n<hr>\n<h1 id=\"4-链接，图片\"><a href=\"#4-链接，图片\" class=\"headerlink\" title=\"4. 链接，图片\"></a>4. 链接，图片</h1><p>你：我没读过 <em>Jane Eyre</em><br>我：以后别跟我说话！<br>你：。。。<br>我：我也没读过，但是， <a href=\"http://book.douban.com/subject/1141406/\" target=\"_blank\" rel=\"noopener\"><strong><em>Jane Eyre</em></strong></a> is not just <strong><em>Jane Eyre</em></strong><br><img src=\"https://img5.doubanio.com/lpic/s5924326.jpg\" alt=\"\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">我：我也没读过，但是， [***Jane Eyre***](http://book.douban.com/subject/1141406/) is not just ***Jane Eyre***</span><br><span class=\"line\">![](http://img3.douban.com/mpic/s1108264.jpg)</span><br></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"5-其他\"><a href=\"#5-其他\" class=\"headerlink\" title=\"5. 其他\"></a><a href=\"chrome://not-a-link\" target=\"_blank\" rel=\"noopener\">5. 其他</a></h1><p>你可能还没注意到本文每部分之间的分割线和 <code>其他</code> 的链接其实没有链接<br>我爱 <code>分割线</code>， 我爱 <a href=\"chrome://not-a-link\" target=\"_blank\" rel=\"noopener\"><strong>链接</strong></a>，哪怕它只有颜色~</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\"></span><br><span class=\"line\"># [5. 其他][null-link]</span><br><span class=\"line\"></span><br><span class=\"line\">你可能还没注意到本文每部分之间的分割线和 `其他` 的链接其实没有链接</span><br><span class=\"line\">我爱 `分割线`， 我爱 [**链接**][null-link]，哪怕它只有颜色~</span><br><span class=\"line\"></span><br><span class=\"line\">[null-link]: chrome://not-a-link</span><br></pre></td></tr></table></figure>\n<p>“<code>---</code>” 的上下最好各空一行</p>\n<hr>\n<p><strong>P.S.</strong> 补充一种高端的链接: [鼠标移过来，<strong>先别单击</strong> ~][hover]<br>[hover]: <a href=\"http://www.google.com.sg\" target=\"_blank\" rel=\"noopener\">http://www.google.com.sg</a> “Google Sg 更快，更好用。好，现在单击吧”</p>\n<p>代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">**P.S.** 补充一种高端的链接: [鼠标移过来，**先别单击** ~][hover]</span><br><span class=\"line\">[hover]: http://www.google.com.sg &quot;Google Sg 更快，更好用。好，现在单击吧&quot;</span><br></pre></td></tr></table></figure>\n<p>（可惜 Google 被墙了）</p>\n<p><strong>P.P.S.</strong> 图片链接：(点击图片可跳转）<br>[![][jane-eyre-pic]][jane-eyre-douban]<br>[jane-eyre-pic]: <a href=\"http://img3.douban.com/mpic/s1108264.jpg\" target=\"_blank\" rel=\"noopener\">http://img3.douban.com/mpic/s1108264.jpg</a><br>[jane-eyre-douban]: <a href=\"http://book.douban.com/subject/1141406/\" target=\"_blank\" rel=\"noopener\">http://book.douban.com/subject/1141406/</a></p>\n<p>代码如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[![][jane-eyre-pic]][jane-eyre-douban]</span><br><span class=\"line\">[jane-eyre-pic]: http://img3.douban.com/mpic/s1108264.jpg</span><br><span class=\"line\">[jane-eyre-douban]: http://book.douban.com/subject/1141406/</span><br></pre></td></tr></table></figure></p>\n<p>（简书最新的 Markdown 不能使用图片链接。。。感受不爱）<br><strong>P.P.P.S.</strong></p>\n<p>更多的 Markdown 特性测试，见我的 <a href=\"http://jianshu.io/p/6827f850f723\" target=\"_blank\" rel=\"noopener\">Markdown 一篇博客</a></p>\n<p>在简书中输入数学公式：见我的 <a href=\"http://jianshu.io/p/e8a14ec1c614\" target=\"_blank\" rel=\"noopener\">简书中编辑数学公式</a></p>\n<p>如何写出漂亮的 Markdown 文章？戳 <a href=\"http://jianshu.io/p/3bd994e702a7\" target=\"_blank\" rel=\"noopener\">Markdown 写作规范参考</a></p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p><del>简书居然没有官方 Markdown 教程，我来写一个</del>。原来官方是有的。。。<a href=\"http://jianshu.io/p/q81RER\" target=\"_blank\" rel=\"noopener\">献给写作者的 Markdown 新手指南</a>。不过我这个更简，而且还有独门秘籍。</p>\n</blockquote>\n<p>首先，“Markdown 其实很简单。在简书上学习 Markdown 最方便。”  </p>","more":"<hr>\n<h1 id=\"1-标题\"><a href=\"#1-标题\" class=\"headerlink\" title=\"1. 标题\"></a>1. 标题</h1><p>为了获得上面的 “<code>1. 标题</code>”， 在 Markdown 编辑器里输入：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 1. 标题</span><br></pre></td></tr></table></figure>\n<p>“<code>#</code>” 后最好加个空格。除此之外，还有 5 级标题，依次有不同的字体大小，即</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">## 二级标题</span><br><span class=\"line\">### 三级标题</span><br><span class=\"line\">#### 四级标题</span><br><span class=\"line\">##### 五级标题</span><br><span class=\"line\">###### 六级标题</span><br></pre></td></tr></table></figure>\n<p>这样就有：</p>\n<h2 id=\"二级标题\"><a href=\"#二级标题\" class=\"headerlink\" title=\"二级标题\"></a>二级标题</h2><h3 id=\"三级标题\"><a href=\"#三级标题\" class=\"headerlink\" title=\"三级标题\"></a>三级标题</h3><h4 id=\"四级标题\"><a href=\"#四级标题\" class=\"headerlink\" title=\"四级标题\"></a>四级标题</h4><h5 id=\"五级标题\"><a href=\"#五级标题\" class=\"headerlink\" title=\"五级标题\"></a>五级标题</h5><h6 id=\"六级标题\"><a href=\"#六级标题\" class=\"headerlink\" title=\"六级标题\"></a>六级标题</h6><hr>\n<h1 id=\"2-加粗，斜体\"><a href=\"#2-加粗，斜体\" class=\"headerlink\" title=\"2. 加粗，斜体\"></a>2. 加粗，斜体</h1><p>最常用的强调方式，那就是 <strong>加粗</strong> 了，你得这样：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">最常用的强调方式，那就是 **加粗** 了，你得这样：</span><br></pre></td></tr></table></figure>\n<p>通常我喜欢在 “<code>**加粗的部分**</code>” 旁边各加一个空格，当然你也可以不这样。<br>斜体则多用在于书名，比如：我从来没看过 <em>Jane Eyre</em></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">斜体则多用在于书名，比如：我从来没看过 *Jane Eyre*</span><br></pre></td></tr></table></figure>\n<p>但中文的斜体我觉得真是不美，像：《<em>简 · 爱</em>》，一般还是别用了。</p>\n<hr>\n<h1 id=\"3-层次\"><a href=\"#3-层次\" class=\"headerlink\" title=\"3. 层次\"></a>3. 层次</h1><p>比如写个读书笔记，你得<br><img src=\"http://otl4ekdmf.bkt.clouddn.com/markdown00.png\" alt=\"\"><br>也不难：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#### 第一章</span><br><span class=\"line\"></span><br><span class=\"line\">1. 第一节</span><br><span class=\"line\">* 第二节(你不用敲 &quot;2&quot;，自动就有了）</span><br><span class=\"line\">    * 第一小节（推荐每层次缩进四个空格）</span><br><span class=\"line\">        * 小小节 1</span><br><span class=\"line\">        * 小小节 2</span><br><span class=\"line\">    * 第二小节</span><br></pre></td></tr></table></figure></p>\n<p>“<code>*</code>” 后面要加空格，这是必须的，除了 <code>*</code>，还可以使用 <code>+</code> 或者 <code>-</code>。</p>\n<p>如果格式出现问题，多加个空行，一般就好了。</p>\n<hr>\n<h1 id=\"4-链接，图片\"><a href=\"#4-链接，图片\" class=\"headerlink\" title=\"4. 链接，图片\"></a>4. 链接，图片</h1><p>你：我没读过 <em>Jane Eyre</em><br>我：以后别跟我说话！<br>你：。。。<br>我：我也没读过，但是， <a href=\"http://book.douban.com/subject/1141406/\" target=\"_blank\" rel=\"noopener\"><strong><em>Jane Eyre</em></strong></a> is not just <strong><em>Jane Eyre</em></strong><br><img src=\"https://img5.doubanio.com/lpic/s5924326.jpg\" alt=\"\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">我：我也没读过，但是， [***Jane Eyre***](http://book.douban.com/subject/1141406/) is not just ***Jane Eyre***</span><br><span class=\"line\">![](http://img3.douban.com/mpic/s1108264.jpg)</span><br></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"5-其他\"><a href=\"#5-其他\" class=\"headerlink\" title=\"5. 其他\"></a><a href=\"chrome://not-a-link\" target=\"_blank\" rel=\"noopener\">5. 其他</a></h1><p>你可能还没注意到本文每部分之间的分割线和 <code>其他</code> 的链接其实没有链接<br>我爱 <code>分割线</code>， 我爱 <a href=\"chrome://not-a-link\" target=\"_blank\" rel=\"noopener\"><strong>链接</strong></a>，哪怕它只有颜色~</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\"></span><br><span class=\"line\"># [5. 其他][null-link]</span><br><span class=\"line\"></span><br><span class=\"line\">你可能还没注意到本文每部分之间的分割线和 `其他` 的链接其实没有链接</span><br><span class=\"line\">我爱 `分割线`， 我爱 [**链接**][null-link]，哪怕它只有颜色~</span><br><span class=\"line\"></span><br><span class=\"line\">[null-link]: chrome://not-a-link</span><br></pre></td></tr></table></figure>\n<p>“<code>---</code>” 的上下最好各空一行</p>\n<hr>\n<p><strong>P.S.</strong> 补充一种高端的链接: [鼠标移过来，<strong>先别单击</strong> ~][hover]<br>[hover]: <a href=\"http://www.google.com.sg\" target=\"_blank\" rel=\"noopener\">http://www.google.com.sg</a> “Google Sg 更快，更好用。好，现在单击吧”</p>\n<p>代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">**P.S.** 补充一种高端的链接: [鼠标移过来，**先别单击** ~][hover]</span><br><span class=\"line\">[hover]: http://www.google.com.sg &quot;Google Sg 更快，更好用。好，现在单击吧&quot;</span><br></pre></td></tr></table></figure>\n<p>（可惜 Google 被墙了）</p>\n<p><strong>P.P.S.</strong> 图片链接：(点击图片可跳转）<br>[![][jane-eyre-pic]][jane-eyre-douban]<br>[jane-eyre-pic]: <a href=\"http://img3.douban.com/mpic/s1108264.jpg\" target=\"_blank\" rel=\"noopener\">http://img3.douban.com/mpic/s1108264.jpg</a><br>[jane-eyre-douban]: <a href=\"http://book.douban.com/subject/1141406/\" target=\"_blank\" rel=\"noopener\">http://book.douban.com/subject/1141406/</a></p>\n<p>代码如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[![][jane-eyre-pic]][jane-eyre-douban]</span><br><span class=\"line\">[jane-eyre-pic]: http://img3.douban.com/mpic/s1108264.jpg</span><br><span class=\"line\">[jane-eyre-douban]: http://book.douban.com/subject/1141406/</span><br></pre></td></tr></table></figure></p>\n<p>（简书最新的 Markdown 不能使用图片链接。。。感受不爱）<br><strong>P.P.P.S.</strong></p>\n<p>更多的 Markdown 特性测试，见我的 <a href=\"http://jianshu.io/p/6827f850f723\" target=\"_blank\" rel=\"noopener\">Markdown 一篇博客</a></p>\n<p>在简书中输入数学公式：见我的 <a href=\"http://jianshu.io/p/e8a14ec1c614\" target=\"_blank\" rel=\"noopener\">简书中编辑数学公式</a></p>\n<p>如何写出漂亮的 Markdown 文章？戳 <a href=\"http://jianshu.io/p/3bd994e702a7\" target=\"_blank\" rel=\"noopener\">Markdown 写作规范参考</a></p>"},{"title":"我在回忆","date":"2017-07-05T06:09:39.000Z","_content":"<center>我在回忆，在珍惜，在憧憬</center>  \n\n#### 回忆  \n\n>在爱人的眼里，一千里的距离不过一里。是距离让我们的心更靠近。  \n>我们的爱情，经历了信任、猜疑、信任、猜疑...最后我们还是选择了信任。我感谢你。  \n \n <!--more-->  \n \n ##### 懵懂青春三年前  \n &#160; &#160; &#160; &#160; 在经历了那段不顾一切的奋斗之后，我们都喜欢上了对方，可是当我们想去橘子林大吃一顿的时候，发现橘子已经过了收成的时段，我们的爱情赶上了毕业季的分离，还没有吃上甜美的橘子，上天却告诉我们已经没有橘子卖了。只是还是忘不了那好像命中注定的你总是要坐到我旁边几个位置，让我抬头就可以注意到你；忘不了你在操场在我后方不远处的高喊，我随意的回了一句“现在不合适”；忘不了高考前一天我对你的表白短信“我喜欢你”，和你的简短回应“我也喜欢你”；忘不了高考后你拉着我逃离那个无聊的KTV，我们两个在中州公园漫无目的的散步，然后你一直拿湿纸巾擦我的手，那么地细心；忘不了我们在那个饭店吃中午饭，我们都笑着说“这算不算是离别饭”，我们都没有用“分手”两个字；忘不了那天我不知道怎么了抽风似的，送了你一大盒包装极其丑陋的巧克力，你还不好意思的差点笑出来；忘不了那天我们要收拾东西回去的时候，你敲了敲门问“刘韬在吗？”，我就和你一起来到了天台，那是我第一次也是最后一次从背后抱你，因为我没有从正面抱你的勇气。忘不了你对我说我是在和你玩暧昧，我不爱你，之后就渐渐的疏远，谁也不低头。\n ##### 历历在目三年中  \n &#160; &#160; &#160; &#160; 在经历了和你分离之后，我很长一段时间里都在失恋中度过，不，不算失恋，就像你说的，我们只是暧昧吧。可是我不知道为什么会这么心痛，从表白到分离只用了一个月。一个月，对于巨蟹座的我来说这是多么的深刻，深刻地每时每刻心里都插了一把刀子。我忘不了这种初恋的感觉，也许对于你来说，这都不算是恋爱，可是我就是认真了，我就觉得是，那就是恋爱，就是恋爱，是恋爱。  \n &#160; &#160; &#160; &#160; 来到大学后，我“逗比”地在墙上贴上所有我暗恋过的女生和唯一恋爱过的你，我还在骗自己，这就是恋爱。并在你的名字后面写上一句“男人的精力是用来奋斗的，不是用来射的”，之后，我就有了一大堆的“逗比”外号。正如周星驰的搞笑手法一样，和同学一起笑过之后，是那对比强烈的落寞。我无聊，我落寞，我孤单，我还是忘不了。  \n &#160; &#160; &#160; &#160; 那天起来，看到你的QQ头像是和你前男友的合影，我开始看不起你，觉得这个世界我不懂。我已经不记得了我曾经多少次在QQ上默默的给你发了几个“在吗？”；已经不记得了我曾经多少次在教室里寻找，希望可以找到那个像你的身影；已经不记得了我曾经多少次在旅途中想象在我身边的人是你；已经不记得了我曾经多少次拿起电话想打给你有放下电话；我已经不记得了我曾经多少次在操场上跑步幻想在前面跑的那个人是你；我已经不记得了我曾经多少次……其实这些我都还记得，对，我记得，历历在目。只不过远方的你不知道我曾经的多少次。  \n&#160; &#160; &#160; &#160; 我不想知道你为什么还要来联系我，我也不想知道你在大学里两年都发生了什么事情，一切我都不想知道，我还知道什么，我什么都不知道。我只知道在大二的时候，你终于联系我了，联系我了，联系我了。你问我在学校有没有找女朋友，说要给我介绍女朋友，我回答“好啊，谁呀？”。我有一种预感那个人就是你，结果真的说是“我怎么样”。你知道这是一种什么样的感觉吗，就像一个人被冤入狱两年，之后告诉你无罪释放。我试着去想，试着去做的更好。可是，两颗心分离两年，我要怎么去懂你，你要怎么去懂我。你总是缺乏安全感，你总是缺少信任，我不知道你的成长环境，我不知道你大学里的一切，我猜不透你。  \n&#160; &#160; &#160; &#160; 之后我们就这样“撕逼”了一学期，没有把时间用在了解对方上，而是在争论“你到底爱我吗”这样的问题上。可以说 证明“我爱你”是一道数学题，得出结论是需要过程的，没有过程的解答是没有分数的。这个过程就是我要用最快的时间来了解一颗我两年未曾见到的那颗心，可是不知道是题目太难，还是时间不够，也许更可能是我不够聪明吧。我题目还没解完就被你这个监考老师说时间到了，要交卷了，要交卷了，要交卷了。可是我还没有证明出来！如何证明“我爱你”让我焦虑，让我迷茫，让我心痛。我想放弃了，真的想放弃了，真的。为什么证明“我爱你”这道题 一定要有时间限制，让我用一生来证明不可以吗？对，用一生来证明，哼，也许你会想“谁会用一生时间来赌你的证明题”。你需要你的爱来的急切，恨不得立马就有人爱你不离不弃。阿甘正传里面阿甘 曾经说过一句话“我不是一个聪明的人，但我知道什么是爱”，阿甘是一个木讷的人，可是他的爱是真诚，是执着，是坚守。我们都不知道，都不知道，都不知道。  \n##### 雨过天晴三年后  \n&#160; &#160; &#160; &#160; 那个暑假，陪伴我的有乐山大佛，西安城墙，大雁塔，秦始皇兵马俑，山东济南趵突泉，还有最重要的大明湖，以及我的夏雨荷。我的夏雨荷，等你，是给你最长的情书。夏雨荷曾经说过“等了一辈子,恨了一辈子,想了一辈子,怨了一辈子,可是仍然感激上苍,让我有这个可等,可恨,可想,可怨的人,否则,生命就像一口枯井,了无生趣”。我在想你，我在等你，你在哪里？我在朋友圈中发出我说说“等到了大明湖，却等不到我的夏雨荷”，我只想让你看见，只想让你知道我离你6个小时车程的地方想你。你把我删了，删了，删了。我鼓起勇气再给你发出好友请求。我们又联系上了。我这次不会再放过你，绝不！  \n&#160; &#160; &#160; &#160; 我陪着你度过了那个折磨你的一学期，你在考研，也是对我的考验。因为，我相信只要我真心相待，你一定会懂。你一定不知道我很心疼你，在无数个你12点睡，6点起；你一定不知道我很心疼你，在你哭着和我说你来不及准备；你一定不知道我很心疼你，在你每天累的睁不开眼还要和我通电话；你一定不知道我很心疼你，在你每次和我视频，躲在潮湿的晾衣间，还说那里信号比较好；你一定不知道我很心疼你，在你每次在食堂吃的那些没营养的面条，说自己没胃口；你一定不知道我很心疼你，在你每次冒着零下十几度从宿舍跑到图书馆，那股执着劲；你一定不知道我很心疼你……。  \n&#160; &#160; &#160; &#160; 感谢上天，终于让你的努力有了回报。这也许是对我最大的恩赐。我们终于见面了，见面了，见面了。  \n\n#### 珍惜  \n##### 犹抱琵琶半遮面  \n&#160; &#160; &#160; &#160; 我坐了几个小时的火车终于到达了约定的地点，我坐立不安，因为我即将面对那个我朝思暮想的你。你来了，就这样来了，我猝不及防。你害羞，你低头，你偷偷的看我，偷偷的，别以为我不知道，我全都知道。我知道你因为害羞，所以吃饭的时候一直盯着手机；我知道你因为害怕自己的身高，所以一定要穿高跟鞋过来；我知道你因为担心自己脸大，一直想剪个刘海；我知道你因为不想让自己显得朴素，所以穿了一件五颜六色的大衣过来；我知道你……，是因为你爱我。 \n&#160; &#160; &#160; &#160; 我不知道那天发生了什么，我真的不知道。我只记得那种感觉，那种重生的感觉。你的舌头，柔软甜美，每一次都好像想卷走我的心脏；  \n&#160; &#160; &#160; &#160; 你的泪水，晶莹剔透，每一滴都可以融化整个我；  \n&#160; &#160; &#160; &#160; 你的呼喊，温柔细腻，每一声都可以让我欲生欲死。  \n&#160; &#160; &#160; &#160; 我吻过你的美唇；  \n&#160; &#160; &#160; &#160; 我和你耳鬓厮磨；  \n&#160; &#160; &#160; &#160; 我抚过你的香肩；  \n&#160; &#160; &#160; &#160; 我和你暗夜缠绵；  \n&#160; &#160; &#160; &#160; 我舔过你的玉峰；  \n&#160; &#160; &#160; &#160; 我和你水乳交融；  \n&#160; &#160; &#160; &#160; 我划过你的酥背；  \n&#160; &#160; &#160; &#160; 我和你共赴巫山；  \n&#160; &#160; &#160; &#160; 我贴过你的圆臀；  \n&#160; &#160; &#160; &#160; 我和你鱼水之欢。  \n&#160; &#160; &#160; &#160; 在这个瞬间，我似乎明白了‘永远’、‘心’和‘灵魂’的意义之所在，强烈的情感让我想将这三年所经历的全部都与你分享。然后在下一个瞬间——却又悲伤得无法抑制。因为我即将又要离开你。  \n\n##### 明朝相忆路漫漫  \n&#160; &#160; &#160; &#160; 明知分离苦，相见也难阻；那一夜，我们哭了好几次，你不愿意跟我提分离的事。因为怕我丢失，怕我不见。离别，能使浅薄的感情削弱，却使深挚的感情更加深厚，正如风能吹灭烛光，却会把火扇得更旺。后视镜里的视线，越来越远的道别。没有来得及KISS GOODBAY；我哭的像个孩子，像个孩子，像个孩子。  \n&#160; &#160; &#160; &#160; 前度小花静院，不比寻常时见。  \n&#160; &#160; &#160; &#160; 见了又还休，愁却等闲分散。  \n&#160; &#160; &#160; &#160; 肠断，肠断，  \n&#160; &#160; &#160; &#160; 记取钗横鬓乱。  \n\n#### 憧憬  \n&#160; &#160; &#160; &#160; 暂别紫台自飘摇，何惧风雪总潇潇。不见昨夜雨湿处，聊以新颜待今朝。周杰伦有首歌叫《回到过去》，而我却要和你走到未来。未来只有你才会更美好。过去的由我来承受，现在的我们一起珍惜，未来的想牵着你的手一起来过。  \n\n","source":"_posts/myMemory.md","raw":"---\ntitle: 我在回忆\ndate: 2017-07-05 14:09:39\ntags: 那些年，那些事\ncategories: 生活小记\n---\n<center>我在回忆，在珍惜，在憧憬</center>  \n\n#### 回忆  \n\n>在爱人的眼里，一千里的距离不过一里。是距离让我们的心更靠近。  \n>我们的爱情，经历了信任、猜疑、信任、猜疑...最后我们还是选择了信任。我感谢你。  \n \n <!--more-->  \n \n ##### 懵懂青春三年前  \n &#160; &#160; &#160; &#160; 在经历了那段不顾一切的奋斗之后，我们都喜欢上了对方，可是当我们想去橘子林大吃一顿的时候，发现橘子已经过了收成的时段，我们的爱情赶上了毕业季的分离，还没有吃上甜美的橘子，上天却告诉我们已经没有橘子卖了。只是还是忘不了那好像命中注定的你总是要坐到我旁边几个位置，让我抬头就可以注意到你；忘不了你在操场在我后方不远处的高喊，我随意的回了一句“现在不合适”；忘不了高考前一天我对你的表白短信“我喜欢你”，和你的简短回应“我也喜欢你”；忘不了高考后你拉着我逃离那个无聊的KTV，我们两个在中州公园漫无目的的散步，然后你一直拿湿纸巾擦我的手，那么地细心；忘不了我们在那个饭店吃中午饭，我们都笑着说“这算不算是离别饭”，我们都没有用“分手”两个字；忘不了那天我不知道怎么了抽风似的，送了你一大盒包装极其丑陋的巧克力，你还不好意思的差点笑出来；忘不了那天我们要收拾东西回去的时候，你敲了敲门问“刘韬在吗？”，我就和你一起来到了天台，那是我第一次也是最后一次从背后抱你，因为我没有从正面抱你的勇气。忘不了你对我说我是在和你玩暧昧，我不爱你，之后就渐渐的疏远，谁也不低头。\n ##### 历历在目三年中  \n &#160; &#160; &#160; &#160; 在经历了和你分离之后，我很长一段时间里都在失恋中度过，不，不算失恋，就像你说的，我们只是暧昧吧。可是我不知道为什么会这么心痛，从表白到分离只用了一个月。一个月，对于巨蟹座的我来说这是多么的深刻，深刻地每时每刻心里都插了一把刀子。我忘不了这种初恋的感觉，也许对于你来说，这都不算是恋爱，可是我就是认真了，我就觉得是，那就是恋爱，就是恋爱，是恋爱。  \n &#160; &#160; &#160; &#160; 来到大学后，我“逗比”地在墙上贴上所有我暗恋过的女生和唯一恋爱过的你，我还在骗自己，这就是恋爱。并在你的名字后面写上一句“男人的精力是用来奋斗的，不是用来射的”，之后，我就有了一大堆的“逗比”外号。正如周星驰的搞笑手法一样，和同学一起笑过之后，是那对比强烈的落寞。我无聊，我落寞，我孤单，我还是忘不了。  \n &#160; &#160; &#160; &#160; 那天起来，看到你的QQ头像是和你前男友的合影，我开始看不起你，觉得这个世界我不懂。我已经不记得了我曾经多少次在QQ上默默的给你发了几个“在吗？”；已经不记得了我曾经多少次在教室里寻找，希望可以找到那个像你的身影；已经不记得了我曾经多少次在旅途中想象在我身边的人是你；已经不记得了我曾经多少次拿起电话想打给你有放下电话；我已经不记得了我曾经多少次在操场上跑步幻想在前面跑的那个人是你；我已经不记得了我曾经多少次……其实这些我都还记得，对，我记得，历历在目。只不过远方的你不知道我曾经的多少次。  \n&#160; &#160; &#160; &#160; 我不想知道你为什么还要来联系我，我也不想知道你在大学里两年都发生了什么事情，一切我都不想知道，我还知道什么，我什么都不知道。我只知道在大二的时候，你终于联系我了，联系我了，联系我了。你问我在学校有没有找女朋友，说要给我介绍女朋友，我回答“好啊，谁呀？”。我有一种预感那个人就是你，结果真的说是“我怎么样”。你知道这是一种什么样的感觉吗，就像一个人被冤入狱两年，之后告诉你无罪释放。我试着去想，试着去做的更好。可是，两颗心分离两年，我要怎么去懂你，你要怎么去懂我。你总是缺乏安全感，你总是缺少信任，我不知道你的成长环境，我不知道你大学里的一切，我猜不透你。  \n&#160; &#160; &#160; &#160; 之后我们就这样“撕逼”了一学期，没有把时间用在了解对方上，而是在争论“你到底爱我吗”这样的问题上。可以说 证明“我爱你”是一道数学题，得出结论是需要过程的，没有过程的解答是没有分数的。这个过程就是我要用最快的时间来了解一颗我两年未曾见到的那颗心，可是不知道是题目太难，还是时间不够，也许更可能是我不够聪明吧。我题目还没解完就被你这个监考老师说时间到了，要交卷了，要交卷了，要交卷了。可是我还没有证明出来！如何证明“我爱你”让我焦虑，让我迷茫，让我心痛。我想放弃了，真的想放弃了，真的。为什么证明“我爱你”这道题 一定要有时间限制，让我用一生来证明不可以吗？对，用一生来证明，哼，也许你会想“谁会用一生时间来赌你的证明题”。你需要你的爱来的急切，恨不得立马就有人爱你不离不弃。阿甘正传里面阿甘 曾经说过一句话“我不是一个聪明的人，但我知道什么是爱”，阿甘是一个木讷的人，可是他的爱是真诚，是执着，是坚守。我们都不知道，都不知道，都不知道。  \n##### 雨过天晴三年后  \n&#160; &#160; &#160; &#160; 那个暑假，陪伴我的有乐山大佛，西安城墙，大雁塔，秦始皇兵马俑，山东济南趵突泉，还有最重要的大明湖，以及我的夏雨荷。我的夏雨荷，等你，是给你最长的情书。夏雨荷曾经说过“等了一辈子,恨了一辈子,想了一辈子,怨了一辈子,可是仍然感激上苍,让我有这个可等,可恨,可想,可怨的人,否则,生命就像一口枯井,了无生趣”。我在想你，我在等你，你在哪里？我在朋友圈中发出我说说“等到了大明湖，却等不到我的夏雨荷”，我只想让你看见，只想让你知道我离你6个小时车程的地方想你。你把我删了，删了，删了。我鼓起勇气再给你发出好友请求。我们又联系上了。我这次不会再放过你，绝不！  \n&#160; &#160; &#160; &#160; 我陪着你度过了那个折磨你的一学期，你在考研，也是对我的考验。因为，我相信只要我真心相待，你一定会懂。你一定不知道我很心疼你，在无数个你12点睡，6点起；你一定不知道我很心疼你，在你哭着和我说你来不及准备；你一定不知道我很心疼你，在你每天累的睁不开眼还要和我通电话；你一定不知道我很心疼你，在你每次和我视频，躲在潮湿的晾衣间，还说那里信号比较好；你一定不知道我很心疼你，在你每次在食堂吃的那些没营养的面条，说自己没胃口；你一定不知道我很心疼你，在你每次冒着零下十几度从宿舍跑到图书馆，那股执着劲；你一定不知道我很心疼你……。  \n&#160; &#160; &#160; &#160; 感谢上天，终于让你的努力有了回报。这也许是对我最大的恩赐。我们终于见面了，见面了，见面了。  \n\n#### 珍惜  \n##### 犹抱琵琶半遮面  \n&#160; &#160; &#160; &#160; 我坐了几个小时的火车终于到达了约定的地点，我坐立不安，因为我即将面对那个我朝思暮想的你。你来了，就这样来了，我猝不及防。你害羞，你低头，你偷偷的看我，偷偷的，别以为我不知道，我全都知道。我知道你因为害羞，所以吃饭的时候一直盯着手机；我知道你因为害怕自己的身高，所以一定要穿高跟鞋过来；我知道你因为担心自己脸大，一直想剪个刘海；我知道你因为不想让自己显得朴素，所以穿了一件五颜六色的大衣过来；我知道你……，是因为你爱我。 \n&#160; &#160; &#160; &#160; 我不知道那天发生了什么，我真的不知道。我只记得那种感觉，那种重生的感觉。你的舌头，柔软甜美，每一次都好像想卷走我的心脏；  \n&#160; &#160; &#160; &#160; 你的泪水，晶莹剔透，每一滴都可以融化整个我；  \n&#160; &#160; &#160; &#160; 你的呼喊，温柔细腻，每一声都可以让我欲生欲死。  \n&#160; &#160; &#160; &#160; 我吻过你的美唇；  \n&#160; &#160; &#160; &#160; 我和你耳鬓厮磨；  \n&#160; &#160; &#160; &#160; 我抚过你的香肩；  \n&#160; &#160; &#160; &#160; 我和你暗夜缠绵；  \n&#160; &#160; &#160; &#160; 我舔过你的玉峰；  \n&#160; &#160; &#160; &#160; 我和你水乳交融；  \n&#160; &#160; &#160; &#160; 我划过你的酥背；  \n&#160; &#160; &#160; &#160; 我和你共赴巫山；  \n&#160; &#160; &#160; &#160; 我贴过你的圆臀；  \n&#160; &#160; &#160; &#160; 我和你鱼水之欢。  \n&#160; &#160; &#160; &#160; 在这个瞬间，我似乎明白了‘永远’、‘心’和‘灵魂’的意义之所在，强烈的情感让我想将这三年所经历的全部都与你分享。然后在下一个瞬间——却又悲伤得无法抑制。因为我即将又要离开你。  \n\n##### 明朝相忆路漫漫  \n&#160; &#160; &#160; &#160; 明知分离苦，相见也难阻；那一夜，我们哭了好几次，你不愿意跟我提分离的事。因为怕我丢失，怕我不见。离别，能使浅薄的感情削弱，却使深挚的感情更加深厚，正如风能吹灭烛光，却会把火扇得更旺。后视镜里的视线，越来越远的道别。没有来得及KISS GOODBAY；我哭的像个孩子，像个孩子，像个孩子。  \n&#160; &#160; &#160; &#160; 前度小花静院，不比寻常时见。  \n&#160; &#160; &#160; &#160; 见了又还休，愁却等闲分散。  \n&#160; &#160; &#160; &#160; 肠断，肠断，  \n&#160; &#160; &#160; &#160; 记取钗横鬓乱。  \n\n#### 憧憬  \n&#160; &#160; &#160; &#160; 暂别紫台自飘摇，何惧风雪总潇潇。不见昨夜雨湿处，聊以新颜待今朝。周杰伦有首歌叫《回到过去》，而我却要和你走到未来。未来只有你才会更美好。过去的由我来承受，现在的我们一起珍惜，未来的想牵着你的手一起来过。  \n\n","slug":"myMemory","published":1,"updated":"2018-01-02T00:50:36.835Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjbwxj0zo000wh0vogvb6mepl","content":"<center>我在回忆，在珍惜，在憧憬</center>  \n\n<h4 id=\"回忆\"><a href=\"#回忆\" class=\"headerlink\" title=\"回忆\"></a>回忆</h4><blockquote>\n<p>在爱人的眼里，一千里的距离不过一里。是距离让我们的心更靠近。<br>我们的爱情，经历了信任、猜疑、信任、猜疑…最后我们还是选择了信任。我感谢你。  </p>\n</blockquote>\n <a id=\"more\"></a>  \n<h5 id=\"懵懂青春三年前\"><a href=\"#懵懂青春三年前\" class=\"headerlink\" title=\"懵懂青春三年前\"></a>懵懂青春三年前</h5><p> &#160; &#160; &#160; &#160; 在经历了那段不顾一切的奋斗之后，我们都喜欢上了对方，可是当我们想去橘子林大吃一顿的时候，发现橘子已经过了收成的时段，我们的爱情赶上了毕业季的分离，还没有吃上甜美的橘子，上天却告诉我们已经没有橘子卖了。只是还是忘不了那好像命中注定的你总是要坐到我旁边几个位置，让我抬头就可以注意到你；忘不了你在操场在我后方不远处的高喊，我随意的回了一句“现在不合适”；忘不了高考前一天我对你的表白短信“我喜欢你”，和你的简短回应“我也喜欢你”；忘不了高考后你拉着我逃离那个无聊的KTV，我们两个在中州公园漫无目的的散步，然后你一直拿湿纸巾擦我的手，那么地细心；忘不了我们在那个饭店吃中午饭，我们都笑着说“这算不算是离别饭”，我们都没有用“分手”两个字；忘不了那天我不知道怎么了抽风似的，送了你一大盒包装极其丑陋的巧克力，你还不好意思的差点笑出来；忘不了那天我们要收拾东西回去的时候，你敲了敲门问“刘韬在吗？”，我就和你一起来到了天台，那是我第一次也是最后一次从背后抱你，因为我没有从正面抱你的勇气。忘不了你对我说我是在和你玩暧昧，我不爱你，之后就渐渐的疏远，谁也不低头。</p>\n<h5 id=\"历历在目三年中\"><a href=\"#历历在目三年中\" class=\"headerlink\" title=\"历历在目三年中\"></a>历历在目三年中</h5><p> &#160; &#160; &#160; &#160; 在经历了和你分离之后，我很长一段时间里都在失恋中度过，不，不算失恋，就像你说的，我们只是暧昧吧。可是我不知道为什么会这么心痛，从表白到分离只用了一个月。一个月，对于巨蟹座的我来说这是多么的深刻，深刻地每时每刻心里都插了一把刀子。我忘不了这种初恋的感觉，也许对于你来说，这都不算是恋爱，可是我就是认真了，我就觉得是，那就是恋爱，就是恋爱，是恋爱。<br> &#160; &#160; &#160; &#160; 来到大学后，我“逗比”地在墙上贴上所有我暗恋过的女生和唯一恋爱过的你，我还在骗自己，这就是恋爱。并在你的名字后面写上一句“男人的精力是用来奋斗的，不是用来射的”，之后，我就有了一大堆的“逗比”外号。正如周星驰的搞笑手法一样，和同学一起笑过之后，是那对比强烈的落寞。我无聊，我落寞，我孤单，我还是忘不了。<br> &#160; &#160; &#160; &#160; 那天起来，看到你的QQ头像是和你前男友的合影，我开始看不起你，觉得这个世界我不懂。我已经不记得了我曾经多少次在QQ上默默的给你发了几个“在吗？”；已经不记得了我曾经多少次在教室里寻找，希望可以找到那个像你的身影；已经不记得了我曾经多少次在旅途中想象在我身边的人是你；已经不记得了我曾经多少次拿起电话想打给你有放下电话；我已经不记得了我曾经多少次在操场上跑步幻想在前面跑的那个人是你；我已经不记得了我曾经多少次……其实这些我都还记得，对，我记得，历历在目。只不过远方的你不知道我曾经的多少次。<br>&#160; &#160; &#160; &#160; 我不想知道你为什么还要来联系我，我也不想知道你在大学里两年都发生了什么事情，一切我都不想知道，我还知道什么，我什么都不知道。我只知道在大二的时候，你终于联系我了，联系我了，联系我了。你问我在学校有没有找女朋友，说要给我介绍女朋友，我回答“好啊，谁呀？”。我有一种预感那个人就是你，结果真的说是“我怎么样”。你知道这是一种什么样的感觉吗，就像一个人被冤入狱两年，之后告诉你无罪释放。我试着去想，试着去做的更好。可是，两颗心分离两年，我要怎么去懂你，你要怎么去懂我。你总是缺乏安全感，你总是缺少信任，我不知道你的成长环境，我不知道你大学里的一切，我猜不透你。<br>&#160; &#160; &#160; &#160; 之后我们就这样“撕逼”了一学期，没有把时间用在了解对方上，而是在争论“你到底爱我吗”这样的问题上。可以说 证明“我爱你”是一道数学题，得出结论是需要过程的，没有过程的解答是没有分数的。这个过程就是我要用最快的时间来了解一颗我两年未曾见到的那颗心，可是不知道是题目太难，还是时间不够，也许更可能是我不够聪明吧。我题目还没解完就被你这个监考老师说时间到了，要交卷了，要交卷了，要交卷了。可是我还没有证明出来！如何证明“我爱你”让我焦虑，让我迷茫，让我心痛。我想放弃了，真的想放弃了，真的。为什么证明“我爱你”这道题 一定要有时间限制，让我用一生来证明不可以吗？对，用一生来证明，哼，也许你会想“谁会用一生时间来赌你的证明题”。你需要你的爱来的急切，恨不得立马就有人爱你不离不弃。阿甘正传里面阿甘 曾经说过一句话“我不是一个聪明的人，但我知道什么是爱”，阿甘是一个木讷的人，可是他的爱是真诚，是执着，是坚守。我们都不知道，都不知道，都不知道。  </p>\n<h5 id=\"雨过天晴三年后\"><a href=\"#雨过天晴三年后\" class=\"headerlink\" title=\"雨过天晴三年后\"></a>雨过天晴三年后</h5><p>&#160; &#160; &#160; &#160; 那个暑假，陪伴我的有乐山大佛，西安城墙，大雁塔，秦始皇兵马俑，山东济南趵突泉，还有最重要的大明湖，以及我的夏雨荷。我的夏雨荷，等你，是给你最长的情书。夏雨荷曾经说过“等了一辈子,恨了一辈子,想了一辈子,怨了一辈子,可是仍然感激上苍,让我有这个可等,可恨,可想,可怨的人,否则,生命就像一口枯井,了无生趣”。我在想你，我在等你，你在哪里？我在朋友圈中发出我说说“等到了大明湖，却等不到我的夏雨荷”，我只想让你看见，只想让你知道我离你6个小时车程的地方想你。你把我删了，删了，删了。我鼓起勇气再给你发出好友请求。我们又联系上了。我这次不会再放过你，绝不！<br>&#160; &#160; &#160; &#160; 我陪着你度过了那个折磨你的一学期，你在考研，也是对我的考验。因为，我相信只要我真心相待，你一定会懂。你一定不知道我很心疼你，在无数个你12点睡，6点起；你一定不知道我很心疼你，在你哭着和我说你来不及准备；你一定不知道我很心疼你，在你每天累的睁不开眼还要和我通电话；你一定不知道我很心疼你，在你每次和我视频，躲在潮湿的晾衣间，还说那里信号比较好；你一定不知道我很心疼你，在你每次在食堂吃的那些没营养的面条，说自己没胃口；你一定不知道我很心疼你，在你每次冒着零下十几度从宿舍跑到图书馆，那股执着劲；你一定不知道我很心疼你……。<br>&#160; &#160; &#160; &#160; 感谢上天，终于让你的努力有了回报。这也许是对我最大的恩赐。我们终于见面了，见面了，见面了。  </p>\n<h4 id=\"珍惜\"><a href=\"#珍惜\" class=\"headerlink\" title=\"珍惜\"></a>珍惜</h4><h5 id=\"犹抱琵琶半遮面\"><a href=\"#犹抱琵琶半遮面\" class=\"headerlink\" title=\"犹抱琵琶半遮面\"></a>犹抱琵琶半遮面</h5><p>&#160; &#160; &#160; &#160; 我坐了几个小时的火车终于到达了约定的地点，我坐立不安，因为我即将面对那个我朝思暮想的你。你来了，就这样来了，我猝不及防。你害羞，你低头，你偷偷的看我，偷偷的，别以为我不知道，我全都知道。我知道你因为害羞，所以吃饭的时候一直盯着手机；我知道你因为害怕自己的身高，所以一定要穿高跟鞋过来；我知道你因为担心自己脸大，一直想剪个刘海；我知道你因为不想让自己显得朴素，所以穿了一件五颜六色的大衣过来；我知道你……，是因为你爱我。<br>&#160; &#160; &#160; &#160; 我不知道那天发生了什么，我真的不知道。我只记得那种感觉，那种重生的感觉。你的舌头，柔软甜美，每一次都好像想卷走我的心脏；<br>&#160; &#160; &#160; &#160; 你的泪水，晶莹剔透，每一滴都可以融化整个我；<br>&#160; &#160; &#160; &#160; 你的呼喊，温柔细腻，每一声都可以让我欲生欲死。<br>&#160; &#160; &#160; &#160; 我吻过你的美唇；<br>&#160; &#160; &#160; &#160; 我和你耳鬓厮磨；<br>&#160; &#160; &#160; &#160; 我抚过你的香肩；<br>&#160; &#160; &#160; &#160; 我和你暗夜缠绵；<br>&#160; &#160; &#160; &#160; 我舔过你的玉峰；<br>&#160; &#160; &#160; &#160; 我和你水乳交融；<br>&#160; &#160; &#160; &#160; 我划过你的酥背；<br>&#160; &#160; &#160; &#160; 我和你共赴巫山；<br>&#160; &#160; &#160; &#160; 我贴过你的圆臀；<br>&#160; &#160; &#160; &#160; 我和你鱼水之欢。<br>&#160; &#160; &#160; &#160; 在这个瞬间，我似乎明白了‘永远’、‘心’和‘灵魂’的意义之所在，强烈的情感让我想将这三年所经历的全部都与你分享。然后在下一个瞬间——却又悲伤得无法抑制。因为我即将又要离开你。  </p>\n<h5 id=\"明朝相忆路漫漫\"><a href=\"#明朝相忆路漫漫\" class=\"headerlink\" title=\"明朝相忆路漫漫\"></a>明朝相忆路漫漫</h5><p>&#160; &#160; &#160; &#160; 明知分离苦，相见也难阻；那一夜，我们哭了好几次，你不愿意跟我提分离的事。因为怕我丢失，怕我不见。离别，能使浅薄的感情削弱，却使深挚的感情更加深厚，正如风能吹灭烛光，却会把火扇得更旺。后视镜里的视线，越来越远的道别。没有来得及KISS GOODBAY；我哭的像个孩子，像个孩子，像个孩子。<br>&#160; &#160; &#160; &#160; 前度小花静院，不比寻常时见。<br>&#160; &#160; &#160; &#160; 见了又还休，愁却等闲分散。<br>&#160; &#160; &#160; &#160; 肠断，肠断，<br>&#160; &#160; &#160; &#160; 记取钗横鬓乱。  </p>\n<h4 id=\"憧憬\"><a href=\"#憧憬\" class=\"headerlink\" title=\"憧憬\"></a>憧憬</h4><p>&#160; &#160; &#160; &#160; 暂别紫台自飘摇，何惧风雪总潇潇。不见昨夜雨湿处，聊以新颜待今朝。周杰伦有首歌叫《回到过去》，而我却要和你走到未来。未来只有你才会更美好。过去的由我来承受，现在的我们一起珍惜，未来的想牵着你的手一起来过。  </p>\n","site":{"data":{}},"excerpt":"<center>我在回忆，在珍惜，在憧憬</center>  \n\n<h4 id=\"回忆\"><a href=\"#回忆\" class=\"headerlink\" title=\"回忆\"></a>回忆</h4><blockquote>\n<p>在爱人的眼里，一千里的距离不过一里。是距离让我们的心更靠近。<br>我们的爱情，经历了信任、猜疑、信任、猜疑…最后我们还是选择了信任。我感谢你。  </p>\n</blockquote>","more":"<h5 id=\"懵懂青春三年前\"><a href=\"#懵懂青春三年前\" class=\"headerlink\" title=\"懵懂青春三年前\"></a>懵懂青春三年前</h5><p> &#160; &#160; &#160; &#160; 在经历了那段不顾一切的奋斗之后，我们都喜欢上了对方，可是当我们想去橘子林大吃一顿的时候，发现橘子已经过了收成的时段，我们的爱情赶上了毕业季的分离，还没有吃上甜美的橘子，上天却告诉我们已经没有橘子卖了。只是还是忘不了那好像命中注定的你总是要坐到我旁边几个位置，让我抬头就可以注意到你；忘不了你在操场在我后方不远处的高喊，我随意的回了一句“现在不合适”；忘不了高考前一天我对你的表白短信“我喜欢你”，和你的简短回应“我也喜欢你”；忘不了高考后你拉着我逃离那个无聊的KTV，我们两个在中州公园漫无目的的散步，然后你一直拿湿纸巾擦我的手，那么地细心；忘不了我们在那个饭店吃中午饭，我们都笑着说“这算不算是离别饭”，我们都没有用“分手”两个字；忘不了那天我不知道怎么了抽风似的，送了你一大盒包装极其丑陋的巧克力，你还不好意思的差点笑出来；忘不了那天我们要收拾东西回去的时候，你敲了敲门问“刘韬在吗？”，我就和你一起来到了天台，那是我第一次也是最后一次从背后抱你，因为我没有从正面抱你的勇气。忘不了你对我说我是在和你玩暧昧，我不爱你，之后就渐渐的疏远，谁也不低头。</p>\n<h5 id=\"历历在目三年中\"><a href=\"#历历在目三年中\" class=\"headerlink\" title=\"历历在目三年中\"></a>历历在目三年中</h5><p> &#160; &#160; &#160; &#160; 在经历了和你分离之后，我很长一段时间里都在失恋中度过，不，不算失恋，就像你说的，我们只是暧昧吧。可是我不知道为什么会这么心痛，从表白到分离只用了一个月。一个月，对于巨蟹座的我来说这是多么的深刻，深刻地每时每刻心里都插了一把刀子。我忘不了这种初恋的感觉，也许对于你来说，这都不算是恋爱，可是我就是认真了，我就觉得是，那就是恋爱，就是恋爱，是恋爱。<br> &#160; &#160; &#160; &#160; 来到大学后，我“逗比”地在墙上贴上所有我暗恋过的女生和唯一恋爱过的你，我还在骗自己，这就是恋爱。并在你的名字后面写上一句“男人的精力是用来奋斗的，不是用来射的”，之后，我就有了一大堆的“逗比”外号。正如周星驰的搞笑手法一样，和同学一起笑过之后，是那对比强烈的落寞。我无聊，我落寞，我孤单，我还是忘不了。<br> &#160; &#160; &#160; &#160; 那天起来，看到你的QQ头像是和你前男友的合影，我开始看不起你，觉得这个世界我不懂。我已经不记得了我曾经多少次在QQ上默默的给你发了几个“在吗？”；已经不记得了我曾经多少次在教室里寻找，希望可以找到那个像你的身影；已经不记得了我曾经多少次在旅途中想象在我身边的人是你；已经不记得了我曾经多少次拿起电话想打给你有放下电话；我已经不记得了我曾经多少次在操场上跑步幻想在前面跑的那个人是你；我已经不记得了我曾经多少次……其实这些我都还记得，对，我记得，历历在目。只不过远方的你不知道我曾经的多少次。<br>&#160; &#160; &#160; &#160; 我不想知道你为什么还要来联系我，我也不想知道你在大学里两年都发生了什么事情，一切我都不想知道，我还知道什么，我什么都不知道。我只知道在大二的时候，你终于联系我了，联系我了，联系我了。你问我在学校有没有找女朋友，说要给我介绍女朋友，我回答“好啊，谁呀？”。我有一种预感那个人就是你，结果真的说是“我怎么样”。你知道这是一种什么样的感觉吗，就像一个人被冤入狱两年，之后告诉你无罪释放。我试着去想，试着去做的更好。可是，两颗心分离两年，我要怎么去懂你，你要怎么去懂我。你总是缺乏安全感，你总是缺少信任，我不知道你的成长环境，我不知道你大学里的一切，我猜不透你。<br>&#160; &#160; &#160; &#160; 之后我们就这样“撕逼”了一学期，没有把时间用在了解对方上，而是在争论“你到底爱我吗”这样的问题上。可以说 证明“我爱你”是一道数学题，得出结论是需要过程的，没有过程的解答是没有分数的。这个过程就是我要用最快的时间来了解一颗我两年未曾见到的那颗心，可是不知道是题目太难，还是时间不够，也许更可能是我不够聪明吧。我题目还没解完就被你这个监考老师说时间到了，要交卷了，要交卷了，要交卷了。可是我还没有证明出来！如何证明“我爱你”让我焦虑，让我迷茫，让我心痛。我想放弃了，真的想放弃了，真的。为什么证明“我爱你”这道题 一定要有时间限制，让我用一生来证明不可以吗？对，用一生来证明，哼，也许你会想“谁会用一生时间来赌你的证明题”。你需要你的爱来的急切，恨不得立马就有人爱你不离不弃。阿甘正传里面阿甘 曾经说过一句话“我不是一个聪明的人，但我知道什么是爱”，阿甘是一个木讷的人，可是他的爱是真诚，是执着，是坚守。我们都不知道，都不知道，都不知道。  </p>\n<h5 id=\"雨过天晴三年后\"><a href=\"#雨过天晴三年后\" class=\"headerlink\" title=\"雨过天晴三年后\"></a>雨过天晴三年后</h5><p>&#160; &#160; &#160; &#160; 那个暑假，陪伴我的有乐山大佛，西安城墙，大雁塔，秦始皇兵马俑，山东济南趵突泉，还有最重要的大明湖，以及我的夏雨荷。我的夏雨荷，等你，是给你最长的情书。夏雨荷曾经说过“等了一辈子,恨了一辈子,想了一辈子,怨了一辈子,可是仍然感激上苍,让我有这个可等,可恨,可想,可怨的人,否则,生命就像一口枯井,了无生趣”。我在想你，我在等你，你在哪里？我在朋友圈中发出我说说“等到了大明湖，却等不到我的夏雨荷”，我只想让你看见，只想让你知道我离你6个小时车程的地方想你。你把我删了，删了，删了。我鼓起勇气再给你发出好友请求。我们又联系上了。我这次不会再放过你，绝不！<br>&#160; &#160; &#160; &#160; 我陪着你度过了那个折磨你的一学期，你在考研，也是对我的考验。因为，我相信只要我真心相待，你一定会懂。你一定不知道我很心疼你，在无数个你12点睡，6点起；你一定不知道我很心疼你，在你哭着和我说你来不及准备；你一定不知道我很心疼你，在你每天累的睁不开眼还要和我通电话；你一定不知道我很心疼你，在你每次和我视频，躲在潮湿的晾衣间，还说那里信号比较好；你一定不知道我很心疼你，在你每次在食堂吃的那些没营养的面条，说自己没胃口；你一定不知道我很心疼你，在你每次冒着零下十几度从宿舍跑到图书馆，那股执着劲；你一定不知道我很心疼你……。<br>&#160; &#160; &#160; &#160; 感谢上天，终于让你的努力有了回报。这也许是对我最大的恩赐。我们终于见面了，见面了，见面了。  </p>\n<h4 id=\"珍惜\"><a href=\"#珍惜\" class=\"headerlink\" title=\"珍惜\"></a>珍惜</h4><h5 id=\"犹抱琵琶半遮面\"><a href=\"#犹抱琵琶半遮面\" class=\"headerlink\" title=\"犹抱琵琶半遮面\"></a>犹抱琵琶半遮面</h5><p>&#160; &#160; &#160; &#160; 我坐了几个小时的火车终于到达了约定的地点，我坐立不安，因为我即将面对那个我朝思暮想的你。你来了，就这样来了，我猝不及防。你害羞，你低头，你偷偷的看我，偷偷的，别以为我不知道，我全都知道。我知道你因为害羞，所以吃饭的时候一直盯着手机；我知道你因为害怕自己的身高，所以一定要穿高跟鞋过来；我知道你因为担心自己脸大，一直想剪个刘海；我知道你因为不想让自己显得朴素，所以穿了一件五颜六色的大衣过来；我知道你……，是因为你爱我。<br>&#160; &#160; &#160; &#160; 我不知道那天发生了什么，我真的不知道。我只记得那种感觉，那种重生的感觉。你的舌头，柔软甜美，每一次都好像想卷走我的心脏；<br>&#160; &#160; &#160; &#160; 你的泪水，晶莹剔透，每一滴都可以融化整个我；<br>&#160; &#160; &#160; &#160; 你的呼喊，温柔细腻，每一声都可以让我欲生欲死。<br>&#160; &#160; &#160; &#160; 我吻过你的美唇；<br>&#160; &#160; &#160; &#160; 我和你耳鬓厮磨；<br>&#160; &#160; &#160; &#160; 我抚过你的香肩；<br>&#160; &#160; &#160; &#160; 我和你暗夜缠绵；<br>&#160; &#160; &#160; &#160; 我舔过你的玉峰；<br>&#160; &#160; &#160; &#160; 我和你水乳交融；<br>&#160; &#160; &#160; &#160; 我划过你的酥背；<br>&#160; &#160; &#160; &#160; 我和你共赴巫山；<br>&#160; &#160; &#160; &#160; 我贴过你的圆臀；<br>&#160; &#160; &#160; &#160; 我和你鱼水之欢。<br>&#160; &#160; &#160; &#160; 在这个瞬间，我似乎明白了‘永远’、‘心’和‘灵魂’的意义之所在，强烈的情感让我想将这三年所经历的全部都与你分享。然后在下一个瞬间——却又悲伤得无法抑制。因为我即将又要离开你。  </p>\n<h5 id=\"明朝相忆路漫漫\"><a href=\"#明朝相忆路漫漫\" class=\"headerlink\" title=\"明朝相忆路漫漫\"></a>明朝相忆路漫漫</h5><p>&#160; &#160; &#160; &#160; 明知分离苦，相见也难阻；那一夜，我们哭了好几次，你不愿意跟我提分离的事。因为怕我丢失，怕我不见。离别，能使浅薄的感情削弱，却使深挚的感情更加深厚，正如风能吹灭烛光，却会把火扇得更旺。后视镜里的视线，越来越远的道别。没有来得及KISS GOODBAY；我哭的像个孩子，像个孩子，像个孩子。<br>&#160; &#160; &#160; &#160; 前度小花静院，不比寻常时见。<br>&#160; &#160; &#160; &#160; 见了又还休，愁却等闲分散。<br>&#160; &#160; &#160; &#160; 肠断，肠断，<br>&#160; &#160; &#160; &#160; 记取钗横鬓乱。  </p>\n<h4 id=\"憧憬\"><a href=\"#憧憬\" class=\"headerlink\" title=\"憧憬\"></a>憧憬</h4><p>&#160; &#160; &#160; &#160; 暂别紫台自飘摇，何惧风雪总潇潇。不见昨夜雨湿处，聊以新颜待今朝。周杰伦有首歌叫《回到过去》，而我却要和你走到未来。未来只有你才会更美好。过去的由我来承受，现在的我们一起珍惜，未来的想牵着你的手一起来过。  </p>"},{"title":"django_openstack_auth认证与集成方法","date":"2017-11-13T08:07:37.000Z","_content":"## 开始准备\n### 安装django开发环境\n1.安装python3-pip和django1.11\n```shell\nsudo apt install python3-pip\nsudo python3 -m pip install django\n```\n<!--more-->\n\n2.建立Django工程\n进入需要创建工程的目录，用如下命令创建工程：\n```python\ndjango-admin startproject netsec\n```\nnetsec目录下的文件结构如下：\n```\nnetsec\\\n    manage.py\n    netsec\\\n        __init__.py\n        settings.py\n        urls.py\n        wsgi.py\n```\n3.建立Django应用\n进入需要创建工程的目录，用如下命令创建应用：\n```python\ndjango-admin startapp openstack_netsec\n```\nnetsec目录下openstack_netsec目录的文件结构如下：\n```python\nopenstack_netsec\\\n    __init__.py\n    admin.py\n    apps.py\n    migrations\\\n        __init__.py\n    models.py\n    tests.py\n    views.py\n```\n\n### 安装并配置django_openstack_auth\n安装非常的简单：\n1.运行 `python3 -m pip install django_openstack_auth`\n2.添加 `openstack_auth` to `settings.INSTALLED_APPS`\n```python\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'openstack_auth',\n    'openstack_netsec'\n]\n```\n3.添加openstack_auth.backend.KeystoneBackend到settings.AUTHENTICATION_BACKENDS\n```python\nAUTHENTICATION_BACKENDS = ('openstack_auth.backend.KeystoneBackend',)\n```\n4.配置 API endpoint(s) in settings.py:\n```python\nOPENSTACK_HOST = \"192.168.89.11\"\nOPENSTACK_KEYSTONE_URL = \"http://%s:5000/v3\" % OPENSTACK_HOST\nOPENSTACK_KEYSTONE_DEFAULT_ROLE = \"user\"\n```\n5.包含'openstack_auth.urls'到urls.py文件.\n```python\nurlpatterns = [\n    url(r'^admin/', admin.site.urls),\n    url(r'^auth/', include('openstack_auth.urls')),\n]\n```\n## 编写keystone应用\n### 向导urls编写\n在netsec/urls.py中添加如下：\n```python\nfrom openstack_auth import utils\nfrom openstack_netsec import views\n\nurlpatterns = [\n    url(r'^$',views.splash, name='splash'),\n    url(r'^admin/', admin.site.urls),\n    url(r'^auth/', include('openstack_auth.urls')),\n    url(r'^index/',views.index, name='index'),\n]\n```\n`r'^$'`表示匹配到空项，即匹配`127.0.0.1:8000`时执行视图函数`views.splash`  \n`r'^index/'`表示匹配到`127.0.0.1:8000/index/`时执行视图函数`views.index`\n\n### views视图函数编写\nviews.splash函数的编写\n```python\ndef splash(request):\n    if not request.user.is_authenticated():\n        return shortcuts.redirect('/index')\n    response = shortcuts.redirect('/index')\n    if 'logout_reason' in request.COOKIES:\n        response.delete_cookie('logout_reason')\n    if 'logout_status' in request.COOKIES:\n        response.delete_cookie('logout_status')\n\n    return response\n```\n当匹配到空白时，交由splash函数处理，首先判断用户是否已经登录过，如果没有登录过跳转到登录选择登录界面，当已经登录过，直接显示已经登录\n\n### template编写\nindex.html\n```html\n<!DOCTYPE html>\n<html lang=\"zh-cn\">\n<head>\n    <meta charset=\"utf-8\">\n    <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no\">\n    <title>首页</title>\n    <link rel=\"stylesheet\" href=\"https://unpkg.com/mobi.css/dist/mobi.min.css\">\n</head>\n<body>\n<div class=\"flex-center\">\n    <div class=\"container\">\n        <div>\n            <h1 class=\"logo\"><a href=\"{% url 'index' %}\">keystone 接入</a></h1>\n            {% if user.is_authenticated %}\n                <p>你已登录，欢迎你：<a href=\"#\">{{ user.username }}</a></p>\n                <button class=\"btn btn-default\"><a href=\"{% url 'logout' %}?next={{ request.path }}\">注销登录</a></button>\n            {% else %}\n                <p>你还没有登录，请\n                    <button class=\"btn btn-default\"><a href=\"{% url 'login' %}?next={{ request.path }}\">登录</a></button>\n                </p>\n            {% endif %}\n        </div>\n    </div>\n</div>\n</body>\n</html>\n```\nlogin.html\n```html\n<!DOCTYPE html>\n<html lang=\"zh-cn\">\n<head>\n    <meta charset=\"utf-8\">\n    <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no\">\n    <title>登录</title>\n    <link rel=\"stylesheet\" href=\"https://unpkg.com/mobi.css/dist/mobi.min.css\">\n    <style>\n        .errorlist {\n            color: red;\n        }\n    </style>\n</head>\n<body>\n<div class=\"flex-center\">\n    <div class=\"container\">\n        <div class=\"flex-center\">\n            <div class=\"unit-1-2 unit-1-on-mobile\">\n                <h3>登录</h3>\n                <form class=\"form\" action=\"{% url 'login' %}\" method=\"post\">\n                    {% csrf_token %}\n                    {% for field in form.visible_fields %}\n                            {{ field.label_tag }}\n                            {{ field }}\n                            {{ field.errors }}\n                    {% endfor %}\n                    <button type=\"submit\" class=\"btn btn-primary btn-block\">登录</button>\n                    <input type=\"hidden\" name=\"next\" value=\"{{ next }}\"/>\n                </form>\n            </div>\n        </div>\n    </div>\n</div>\n</body>\n</html>\n```\n当用户已经登录时，显示登录成功和注销登录界面，当用户没有登录时，显示登录按键，当用户点击登录按钮后，进入登录界面，登录界面由django form表格生成，action为django的login，此时要输入的由用户名和密码，当用户填写好表格后，点击登录，form自动将表单提交给django_openstack_auth中的login视图函数来处理，之后交由controller的keystone的认证机制来进行认真，认证完成后，返回给用户一个凭据token,之后的操作都需要这个凭据来进行验证。\n\n之后的效果如下：\n![](http://otl4ekdmf.bkt.clouddn.com/openstackauth1.png)\n![](http://otl4ekdmf.bkt.clouddn.com/openstackauth2.png)\n![](http://otl4ekdmf.bkt.clouddn.com/openstackauth3.png)\n","source":"_posts/openstackauth.md","raw":"---\ntitle: django_openstack_auth认证与集成方法\ndate: 2017-11-13 16:07:37\ntags: dashborad\ncategories: openstack学习\n---\n## 开始准备\n### 安装django开发环境\n1.安装python3-pip和django1.11\n```shell\nsudo apt install python3-pip\nsudo python3 -m pip install django\n```\n<!--more-->\n\n2.建立Django工程\n进入需要创建工程的目录，用如下命令创建工程：\n```python\ndjango-admin startproject netsec\n```\nnetsec目录下的文件结构如下：\n```\nnetsec\\\n    manage.py\n    netsec\\\n        __init__.py\n        settings.py\n        urls.py\n        wsgi.py\n```\n3.建立Django应用\n进入需要创建工程的目录，用如下命令创建应用：\n```python\ndjango-admin startapp openstack_netsec\n```\nnetsec目录下openstack_netsec目录的文件结构如下：\n```python\nopenstack_netsec\\\n    __init__.py\n    admin.py\n    apps.py\n    migrations\\\n        __init__.py\n    models.py\n    tests.py\n    views.py\n```\n\n### 安装并配置django_openstack_auth\n安装非常的简单：\n1.运行 `python3 -m pip install django_openstack_auth`\n2.添加 `openstack_auth` to `settings.INSTALLED_APPS`\n```python\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'openstack_auth',\n    'openstack_netsec'\n]\n```\n3.添加openstack_auth.backend.KeystoneBackend到settings.AUTHENTICATION_BACKENDS\n```python\nAUTHENTICATION_BACKENDS = ('openstack_auth.backend.KeystoneBackend',)\n```\n4.配置 API endpoint(s) in settings.py:\n```python\nOPENSTACK_HOST = \"192.168.89.11\"\nOPENSTACK_KEYSTONE_URL = \"http://%s:5000/v3\" % OPENSTACK_HOST\nOPENSTACK_KEYSTONE_DEFAULT_ROLE = \"user\"\n```\n5.包含'openstack_auth.urls'到urls.py文件.\n```python\nurlpatterns = [\n    url(r'^admin/', admin.site.urls),\n    url(r'^auth/', include('openstack_auth.urls')),\n]\n```\n## 编写keystone应用\n### 向导urls编写\n在netsec/urls.py中添加如下：\n```python\nfrom openstack_auth import utils\nfrom openstack_netsec import views\n\nurlpatterns = [\n    url(r'^$',views.splash, name='splash'),\n    url(r'^admin/', admin.site.urls),\n    url(r'^auth/', include('openstack_auth.urls')),\n    url(r'^index/',views.index, name='index'),\n]\n```\n`r'^$'`表示匹配到空项，即匹配`127.0.0.1:8000`时执行视图函数`views.splash`  \n`r'^index/'`表示匹配到`127.0.0.1:8000/index/`时执行视图函数`views.index`\n\n### views视图函数编写\nviews.splash函数的编写\n```python\ndef splash(request):\n    if not request.user.is_authenticated():\n        return shortcuts.redirect('/index')\n    response = shortcuts.redirect('/index')\n    if 'logout_reason' in request.COOKIES:\n        response.delete_cookie('logout_reason')\n    if 'logout_status' in request.COOKIES:\n        response.delete_cookie('logout_status')\n\n    return response\n```\n当匹配到空白时，交由splash函数处理，首先判断用户是否已经登录过，如果没有登录过跳转到登录选择登录界面，当已经登录过，直接显示已经登录\n\n### template编写\nindex.html\n```html\n<!DOCTYPE html>\n<html lang=\"zh-cn\">\n<head>\n    <meta charset=\"utf-8\">\n    <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no\">\n    <title>首页</title>\n    <link rel=\"stylesheet\" href=\"https://unpkg.com/mobi.css/dist/mobi.min.css\">\n</head>\n<body>\n<div class=\"flex-center\">\n    <div class=\"container\">\n        <div>\n            <h1 class=\"logo\"><a href=\"{% url 'index' %}\">keystone 接入</a></h1>\n            {% if user.is_authenticated %}\n                <p>你已登录，欢迎你：<a href=\"#\">{{ user.username }}</a></p>\n                <button class=\"btn btn-default\"><a href=\"{% url 'logout' %}?next={{ request.path }}\">注销登录</a></button>\n            {% else %}\n                <p>你还没有登录，请\n                    <button class=\"btn btn-default\"><a href=\"{% url 'login' %}?next={{ request.path }}\">登录</a></button>\n                </p>\n            {% endif %}\n        </div>\n    </div>\n</div>\n</body>\n</html>\n```\nlogin.html\n```html\n<!DOCTYPE html>\n<html lang=\"zh-cn\">\n<head>\n    <meta charset=\"utf-8\">\n    <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no\">\n    <title>登录</title>\n    <link rel=\"stylesheet\" href=\"https://unpkg.com/mobi.css/dist/mobi.min.css\">\n    <style>\n        .errorlist {\n            color: red;\n        }\n    </style>\n</head>\n<body>\n<div class=\"flex-center\">\n    <div class=\"container\">\n        <div class=\"flex-center\">\n            <div class=\"unit-1-2 unit-1-on-mobile\">\n                <h3>登录</h3>\n                <form class=\"form\" action=\"{% url 'login' %}\" method=\"post\">\n                    {% csrf_token %}\n                    {% for field in form.visible_fields %}\n                            {{ field.label_tag }}\n                            {{ field }}\n                            {{ field.errors }}\n                    {% endfor %}\n                    <button type=\"submit\" class=\"btn btn-primary btn-block\">登录</button>\n                    <input type=\"hidden\" name=\"next\" value=\"{{ next }}\"/>\n                </form>\n            </div>\n        </div>\n    </div>\n</div>\n</body>\n</html>\n```\n当用户已经登录时，显示登录成功和注销登录界面，当用户没有登录时，显示登录按键，当用户点击登录按钮后，进入登录界面，登录界面由django form表格生成，action为django的login，此时要输入的由用户名和密码，当用户填写好表格后，点击登录，form自动将表单提交给django_openstack_auth中的login视图函数来处理，之后交由controller的keystone的认证机制来进行认真，认证完成后，返回给用户一个凭据token,之后的操作都需要这个凭据来进行验证。\n\n之后的效果如下：\n![](http://otl4ekdmf.bkt.clouddn.com/openstackauth1.png)\n![](http://otl4ekdmf.bkt.clouddn.com/openstackauth2.png)\n![](http://otl4ekdmf.bkt.clouddn.com/openstackauth3.png)\n","slug":"openstackauth","published":1,"updated":"2018-01-02T00:50:36.835Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjbwxj1040010h0vokoii3lhg","content":"<h2 id=\"开始准备\"><a href=\"#开始准备\" class=\"headerlink\" title=\"开始准备\"></a>开始准备</h2><h3 id=\"安装django开发环境\"><a href=\"#安装django开发环境\" class=\"headerlink\" title=\"安装django开发环境\"></a>安装django开发环境</h3><p>1.安装python3-pip和django1.11<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt install python3-pip</span><br><span class=\"line\">sudo python3 -m pip install django</span><br></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<p>2.建立Django工程<br>进入需要创建工程的目录，用如下命令创建工程：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">django-admin startproject netsec</span><br></pre></td></tr></table></figure></p>\n<p>netsec目录下的文件结构如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">netsec\\</span><br><span class=\"line\">    manage.py</span><br><span class=\"line\">    netsec\\</span><br><span class=\"line\">        __init__.py</span><br><span class=\"line\">        settings.py</span><br><span class=\"line\">        urls.py</span><br><span class=\"line\">        wsgi.py</span><br></pre></td></tr></table></figure></p>\n<p>3.建立Django应用<br>进入需要创建工程的目录，用如下命令创建应用：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">django-admin startapp openstack_netsec</span><br></pre></td></tr></table></figure></p>\n<p>netsec目录下openstack_netsec目录的文件结构如下：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openstack_netsec\\</span><br><span class=\"line\">    __init__.py</span><br><span class=\"line\">    admin.py</span><br><span class=\"line\">    apps.py</span><br><span class=\"line\">    migrations\\</span><br><span class=\"line\">        __init__.py</span><br><span class=\"line\">    models.py</span><br><span class=\"line\">    tests.py</span><br><span class=\"line\">    views.py</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"安装并配置django-openstack-auth\"><a href=\"#安装并配置django-openstack-auth\" class=\"headerlink\" title=\"安装并配置django_openstack_auth\"></a>安装并配置django_openstack_auth</h3><p>安装非常的简单：<br>1.运行 <code>python3 -m pip install django_openstack_auth</code><br>2.添加 <code>openstack_auth</code> to <code>settings.INSTALLED_APPS</code><br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">INSTALLED_APPS = [</span><br><span class=\"line\">    <span class=\"string\">'django.contrib.admin'</span>,</span><br><span class=\"line\">    <span class=\"string\">'django.contrib.auth'</span>,</span><br><span class=\"line\">    <span class=\"string\">'django.contrib.contenttypes'</span>,</span><br><span class=\"line\">    <span class=\"string\">'django.contrib.sessions'</span>,</span><br><span class=\"line\">    <span class=\"string\">'django.contrib.messages'</span>,</span><br><span class=\"line\">    <span class=\"string\">'django.contrib.staticfiles'</span>,</span><br><span class=\"line\">    <span class=\"string\">'openstack_auth'</span>,</span><br><span class=\"line\">    <span class=\"string\">'openstack_netsec'</span></span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure></p>\n<p>3.添加openstack_auth.backend.KeystoneBackend到settings.AUTHENTICATION_BACKENDS<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">AUTHENTICATION_BACKENDS = (<span class=\"string\">'openstack_auth.backend.KeystoneBackend'</span>,)</span><br></pre></td></tr></table></figure></p>\n<p>4.配置 API endpoint(s) in settings.py:<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">OPENSTACK_HOST = <span class=\"string\">\"192.168.89.11\"</span></span><br><span class=\"line\">OPENSTACK_KEYSTONE_URL = <span class=\"string\">\"http://%s:5000/v3\"</span> % OPENSTACK_HOST</span><br><span class=\"line\">OPENSTACK_KEYSTONE_DEFAULT_ROLE = <span class=\"string\">\"user\"</span></span><br></pre></td></tr></table></figure></p>\n<p>5.包含’openstack_auth.urls’到urls.py文件.<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">urlpatterns = [</span><br><span class=\"line\">    url(<span class=\"string\">r'^admin/'</span>, admin.site.urls),</span><br><span class=\"line\">    url(<span class=\"string\">r'^auth/'</span>, include(<span class=\"string\">'openstack_auth.urls'</span>)),</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"编写keystone应用\"><a href=\"#编写keystone应用\" class=\"headerlink\" title=\"编写keystone应用\"></a>编写keystone应用</h2><h3 id=\"向导urls编写\"><a href=\"#向导urls编写\" class=\"headerlink\" title=\"向导urls编写\"></a>向导urls编写</h3><p>在netsec/urls.py中添加如下：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> openstack_auth <span class=\"keyword\">import</span> utils</span><br><span class=\"line\"><span class=\"keyword\">from</span> openstack_netsec <span class=\"keyword\">import</span> views</span><br><span class=\"line\"></span><br><span class=\"line\">urlpatterns = [</span><br><span class=\"line\">    url(<span class=\"string\">r'^$'</span>,views.splash, name=<span class=\"string\">'splash'</span>),</span><br><span class=\"line\">    url(<span class=\"string\">r'^admin/'</span>, admin.site.urls),</span><br><span class=\"line\">    url(<span class=\"string\">r'^auth/'</span>, include(<span class=\"string\">'openstack_auth.urls'</span>)),</span><br><span class=\"line\">    url(<span class=\"string\">r'^index/'</span>,views.index, name=<span class=\"string\">'index'</span>),</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure></p>\n<p><code>r&#39;^$&#39;</code>表示匹配到空项，即匹配<code>127.0.0.1:8000</code>时执行视图函数<code>views.splash</code><br><code>r&#39;^index/&#39;</code>表示匹配到<code>127.0.0.1:8000/index/</code>时执行视图函数<code>views.index</code></p>\n<h3 id=\"views视图函数编写\"><a href=\"#views视图函数编写\" class=\"headerlink\" title=\"views视图函数编写\"></a>views视图函数编写</h3><p>views.splash函数的编写<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">splash</span><span class=\"params\">(request)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> request.user.is_authenticated():</span><br><span class=\"line\">        <span class=\"keyword\">return</span> shortcuts.redirect(<span class=\"string\">'/index'</span>)</span><br><span class=\"line\">    response = shortcuts.redirect(<span class=\"string\">'/index'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"string\">'logout_reason'</span> <span class=\"keyword\">in</span> request.COOKIES:</span><br><span class=\"line\">        response.delete_cookie(<span class=\"string\">'logout_reason'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"string\">'logout_status'</span> <span class=\"keyword\">in</span> request.COOKIES:</span><br><span class=\"line\">        response.delete_cookie(<span class=\"string\">'logout_status'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> response</span><br></pre></td></tr></table></figure></p>\n<p>当匹配到空白时，交由splash函数处理，首先判断用户是否已经登录过，如果没有登录过跳转到登录选择登录界面，当已经登录过，直接显示已经登录</p>\n<h3 id=\"template编写\"><a href=\"#template编写\" class=\"headerlink\" title=\"template编写\"></a>template编写</h3><p>index.html<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"zh-cn\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"x-ua-compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"ie=edge\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>首页<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"https://unpkg.com/mobi.css/dist/mobi.min.css\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"flex-center\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">h1</span> <span class=\"attr\">class</span>=<span class=\"string\">\"logo\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"&#123;% url 'index' %&#125;\"</span>&gt;</span>keystone 接入<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">            &#123;% if user.is_authenticated %&#125;</span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>你已登录，欢迎你：<span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#\"</span>&gt;</span>&#123;&#123; user.username &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">class</span>=<span class=\"string\">\"btn btn-default\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"&#123;% url 'logout' %&#125;?next=&#123;&#123; request.path &#125;&#125;\"</span>&gt;</span>注销登录<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">            &#123;% else %&#125;</span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>你还没有登录，请</span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">class</span>=<span class=\"string\">\"btn btn-default\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"&#123;% url 'login' %&#125;?next=&#123;&#123; request.path &#125;&#125;\"</span>&gt;</span>登录<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">            &#123;% endif %&#125;</span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>login.html<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"zh-cn\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"x-ua-compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"ie=edge\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>登录<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"https://unpkg.com/mobi.css/dist/mobi.min.css\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">        .errorlist &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">            color: red;</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    </span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"flex-center\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"flex-center\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"unit-1-2 unit-1-on-mobile\"</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>登录<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form\"</span> <span class=\"attr\">action</span>=<span class=\"string\">\"&#123;% url 'login' %&#125;\"</span> <span class=\"attr\">method</span>=<span class=\"string\">\"post\"</span>&gt;</span></span><br><span class=\"line\">                    &#123;% csrf_token %&#125;</span><br><span class=\"line\">                    &#123;% for field in form.visible_fields %&#125;</span><br><span class=\"line\">                            &#123;&#123; field.label_tag &#125;&#125;</span><br><span class=\"line\">                            &#123;&#123; field &#125;&#125;</span><br><span class=\"line\">                            &#123;&#123; field.errors &#125;&#125;</span><br><span class=\"line\">                    &#123;% endfor %&#125;</span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">\"submit\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"btn btn-primary btn-block\"</span>&gt;</span>登录<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"hidden\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"next\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"&#123;&#123; next &#125;&#125;\"</span>/&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>当用户已经登录时，显示登录成功和注销登录界面，当用户没有登录时，显示登录按键，当用户点击登录按钮后，进入登录界面，登录界面由django form表格生成，action为django的login，此时要输入的由用户名和密码，当用户填写好表格后，点击登录，form自动将表单提交给django_openstack_auth中的login视图函数来处理，之后交由controller的keystone的认证机制来进行认真，认证完成后，返回给用户一个凭据token,之后的操作都需要这个凭据来进行验证。</p>\n<p>之后的效果如下：<br><img src=\"http://otl4ekdmf.bkt.clouddn.com/openstackauth1.png\" alt=\"\"><br><img src=\"http://otl4ekdmf.bkt.clouddn.com/openstackauth2.png\" alt=\"\"><br><img src=\"http://otl4ekdmf.bkt.clouddn.com/openstackauth3.png\" alt=\"\"></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"开始准备\"><a href=\"#开始准备\" class=\"headerlink\" title=\"开始准备\"></a>开始准备</h2><h3 id=\"安装django开发环境\"><a href=\"#安装django开发环境\" class=\"headerlink\" title=\"安装django开发环境\"></a>安装django开发环境</h3><p>1.安装python3-pip和django1.11<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt install python3-pip</span><br><span class=\"line\">sudo python3 -m pip install django</span><br></pre></td></tr></table></figure></p>","more":"<p>2.建立Django工程<br>进入需要创建工程的目录，用如下命令创建工程：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">django-admin startproject netsec</span><br></pre></td></tr></table></figure></p>\n<p>netsec目录下的文件结构如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">netsec\\</span><br><span class=\"line\">    manage.py</span><br><span class=\"line\">    netsec\\</span><br><span class=\"line\">        __init__.py</span><br><span class=\"line\">        settings.py</span><br><span class=\"line\">        urls.py</span><br><span class=\"line\">        wsgi.py</span><br></pre></td></tr></table></figure></p>\n<p>3.建立Django应用<br>进入需要创建工程的目录，用如下命令创建应用：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">django-admin startapp openstack_netsec</span><br></pre></td></tr></table></figure></p>\n<p>netsec目录下openstack_netsec目录的文件结构如下：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openstack_netsec\\</span><br><span class=\"line\">    __init__.py</span><br><span class=\"line\">    admin.py</span><br><span class=\"line\">    apps.py</span><br><span class=\"line\">    migrations\\</span><br><span class=\"line\">        __init__.py</span><br><span class=\"line\">    models.py</span><br><span class=\"line\">    tests.py</span><br><span class=\"line\">    views.py</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"安装并配置django-openstack-auth\"><a href=\"#安装并配置django-openstack-auth\" class=\"headerlink\" title=\"安装并配置django_openstack_auth\"></a>安装并配置django_openstack_auth</h3><p>安装非常的简单：<br>1.运行 <code>python3 -m pip install django_openstack_auth</code><br>2.添加 <code>openstack_auth</code> to <code>settings.INSTALLED_APPS</code><br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">INSTALLED_APPS = [</span><br><span class=\"line\">    <span class=\"string\">'django.contrib.admin'</span>,</span><br><span class=\"line\">    <span class=\"string\">'django.contrib.auth'</span>,</span><br><span class=\"line\">    <span class=\"string\">'django.contrib.contenttypes'</span>,</span><br><span class=\"line\">    <span class=\"string\">'django.contrib.sessions'</span>,</span><br><span class=\"line\">    <span class=\"string\">'django.contrib.messages'</span>,</span><br><span class=\"line\">    <span class=\"string\">'django.contrib.staticfiles'</span>,</span><br><span class=\"line\">    <span class=\"string\">'openstack_auth'</span>,</span><br><span class=\"line\">    <span class=\"string\">'openstack_netsec'</span></span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure></p>\n<p>3.添加openstack_auth.backend.KeystoneBackend到settings.AUTHENTICATION_BACKENDS<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">AUTHENTICATION_BACKENDS = (<span class=\"string\">'openstack_auth.backend.KeystoneBackend'</span>,)</span><br></pre></td></tr></table></figure></p>\n<p>4.配置 API endpoint(s) in settings.py:<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">OPENSTACK_HOST = <span class=\"string\">\"192.168.89.11\"</span></span><br><span class=\"line\">OPENSTACK_KEYSTONE_URL = <span class=\"string\">\"http://%s:5000/v3\"</span> % OPENSTACK_HOST</span><br><span class=\"line\">OPENSTACK_KEYSTONE_DEFAULT_ROLE = <span class=\"string\">\"user\"</span></span><br></pre></td></tr></table></figure></p>\n<p>5.包含’openstack_auth.urls’到urls.py文件.<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">urlpatterns = [</span><br><span class=\"line\">    url(<span class=\"string\">r'^admin/'</span>, admin.site.urls),</span><br><span class=\"line\">    url(<span class=\"string\">r'^auth/'</span>, include(<span class=\"string\">'openstack_auth.urls'</span>)),</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"编写keystone应用\"><a href=\"#编写keystone应用\" class=\"headerlink\" title=\"编写keystone应用\"></a>编写keystone应用</h2><h3 id=\"向导urls编写\"><a href=\"#向导urls编写\" class=\"headerlink\" title=\"向导urls编写\"></a>向导urls编写</h3><p>在netsec/urls.py中添加如下：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> openstack_auth <span class=\"keyword\">import</span> utils</span><br><span class=\"line\"><span class=\"keyword\">from</span> openstack_netsec <span class=\"keyword\">import</span> views</span><br><span class=\"line\"></span><br><span class=\"line\">urlpatterns = [</span><br><span class=\"line\">    url(<span class=\"string\">r'^$'</span>,views.splash, name=<span class=\"string\">'splash'</span>),</span><br><span class=\"line\">    url(<span class=\"string\">r'^admin/'</span>, admin.site.urls),</span><br><span class=\"line\">    url(<span class=\"string\">r'^auth/'</span>, include(<span class=\"string\">'openstack_auth.urls'</span>)),</span><br><span class=\"line\">    url(<span class=\"string\">r'^index/'</span>,views.index, name=<span class=\"string\">'index'</span>),</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure></p>\n<p><code>r&#39;^$&#39;</code>表示匹配到空项，即匹配<code>127.0.0.1:8000</code>时执行视图函数<code>views.splash</code><br><code>r&#39;^index/&#39;</code>表示匹配到<code>127.0.0.1:8000/index/</code>时执行视图函数<code>views.index</code></p>\n<h3 id=\"views视图函数编写\"><a href=\"#views视图函数编写\" class=\"headerlink\" title=\"views视图函数编写\"></a>views视图函数编写</h3><p>views.splash函数的编写<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">splash</span><span class=\"params\">(request)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> request.user.is_authenticated():</span><br><span class=\"line\">        <span class=\"keyword\">return</span> shortcuts.redirect(<span class=\"string\">'/index'</span>)</span><br><span class=\"line\">    response = shortcuts.redirect(<span class=\"string\">'/index'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"string\">'logout_reason'</span> <span class=\"keyword\">in</span> request.COOKIES:</span><br><span class=\"line\">        response.delete_cookie(<span class=\"string\">'logout_reason'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"string\">'logout_status'</span> <span class=\"keyword\">in</span> request.COOKIES:</span><br><span class=\"line\">        response.delete_cookie(<span class=\"string\">'logout_status'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> response</span><br></pre></td></tr></table></figure></p>\n<p>当匹配到空白时，交由splash函数处理，首先判断用户是否已经登录过，如果没有登录过跳转到登录选择登录界面，当已经登录过，直接显示已经登录</p>\n<h3 id=\"template编写\"><a href=\"#template编写\" class=\"headerlink\" title=\"template编写\"></a>template编写</h3><p>index.html<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"zh-cn\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"x-ua-compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"ie=edge\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>首页<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"https://unpkg.com/mobi.css/dist/mobi.min.css\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"flex-center\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">h1</span> <span class=\"attr\">class</span>=<span class=\"string\">\"logo\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"&#123;% url 'index' %&#125;\"</span>&gt;</span>keystone 接入<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">            &#123;% if user.is_authenticated %&#125;</span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>你已登录，欢迎你：<span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#\"</span>&gt;</span>&#123;&#123; user.username &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">class</span>=<span class=\"string\">\"btn btn-default\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"&#123;% url 'logout' %&#125;?next=&#123;&#123; request.path &#125;&#125;\"</span>&gt;</span>注销登录<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">            &#123;% else %&#125;</span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>你还没有登录，请</span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">class</span>=<span class=\"string\">\"btn btn-default\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"&#123;% url 'login' %&#125;?next=&#123;&#123; request.path &#125;&#125;\"</span>&gt;</span>登录<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">            &#123;% endif %&#125;</span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>login.html<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"zh-cn\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"x-ua-compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"ie=edge\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>登录<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"https://unpkg.com/mobi.css/dist/mobi.min.css\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">        .errorlist &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">            color: red;</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    </span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"flex-center\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"flex-center\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"unit-1-2 unit-1-on-mobile\"</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>登录<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form\"</span> <span class=\"attr\">action</span>=<span class=\"string\">\"&#123;% url 'login' %&#125;\"</span> <span class=\"attr\">method</span>=<span class=\"string\">\"post\"</span>&gt;</span></span><br><span class=\"line\">                    &#123;% csrf_token %&#125;</span><br><span class=\"line\">                    &#123;% for field in form.visible_fields %&#125;</span><br><span class=\"line\">                            &#123;&#123; field.label_tag &#125;&#125;</span><br><span class=\"line\">                            &#123;&#123; field &#125;&#125;</span><br><span class=\"line\">                            &#123;&#123; field.errors &#125;&#125;</span><br><span class=\"line\">                    &#123;% endfor %&#125;</span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">\"submit\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"btn btn-primary btn-block\"</span>&gt;</span>登录<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"hidden\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"next\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"&#123;&#123; next &#125;&#125;\"</span>/&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>当用户已经登录时，显示登录成功和注销登录界面，当用户没有登录时，显示登录按键，当用户点击登录按钮后，进入登录界面，登录界面由django form表格生成，action为django的login，此时要输入的由用户名和密码，当用户填写好表格后，点击登录，form自动将表单提交给django_openstack_auth中的login视图函数来处理，之后交由controller的keystone的认证机制来进行认真，认证完成后，返回给用户一个凭据token,之后的操作都需要这个凭据来进行验证。</p>\n<p>之后的效果如下：<br><img src=\"http://otl4ekdmf.bkt.clouddn.com/openstackauth1.png\" alt=\"\"><br><img src=\"http://otl4ekdmf.bkt.clouddn.com/openstackauth2.png\" alt=\"\"><br><img src=\"http://otl4ekdmf.bkt.clouddn.com/openstackauth3.png\" alt=\"\"></p>"},{"title":"Shell 快速指南","date":"2017-12-04T00:54:45.000Z","_content":"\n# Shell 快速指南\n\n```\n███████╗██╗  ██╗███████╗██╗     ██╗                           \n██╔════╝██║  ██║██╔════╝██║     ██║                           \n███████╗███████║█████╗  ██║     ██║                           \n╚════██║██╔══██║██╔══╝  ██║     ██║                           \n███████║██║  ██║███████╗███████╗███████╗\n```\n<!--more-->\n## 概述\n\n### 什么是 shell\n\nShell 是一个用 C 语言编写的程序，它是用户使用 Linux 的桥梁。\n\nShell 既是一种命令语言，又是一种程序设计语言。\n\nShell 是指一种应用程序，这个应用程序提供了一个界面，用户通过这个界面访问 Linux 内核的服务。\n\nKen Thompson 的 sh 是第一种 Unix Shell，Windows Explorer 是一个典型的图形界面 Shell。\n\n### 什么是 shell 脚本\n\nShell 脚本（shell script），是一种为 shell 编写的脚本程序，一般文件后缀为 `.sh`。\n\n业界所说的 shell 通常都是指 shell 脚本，但 shell 和 shell script 是两个不同的概念。\n\n### Shell 环境\n\nShell 编程跟 java、php 编程一样，只要有一个能编写代码的文本编辑器和一个能解释执行的脚本解释器就可以了。\n\nShell 的解释器种类众多，常见的有：\n\n- [sh](https://www.gnu.org/software/bash/) - 即 Bourne Shell。sh 是 Unix 标准默认的 shell。\n- [bash](https://www.gnu.org/software/bash/) - 即 Bourne Again Shell。bash 是 Linux 标准默认的 shell。\n- [fish](https://fishshell.com/) - 智能和用户友好的命令行 shell。\n- [xiki](http://xiki.org/) - 使 shell 控制台更友好，更强大。\n- [zsh](http://www.zsh.org/) - 功能强大的 shell 与脚本语言。\n\n#### 指定脚本解释器\n\n在 shell 脚本，`#!` 告诉系统其后路径所指定的程序即是解释此脚本文件的 Shell 解释器。`#!` 被称作[shebang（也称为 Hashbang ）](https://zh.wikipedia.org/wiki/Shebang)。\n\n所以，你应该会在 shell 中，见到诸如以下的注释：\n\n- 指定 sh 解释器\n\n```sh\n#!/bin/sh\n```\n\n- 指定 bash 解释器\n\n```sh\n#!/bin/bash\n```\n\n> **注意**\n>\n> 上面的指定解释器的方式是比较常见的，但有时候，你可能也会看到下面的方式：\n>\n> ```sh\n> #!/usr/bin/env bash\n> ```\n>\n> 这样做的好处是，系统会自动在 `PATH` 环境变量中查找你指定的程序（本例中的`bash`）。相比第一种写法，你应该尽量用这种写法，因为程序的路径是不确定的。这样写还有一个好处，操作系统的`PATH`变量有可能被配置为指向程序的另一个版本。比如，安装完新版本的`bash`，我们可能将其路径添加到`PATH`中，来“隐藏”老版本。如果直接用`#!/bin/bash`，那么系统会选择老版本的`bash`来执行脚本，如果用`#!/usr/bin/env bash`，则会使用新版本。\n\n### 模式\n\nshell 有交互和非交互两种模式。\n\n#### 交互模式\n\n> 简单来说，你可以将 shell 的交互模式理解为执行命令行。\n\n看到形如下面的东西，说明shell处于交互模式下：\n\n```sh\nuser@host:~$\n```\n\n接着，便可以输入一系列 Linux 命令，比如 `ls`，`grep`，`cd`，`mkdir`，`rm` 等等。\n\n#### 非交互模式\n\n> 简单来说，你可以将 shell 的非交互模式理解为执行 shell 脚本。\n\n在非交互模式下，shell 从文件或者管道中读取命令并执行。\n\n当 shell 解释器执行完文件中的最后一个命令，shell 进程终止，并回到父进程。\n\n可以使用下面的命令让shell以非交互模式运行：\n\n```sh\nsh /path/to/script.sh\nbash /path/to/script.sh\n```\n\n上面的例子中，`script.sh`是一个包含shell解释器可以识别并执行的命令的普通文本文件，`sh`和`bash`是shell解释器程序。你可以使用任何喜欢的编辑器创建`script.sh`（vim，nano，Sublime Text, Atom等等）。\n\n除此之外，你还可以通过`chmod`命令给文件添加可执行的权限，来直接执行脚本文件：\n\n```sh\nchmod +x /path/to/script.sh #使脚本具有执行权限\n/path/to/test.sh\n```\n\n这种方式要求脚本文件的第一行必须指明运行该脚本的程序，比如：\n\n```sh\n#!/bin/bash\necho \"Hello, world!\"\n```\n\n上面的例子中，我们使用了一个很有用的命令`echo`来输出字符串到屏幕上。\n\n## Shell 编程\n\n> 由于 bash 是 Linux 标准默认的 shell，可以说  bash 是 shell 编程的基础。\n>\n> 所以，下面将全部基于 bash 来讲解 shell 编程。\n>\n> 此外，本篇章主要介绍的是 shell 编程的语法，对于 linux 指令不做任何介绍。\n\n### 解释器\n\n前面虽然两次提到了`#!` ，但是本着重要的事情说三遍的精神，这里再强调一遍：\n\n在 shell 脚本，`#!` 告诉系统其后路径所指定的程序即是解释此脚本文件的 Shell 解释器。`#!` 被称作[shebang（也称为 Hashbang ）](https://zh.wikipedia.org/wiki/Shebang)。\n\n`#!` 决定了脚本可以像一个独立的可执行文件一样执行，而不用在终端之前输入`sh`, `bash`, `python`, `php`等。\n\n**示例：**\n\n```sh\n# 以下两种方式都可以指定 shell 解释器为 bash，第二种方式更好\n#!/bin/bash\n#!/usr/bin/env bash\n```\n\n### 注释\n\nshell 语法支持注释。注释是特殊的语句，会被 shell 解释器忽略。它们以 `#` 开头，到行尾结束。\n\n**示例：**\n\n```bash\n#!/bin/bash\n### This script will print your username.\nwhoami\n```\n\n> **Tip**: 用注释来说明你的脚本是干什么的，以及为什么这样写。\n\n### 变量\n\n跟许多程序设计语言一样，你可以在 bash 中创建变量。\n\nBash 中没有数据类型，bash 中的变量可以保存一个数字、一个字符、一个字符串等等。同时无需提前声明变量，给变量赋值会直接创建变量。\n\n你可以创建三种变量：**局部变量**，**环境变量**以及作为**位置参数**的变量。\n\n#### 局部变量\n\n> **局部变量**是仅在某个脚本内部有效的变量。它们不能被其他的程序和脚本访问。\n>\n> 局部变量可以**用 `=` 声明**（作为一种约定，变量名、`=`、变量的值之间**不应该**有空格），其值可以**用`$` 访问**到。\n\n**示例：**\n\n```bash\nusername=\"zhangpeng\"  ### 声明变量\necho $username          ### 输出变量的值\nunset username          ### 删除变量\n```\n\n> 可以**用 `local` 关键字声明属于某个函数的局部变量**。这样声明的变量会在函数结束时消失。\n>\n\n```bash\nlocal local_var=\"I'm a local value\"\n```\n\n#### 环境变量\n\n> **环境变量**是对当前 shell 会话内所有的程序或脚本都可见的变量。\n>\n> 创建它们跟创建局部变量类似，但使用的是 `export` 关键字。\n\n```bash\nexport global_var=\"I'm a global value\"\n```\n\n常见的环境变量：\n\n| 变量        | 描述                          |\n| --------- | --------------------------- |\n| `$HOME`   | 当前用户的用户目录                   |\n| `$PATH`   | 用分号分隔的目录列表，shell会到这些目录中查找命令 |\n| `$PWD`    | 当前工作目录                      |\n| `$RANDOM` | 0到32767之间的整数                |\n| `$UID`    | 数值类型，当前用户的用户ID              |\n| `$PS1`    | 主要系统输入提示符                   |\n| `$PS2`    | 次要系统输入提示符                   |\n\n[这里](http://tldp.org/LDP/Bash-Beginners-Guide/html/sect_03_02.html###sect_03_02_04) 有一张更全面的 Bash 环境变量列表。\n\n#### 位置参数\n\n> **位置参数**是在调用一个函数并传给它参数时创建的变量。\n\n位置参数变量表：\n\n| 变量             | 描述                |\n| -------------- | ----------------- |\n| `$0`           | 脚本名称              |\n| `$1 … $9`      | 第1个到第9个参数列表       |\n| `${10} … ${N}` | 第10个到N个参数列表       |\n| `$*` or `$@`   | 除了`$0`外的所有位置参数    |\n| `$#`           | 不包括`$0`在内的位置参数的个数 |\n| `$FUNCNAME`    | 函数名称（仅在函数内部有值）    |\n\n**示例：**\n\n在下面的例子中，位置参数为：`$0='./script.sh'`，`$1='foo'`，`$2='bar'`：\n\n```bash\n$ ./script.sh foo bar\n```\n\n变量可以有**默认值**。我们可以用如下语法来指定默认值：\n\n```bash\n### 如果变量为空，赋给他们默认值\n: ${VAR:='default'}\n: ${1:='first'}\necho \"\\$1 : \" $1\n: ${2:='second'}\necho \"\\$2 : \" $2\n\n### 或者\nFOO=${FOO:-'default'}\n```\n\n### Shell扩展\n\n*扩展* 发生在一行命令被分成一个个的 *记号（tokens）* 之后。换言之，扩展是一种执行数学运算的机制，还可以用来保存命令的执行结果，等等。\n\n感兴趣的话可以阅读[关于shell扩展的更多细节](https://www.gnu.org/software/bash/manual/bash.html###Shell-Expansions)。\n\n#### 大括号扩展\n\n大括号扩展让生成任意的字符串成为可能。它跟 *文件名扩展* 很类似，举个例子：\n\n```bash\necho beg{i,a,u}n ### begin began begun\n```\n\n大括号扩展还可以用来创建一个可被循环迭代的区间。\n\n```bash\necho {0..5} ### 0 1 2 3 4 5\necho {00..8..2} ### 00 02 04 06 08\n```\n\n#### 命令置换\n\n命令置换允许我们对一个命令求值，并将其值置换到另一个命令或者变量赋值表达式中。当一个命令被````或`$()`包围时，命令置换将会执行。举个例子：\n\n```bash\nnow=`date +%T`\n### or\nnow=$(date +%T)\n\necho $now ### 19:08:26\n```\n\n#### 算数扩展\n\n在bash中，执行算数运算是非常方便的。算数表达式必须包在`$(( ))`中。算数扩展的格式为：\n\n```bash\nresult=$(( ((10 + 5*3) - 7) / 2 ))\necho $result ### 9\n```\n\n在算数表达式中，使用变量无需带上`$`前缀：\n\n```bash\nx=4\ny=7\necho $(( x + y ))     ### 11\necho $(( ++x + y++ )) ### 12\necho $(( x + y ))     ### 13\n```\n\n#### 单引号和双引号\n\n单引号和双引号之间有很重要的区别。在双引号中，变量引用或者命令置换是会被展开的。在单引号中是不会的。举个例子：\n\n```bash\necho \"Your home: $HOME\" ### Your home: /Users/<username>\necho 'Your home: $HOME' ### Your home: $HOME\n```\n\n当局部变量和环境变量包含空格时，它们在引号中的扩展要格外注意。随便举个例子，假如我们用`echo`来输出用户的输入：\n\n```bash\nINPUT=\"A string  with   strange    whitespace.\"\necho $INPUT   ### A string with strange whitespace.\necho \"$INPUT\" ### A string  with   strange    whitespace.\n```\n\n调用第一个`echo`时给了它5个单独的参数 —— `$INPUT` 被分成了单独的词，`echo`在每个词之间打印了一个空格。第二种情况，调用`echo`时只给了它一个参数（整个$INPUT的值，包括其中的空格）。\n\n来看一个更严肃的例子：\n\n```bash\nFILE=\"Favorite Things.txt\"\ncat $FILE   ### 尝试输出两个文件: `Favorite` 和 `Things.txt`\ncat \"$FILE\" ### 输出一个文件: `Favorite Things.txt`\n```\n\n尽管这个问题可以通过把FILE重命名成`Favorite-Things.txt`来解决，但是，假如这个值来自某个环境变量，来自一个位置参数，或者来自其它命令（`find`, `cat`, 等等）呢。因此，如果输入 *可能* 包含空格，务必要用引号把表达式包起来。\n\n### 数组\n\n跟其它程序设计语言一样，bash中的数组变量给了你引用多个值的能力。在bash中，数组下标也是从0开始，也就是说，第一个元素的下标是0。\n\n跟数组打交道时，要注意一个特殊的环境变量`IFS`。**IFS**，全称 **Input Field Separator**，保存了数组中元素的分隔符。它的默认值是一个空格`IFS=' '`。\n\n#### 创建数组\n\n在 bash 中有好几种方法创建一个数组\n\n```bash\narray[0] = val\narray[1] = val\narray[2] = val\narray=([2]=val [0]=val [1]=val)\narray=(val val val)\n```\n\n#### 获取数组元素\n\n- **获取数组的单个元素：**\n\n```bash\necho ${array[1]}\n```\n\n- **获取数组的所有元素：**\n\n```bash\necho ${array[*]}\necho ${array[@]}\n```\n\n上面两行有很重要（也很微妙）的区别，假设某数组元素中包含空格：\n\n```bash\ncolors[0]=Red\ncolors[1]=\"Dark Green\"\ncolors[2]=Blue\n```\n\n为了将数组中每个元素单独一行输出，我们用内建的`printf`命令：\n\n```bash\nprintf \"+ %s\\n\" ${colors[*]}\n\n# 输出：\n# + Red\n# + Dark\n# + Green\n# + Blue\n```\n\n为什么`Desert`和`fig`各占了一行？尝试用引号包起来：\n\n```bash\nprintf \"+ %s\\n\" \"${colors[*]}\"\n\n# 输出：\n# + Red Dark Green Blue\n```\n\n现在所有的元素都跑去了一行 —— 这不是我们想要的！为了解决这个痛点，`${colors[@]}`闪亮登场：\n\n```bash\nprintf \"+ %s\\n\" \"${colors[@]}\"\n\n# 输出：\n+ Red\n+ Dark Green\n+ Blue\n```\n\n在引号内，`${colors[@]}`将数组中的每个元素扩展为一个单独的参数；数组元素中的空格得以保留。\n\n- **访问数组的部分元素：**\n\n```bash\necho ${array[@]:0:2}\n```\n\n在上面的例子中，`${array[@]}` 扩展为整个数组，`:0:2`取出了数组中从0开始，长度为2的元素。\n\n#### 获取数组长度\n\n```bash\necho ${#array[*]}\n```\n\n#### 向数组中添加元素\n\n向数组中添加元素也非常简单：\n\n```bash\ncolors=(Yellow \"${colors[@]}\" Pink Black)\necho ${colors[@]}\n\n# 输出：\n# Yellow Red Dark Green Blue Pink Black\n```\n\n上面的例子中，`${colors[@]}` 扩展为整个数组，并被置换到复合赋值语句中，接着，对数组`colors`的赋值覆盖了它原来的值。\n\n#### 从数组中删除元素\n\n用`unset`命令来从数组中删除一个元素：\n\n```bash\nunset colors[0]\necho ${colors[@]}\n\n# 输出：\n# Red Dark Green Blue Pink Black\n```\n\n### 运算符\n\n#### 算术运算符\n\n下表列出了常用的算术运算符，假定变量 a 为 10，变量 b 为 20：\n\n| 运算符  | 说明                        | 举例                        |\n| ---- | ------------------------- | ------------------------- |\n| +    | 加法                        | `expr $a + $b` 结果为 30。    |\n| -    | 减法                        | `expr $a - $b` 结果为 -10。   |\n| *    | 乘法                        | `expr $a \\* $b` 结果为  200。 |\n| /    | 除法                        | `expr $b / $a` 结果为 2。     |\n| %    | 取余                        | `expr $b % $a` 结果为 0。     |\n| =    | 赋值                        | `a=$b` 将把变量 b 的值赋给 a。     |\n| ==   | 相等。用于比较两个数字，相同则返回 true。   | `[ $a == $b ]` 返回 false。  |\n| !=   | 不相等。用于比较两个数字，不相同则返回 true。 | `[ $a != $b ]` 返回 true。   |\n\n**注意：**条件表达式要放在方括号之间，并且要有空格，例如: **[$a==$b]** 是错误的，必须写成 **[ $a == $b ]**。\n\n**示例：**\n\n```bash\na=10\nb=20\n\necho \"a=$a, b=$b\"\n\nval=`expr $a + $b`\necho \"a + b : $val\"\n\nval=`expr $a - $b`\necho \"a - b : $val\"\n\nval=`expr $a \\* $b`\necho \"a * b : $val\"\n\nval=`expr $b / $a`\necho \"b / a : $val\"\n\nval=`expr $b % $a`\necho \"b % a : $val\"\n\nif [ $a == $b ]\nthen\n  echo \"a 等于 b\"\nfi\nif [ $a != $b ]\nthen\n  echo \"a 不等于 b\"\nfi\n```\n\n#### 关系运算符\n\n关系运算符只支持数字，不支持字符串，除非字符串的值是数字。\n\n下表列出了常用的关系运算符，假定变量 a 为 10，变量 b 为 20：\n\n| 运算符  | 说明                            | 举例                        |\n| ---- | ----------------------------- | ------------------------- |\n| -eq  | 检测两个数是否相等，相等返回 true。          | `[ $a -eq $b ] `返回 false。 |\n| -ne  | 检测两个数是否相等，不相等返回 true。         | `[ $a -ne $b ]` 返回 true。  |\n| -gt  | 检测左边的数是否大于右边的，如果是，则返回 true。   | `[ $a -gt $b ]` 返回 false。 |\n| -lt  | 检测左边的数是否小于右边的，如果是，则返回 true。   | `[ $a -lt $b ]` 返回 true。  |\n| -ge  | 检测左边的数是否大于等于右边的，如果是，则返回 true。 | `[ $a -ge $b ]` 返回 false。 |\n| -le  | 检测左边的数是否小于等于右边的，如果是，则返回 true。 | `[ $a -le $b ] `返回 true。  |\n\n**示例：**\n\n```bash\na=10\nb=20\n\nif [ $a -eq $b ]\nthen\n   echo \"$a -eq $b : a 等于 b\"\nelse\n   echo \"$a -eq $b: a 不等于 b\"\nfi\nif [ $a -ne $b ]\nthen\n   echo \"$a -ne $b: a 不等于 b\"\nelse\n   echo \"$a -ne $b : a 等于 b\"\nfi\nif [ $a -gt $b ]\nthen\n   echo \"$a -gt $b: a 大于 b\"\nelse\n   echo \"$a -gt $b: a 不大于 b\"\nfi\nif [ $a -lt $b ]\nthen\n   echo \"$a -lt $b: a 小于 b\"\nelse\n   echo \"$a -lt $b: a 不小于 b\"\nfi\nif [ $a -ge $b ]\nthen\n   echo \"$a -ge $b: a 大于或等于 b\"\nelse\n   echo \"$a -ge $b: a 小于 b\"\nfi\nif [ $a -le $b ]\nthen\n   echo \"$a -le $b: a 小于或等于 b\"\nelse\n   echo \"$a -le $b: a 大于 b\"\nfi\n```\n\n#### 布尔运算符\n\n下表列出了常用的布尔运算符，假定变量 a 为 10，变量 b 为 20：\n\n| 运算符  | 说明                                 | 举例                                      |\n| ---- | ---------------------------------- | --------------------------------------- |\n| !    | 非运算，表达式为 true 则返回 false，否则返回 true。 | `[ ! false ]` 返回 true。                  |\n| -o   | 或运算，有一个表达式为 true 则返回 true。         | `[ $a -lt 20 -o $b -gt 100 ]` 返回 true。  |\n| -a   | 与运算，两个表达式都为 true 才返回 true。         | `[ $a -lt 20 -a $b -gt 100 ]` 返回 false。 |\n\n**示例：**\n\n```bash\na=10\nb=20\n\necho \"a=$a, b=$b\"\n\nif [ $a != $b ]\nthen\n   echo \"$a != $b : a 不等于 b\"\nelse\n   echo \"$a != $b: a 等于 b\"\nfi\nif [ $a -lt 100 -a $b -gt 15 ]\nthen\n   echo \"$a 小于 100 且 $b 大于 15 : 返回 true\"\nelse\n   echo \"$a 小于 100 且 $b 大于 15 : 返回 false\"\nfi\nif [ $a -lt 100 -o $b -gt 100 ]\nthen\n   echo \"$a 小于 100 或 $b 大于 100 : 返回 true\"\nelse\n   echo \"$a 小于 100 或 $b 大于 100 : 返回 false\"\nfi\nif [ $a -lt 5 -o $b -gt 100 ]\nthen\n   echo \"$a 小于 5 或 $b 大于 100 : 返回 true\"\nelse\n   echo \"$a 小于 5 或 $b 大于 100 : 返回 false\"\nfi\n```\n\n#### 逻辑运算符\n\n以下介绍 Shell 的逻辑运算符，假定变量 a 为 10，变量 b 为 20:\n\n| 运算符  | 说明      | 举例                                       |\n| ---- | ------- | ---------------------------------------- |\n| &&   | 逻辑的 AND | `[[ $a -lt 100 && $b -gt 100 ]]` 返回 false |\n| \\|\\| | 逻辑的 OR  | `[[ $a -lt 100 || $b -gt 100 ]]` 返回 true |\n\n**示例：**\n\n```bash\na=10\nb=20\n\necho \"a=$a, b=$b\"\n\nif [[ $a -lt 100 && $b -gt 100 ]]\nthen\n   echo \"返回 true\"\nelse\n   echo \"返回 false\"\nfi\n\nif [[ $a -lt 100 || $b -gt 100 ]]\nthen\n   echo \"返回 true\"\nelse\n   echo \"返回 false\"\nfi\n```\n\n#### 字符串运算符\n\n下表列出了常用的字符串运算符，假定变量 a 为 \"abc\"，变量 b 为 \"efg\"：\n\n| 运算符  | 说明                      | 举例                      |\n| ---- | ----------------------- | ----------------------- |\n| =    | 检测两个字符串是否相等，相等返回 true。  | `[ $a = $b ]` 返回 false。 |\n| !=   | 检测两个字符串是否相等，不相等返回 true。 | `[ $a != $b ]` 返回 true。 |\n| -z   | 检测字符串长度是否为0，为0返回 true。  | `[ -z $a ]` 返回 false。   |\n| -n   | 检测字符串长度是否为0，不为0返回 true。 | `[ -n $a ]` 返回 true。    |\n| str  | 检测字符串是否为空，不为空返回 true。   | `[ $a ]` 返回 true。       |\n\n**示例：**\n\n```bash\na=\"abc\"\nb=\"efg\"\n\necho \"a=$a, b=$b\"\n\nif [ $a = $b ]\nthen\n   echo \"$a = $b : a 等于 b\"\nelse\n   echo \"$a = $b: a 不等于 b\"\nfi\nif [ $a != $b ]\nthen\n   echo \"$a != $b : a 不等于 b\"\nelse\n   echo \"$a != $b: a 等于 b\"\nfi\nif [ -z $a ]\nthen\n   echo \"-z $a : 字符串长度为 0\"\nelse\n   echo \"-z $a : 字符串长度不为 0\"\nfi\nif [ -n $a ]\nthen\n   echo \"-n $a : 字符串长度不为 0\"\nelse\n   echo \"-n $a : 字符串长度为 0\"\nfi\nif [ $a ]\nthen\n   echo \"$a : 字符串不为空\"\nelse\n   echo \"$a : 字符串为空\"\nfi\n```\n\n#### 文件测试运算符\n\n文件测试运算符用于检测 Unix 文件的各种属性。\n\n属性检测描述如下：\n\n| 操作符     | 说明                                       | 举例                       |\n| ------- | ---------------------------------------- | ------------------------ |\n| -b file | 检测文件是否是块设备文件，如果是，则返回 true。               | `[ -b $file ]` 返回 false。 |\n| -c file | 检测文件是否是字符设备文件，如果是，则返回 true。              | `[ -c $file ]` 返回 false。 |\n| -d file | 检测文件是否是目录，如果是，则返回 true。                  | `[ -d $file ]` 返回 false。 |\n| -f file | 检测文件是否是普通文件（既不是目录，也不是设备文件），如果是，则返回 true。 | `[ -f $file ]` 返回 true。  |\n| -g file | 检测文件是否设置了 SGID 位，如果是，则返回 true。           | `[ -g $file ]` 返回 false。 |\n| -k file | 检测文件是否设置了粘着位(Sticky Bit)，如果是，则返回 true。   | `[ -k $file ]`返回 false。  |\n| -p file | 检测文件是否是有名管道，如果是，则返回 true。                | `[ -p $file ]` 返回 false。 |\n| -u file | 检测文件是否设置了 SUID 位，如果是，则返回 true。           | `[ -u $file ]` 返回 false。 |\n| -r file | 检测文件是否可读，如果是，则返回 true。                   | `[ -r $file ]` 返回 true。  |\n| -w file | 检测文件是否可写，如果是，则返回 true。                   | `[ -w $file ]` 返回 true。  |\n| -x file | 检测文件是否可执行，如果是，则返回 true。                  | `[ -x $file ]` 返回 true。  |\n| -s file | 检测文件是否为空（文件大小是否大于0），不为空返回 true。          | `[ -s $file ]` 返回 true。  |\n| -e file | 检测文件（包括目录）是否存在，如果是，则返回 true。             | `[ -e $file ]` 返回 true。  |\n\n**示例：**\n\n变量 file 表示文件\"/var/www/runoob/test.sh\"，它的大小为100字节，具有 rwx 权限。下面的代码，将检测该文件的各种属性：\n\n```bash\nfile=\"./operatorDemo.sh\"\nif [ -r $file ]\nthen\n   echo \"文件可读\"\nelse\n   echo \"文件不可读\"\nfi\nif [ -w $file ]\nthen\n   echo \"文件可写\"\nelse\n   echo \"文件不可写\"\nfi\nif [ -x $file ]\nthen\n   echo \"文件可执行\"\nelse\n   echo \"文件不可执行\"\nfi\nif [ -f $file ]\nthen\n   echo \"文件为普通文件\"\nelse\n   echo \"文件为特殊文件\"\nfi\nif [ -d $file ]\nthen\n   echo \"文件是个目录\"\nelse\n   echo \"文件不是个目录\"\nfi\nif [ -s $file ]\nthen\n   echo \"文件不为空\"\nelse\n   echo \"文件为空\"\nfi\nif [ -e $file ]\nthen\n   echo \"文件存在\"\nelse\n   echo \"文件不存在\"\nfi\n```\n\n### 语句\n\n#### 条件语句\n\n跟其它程序设计语言一样，Bash中的条件语句让我们可以决定一个操作是否被执行。结果取决于一个包在`[[ ]]`里的表达式。\n\n条件表达式可以包含`&&`和`||`运算符，分别对应 *与* 和 *或* 。除此之外还有很多有用的[表达式](https://github.com/denysdovhan/bash-handbook/blob/master/translations/zh-CN/README.md#%E5%9F%BA%E5%85%83%E5%92%8C%E7%BB%84%E5%90%88%E8%A1%A8%E8%BE%BE%E5%BC%8F)。\n\n共有两个不同的条件表达式：`if`和`case`。\n\n##### 基元和组合表达式\n\n由`[[ ]]`（`sh`中是`[ ]`）包起来的表达式被称作 **检测命令** 或 **基元**。这些表达式帮助我们检测一个条件的结果。在下面的表里，为了兼容`sh`，我们用的是`[ ]`。这里可以找到有关[bash中单双中括号区别](http://serverfault.com/a/52050)的答案。\n\n##### 使用`if`\n\n`if`在使用上跟其它语言相同。如果中括号里的表达式为真，那么`then`和`fi`之间的代码会被执行。`fi`标志着条件代码块的结束。\n\n```bash\n### 写成一行\nif [[ 1 -eq 1 ]]; then echo \"true\"; fi\n\n### 写成多行\nif [[ 1 -eq 1 ]]; then\n  echo \"true\"\nfi\n```\n\n同样，我们可以使用`if..else`语句，例如：\n\n```bash\n### 写成一行\nif [[ 2 -ne 1 ]]; then echo \"true\"; else echo \"false\"; fi\n\n### 写成多行\nif [[ 2 -ne 1 ]]; then\n  echo \"true\"\nelse\n  echo \"false\"\nfi\n```\n\n有些时候，`if..else`不能满足我们的要求。别忘了`if..elif..else`，使用起来也很方便。\n\n**示例：**\n\n```bash\nif [[ `uname` == \"Adam\" ]]; then\n  echo \"Do not eat an apple!\"\nelif [[ `uname` == \"Eva\" ]]; then\n  echo \"Do not take an apple!\"\nelse\n  echo \"Apples are delicious!\"\nfi\n```\n\n##### 使用`case`\n\n如果你需要面对很多情况，分别要采取不同的措施，那么使用`case`会比嵌套的`if`更有用。使用`case`来解决复杂的条件判断，看起来像下面这样：\n\n```bash\necho \"input param: \" $1\n\ncase $1 in\n  \"jpg\" | \"jpeg\")\n    echo \"It's image with jpeg extension.\"\n  ;;\n  \"png\")\n    echo \"It's image with png extension.\"\n  ;;\n  \"gif\")\n    echo \"Oh, it's a giphy!\"\n  ;;\n  *)\n    echo \"Woops! It's not image!\"\n  ;;\nesac\n```\n\n每种情况都是匹配了某个模式的表达式。`|`用来分割多个模式，`)`用来结束一个模式序列。第一个匹配上的模式对应的命令将会被执行。`*`代表任何不匹配以上给定模式的模式。命令块儿之间要用`;;`分隔。\n\n#### 循环语句\n\n循环其实不足为奇。跟其它程序设计语言一样，bash中的循环也是只要控制条件为真就一直迭代执行的代码块。\n\nBash中有四种循环：`for`，`while`，`until`和`select`。\n\n##### `for`循环\n\n`for`与它在C语言中的姊妹非常像。看起来是这样：\n\n```bash\nfor arg in elem1 elem2 ... elemN\ndo\n  ### 语句\ndone\n```\n\n在每次循环的过程中，`arg`依次被赋值为从`elem1`到`elemN`。这些值还可以是通配符或者[大括号扩展](https://github.com/denysdovhan/bash-handbook/blob/master/translations/zh-CN/README.md#%E5%A4%A7%E6%8B%AC%E5%8F%B7%E6%89%A9%E5%B1%95)。\n\n当然，我们还可以把`for`循环写在一行，但这要求`do`之前要有一个分号，就像下面这样：\n\n```bash\nfor i in {1..5}; do echo $i; done\n```\n\n还有，如果你觉得`for..in..do`对你来说有点奇怪，那么你也可以像C语言那样使用`for`，比如：\n\n```bash\nfor (( i = 0; i < 10; i++ )); do\n  echo $i\ndone\n```\n\n当我们想对一个目录下的所有文件做同样的操作时，`for`就很方便了。举个例子，如果我们想把所有的`.bash`文件移动到`script`文件夹中，并给它们可执行权限，我们的脚本可以这样写：\n\n```bash\n#!/bin/bash\n\nfor FILE in $HOME/*.bash; do\n  mv \"$FILE\" \"${HOME}/scripts\"\n  chmod +x \"${HOME}/scripts/${FILE}\"\ndone\n```\n\n##### `while`循环\n\n`while`循环检测一个条件，只要这个条件为 *真*，就执行一段命令。被检测的条件跟`if..then`中使用的[基元](https://github.com/denysdovhan/bash-handbook/blob/master/translations/zh-CN/README.md#%E5%9F%BA%E5%85%83%E5%92%8C%E7%BB%84%E5%90%88%E8%A1%A8%E8%BE%BE%E5%BC%8F)并无二异。因此一个`while`循环看起来会是这样：\n\n```bash\nwhile [[ condition ]]\ndo\n  ### 语句\ndone\n```\n\n跟`for`循环一样，如果我们把`do`和被检测的条件写到一行，那么必须要在`do`之前加一个分号。\n\n比如下面这个例子：\n\n```bash\n#!/bin/bash\n\n### 0到9之间每个数的平方\nx=0\nwhile [[ $x -lt 10 ]]; do ### x小于10\n  echo $(( x * x ))\n  x=$(( x + 1 )) ### x加1\ndone\n```\n\n##### `until`循环\n\n`until`循环跟`while`循环正好相反。它跟`while`一样也需要检测一个测试条件，但不同的是，只要该条件为 *假* 就一直执行循环：\n\n```bash\nuntil [[ condition ]]; do\n  ### 语句\ndone\n```\n\n##### `select`循环\n\n`select`循环帮助我们组织一个用户菜单。它的语法几乎跟`for`循环一致：\n\n```bash\nselect answer in elem1 elem2 ... elemN\ndo\n  ### 语句\ndone\n```\n\n`select`会打印`elem1..elemN`以及它们的序列号到屏幕上，之后会提示用户输入。通常看到的是`$?`（`PS3`变量）。用户的选择结果会被保存到`answer`中。如果`answer`是一个在`1..N`之间的数字，那么`语句`会被执行，紧接着会进行下一次迭代 —— 如果不想这样的话我们可以使用`break`语句。\n\n一个可能的实例可能会是这样：\n\n```bash\n#!/bin/bash\n\nPS3=\"Choose the package manager: \"\nselect ITEM in bower npm gem pip\ndo\n  echo -n \"Enter the package name: \" && read PACKAGE\n  case $ITEM in\n    bower) bower install $PACKAGE ;;\n    npm)   npm   install $PACKAGE ;;\n    gem)   gem   install $PACKAGE ;;\n    pip)   pip   install $PACKAGE ;;\n  esac\n  break ### 避免无限循环\ndone\n```\n\n这个例子，先询问用户他想使用什么包管理器。接着，又询问了想安装什么包，最后执行安装操作。\n\n运行这个脚本，会得到如下输出：\n\n```bash\n$ ./my_script\n1) bower\n2) npm\n3) gem\n4) pip\nChoose the package manager: 2\nEnter the package name: bash-handbook\n<installing bash-handbook>\n\n```\n\n##### break 和 continue\n\n如果想提前结束一个循环或跳过某次循环执行，可以使用 shell 的`break`和`continue`语句来实现。它们可以在任何循环中使用。\n\n> `break`语句用来提前结束当前循环。\n>\n> `continue`语句用来跳过某次迭代。\n>\n\n```bash\nfor (( i = 0; i < 10; i++ )); do\n  if [[ $(( i % 2 )) -eq 0 ]]; then continue; fi\n  echo $i\ndone\n```\n\n运行上面的例子，会打印出所有0到9之间的奇数。\n\n### 函数\n\n在脚本中，我们可以定义并调用函数。跟其它程序设计语言类似，函数是一个代码块，但有所不同。\n\nbash 中，函数是一个命令序列，这个命令序列组织在某个名字下面，即 *函数名* 。调用函数跟其它语言一样，写下函数名字，函数就会被 *调用* 。\n\n我们可以这样声明函数：\n\n```bash\nmy_func () {\n  ### 语句\n}\n\nmy_func ### 调用 my_func\n```\n\n我们必须在调用前声明函数。\n\n函数可以接收参数并返回结果 —— 返回值。参数，在函数内部，跟[非交互式](https://github.com/denysdovhan/bash-handbook/blob/master/translations/zh-CN/README.md#%E9%9D%9E%E4%BA%A4%E4%BA%92%E6%A8%A1%E5%BC%8F)下的脚本参数处理方式相同 —— 使用[位置参数](https://github.com/denysdovhan/bash-handbook/blob/master/translations/zh-CN/README.md#%E4%BD%8D%E7%BD%AE%E5%8F%82%E6%95%B0)。返回值可以使用`return`命令 *返回* 。\n\n下面这个函数接收一个名字参数，返回`0`，表示成功执行。\n\n```bash\n### 带参数的函数\ngreeting () {\n  if [[ -n $1 ]]; then\n    echo \"Hello, $1!\"\n  else\n    echo \"Hello, unknown!\"\n  fi\n  return 0\n}\n\ngreeting Denys  ### Hello, Denys!\ngreeting        ### Hello, stranger!\n```\n\n我们之前已经介绍过[返回值](https://github.com/denysdovhan/bash-handbook/blob/master/translations/zh-CN/README.md#%E8%BF%94%E5%9B%9E%E5%80%BC)。不带任何参数的`return`会返回最后一个执行的命令的返回值。上面的例子，`return 0`会返回一个成功表示执行的值，`0`。\n\n另外，还有几个特殊字符用来处理参数：\n\n| 参数处理 | 说明                              |\n| ---- | ------------------------------- |\n| $#   | 传递到脚本的参数个数                      |\n| $*   | 以一个单字符串显示所有向脚本传递的参数             |\n| $$   | 脚本运行的当前进程ID号                    |\n| $!   | 后台运行的最后一个进程的ID号                 |\n| $@   | 与$*相同，但是使用时加引号，并在引号中返回每个参数。     |\n| $-   | 显示Shell使用的当前选项，与set命令功能相同。      |\n| $?   | 显示最后命令的退出状态。0表示没有错误，其他任何值表明有错误。 |\n\n### 流和重定向\n\nBash有很强大的工具来处理程序之间的协同工作。使用流，我们能将一个程序的输出发送到另一个程序或文件，因此，我们能方便地记录日志或做一些其它我们想做的事。\n\n管道给了我们创建传送带的机会，控制程序的执行成为可能。\n\n学习如何使用这些强大的、高级的工具是非常非常重要的。\n\n#### 输入、输出流\n\nBash接收输入，并以字符序列或 **字符流** 的形式产生输出。这些流能被重定向到文件或另一个流中。\n\n有三个文件描述符：\n\n| 代码   | 描述符      | 描述     |\n| ---- | -------- | ------ |\n| `0`  | `stdin`  | 标准输入   |\n| `1`  | `stdout` | 标准输出   |\n| `2`  | `stderr` | 标准错误输出 |\n\n#### 重定向\n\n重定向让我们可以控制一个命令的输入来自哪里，输出结果到什么地方。这些运算符在控制流的重定向时会被用到：\n\n| Operator | Description                              |\n| -------- | ---------------------------------------- |\n| `>`      | 重定向输出                                    |\n| `&>`     | 重定向输出和错误输出                               |\n| `&>>`    | 以附加的形式重定向输出和错误输出                         |\n| `<`      | 重定向输入                                    |\n| `<<`     | [Here文档](http://tldp.org/LDP/abs/html/here-docs.html) 语法 |\n| `<<<`    | [Here字符串](http://www.tldp.org/LDP/abs/html/x17837.html) |\n\n以下是一些使用重定向的例子：\n\n```bash\n### ls的结果将会被写到list.txt中\nls -l > list.txt\n\n### 将输出附加到list.txt中\nls -a >> list.txt\n\n### 所有的错误信息会被写到errors.txt中\ngrep da * 2> errors.txt\n\n### 从errors.txt中读取输入\nless < errors.txt\n```\n\n#### `/dev/null` 文件\n\n如果希望执行某个命令，但又不希望在屏幕上显示输出结果，那么可以将输出重定向到 /dev/null：\n\n```\n$ command > /dev/null\n```\n\n/dev/null 是一个特殊的文件，写入到它的内容都会被丢弃；如果尝试从该文件读取内容，那么什么也读不到。但是 /dev/null 文件非常有用，将命令的输出重定向到它，会起到\"禁止输出\"的效果。\n\n如果希望屏蔽 stdout 和 stderr，可以这样写：\n\n```\n$ command > /dev/null 2>&1\n```\n\n### Debugging\n\nshell提供了用于debugging脚本的工具。如果我们想以debug模式运行某脚本，可以在其shebang中使用一个特殊的选项：\n\n```\n#!/bin/bash options\n```\n\noptions是一些可以改变shell行为的选项。下表是一些可能对你有用的选项：\n\n| Short | Name        | Description                       |\n| ----- | ----------- | --------------------------------- |\n| `-f`  | noglob      | 禁止文件名展开（globbing）                 |\n| `-i`  | interactive | 让脚本以 *交互* 模式运行                    |\n| `-n`  | noexec      | 读取命令，但不执行（语法检查）                   |\n| `-t`  | —           | 执行完第一条命令后退出                       |\n| `-v`  | verbose     | 在执行每条命令前，向`stderr`输出该命令           |\n| `-x`  | xtrace      | 在执行每条命令前，向`stderr`输出该命令以及该命令的扩展参数 |\n\n举个例子，如果我们在脚本中指定了`-x`例如：\n\n```\n#!/bin/bash -x\n\nfor (( i = 0; i < 3; i++ )); do\n  echo $i\ndone\n```\n\n这会向`stdout`打印出变量的值和一些其它有用的信息：\n\n```bash\n$ ./my_script\n+ (( i = 0 ))\n+ (( i < 3 ))\n+ echo 0\n0\n+ (( i++  ))\n+ (( i < 3 ))\n+ echo 1\n1\n+ (( i++  ))\n+ (( i < 3 ))\n+ echo 2\n2\n+ (( i++  ))\n+ (( i < 3 ))\n\n```\n\n有时我们需要debug脚本的一部分。这种情况下，使用`set`命令会很方便。这个命令可以启用或禁用选项。使用`-`启用选项，`+`禁用选项：\n\n```bash\n#!/bin/bash\n\necho \"xtrace is turned off\"\nset -x\necho \"xtrace is enabled\"\nset +x\necho \"xtrace is turned off again\"\n```\n\n### 资料\n\n- [awesome-shell](https://github.com/alebcay/awesome-shell)，shell 资源列表\n- [awesome-bash](https://github.com/awesome-lists/awesome-bash)，bash 资源列表\n- [bash-handbook](https://github.com/denysdovhan/bash-handbook)\n- [bash-guide](https://github.com/vuuihc/bash-guide) ，bash 基本用法指南\n- [bash-it](https://github.com/Bash-it/bash-it)，为你日常使用，开发以及维护 shell 脚本和自定义命令提供了一个可靠的框架\n- [dotfiles.github.io](http://dotfiles.github.io/)，上面有bash和其它shell的各种dotfiles集合以及shell框架的链接\n- [Runoob Shell 教程](http://www.runoob.com/linux/linux-shell.html)\n\n最后，Stack Overflow上 [bash 标签下](https://stackoverflow.com/questions/tagged/bash)有很多你可以学习的问题，当你遇到问题时，也是一个提问的好地方。\n\n","source":"_posts/shell.md","raw":"---\ntitle: Shell 快速指南\ndate: 2017-12-04 08:54:45\ncategories:\n- linux\ntags:\n- linux\n- shell\n- bash\n---\n\n# Shell 快速指南\n\n```\n███████╗██╗  ██╗███████╗██╗     ██╗                           \n██╔════╝██║  ██║██╔════╝██║     ██║                           \n███████╗███████║█████╗  ██║     ██║                           \n╚════██║██╔══██║██╔══╝  ██║     ██║                           \n███████║██║  ██║███████╗███████╗███████╗\n```\n<!--more-->\n## 概述\n\n### 什么是 shell\n\nShell 是一个用 C 语言编写的程序，它是用户使用 Linux 的桥梁。\n\nShell 既是一种命令语言，又是一种程序设计语言。\n\nShell 是指一种应用程序，这个应用程序提供了一个界面，用户通过这个界面访问 Linux 内核的服务。\n\nKen Thompson 的 sh 是第一种 Unix Shell，Windows Explorer 是一个典型的图形界面 Shell。\n\n### 什么是 shell 脚本\n\nShell 脚本（shell script），是一种为 shell 编写的脚本程序，一般文件后缀为 `.sh`。\n\n业界所说的 shell 通常都是指 shell 脚本，但 shell 和 shell script 是两个不同的概念。\n\n### Shell 环境\n\nShell 编程跟 java、php 编程一样，只要有一个能编写代码的文本编辑器和一个能解释执行的脚本解释器就可以了。\n\nShell 的解释器种类众多，常见的有：\n\n- [sh](https://www.gnu.org/software/bash/) - 即 Bourne Shell。sh 是 Unix 标准默认的 shell。\n- [bash](https://www.gnu.org/software/bash/) - 即 Bourne Again Shell。bash 是 Linux 标准默认的 shell。\n- [fish](https://fishshell.com/) - 智能和用户友好的命令行 shell。\n- [xiki](http://xiki.org/) - 使 shell 控制台更友好，更强大。\n- [zsh](http://www.zsh.org/) - 功能强大的 shell 与脚本语言。\n\n#### 指定脚本解释器\n\n在 shell 脚本，`#!` 告诉系统其后路径所指定的程序即是解释此脚本文件的 Shell 解释器。`#!` 被称作[shebang（也称为 Hashbang ）](https://zh.wikipedia.org/wiki/Shebang)。\n\n所以，你应该会在 shell 中，见到诸如以下的注释：\n\n- 指定 sh 解释器\n\n```sh\n#!/bin/sh\n```\n\n- 指定 bash 解释器\n\n```sh\n#!/bin/bash\n```\n\n> **注意**\n>\n> 上面的指定解释器的方式是比较常见的，但有时候，你可能也会看到下面的方式：\n>\n> ```sh\n> #!/usr/bin/env bash\n> ```\n>\n> 这样做的好处是，系统会自动在 `PATH` 环境变量中查找你指定的程序（本例中的`bash`）。相比第一种写法，你应该尽量用这种写法，因为程序的路径是不确定的。这样写还有一个好处，操作系统的`PATH`变量有可能被配置为指向程序的另一个版本。比如，安装完新版本的`bash`，我们可能将其路径添加到`PATH`中，来“隐藏”老版本。如果直接用`#!/bin/bash`，那么系统会选择老版本的`bash`来执行脚本，如果用`#!/usr/bin/env bash`，则会使用新版本。\n\n### 模式\n\nshell 有交互和非交互两种模式。\n\n#### 交互模式\n\n> 简单来说，你可以将 shell 的交互模式理解为执行命令行。\n\n看到形如下面的东西，说明shell处于交互模式下：\n\n```sh\nuser@host:~$\n```\n\n接着，便可以输入一系列 Linux 命令，比如 `ls`，`grep`，`cd`，`mkdir`，`rm` 等等。\n\n#### 非交互模式\n\n> 简单来说，你可以将 shell 的非交互模式理解为执行 shell 脚本。\n\n在非交互模式下，shell 从文件或者管道中读取命令并执行。\n\n当 shell 解释器执行完文件中的最后一个命令，shell 进程终止，并回到父进程。\n\n可以使用下面的命令让shell以非交互模式运行：\n\n```sh\nsh /path/to/script.sh\nbash /path/to/script.sh\n```\n\n上面的例子中，`script.sh`是一个包含shell解释器可以识别并执行的命令的普通文本文件，`sh`和`bash`是shell解释器程序。你可以使用任何喜欢的编辑器创建`script.sh`（vim，nano，Sublime Text, Atom等等）。\n\n除此之外，你还可以通过`chmod`命令给文件添加可执行的权限，来直接执行脚本文件：\n\n```sh\nchmod +x /path/to/script.sh #使脚本具有执行权限\n/path/to/test.sh\n```\n\n这种方式要求脚本文件的第一行必须指明运行该脚本的程序，比如：\n\n```sh\n#!/bin/bash\necho \"Hello, world!\"\n```\n\n上面的例子中，我们使用了一个很有用的命令`echo`来输出字符串到屏幕上。\n\n## Shell 编程\n\n> 由于 bash 是 Linux 标准默认的 shell，可以说  bash 是 shell 编程的基础。\n>\n> 所以，下面将全部基于 bash 来讲解 shell 编程。\n>\n> 此外，本篇章主要介绍的是 shell 编程的语法，对于 linux 指令不做任何介绍。\n\n### 解释器\n\n前面虽然两次提到了`#!` ，但是本着重要的事情说三遍的精神，这里再强调一遍：\n\n在 shell 脚本，`#!` 告诉系统其后路径所指定的程序即是解释此脚本文件的 Shell 解释器。`#!` 被称作[shebang（也称为 Hashbang ）](https://zh.wikipedia.org/wiki/Shebang)。\n\n`#!` 决定了脚本可以像一个独立的可执行文件一样执行，而不用在终端之前输入`sh`, `bash`, `python`, `php`等。\n\n**示例：**\n\n```sh\n# 以下两种方式都可以指定 shell 解释器为 bash，第二种方式更好\n#!/bin/bash\n#!/usr/bin/env bash\n```\n\n### 注释\n\nshell 语法支持注释。注释是特殊的语句，会被 shell 解释器忽略。它们以 `#` 开头，到行尾结束。\n\n**示例：**\n\n```bash\n#!/bin/bash\n### This script will print your username.\nwhoami\n```\n\n> **Tip**: 用注释来说明你的脚本是干什么的，以及为什么这样写。\n\n### 变量\n\n跟许多程序设计语言一样，你可以在 bash 中创建变量。\n\nBash 中没有数据类型，bash 中的变量可以保存一个数字、一个字符、一个字符串等等。同时无需提前声明变量，给变量赋值会直接创建变量。\n\n你可以创建三种变量：**局部变量**，**环境变量**以及作为**位置参数**的变量。\n\n#### 局部变量\n\n> **局部变量**是仅在某个脚本内部有效的变量。它们不能被其他的程序和脚本访问。\n>\n> 局部变量可以**用 `=` 声明**（作为一种约定，变量名、`=`、变量的值之间**不应该**有空格），其值可以**用`$` 访问**到。\n\n**示例：**\n\n```bash\nusername=\"zhangpeng\"  ### 声明变量\necho $username          ### 输出变量的值\nunset username          ### 删除变量\n```\n\n> 可以**用 `local` 关键字声明属于某个函数的局部变量**。这样声明的变量会在函数结束时消失。\n>\n\n```bash\nlocal local_var=\"I'm a local value\"\n```\n\n#### 环境变量\n\n> **环境变量**是对当前 shell 会话内所有的程序或脚本都可见的变量。\n>\n> 创建它们跟创建局部变量类似，但使用的是 `export` 关键字。\n\n```bash\nexport global_var=\"I'm a global value\"\n```\n\n常见的环境变量：\n\n| 变量        | 描述                          |\n| --------- | --------------------------- |\n| `$HOME`   | 当前用户的用户目录                   |\n| `$PATH`   | 用分号分隔的目录列表，shell会到这些目录中查找命令 |\n| `$PWD`    | 当前工作目录                      |\n| `$RANDOM` | 0到32767之间的整数                |\n| `$UID`    | 数值类型，当前用户的用户ID              |\n| `$PS1`    | 主要系统输入提示符                   |\n| `$PS2`    | 次要系统输入提示符                   |\n\n[这里](http://tldp.org/LDP/Bash-Beginners-Guide/html/sect_03_02.html###sect_03_02_04) 有一张更全面的 Bash 环境变量列表。\n\n#### 位置参数\n\n> **位置参数**是在调用一个函数并传给它参数时创建的变量。\n\n位置参数变量表：\n\n| 变量             | 描述                |\n| -------------- | ----------------- |\n| `$0`           | 脚本名称              |\n| `$1 … $9`      | 第1个到第9个参数列表       |\n| `${10} … ${N}` | 第10个到N个参数列表       |\n| `$*` or `$@`   | 除了`$0`外的所有位置参数    |\n| `$#`           | 不包括`$0`在内的位置参数的个数 |\n| `$FUNCNAME`    | 函数名称（仅在函数内部有值）    |\n\n**示例：**\n\n在下面的例子中，位置参数为：`$0='./script.sh'`，`$1='foo'`，`$2='bar'`：\n\n```bash\n$ ./script.sh foo bar\n```\n\n变量可以有**默认值**。我们可以用如下语法来指定默认值：\n\n```bash\n### 如果变量为空，赋给他们默认值\n: ${VAR:='default'}\n: ${1:='first'}\necho \"\\$1 : \" $1\n: ${2:='second'}\necho \"\\$2 : \" $2\n\n### 或者\nFOO=${FOO:-'default'}\n```\n\n### Shell扩展\n\n*扩展* 发生在一行命令被分成一个个的 *记号（tokens）* 之后。换言之，扩展是一种执行数学运算的机制，还可以用来保存命令的执行结果，等等。\n\n感兴趣的话可以阅读[关于shell扩展的更多细节](https://www.gnu.org/software/bash/manual/bash.html###Shell-Expansions)。\n\n#### 大括号扩展\n\n大括号扩展让生成任意的字符串成为可能。它跟 *文件名扩展* 很类似，举个例子：\n\n```bash\necho beg{i,a,u}n ### begin began begun\n```\n\n大括号扩展还可以用来创建一个可被循环迭代的区间。\n\n```bash\necho {0..5} ### 0 1 2 3 4 5\necho {00..8..2} ### 00 02 04 06 08\n```\n\n#### 命令置换\n\n命令置换允许我们对一个命令求值，并将其值置换到另一个命令或者变量赋值表达式中。当一个命令被````或`$()`包围时，命令置换将会执行。举个例子：\n\n```bash\nnow=`date +%T`\n### or\nnow=$(date +%T)\n\necho $now ### 19:08:26\n```\n\n#### 算数扩展\n\n在bash中，执行算数运算是非常方便的。算数表达式必须包在`$(( ))`中。算数扩展的格式为：\n\n```bash\nresult=$(( ((10 + 5*3) - 7) / 2 ))\necho $result ### 9\n```\n\n在算数表达式中，使用变量无需带上`$`前缀：\n\n```bash\nx=4\ny=7\necho $(( x + y ))     ### 11\necho $(( ++x + y++ )) ### 12\necho $(( x + y ))     ### 13\n```\n\n#### 单引号和双引号\n\n单引号和双引号之间有很重要的区别。在双引号中，变量引用或者命令置换是会被展开的。在单引号中是不会的。举个例子：\n\n```bash\necho \"Your home: $HOME\" ### Your home: /Users/<username>\necho 'Your home: $HOME' ### Your home: $HOME\n```\n\n当局部变量和环境变量包含空格时，它们在引号中的扩展要格外注意。随便举个例子，假如我们用`echo`来输出用户的输入：\n\n```bash\nINPUT=\"A string  with   strange    whitespace.\"\necho $INPUT   ### A string with strange whitespace.\necho \"$INPUT\" ### A string  with   strange    whitespace.\n```\n\n调用第一个`echo`时给了它5个单独的参数 —— `$INPUT` 被分成了单独的词，`echo`在每个词之间打印了一个空格。第二种情况，调用`echo`时只给了它一个参数（整个$INPUT的值，包括其中的空格）。\n\n来看一个更严肃的例子：\n\n```bash\nFILE=\"Favorite Things.txt\"\ncat $FILE   ### 尝试输出两个文件: `Favorite` 和 `Things.txt`\ncat \"$FILE\" ### 输出一个文件: `Favorite Things.txt`\n```\n\n尽管这个问题可以通过把FILE重命名成`Favorite-Things.txt`来解决，但是，假如这个值来自某个环境变量，来自一个位置参数，或者来自其它命令（`find`, `cat`, 等等）呢。因此，如果输入 *可能* 包含空格，务必要用引号把表达式包起来。\n\n### 数组\n\n跟其它程序设计语言一样，bash中的数组变量给了你引用多个值的能力。在bash中，数组下标也是从0开始，也就是说，第一个元素的下标是0。\n\n跟数组打交道时，要注意一个特殊的环境变量`IFS`。**IFS**，全称 **Input Field Separator**，保存了数组中元素的分隔符。它的默认值是一个空格`IFS=' '`。\n\n#### 创建数组\n\n在 bash 中有好几种方法创建一个数组\n\n```bash\narray[0] = val\narray[1] = val\narray[2] = val\narray=([2]=val [0]=val [1]=val)\narray=(val val val)\n```\n\n#### 获取数组元素\n\n- **获取数组的单个元素：**\n\n```bash\necho ${array[1]}\n```\n\n- **获取数组的所有元素：**\n\n```bash\necho ${array[*]}\necho ${array[@]}\n```\n\n上面两行有很重要（也很微妙）的区别，假设某数组元素中包含空格：\n\n```bash\ncolors[0]=Red\ncolors[1]=\"Dark Green\"\ncolors[2]=Blue\n```\n\n为了将数组中每个元素单独一行输出，我们用内建的`printf`命令：\n\n```bash\nprintf \"+ %s\\n\" ${colors[*]}\n\n# 输出：\n# + Red\n# + Dark\n# + Green\n# + Blue\n```\n\n为什么`Desert`和`fig`各占了一行？尝试用引号包起来：\n\n```bash\nprintf \"+ %s\\n\" \"${colors[*]}\"\n\n# 输出：\n# + Red Dark Green Blue\n```\n\n现在所有的元素都跑去了一行 —— 这不是我们想要的！为了解决这个痛点，`${colors[@]}`闪亮登场：\n\n```bash\nprintf \"+ %s\\n\" \"${colors[@]}\"\n\n# 输出：\n+ Red\n+ Dark Green\n+ Blue\n```\n\n在引号内，`${colors[@]}`将数组中的每个元素扩展为一个单独的参数；数组元素中的空格得以保留。\n\n- **访问数组的部分元素：**\n\n```bash\necho ${array[@]:0:2}\n```\n\n在上面的例子中，`${array[@]}` 扩展为整个数组，`:0:2`取出了数组中从0开始，长度为2的元素。\n\n#### 获取数组长度\n\n```bash\necho ${#array[*]}\n```\n\n#### 向数组中添加元素\n\n向数组中添加元素也非常简单：\n\n```bash\ncolors=(Yellow \"${colors[@]}\" Pink Black)\necho ${colors[@]}\n\n# 输出：\n# Yellow Red Dark Green Blue Pink Black\n```\n\n上面的例子中，`${colors[@]}` 扩展为整个数组，并被置换到复合赋值语句中，接着，对数组`colors`的赋值覆盖了它原来的值。\n\n#### 从数组中删除元素\n\n用`unset`命令来从数组中删除一个元素：\n\n```bash\nunset colors[0]\necho ${colors[@]}\n\n# 输出：\n# Red Dark Green Blue Pink Black\n```\n\n### 运算符\n\n#### 算术运算符\n\n下表列出了常用的算术运算符，假定变量 a 为 10，变量 b 为 20：\n\n| 运算符  | 说明                        | 举例                        |\n| ---- | ------------------------- | ------------------------- |\n| +    | 加法                        | `expr $a + $b` 结果为 30。    |\n| -    | 减法                        | `expr $a - $b` 结果为 -10。   |\n| *    | 乘法                        | `expr $a \\* $b` 结果为  200。 |\n| /    | 除法                        | `expr $b / $a` 结果为 2。     |\n| %    | 取余                        | `expr $b % $a` 结果为 0。     |\n| =    | 赋值                        | `a=$b` 将把变量 b 的值赋给 a。     |\n| ==   | 相等。用于比较两个数字，相同则返回 true。   | `[ $a == $b ]` 返回 false。  |\n| !=   | 不相等。用于比较两个数字，不相同则返回 true。 | `[ $a != $b ]` 返回 true。   |\n\n**注意：**条件表达式要放在方括号之间，并且要有空格，例如: **[$a==$b]** 是错误的，必须写成 **[ $a == $b ]**。\n\n**示例：**\n\n```bash\na=10\nb=20\n\necho \"a=$a, b=$b\"\n\nval=`expr $a + $b`\necho \"a + b : $val\"\n\nval=`expr $a - $b`\necho \"a - b : $val\"\n\nval=`expr $a \\* $b`\necho \"a * b : $val\"\n\nval=`expr $b / $a`\necho \"b / a : $val\"\n\nval=`expr $b % $a`\necho \"b % a : $val\"\n\nif [ $a == $b ]\nthen\n  echo \"a 等于 b\"\nfi\nif [ $a != $b ]\nthen\n  echo \"a 不等于 b\"\nfi\n```\n\n#### 关系运算符\n\n关系运算符只支持数字，不支持字符串，除非字符串的值是数字。\n\n下表列出了常用的关系运算符，假定变量 a 为 10，变量 b 为 20：\n\n| 运算符  | 说明                            | 举例                        |\n| ---- | ----------------------------- | ------------------------- |\n| -eq  | 检测两个数是否相等，相等返回 true。          | `[ $a -eq $b ] `返回 false。 |\n| -ne  | 检测两个数是否相等，不相等返回 true。         | `[ $a -ne $b ]` 返回 true。  |\n| -gt  | 检测左边的数是否大于右边的，如果是，则返回 true。   | `[ $a -gt $b ]` 返回 false。 |\n| -lt  | 检测左边的数是否小于右边的，如果是，则返回 true。   | `[ $a -lt $b ]` 返回 true。  |\n| -ge  | 检测左边的数是否大于等于右边的，如果是，则返回 true。 | `[ $a -ge $b ]` 返回 false。 |\n| -le  | 检测左边的数是否小于等于右边的，如果是，则返回 true。 | `[ $a -le $b ] `返回 true。  |\n\n**示例：**\n\n```bash\na=10\nb=20\n\nif [ $a -eq $b ]\nthen\n   echo \"$a -eq $b : a 等于 b\"\nelse\n   echo \"$a -eq $b: a 不等于 b\"\nfi\nif [ $a -ne $b ]\nthen\n   echo \"$a -ne $b: a 不等于 b\"\nelse\n   echo \"$a -ne $b : a 等于 b\"\nfi\nif [ $a -gt $b ]\nthen\n   echo \"$a -gt $b: a 大于 b\"\nelse\n   echo \"$a -gt $b: a 不大于 b\"\nfi\nif [ $a -lt $b ]\nthen\n   echo \"$a -lt $b: a 小于 b\"\nelse\n   echo \"$a -lt $b: a 不小于 b\"\nfi\nif [ $a -ge $b ]\nthen\n   echo \"$a -ge $b: a 大于或等于 b\"\nelse\n   echo \"$a -ge $b: a 小于 b\"\nfi\nif [ $a -le $b ]\nthen\n   echo \"$a -le $b: a 小于或等于 b\"\nelse\n   echo \"$a -le $b: a 大于 b\"\nfi\n```\n\n#### 布尔运算符\n\n下表列出了常用的布尔运算符，假定变量 a 为 10，变量 b 为 20：\n\n| 运算符  | 说明                                 | 举例                                      |\n| ---- | ---------------------------------- | --------------------------------------- |\n| !    | 非运算，表达式为 true 则返回 false，否则返回 true。 | `[ ! false ]` 返回 true。                  |\n| -o   | 或运算，有一个表达式为 true 则返回 true。         | `[ $a -lt 20 -o $b -gt 100 ]` 返回 true。  |\n| -a   | 与运算，两个表达式都为 true 才返回 true。         | `[ $a -lt 20 -a $b -gt 100 ]` 返回 false。 |\n\n**示例：**\n\n```bash\na=10\nb=20\n\necho \"a=$a, b=$b\"\n\nif [ $a != $b ]\nthen\n   echo \"$a != $b : a 不等于 b\"\nelse\n   echo \"$a != $b: a 等于 b\"\nfi\nif [ $a -lt 100 -a $b -gt 15 ]\nthen\n   echo \"$a 小于 100 且 $b 大于 15 : 返回 true\"\nelse\n   echo \"$a 小于 100 且 $b 大于 15 : 返回 false\"\nfi\nif [ $a -lt 100 -o $b -gt 100 ]\nthen\n   echo \"$a 小于 100 或 $b 大于 100 : 返回 true\"\nelse\n   echo \"$a 小于 100 或 $b 大于 100 : 返回 false\"\nfi\nif [ $a -lt 5 -o $b -gt 100 ]\nthen\n   echo \"$a 小于 5 或 $b 大于 100 : 返回 true\"\nelse\n   echo \"$a 小于 5 或 $b 大于 100 : 返回 false\"\nfi\n```\n\n#### 逻辑运算符\n\n以下介绍 Shell 的逻辑运算符，假定变量 a 为 10，变量 b 为 20:\n\n| 运算符  | 说明      | 举例                                       |\n| ---- | ------- | ---------------------------------------- |\n| &&   | 逻辑的 AND | `[[ $a -lt 100 && $b -gt 100 ]]` 返回 false |\n| \\|\\| | 逻辑的 OR  | `[[ $a -lt 100 || $b -gt 100 ]]` 返回 true |\n\n**示例：**\n\n```bash\na=10\nb=20\n\necho \"a=$a, b=$b\"\n\nif [[ $a -lt 100 && $b -gt 100 ]]\nthen\n   echo \"返回 true\"\nelse\n   echo \"返回 false\"\nfi\n\nif [[ $a -lt 100 || $b -gt 100 ]]\nthen\n   echo \"返回 true\"\nelse\n   echo \"返回 false\"\nfi\n```\n\n#### 字符串运算符\n\n下表列出了常用的字符串运算符，假定变量 a 为 \"abc\"，变量 b 为 \"efg\"：\n\n| 运算符  | 说明                      | 举例                      |\n| ---- | ----------------------- | ----------------------- |\n| =    | 检测两个字符串是否相等，相等返回 true。  | `[ $a = $b ]` 返回 false。 |\n| !=   | 检测两个字符串是否相等，不相等返回 true。 | `[ $a != $b ]` 返回 true。 |\n| -z   | 检测字符串长度是否为0，为0返回 true。  | `[ -z $a ]` 返回 false。   |\n| -n   | 检测字符串长度是否为0，不为0返回 true。 | `[ -n $a ]` 返回 true。    |\n| str  | 检测字符串是否为空，不为空返回 true。   | `[ $a ]` 返回 true。       |\n\n**示例：**\n\n```bash\na=\"abc\"\nb=\"efg\"\n\necho \"a=$a, b=$b\"\n\nif [ $a = $b ]\nthen\n   echo \"$a = $b : a 等于 b\"\nelse\n   echo \"$a = $b: a 不等于 b\"\nfi\nif [ $a != $b ]\nthen\n   echo \"$a != $b : a 不等于 b\"\nelse\n   echo \"$a != $b: a 等于 b\"\nfi\nif [ -z $a ]\nthen\n   echo \"-z $a : 字符串长度为 0\"\nelse\n   echo \"-z $a : 字符串长度不为 0\"\nfi\nif [ -n $a ]\nthen\n   echo \"-n $a : 字符串长度不为 0\"\nelse\n   echo \"-n $a : 字符串长度为 0\"\nfi\nif [ $a ]\nthen\n   echo \"$a : 字符串不为空\"\nelse\n   echo \"$a : 字符串为空\"\nfi\n```\n\n#### 文件测试运算符\n\n文件测试运算符用于检测 Unix 文件的各种属性。\n\n属性检测描述如下：\n\n| 操作符     | 说明                                       | 举例                       |\n| ------- | ---------------------------------------- | ------------------------ |\n| -b file | 检测文件是否是块设备文件，如果是，则返回 true。               | `[ -b $file ]` 返回 false。 |\n| -c file | 检测文件是否是字符设备文件，如果是，则返回 true。              | `[ -c $file ]` 返回 false。 |\n| -d file | 检测文件是否是目录，如果是，则返回 true。                  | `[ -d $file ]` 返回 false。 |\n| -f file | 检测文件是否是普通文件（既不是目录，也不是设备文件），如果是，则返回 true。 | `[ -f $file ]` 返回 true。  |\n| -g file | 检测文件是否设置了 SGID 位，如果是，则返回 true。           | `[ -g $file ]` 返回 false。 |\n| -k file | 检测文件是否设置了粘着位(Sticky Bit)，如果是，则返回 true。   | `[ -k $file ]`返回 false。  |\n| -p file | 检测文件是否是有名管道，如果是，则返回 true。                | `[ -p $file ]` 返回 false。 |\n| -u file | 检测文件是否设置了 SUID 位，如果是，则返回 true。           | `[ -u $file ]` 返回 false。 |\n| -r file | 检测文件是否可读，如果是，则返回 true。                   | `[ -r $file ]` 返回 true。  |\n| -w file | 检测文件是否可写，如果是，则返回 true。                   | `[ -w $file ]` 返回 true。  |\n| -x file | 检测文件是否可执行，如果是，则返回 true。                  | `[ -x $file ]` 返回 true。  |\n| -s file | 检测文件是否为空（文件大小是否大于0），不为空返回 true。          | `[ -s $file ]` 返回 true。  |\n| -e file | 检测文件（包括目录）是否存在，如果是，则返回 true。             | `[ -e $file ]` 返回 true。  |\n\n**示例：**\n\n变量 file 表示文件\"/var/www/runoob/test.sh\"，它的大小为100字节，具有 rwx 权限。下面的代码，将检测该文件的各种属性：\n\n```bash\nfile=\"./operatorDemo.sh\"\nif [ -r $file ]\nthen\n   echo \"文件可读\"\nelse\n   echo \"文件不可读\"\nfi\nif [ -w $file ]\nthen\n   echo \"文件可写\"\nelse\n   echo \"文件不可写\"\nfi\nif [ -x $file ]\nthen\n   echo \"文件可执行\"\nelse\n   echo \"文件不可执行\"\nfi\nif [ -f $file ]\nthen\n   echo \"文件为普通文件\"\nelse\n   echo \"文件为特殊文件\"\nfi\nif [ -d $file ]\nthen\n   echo \"文件是个目录\"\nelse\n   echo \"文件不是个目录\"\nfi\nif [ -s $file ]\nthen\n   echo \"文件不为空\"\nelse\n   echo \"文件为空\"\nfi\nif [ -e $file ]\nthen\n   echo \"文件存在\"\nelse\n   echo \"文件不存在\"\nfi\n```\n\n### 语句\n\n#### 条件语句\n\n跟其它程序设计语言一样，Bash中的条件语句让我们可以决定一个操作是否被执行。结果取决于一个包在`[[ ]]`里的表达式。\n\n条件表达式可以包含`&&`和`||`运算符，分别对应 *与* 和 *或* 。除此之外还有很多有用的[表达式](https://github.com/denysdovhan/bash-handbook/blob/master/translations/zh-CN/README.md#%E5%9F%BA%E5%85%83%E5%92%8C%E7%BB%84%E5%90%88%E8%A1%A8%E8%BE%BE%E5%BC%8F)。\n\n共有两个不同的条件表达式：`if`和`case`。\n\n##### 基元和组合表达式\n\n由`[[ ]]`（`sh`中是`[ ]`）包起来的表达式被称作 **检测命令** 或 **基元**。这些表达式帮助我们检测一个条件的结果。在下面的表里，为了兼容`sh`，我们用的是`[ ]`。这里可以找到有关[bash中单双中括号区别](http://serverfault.com/a/52050)的答案。\n\n##### 使用`if`\n\n`if`在使用上跟其它语言相同。如果中括号里的表达式为真，那么`then`和`fi`之间的代码会被执行。`fi`标志着条件代码块的结束。\n\n```bash\n### 写成一行\nif [[ 1 -eq 1 ]]; then echo \"true\"; fi\n\n### 写成多行\nif [[ 1 -eq 1 ]]; then\n  echo \"true\"\nfi\n```\n\n同样，我们可以使用`if..else`语句，例如：\n\n```bash\n### 写成一行\nif [[ 2 -ne 1 ]]; then echo \"true\"; else echo \"false\"; fi\n\n### 写成多行\nif [[ 2 -ne 1 ]]; then\n  echo \"true\"\nelse\n  echo \"false\"\nfi\n```\n\n有些时候，`if..else`不能满足我们的要求。别忘了`if..elif..else`，使用起来也很方便。\n\n**示例：**\n\n```bash\nif [[ `uname` == \"Adam\" ]]; then\n  echo \"Do not eat an apple!\"\nelif [[ `uname` == \"Eva\" ]]; then\n  echo \"Do not take an apple!\"\nelse\n  echo \"Apples are delicious!\"\nfi\n```\n\n##### 使用`case`\n\n如果你需要面对很多情况，分别要采取不同的措施，那么使用`case`会比嵌套的`if`更有用。使用`case`来解决复杂的条件判断，看起来像下面这样：\n\n```bash\necho \"input param: \" $1\n\ncase $1 in\n  \"jpg\" | \"jpeg\")\n    echo \"It's image with jpeg extension.\"\n  ;;\n  \"png\")\n    echo \"It's image with png extension.\"\n  ;;\n  \"gif\")\n    echo \"Oh, it's a giphy!\"\n  ;;\n  *)\n    echo \"Woops! It's not image!\"\n  ;;\nesac\n```\n\n每种情况都是匹配了某个模式的表达式。`|`用来分割多个模式，`)`用来结束一个模式序列。第一个匹配上的模式对应的命令将会被执行。`*`代表任何不匹配以上给定模式的模式。命令块儿之间要用`;;`分隔。\n\n#### 循环语句\n\n循环其实不足为奇。跟其它程序设计语言一样，bash中的循环也是只要控制条件为真就一直迭代执行的代码块。\n\nBash中有四种循环：`for`，`while`，`until`和`select`。\n\n##### `for`循环\n\n`for`与它在C语言中的姊妹非常像。看起来是这样：\n\n```bash\nfor arg in elem1 elem2 ... elemN\ndo\n  ### 语句\ndone\n```\n\n在每次循环的过程中，`arg`依次被赋值为从`elem1`到`elemN`。这些值还可以是通配符或者[大括号扩展](https://github.com/denysdovhan/bash-handbook/blob/master/translations/zh-CN/README.md#%E5%A4%A7%E6%8B%AC%E5%8F%B7%E6%89%A9%E5%B1%95)。\n\n当然，我们还可以把`for`循环写在一行，但这要求`do`之前要有一个分号，就像下面这样：\n\n```bash\nfor i in {1..5}; do echo $i; done\n```\n\n还有，如果你觉得`for..in..do`对你来说有点奇怪，那么你也可以像C语言那样使用`for`，比如：\n\n```bash\nfor (( i = 0; i < 10; i++ )); do\n  echo $i\ndone\n```\n\n当我们想对一个目录下的所有文件做同样的操作时，`for`就很方便了。举个例子，如果我们想把所有的`.bash`文件移动到`script`文件夹中，并给它们可执行权限，我们的脚本可以这样写：\n\n```bash\n#!/bin/bash\n\nfor FILE in $HOME/*.bash; do\n  mv \"$FILE\" \"${HOME}/scripts\"\n  chmod +x \"${HOME}/scripts/${FILE}\"\ndone\n```\n\n##### `while`循环\n\n`while`循环检测一个条件，只要这个条件为 *真*，就执行一段命令。被检测的条件跟`if..then`中使用的[基元](https://github.com/denysdovhan/bash-handbook/blob/master/translations/zh-CN/README.md#%E5%9F%BA%E5%85%83%E5%92%8C%E7%BB%84%E5%90%88%E8%A1%A8%E8%BE%BE%E5%BC%8F)并无二异。因此一个`while`循环看起来会是这样：\n\n```bash\nwhile [[ condition ]]\ndo\n  ### 语句\ndone\n```\n\n跟`for`循环一样，如果我们把`do`和被检测的条件写到一行，那么必须要在`do`之前加一个分号。\n\n比如下面这个例子：\n\n```bash\n#!/bin/bash\n\n### 0到9之间每个数的平方\nx=0\nwhile [[ $x -lt 10 ]]; do ### x小于10\n  echo $(( x * x ))\n  x=$(( x + 1 )) ### x加1\ndone\n```\n\n##### `until`循环\n\n`until`循环跟`while`循环正好相反。它跟`while`一样也需要检测一个测试条件，但不同的是，只要该条件为 *假* 就一直执行循环：\n\n```bash\nuntil [[ condition ]]; do\n  ### 语句\ndone\n```\n\n##### `select`循环\n\n`select`循环帮助我们组织一个用户菜单。它的语法几乎跟`for`循环一致：\n\n```bash\nselect answer in elem1 elem2 ... elemN\ndo\n  ### 语句\ndone\n```\n\n`select`会打印`elem1..elemN`以及它们的序列号到屏幕上，之后会提示用户输入。通常看到的是`$?`（`PS3`变量）。用户的选择结果会被保存到`answer`中。如果`answer`是一个在`1..N`之间的数字，那么`语句`会被执行，紧接着会进行下一次迭代 —— 如果不想这样的话我们可以使用`break`语句。\n\n一个可能的实例可能会是这样：\n\n```bash\n#!/bin/bash\n\nPS3=\"Choose the package manager: \"\nselect ITEM in bower npm gem pip\ndo\n  echo -n \"Enter the package name: \" && read PACKAGE\n  case $ITEM in\n    bower) bower install $PACKAGE ;;\n    npm)   npm   install $PACKAGE ;;\n    gem)   gem   install $PACKAGE ;;\n    pip)   pip   install $PACKAGE ;;\n  esac\n  break ### 避免无限循环\ndone\n```\n\n这个例子，先询问用户他想使用什么包管理器。接着，又询问了想安装什么包，最后执行安装操作。\n\n运行这个脚本，会得到如下输出：\n\n```bash\n$ ./my_script\n1) bower\n2) npm\n3) gem\n4) pip\nChoose the package manager: 2\nEnter the package name: bash-handbook\n<installing bash-handbook>\n\n```\n\n##### break 和 continue\n\n如果想提前结束一个循环或跳过某次循环执行，可以使用 shell 的`break`和`continue`语句来实现。它们可以在任何循环中使用。\n\n> `break`语句用来提前结束当前循环。\n>\n> `continue`语句用来跳过某次迭代。\n>\n\n```bash\nfor (( i = 0; i < 10; i++ )); do\n  if [[ $(( i % 2 )) -eq 0 ]]; then continue; fi\n  echo $i\ndone\n```\n\n运行上面的例子，会打印出所有0到9之间的奇数。\n\n### 函数\n\n在脚本中，我们可以定义并调用函数。跟其它程序设计语言类似，函数是一个代码块，但有所不同。\n\nbash 中，函数是一个命令序列，这个命令序列组织在某个名字下面，即 *函数名* 。调用函数跟其它语言一样，写下函数名字，函数就会被 *调用* 。\n\n我们可以这样声明函数：\n\n```bash\nmy_func () {\n  ### 语句\n}\n\nmy_func ### 调用 my_func\n```\n\n我们必须在调用前声明函数。\n\n函数可以接收参数并返回结果 —— 返回值。参数，在函数内部，跟[非交互式](https://github.com/denysdovhan/bash-handbook/blob/master/translations/zh-CN/README.md#%E9%9D%9E%E4%BA%A4%E4%BA%92%E6%A8%A1%E5%BC%8F)下的脚本参数处理方式相同 —— 使用[位置参数](https://github.com/denysdovhan/bash-handbook/blob/master/translations/zh-CN/README.md#%E4%BD%8D%E7%BD%AE%E5%8F%82%E6%95%B0)。返回值可以使用`return`命令 *返回* 。\n\n下面这个函数接收一个名字参数，返回`0`，表示成功执行。\n\n```bash\n### 带参数的函数\ngreeting () {\n  if [[ -n $1 ]]; then\n    echo \"Hello, $1!\"\n  else\n    echo \"Hello, unknown!\"\n  fi\n  return 0\n}\n\ngreeting Denys  ### Hello, Denys!\ngreeting        ### Hello, stranger!\n```\n\n我们之前已经介绍过[返回值](https://github.com/denysdovhan/bash-handbook/blob/master/translations/zh-CN/README.md#%E8%BF%94%E5%9B%9E%E5%80%BC)。不带任何参数的`return`会返回最后一个执行的命令的返回值。上面的例子，`return 0`会返回一个成功表示执行的值，`0`。\n\n另外，还有几个特殊字符用来处理参数：\n\n| 参数处理 | 说明                              |\n| ---- | ------------------------------- |\n| $#   | 传递到脚本的参数个数                      |\n| $*   | 以一个单字符串显示所有向脚本传递的参数             |\n| $$   | 脚本运行的当前进程ID号                    |\n| $!   | 后台运行的最后一个进程的ID号                 |\n| $@   | 与$*相同，但是使用时加引号，并在引号中返回每个参数。     |\n| $-   | 显示Shell使用的当前选项，与set命令功能相同。      |\n| $?   | 显示最后命令的退出状态。0表示没有错误，其他任何值表明有错误。 |\n\n### 流和重定向\n\nBash有很强大的工具来处理程序之间的协同工作。使用流，我们能将一个程序的输出发送到另一个程序或文件，因此，我们能方便地记录日志或做一些其它我们想做的事。\n\n管道给了我们创建传送带的机会，控制程序的执行成为可能。\n\n学习如何使用这些强大的、高级的工具是非常非常重要的。\n\n#### 输入、输出流\n\nBash接收输入，并以字符序列或 **字符流** 的形式产生输出。这些流能被重定向到文件或另一个流中。\n\n有三个文件描述符：\n\n| 代码   | 描述符      | 描述     |\n| ---- | -------- | ------ |\n| `0`  | `stdin`  | 标准输入   |\n| `1`  | `stdout` | 标准输出   |\n| `2`  | `stderr` | 标准错误输出 |\n\n#### 重定向\n\n重定向让我们可以控制一个命令的输入来自哪里，输出结果到什么地方。这些运算符在控制流的重定向时会被用到：\n\n| Operator | Description                              |\n| -------- | ---------------------------------------- |\n| `>`      | 重定向输出                                    |\n| `&>`     | 重定向输出和错误输出                               |\n| `&>>`    | 以附加的形式重定向输出和错误输出                         |\n| `<`      | 重定向输入                                    |\n| `<<`     | [Here文档](http://tldp.org/LDP/abs/html/here-docs.html) 语法 |\n| `<<<`    | [Here字符串](http://www.tldp.org/LDP/abs/html/x17837.html) |\n\n以下是一些使用重定向的例子：\n\n```bash\n### ls的结果将会被写到list.txt中\nls -l > list.txt\n\n### 将输出附加到list.txt中\nls -a >> list.txt\n\n### 所有的错误信息会被写到errors.txt中\ngrep da * 2> errors.txt\n\n### 从errors.txt中读取输入\nless < errors.txt\n```\n\n#### `/dev/null` 文件\n\n如果希望执行某个命令，但又不希望在屏幕上显示输出结果，那么可以将输出重定向到 /dev/null：\n\n```\n$ command > /dev/null\n```\n\n/dev/null 是一个特殊的文件，写入到它的内容都会被丢弃；如果尝试从该文件读取内容，那么什么也读不到。但是 /dev/null 文件非常有用，将命令的输出重定向到它，会起到\"禁止输出\"的效果。\n\n如果希望屏蔽 stdout 和 stderr，可以这样写：\n\n```\n$ command > /dev/null 2>&1\n```\n\n### Debugging\n\nshell提供了用于debugging脚本的工具。如果我们想以debug模式运行某脚本，可以在其shebang中使用一个特殊的选项：\n\n```\n#!/bin/bash options\n```\n\noptions是一些可以改变shell行为的选项。下表是一些可能对你有用的选项：\n\n| Short | Name        | Description                       |\n| ----- | ----------- | --------------------------------- |\n| `-f`  | noglob      | 禁止文件名展开（globbing）                 |\n| `-i`  | interactive | 让脚本以 *交互* 模式运行                    |\n| `-n`  | noexec      | 读取命令，但不执行（语法检查）                   |\n| `-t`  | —           | 执行完第一条命令后退出                       |\n| `-v`  | verbose     | 在执行每条命令前，向`stderr`输出该命令           |\n| `-x`  | xtrace      | 在执行每条命令前，向`stderr`输出该命令以及该命令的扩展参数 |\n\n举个例子，如果我们在脚本中指定了`-x`例如：\n\n```\n#!/bin/bash -x\n\nfor (( i = 0; i < 3; i++ )); do\n  echo $i\ndone\n```\n\n这会向`stdout`打印出变量的值和一些其它有用的信息：\n\n```bash\n$ ./my_script\n+ (( i = 0 ))\n+ (( i < 3 ))\n+ echo 0\n0\n+ (( i++  ))\n+ (( i < 3 ))\n+ echo 1\n1\n+ (( i++  ))\n+ (( i < 3 ))\n+ echo 2\n2\n+ (( i++  ))\n+ (( i < 3 ))\n\n```\n\n有时我们需要debug脚本的一部分。这种情况下，使用`set`命令会很方便。这个命令可以启用或禁用选项。使用`-`启用选项，`+`禁用选项：\n\n```bash\n#!/bin/bash\n\necho \"xtrace is turned off\"\nset -x\necho \"xtrace is enabled\"\nset +x\necho \"xtrace is turned off again\"\n```\n\n### 资料\n\n- [awesome-shell](https://github.com/alebcay/awesome-shell)，shell 资源列表\n- [awesome-bash](https://github.com/awesome-lists/awesome-bash)，bash 资源列表\n- [bash-handbook](https://github.com/denysdovhan/bash-handbook)\n- [bash-guide](https://github.com/vuuihc/bash-guide) ，bash 基本用法指南\n- [bash-it](https://github.com/Bash-it/bash-it)，为你日常使用，开发以及维护 shell 脚本和自定义命令提供了一个可靠的框架\n- [dotfiles.github.io](http://dotfiles.github.io/)，上面有bash和其它shell的各种dotfiles集合以及shell框架的链接\n- [Runoob Shell 教程](http://www.runoob.com/linux/linux-shell.html)\n\n最后，Stack Overflow上 [bash 标签下](https://stackoverflow.com/questions/tagged/bash)有很多你可以学习的问题，当你遇到问题时，也是一个提问的好地方。\n\n","slug":"shell","published":1,"updated":"2018-01-02T00:50:36.835Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjbwxj1040012h0vock39xxh8","content":"<h1 id=\"Shell-快速指南\"><a href=\"#Shell-快速指南\" class=\"headerlink\" title=\"Shell 快速指南\"></a>Shell 快速指南</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">███████╗██╗  ██╗███████╗██╗     ██╗                           </span><br><span class=\"line\">██╔════╝██║  ██║██╔════╝██║     ██║                           </span><br><span class=\"line\">███████╗███████║█████╗  ██║     ██║                           </span><br><span class=\"line\">╚════██║██╔══██║██╔══╝  ██║     ██║                           </span><br><span class=\"line\">███████║██║  ██║███████╗███████╗███████╗</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><h3 id=\"什么是-shell\"><a href=\"#什么是-shell\" class=\"headerlink\" title=\"什么是 shell\"></a>什么是 shell</h3><p>Shell 是一个用 C 语言编写的程序，它是用户使用 Linux 的桥梁。</p>\n<p>Shell 既是一种命令语言，又是一种程序设计语言。</p>\n<p>Shell 是指一种应用程序，这个应用程序提供了一个界面，用户通过这个界面访问 Linux 内核的服务。</p>\n<p>Ken Thompson 的 sh 是第一种 Unix Shell，Windows Explorer 是一个典型的图形界面 Shell。</p>\n<h3 id=\"什么是-shell-脚本\"><a href=\"#什么是-shell-脚本\" class=\"headerlink\" title=\"什么是 shell 脚本\"></a>什么是 shell 脚本</h3><p>Shell 脚本（shell script），是一种为 shell 编写的脚本程序，一般文件后缀为 <code>.sh</code>。</p>\n<p>业界所说的 shell 通常都是指 shell 脚本，但 shell 和 shell script 是两个不同的概念。</p>\n<h3 id=\"Shell-环境\"><a href=\"#Shell-环境\" class=\"headerlink\" title=\"Shell 环境\"></a>Shell 环境</h3><p>Shell 编程跟 java、php 编程一样，只要有一个能编写代码的文本编辑器和一个能解释执行的脚本解释器就可以了。</p>\n<p>Shell 的解释器种类众多，常见的有：</p>\n<ul>\n<li><a href=\"https://www.gnu.org/software/bash/\" target=\"_blank\" rel=\"noopener\">sh</a> - 即 Bourne Shell。sh 是 Unix 标准默认的 shell。</li>\n<li><a href=\"https://www.gnu.org/software/bash/\" target=\"_blank\" rel=\"noopener\">bash</a> - 即 Bourne Again Shell。bash 是 Linux 标准默认的 shell。</li>\n<li><a href=\"https://fishshell.com/\" target=\"_blank\" rel=\"noopener\">fish</a> - 智能和用户友好的命令行 shell。</li>\n<li><a href=\"http://xiki.org/\" target=\"_blank\" rel=\"noopener\">xiki</a> - 使 shell 控制台更友好，更强大。</li>\n<li><a href=\"http://www.zsh.org/\" target=\"_blank\" rel=\"noopener\">zsh</a> - 功能强大的 shell 与脚本语言。</li>\n</ul>\n<h4 id=\"指定脚本解释器\"><a href=\"#指定脚本解释器\" class=\"headerlink\" title=\"指定脚本解释器\"></a>指定脚本解释器</h4><p>在 shell 脚本，<code>#!</code> 告诉系统其后路径所指定的程序即是解释此脚本文件的 Shell 解释器。<code>#!</code> 被称作<a href=\"https://zh.wikipedia.org/wiki/Shebang\" target=\"_blank\" rel=\"noopener\">shebang（也称为 Hashbang ）</a>。</p>\n<p>所以，你应该会在 shell 中，见到诸如以下的注释：</p>\n<ul>\n<li>指定 sh 解释器</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/sh</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>指定 bash 解释器</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><strong>注意</strong></p>\n<p>上面的指定解释器的方式是比较常见的，但有时候，你可能也会看到下面的方式：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; <span class=\"comment\">#!/usr/bin/env bash</span></span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p>这样做的好处是，系统会自动在 <code>PATH</code> 环境变量中查找你指定的程序（本例中的<code>bash</code>）。相比第一种写法，你应该尽量用这种写法，因为程序的路径是不确定的。这样写还有一个好处，操作系统的<code>PATH</code>变量有可能被配置为指向程序的另一个版本。比如，安装完新版本的<code>bash</code>，我们可能将其路径添加到<code>PATH</code>中，来“隐藏”老版本。如果直接用<code>#!/bin/bash</code>，那么系统会选择老版本的<code>bash</code>来执行脚本，如果用<code>#!/usr/bin/env bash</code>，则会使用新版本。</p>\n</blockquote>\n<h3 id=\"模式\"><a href=\"#模式\" class=\"headerlink\" title=\"模式\"></a>模式</h3><p>shell 有交互和非交互两种模式。</p>\n<h4 id=\"交互模式\"><a href=\"#交互模式\" class=\"headerlink\" title=\"交互模式\"></a>交互模式</h4><blockquote>\n<p>简单来说，你可以将 shell 的交互模式理解为执行命令行。</p>\n</blockquote>\n<p>看到形如下面的东西，说明shell处于交互模式下：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">user@host:~$</span><br></pre></td></tr></table></figure>\n<p>接着，便可以输入一系列 Linux 命令，比如 <code>ls</code>，<code>grep</code>，<code>cd</code>，<code>mkdir</code>，<code>rm</code> 等等。</p>\n<h4 id=\"非交互模式\"><a href=\"#非交互模式\" class=\"headerlink\" title=\"非交互模式\"></a>非交互模式</h4><blockquote>\n<p>简单来说，你可以将 shell 的非交互模式理解为执行 shell 脚本。</p>\n</blockquote>\n<p>在非交互模式下，shell 从文件或者管道中读取命令并执行。</p>\n<p>当 shell 解释器执行完文件中的最后一个命令，shell 进程终止，并回到父进程。</p>\n<p>可以使用下面的命令让shell以非交互模式运行：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sh /path/to/script.sh</span><br><span class=\"line\">bash /path/to/script.sh</span><br></pre></td></tr></table></figure>\n<p>上面的例子中，<code>script.sh</code>是一个包含shell解释器可以识别并执行的命令的普通文本文件，<code>sh</code>和<code>bash</code>是shell解释器程序。你可以使用任何喜欢的编辑器创建<code>script.sh</code>（vim，nano，Sublime Text, Atom等等）。</p>\n<p>除此之外，你还可以通过<code>chmod</code>命令给文件添加可执行的权限，来直接执行脚本文件：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chmod +x /path/to/script.sh <span class=\"comment\">#使脚本具有执行权限</span></span><br><span class=\"line\">/path/to/test.sh</span><br></pre></td></tr></table></figure>\n<p>这种方式要求脚本文件的第一行必须指明运行该脚本的程序，比如：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"Hello, world!\"</span></span><br></pre></td></tr></table></figure>\n<p>上面的例子中，我们使用了一个很有用的命令<code>echo</code>来输出字符串到屏幕上。</p>\n<h2 id=\"Shell-编程\"><a href=\"#Shell-编程\" class=\"headerlink\" title=\"Shell 编程\"></a>Shell 编程</h2><blockquote>\n<p>由于 bash 是 Linux 标准默认的 shell，可以说  bash 是 shell 编程的基础。</p>\n<p>所以，下面将全部基于 bash 来讲解 shell 编程。</p>\n<p>此外，本篇章主要介绍的是 shell 编程的语法，对于 linux 指令不做任何介绍。</p>\n</blockquote>\n<h3 id=\"解释器\"><a href=\"#解释器\" class=\"headerlink\" title=\"解释器\"></a>解释器</h3><p>前面虽然两次提到了<code>#!</code> ，但是本着重要的事情说三遍的精神，这里再强调一遍：</p>\n<p>在 shell 脚本，<code>#!</code> 告诉系统其后路径所指定的程序即是解释此脚本文件的 Shell 解释器。<code>#!</code> 被称作<a href=\"https://zh.wikipedia.org/wiki/Shebang\" target=\"_blank\" rel=\"noopener\">shebang（也称为 Hashbang ）</a>。</p>\n<p><code>#!</code> 决定了脚本可以像一个独立的可执行文件一样执行，而不用在终端之前输入<code>sh</code>, <code>bash</code>, <code>python</code>, <code>php</code>等。</p>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 以下两种方式都可以指定 shell 解释器为 bash，第二种方式更好</span></span><br><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"><span class=\"meta\">#!/usr/bin/env bash</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"注释\"><a href=\"#注释\" class=\"headerlink\" title=\"注释\"></a>注释</h3><p>shell 语法支持注释。注释是特殊的语句，会被 shell 解释器忽略。它们以 <code>#</code> 开头，到行尾结束。</p>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"><span class=\"comment\">### This script will print your username.</span></span><br><span class=\"line\">whoami</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><strong>Tip</strong>: 用注释来说明你的脚本是干什么的，以及为什么这样写。</p>\n</blockquote>\n<h3 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h3><p>跟许多程序设计语言一样，你可以在 bash 中创建变量。</p>\n<p>Bash 中没有数据类型，bash 中的变量可以保存一个数字、一个字符、一个字符串等等。同时无需提前声明变量，给变量赋值会直接创建变量。</p>\n<p>你可以创建三种变量：<strong>局部变量</strong>，<strong>环境变量</strong>以及作为<strong>位置参数</strong>的变量。</p>\n<h4 id=\"局部变量\"><a href=\"#局部变量\" class=\"headerlink\" title=\"局部变量\"></a>局部变量</h4><blockquote>\n<p><strong>局部变量</strong>是仅在某个脚本内部有效的变量。它们不能被其他的程序和脚本访问。</p>\n<p>局部变量可以<strong>用 <code>=</code> 声明</strong>（作为一种约定，变量名、<code>=</code>、变量的值之间<strong>不应该</strong>有空格），其值可以<strong>用<code>$</code> 访问</strong>到。</p>\n</blockquote>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">username=<span class=\"string\">\"zhangpeng\"</span>  <span class=\"comment\">### 声明变量</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$username</span>          <span class=\"comment\">### 输出变量的值</span></span><br><span class=\"line\"><span class=\"built_in\">unset</span> username          <span class=\"comment\">### 删除变量</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>可以<strong>用 <code>local</code> 关键字声明属于某个函数的局部变量</strong>。这样声明的变量会在函数结束时消失。</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">local</span> local_var=<span class=\"string\">\"I'm a local value\"</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"环境变量\"><a href=\"#环境变量\" class=\"headerlink\" title=\"环境变量\"></a>环境变量</h4><blockquote>\n<p><strong>环境变量</strong>是对当前 shell 会话内所有的程序或脚本都可见的变量。</p>\n<p>创建它们跟创建局部变量类似，但使用的是 <code>export</code> 关键字。</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">export</span> global_var=<span class=\"string\">\"I'm a global value\"</span></span><br></pre></td></tr></table></figure>\n<p>常见的环境变量：</p>\n<table>\n<thead>\n<tr>\n<th>变量</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>$HOME</code></td>\n<td>当前用户的用户目录</td>\n</tr>\n<tr>\n<td><code>$PATH</code></td>\n<td>用分号分隔的目录列表，shell会到这些目录中查找命令</td>\n</tr>\n<tr>\n<td><code>$PWD</code></td>\n<td>当前工作目录</td>\n</tr>\n<tr>\n<td><code>$RANDOM</code></td>\n<td>0到32767之间的整数</td>\n</tr>\n<tr>\n<td><code>$UID</code></td>\n<td>数值类型，当前用户的用户ID</td>\n</tr>\n<tr>\n<td><code>$PS1</code></td>\n<td>主要系统输入提示符</td>\n</tr>\n<tr>\n<td><code>$PS2</code></td>\n<td>次要系统输入提示符</td>\n</tr>\n</tbody>\n</table>\n<p><a href=\"http://tldp.org/LDP/Bash-Beginners-Guide/html/sect_03_02.html###sect_03_02_04\" target=\"_blank\" rel=\"noopener\">这里</a> 有一张更全面的 Bash 环境变量列表。</p>\n<h4 id=\"位置参数\"><a href=\"#位置参数\" class=\"headerlink\" title=\"位置参数\"></a>位置参数</h4><blockquote>\n<p><strong>位置参数</strong>是在调用一个函数并传给它参数时创建的变量。</p>\n</blockquote>\n<p>位置参数变量表：</p>\n<table>\n<thead>\n<tr>\n<th>变量</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>$0</code></td>\n<td>脚本名称</td>\n</tr>\n<tr>\n<td><code>$1 … $9</code></td>\n<td>第1个到第9个参数列表</td>\n</tr>\n<tr>\n<td><code>${10} … ${N}</code></td>\n<td>第10个到N个参数列表</td>\n</tr>\n<tr>\n<td><code>$*</code> or <code>$@</code></td>\n<td>除了<code>$0</code>外的所有位置参数</td>\n</tr>\n<tr>\n<td><code>$#</code></td>\n<td>不包括<code>$0</code>在内的位置参数的个数</td>\n</tr>\n<tr>\n<td><code>$FUNCNAME</code></td>\n<td>函数名称（仅在函数内部有值）</td>\n</tr>\n</tbody>\n</table>\n<p><strong>示例：</strong></p>\n<p>在下面的例子中，位置参数为：<code>$0=&#39;./script.sh&#39;</code>，<code>$1=&#39;foo&#39;</code>，<code>$2=&#39;bar&#39;</code>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ./script.sh foo bar</span><br></pre></td></tr></table></figure>\n<p>变量可以有<strong>默认值</strong>。我们可以用如下语法来指定默认值：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">### 如果变量为空，赋给他们默认值</span></span><br><span class=\"line\">: <span class=\"variable\">$&#123;VAR:='default'&#125;</span></span><br><span class=\"line\">: <span class=\"variable\">$&#123;1:='first'&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"\\$1 : \"</span> <span class=\"variable\">$1</span></span><br><span class=\"line\">: <span class=\"variable\">$&#123;2:='second'&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"\\$2 : \"</span> <span class=\"variable\">$2</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">### 或者</span></span><br><span class=\"line\">FOO=<span class=\"variable\">$&#123;FOO:-'default'&#125;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"Shell扩展\"><a href=\"#Shell扩展\" class=\"headerlink\" title=\"Shell扩展\"></a>Shell扩展</h3><p><em>扩展</em> 发生在一行命令被分成一个个的 <em>记号（tokens）</em> 之后。换言之，扩展是一种执行数学运算的机制，还可以用来保存命令的执行结果，等等。</p>\n<p>感兴趣的话可以阅读<a href=\"https://www.gnu.org/software/bash/manual/bash.html###Shell-Expansions\" target=\"_blank\" rel=\"noopener\">关于shell扩展的更多细节</a>。</p>\n<h4 id=\"大括号扩展\"><a href=\"#大括号扩展\" class=\"headerlink\" title=\"大括号扩展\"></a>大括号扩展</h4><p>大括号扩展让生成任意的字符串成为可能。它跟 <em>文件名扩展</em> 很类似，举个例子：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> beg&#123;i,a,u&#125;n <span class=\"comment\">### begin began begun</span></span><br></pre></td></tr></table></figure>\n<p>大括号扩展还可以用来创建一个可被循环迭代的区间。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> &#123;0..5&#125; <span class=\"comment\">### 0 1 2 3 4 5</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> &#123;00..8..2&#125; <span class=\"comment\">### 00 02 04 06 08</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"命令置换\"><a href=\"#命令置换\" class=\"headerlink\" title=\"命令置换\"></a>命令置换</h4><p>命令置换允许我们对一个命令求值，并将其值置换到另一个命令或者变量赋值表达式中。当一个命令被<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">```bash</span><br><span class=\"line\">now=`date +%T`</span><br><span class=\"line\">### or</span><br><span class=\"line\">now=$(date +%T)</span><br><span class=\"line\"></span><br><span class=\"line\">echo $now ### 19:08:26</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"算数扩展\"><a href=\"#算数扩展\" class=\"headerlink\" title=\"算数扩展\"></a>算数扩展</h4><p>在bash中，执行算数运算是非常方便的。算数表达式必须包在<code>$(( ))</code>中。算数扩展的格式为：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">result=$(( ((10 + 5*3) - 7) / 2 ))</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$result</span> <span class=\"comment\">### 9</span></span><br></pre></td></tr></table></figure>\n<p>在算数表达式中，使用变量无需带上<code>$</code>前缀：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x=4</span><br><span class=\"line\">y=7</span><br><span class=\"line\"><span class=\"built_in\">echo</span> $(( x + y ))     <span class=\"comment\">### 11</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> $(( ++x + y++ )) <span class=\"comment\">### 12</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> $(( x + y ))     <span class=\"comment\">### 13</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"单引号和双引号\"><a href=\"#单引号和双引号\" class=\"headerlink\" title=\"单引号和双引号\"></a>单引号和双引号</h4><p>单引号和双引号之间有很重要的区别。在双引号中，变量引用或者命令置换是会被展开的。在单引号中是不会的。举个例子：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"Your home: <span class=\"variable\">$HOME</span>\"</span> <span class=\"comment\">### Your home: /Users/&lt;username&gt;</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'Your home: $HOME'</span> <span class=\"comment\">### Your home: $HOME</span></span><br></pre></td></tr></table></figure>\n<p>当局部变量和环境变量包含空格时，它们在引号中的扩展要格外注意。随便举个例子，假如我们用<code>echo</code>来输出用户的输入：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">INPUT=<span class=\"string\">\"A string  with   strange    whitespace.\"</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$INPUT</span>   <span class=\"comment\">### A string with strange whitespace.</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"<span class=\"variable\">$INPUT</span>\"</span> <span class=\"comment\">### A string  with   strange    whitespace.</span></span><br></pre></td></tr></table></figure>\n<p>调用第一个<code>echo</code>时给了它5个单独的参数 —— <code>$INPUT</code> 被分成了单独的词，<code>echo</code>在每个词之间打印了一个空格。第二种情况，调用<code>echo</code>时只给了它一个参数（整个$INPUT的值，包括其中的空格）。</p>\n<p>来看一个更严肃的例子：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FILE=<span class=\"string\">\"Favorite Things.txt\"</span></span><br><span class=\"line\">cat <span class=\"variable\">$FILE</span>   <span class=\"comment\">### 尝试输出两个文件: `Favorite` 和 `Things.txt`</span></span><br><span class=\"line\">cat <span class=\"string\">\"<span class=\"variable\">$FILE</span>\"</span> <span class=\"comment\">### 输出一个文件: `Favorite Things.txt`</span></span><br></pre></td></tr></table></figure>\n<p>尽管这个问题可以通过把FILE重命名成<code>Favorite-Things.txt</code>来解决，但是，假如这个值来自某个环境变量，来自一个位置参数，或者来自其它命令（<code>find</code>, <code>cat</code>, 等等）呢。因此，如果输入 <em>可能</em> 包含空格，务必要用引号把表达式包起来。</p>\n<h3 id=\"数组\"><a href=\"#数组\" class=\"headerlink\" title=\"数组\"></a>数组</h3><p>跟其它程序设计语言一样，bash中的数组变量给了你引用多个值的能力。在bash中，数组下标也是从0开始，也就是说，第一个元素的下标是0。</p>\n<p>跟数组打交道时，要注意一个特殊的环境变量<code>IFS</code>。<strong>IFS</strong>，全称 <strong>Input Field Separator</strong>，保存了数组中元素的分隔符。它的默认值是一个空格<code>IFS=&#39; &#39;</code>。</p>\n<h4 id=\"创建数组\"><a href=\"#创建数组\" class=\"headerlink\" title=\"创建数组\"></a>创建数组</h4><p>在 bash 中有好几种方法创建一个数组</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">array[0] = val</span><br><span class=\"line\">array[1] = val</span><br><span class=\"line\">array[2] = val</span><br><span class=\"line\">array=([2]=val [0]=val [1]=val)</span><br><span class=\"line\">array=(val val val)</span><br></pre></td></tr></table></figure>\n<h4 id=\"获取数组元素\"><a href=\"#获取数组元素\" class=\"headerlink\" title=\"获取数组元素\"></a>获取数组元素</h4><ul>\n<li><strong>获取数组的单个元素：</strong></li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$&#123;array[1]&#125;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><strong>获取数组的所有元素：</strong></li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$&#123;array[*]&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$&#123;array[@]&#125;</span></span><br></pre></td></tr></table></figure>\n<p>上面两行有很重要（也很微妙）的区别，假设某数组元素中包含空格：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">colors[0]=Red</span><br><span class=\"line\">colors[1]=<span class=\"string\">\"Dark Green\"</span></span><br><span class=\"line\">colors[2]=Blue</span><br></pre></td></tr></table></figure>\n<p>为了将数组中每个元素单独一行输出，我们用内建的<code>printf</code>命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">printf</span> <span class=\"string\">\"+ %s\\n\"</span> <span class=\"variable\">$&#123;colors[*]&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 输出：</span></span><br><span class=\"line\"><span class=\"comment\"># + Red</span></span><br><span class=\"line\"><span class=\"comment\"># + Dark</span></span><br><span class=\"line\"><span class=\"comment\"># + Green</span></span><br><span class=\"line\"><span class=\"comment\"># + Blue</span></span><br></pre></td></tr></table></figure>\n<p>为什么<code>Desert</code>和<code>fig</code>各占了一行？尝试用引号包起来：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">printf</span> <span class=\"string\">\"+ %s\\n\"</span> <span class=\"string\">\"<span class=\"variable\">$&#123;colors[*]&#125;</span>\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 输出：</span></span><br><span class=\"line\"><span class=\"comment\"># + Red Dark Green Blue</span></span><br></pre></td></tr></table></figure>\n<p>现在所有的元素都跑去了一行 —— 这不是我们想要的！为了解决这个痛点，<code>${colors[@]}</code>闪亮登场：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">printf</span> <span class=\"string\">\"+ %s\\n\"</span> <span class=\"string\">\"<span class=\"variable\">$&#123;colors[@]&#125;</span>\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 输出：</span></span><br><span class=\"line\">+ Red</span><br><span class=\"line\">+ Dark Green</span><br><span class=\"line\">+ Blue</span><br></pre></td></tr></table></figure>\n<p>在引号内，<code>${colors[@]}</code>将数组中的每个元素扩展为一个单独的参数；数组元素中的空格得以保留。</p>\n<ul>\n<li><strong>访问数组的部分元素：</strong></li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$&#123;array[@]:0:2&#125;</span></span><br></pre></td></tr></table></figure>\n<p>在上面的例子中，<code>${array[@]}</code> 扩展为整个数组，<code>:0:2</code>取出了数组中从0开始，长度为2的元素。</p>\n<h4 id=\"获取数组长度\"><a href=\"#获取数组长度\" class=\"headerlink\" title=\"获取数组长度\"></a>获取数组长度</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$&#123;#array[*]&#125;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"向数组中添加元素\"><a href=\"#向数组中添加元素\" class=\"headerlink\" title=\"向数组中添加元素\"></a>向数组中添加元素</h4><p>向数组中添加元素也非常简单：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">colors=(Yellow <span class=\"string\">\"<span class=\"variable\">$&#123;colors[@]&#125;</span>\"</span> Pink Black)</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$&#123;colors[@]&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 输出：</span></span><br><span class=\"line\"><span class=\"comment\"># Yellow Red Dark Green Blue Pink Black</span></span><br></pre></td></tr></table></figure>\n<p>上面的例子中，<code>${colors[@]}</code> 扩展为整个数组，并被置换到复合赋值语句中，接着，对数组<code>colors</code>的赋值覆盖了它原来的值。</p>\n<h4 id=\"从数组中删除元素\"><a href=\"#从数组中删除元素\" class=\"headerlink\" title=\"从数组中删除元素\"></a>从数组中删除元素</h4><p>用<code>unset</code>命令来从数组中删除一个元素：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">unset</span> colors[0]</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$&#123;colors[@]&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 输出：</span></span><br><span class=\"line\"><span class=\"comment\"># Red Dark Green Blue Pink Black</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"运算符\"><a href=\"#运算符\" class=\"headerlink\" title=\"运算符\"></a>运算符</h3><h4 id=\"算术运算符\"><a href=\"#算术运算符\" class=\"headerlink\" title=\"算术运算符\"></a>算术运算符</h4><p>下表列出了常用的算术运算符，假定变量 a 为 10，变量 b 为 20：</p>\n<table>\n<thead>\n<tr>\n<th>运算符</th>\n<th>说明</th>\n<th>举例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>+</td>\n<td>加法</td>\n<td><code>expr $a + $b</code> 结果为 30。</td>\n</tr>\n<tr>\n<td>-</td>\n<td>减法</td>\n<td><code>expr $a - $b</code> 结果为 -10。</td>\n</tr>\n<tr>\n<td>*</td>\n<td>乘法</td>\n<td><code>expr $a \\* $b</code> 结果为  200。</td>\n</tr>\n<tr>\n<td>/</td>\n<td>除法</td>\n<td><code>expr $b / $a</code> 结果为 2。</td>\n</tr>\n<tr>\n<td>%</td>\n<td>取余</td>\n<td><code>expr $b % $a</code> 结果为 0。</td>\n</tr>\n<tr>\n<td>=</td>\n<td>赋值</td>\n<td><code>a=$b</code> 将把变量 b 的值赋给 a。</td>\n</tr>\n<tr>\n<td>==</td>\n<td>相等。用于比较两个数字，相同则返回 true。</td>\n<td><code>[ $a == $b ]</code> 返回 false。</td>\n</tr>\n<tr>\n<td>!=</td>\n<td>不相等。用于比较两个数字，不相同则返回 true。</td>\n<td><code>[ $a != $b ]</code> 返回 true。</td>\n</tr>\n</tbody>\n</table>\n<p><strong>注意：</strong>条件表达式要放在方括号之间，并且要有空格，例如: <strong>[$a==$b]</strong> 是错误的，必须写成 <strong>[ $a == $b ]</strong>。</p>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a=10</span><br><span class=\"line\">b=20</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"a=<span class=\"variable\">$a</span>, b=<span class=\"variable\">$b</span>\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">val=`expr <span class=\"variable\">$a</span> + <span class=\"variable\">$b</span>`</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"a + b : <span class=\"variable\">$val</span>\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">val=`expr <span class=\"variable\">$a</span> - <span class=\"variable\">$b</span>`</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"a - b : <span class=\"variable\">$val</span>\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">val=`expr <span class=\"variable\">$a</span> \\* <span class=\"variable\">$b</span>`</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"a * b : <span class=\"variable\">$val</span>\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">val=`expr <span class=\"variable\">$b</span> / <span class=\"variable\">$a</span>`</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"b / a : <span class=\"variable\">$val</span>\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">val=`expr <span class=\"variable\">$b</span> % <span class=\"variable\">$a</span>`</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"b % a : <span class=\"variable\">$val</span>\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ <span class=\"variable\">$a</span> == <span class=\"variable\">$b</span> ]</span><br><span class=\"line\"><span class=\"keyword\">then</span></span><br><span class=\"line\">  <span class=\"built_in\">echo</span> <span class=\"string\">\"a 等于 b\"</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ <span class=\"variable\">$a</span> != <span class=\"variable\">$b</span> ]</span><br><span class=\"line\"><span class=\"keyword\">then</span></span><br><span class=\"line\">  <span class=\"built_in\">echo</span> <span class=\"string\">\"a 不等于 b\"</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"关系运算符\"><a href=\"#关系运算符\" class=\"headerlink\" title=\"关系运算符\"></a>关系运算符</h4><p>关系运算符只支持数字，不支持字符串，除非字符串的值是数字。</p>\n<p>下表列出了常用的关系运算符，假定变量 a 为 10，变量 b 为 20：</p>\n<table>\n<thead>\n<tr>\n<th>运算符</th>\n<th>说明</th>\n<th>举例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>-eq</td>\n<td>检测两个数是否相等，相等返回 true。</td>\n<td><code>[ $a -eq $b ]</code>返回 false。</td>\n</tr>\n<tr>\n<td>-ne</td>\n<td>检测两个数是否相等，不相等返回 true。</td>\n<td><code>[ $a -ne $b ]</code> 返回 true。</td>\n</tr>\n<tr>\n<td>-gt</td>\n<td>检测左边的数是否大于右边的，如果是，则返回 true。</td>\n<td><code>[ $a -gt $b ]</code> 返回 false。</td>\n</tr>\n<tr>\n<td>-lt</td>\n<td>检测左边的数是否小于右边的，如果是，则返回 true。</td>\n<td><code>[ $a -lt $b ]</code> 返回 true。</td>\n</tr>\n<tr>\n<td>-ge</td>\n<td>检测左边的数是否大于等于右边的，如果是，则返回 true。</td>\n<td><code>[ $a -ge $b ]</code> 返回 false。</td>\n</tr>\n<tr>\n<td>-le</td>\n<td>检测左边的数是否小于等于右边的，如果是，则返回 true。</td>\n<td><code>[ $a -le $b ]</code>返回 true。</td>\n</tr>\n</tbody>\n</table>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a=10</span><br><span class=\"line\">b=20</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ <span class=\"variable\">$a</span> -eq <span class=\"variable\">$b</span> ]</span><br><span class=\"line\"><span class=\"keyword\">then</span></span><br><span class=\"line\">   <span class=\"built_in\">echo</span> <span class=\"string\">\"<span class=\"variable\">$a</span> -eq <span class=\"variable\">$b</span> : a 等于 b\"</span></span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">   <span class=\"built_in\">echo</span> <span class=\"string\">\"<span class=\"variable\">$a</span> -eq <span class=\"variable\">$b</span>: a 不等于 b\"</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ <span class=\"variable\">$a</span> -ne <span class=\"variable\">$b</span> ]</span><br><span class=\"line\"><span class=\"keyword\">then</span></span><br><span class=\"line\">   <span class=\"built_in\">echo</span> <span class=\"string\">\"<span class=\"variable\">$a</span> -ne <span class=\"variable\">$b</span>: a 不等于 b\"</span></span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">   <span class=\"built_in\">echo</span> <span class=\"string\">\"<span class=\"variable\">$a</span> -ne <span class=\"variable\">$b</span> : a 等于 b\"</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ <span class=\"variable\">$a</span> -gt <span class=\"variable\">$b</span> ]</span><br><span class=\"line\"><span class=\"keyword\">then</span></span><br><span class=\"line\">   <span class=\"built_in\">echo</span> <span class=\"string\">\"<span class=\"variable\">$a</span> -gt <span class=\"variable\">$b</span>: a 大于 b\"</span></span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">   <span class=\"built_in\">echo</span> <span class=\"string\">\"<span class=\"variable\">$a</span> -gt <span class=\"variable\">$b</span>: a 不大于 b\"</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ <span class=\"variable\">$a</span> -lt <span class=\"variable\">$b</span> ]</span><br><span class=\"line\"><span class=\"keyword\">then</span></span><br><span class=\"line\">   <span class=\"built_in\">echo</span> <span class=\"string\">\"<span class=\"variable\">$a</span> -lt <span class=\"variable\">$b</span>: a 小于 b\"</span></span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">   <span class=\"built_in\">echo</span> <span class=\"string\">\"<span class=\"variable\">$a</span> -lt <span class=\"variable\">$b</span>: a 不小于 b\"</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ <span class=\"variable\">$a</span> -ge <span class=\"variable\">$b</span> ]</span><br><span class=\"line\"><span class=\"keyword\">then</span></span><br><span class=\"line\">   <span class=\"built_in\">echo</span> <span class=\"string\">\"<span class=\"variable\">$a</span> -ge <span class=\"variable\">$b</span>: a 大于或等于 b\"</span></span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">   <span class=\"built_in\">echo</span> <span class=\"string\">\"<span class=\"variable\">$a</span> -ge <span class=\"variable\">$b</span>: a 小于 b\"</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ <span class=\"variable\">$a</span> -le <span class=\"variable\">$b</span> ]</span><br><span class=\"line\"><span class=\"keyword\">then</span></span><br><span class=\"line\">   <span class=\"built_in\">echo</span> <span class=\"string\">\"<span class=\"variable\">$a</span> -le <span class=\"variable\">$b</span>: a 小于或等于 b\"</span></span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">   <span class=\"built_in\">echo</span> <span class=\"string\">\"<span class=\"variable\">$a</span> -le <span class=\"variable\">$b</span>: a 大于 b\"</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"布尔运算符\"><a href=\"#布尔运算符\" class=\"headerlink\" title=\"布尔运算符\"></a>布尔运算符</h4><p>下表列出了常用的布尔运算符，假定变量 a 为 10，变量 b 为 20：</p>\n<table>\n<thead>\n<tr>\n<th>运算符</th>\n<th>说明</th>\n<th>举例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>!</td>\n<td>非运算，表达式为 true 则返回 false，否则返回 true。</td>\n<td><code>[ ! false ]</code> 返回 true。</td>\n</tr>\n<tr>\n<td>-o</td>\n<td>或运算，有一个表达式为 true 则返回 true。</td>\n<td><code>[ $a -lt 20 -o $b -gt 100 ]</code> 返回 true。</td>\n</tr>\n<tr>\n<td>-a</td>\n<td>与运算，两个表达式都为 true 才返回 true。</td>\n<td><code>[ $a -lt 20 -a $b -gt 100 ]</code> 返回 false。</td>\n</tr>\n</tbody>\n</table>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a=10</span><br><span class=\"line\">b=20</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"a=<span class=\"variable\">$a</span>, b=<span class=\"variable\">$b</span>\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ <span class=\"variable\">$a</span> != <span class=\"variable\">$b</span> ]</span><br><span class=\"line\"><span class=\"keyword\">then</span></span><br><span class=\"line\">   <span class=\"built_in\">echo</span> <span class=\"string\">\"<span class=\"variable\">$a</span> != <span class=\"variable\">$b</span> : a 不等于 b\"</span></span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">   <span class=\"built_in\">echo</span> <span class=\"string\">\"<span class=\"variable\">$a</span> != <span class=\"variable\">$b</span>: a 等于 b\"</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ <span class=\"variable\">$a</span> -lt 100 -a <span class=\"variable\">$b</span> -gt 15 ]</span><br><span class=\"line\"><span class=\"keyword\">then</span></span><br><span class=\"line\">   <span class=\"built_in\">echo</span> <span class=\"string\">\"<span class=\"variable\">$a</span> 小于 100 且 <span class=\"variable\">$b</span> 大于 15 : 返回 true\"</span></span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">   <span class=\"built_in\">echo</span> <span class=\"string\">\"<span class=\"variable\">$a</span> 小于 100 且 <span class=\"variable\">$b</span> 大于 15 : 返回 false\"</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ <span class=\"variable\">$a</span> -lt 100 -o <span class=\"variable\">$b</span> -gt 100 ]</span><br><span class=\"line\"><span class=\"keyword\">then</span></span><br><span class=\"line\">   <span class=\"built_in\">echo</span> <span class=\"string\">\"<span class=\"variable\">$a</span> 小于 100 或 <span class=\"variable\">$b</span> 大于 100 : 返回 true\"</span></span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">   <span class=\"built_in\">echo</span> <span class=\"string\">\"<span class=\"variable\">$a</span> 小于 100 或 <span class=\"variable\">$b</span> 大于 100 : 返回 false\"</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ <span class=\"variable\">$a</span> -lt 5 -o <span class=\"variable\">$b</span> -gt 100 ]</span><br><span class=\"line\"><span class=\"keyword\">then</span></span><br><span class=\"line\">   <span class=\"built_in\">echo</span> <span class=\"string\">\"<span class=\"variable\">$a</span> 小于 5 或 <span class=\"variable\">$b</span> 大于 100 : 返回 true\"</span></span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">   <span class=\"built_in\">echo</span> <span class=\"string\">\"<span class=\"variable\">$a</span> 小于 5 或 <span class=\"variable\">$b</span> 大于 100 : 返回 false\"</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"逻辑运算符\"><a href=\"#逻辑运算符\" class=\"headerlink\" title=\"逻辑运算符\"></a>逻辑运算符</h4><p>以下介绍 Shell 的逻辑运算符，假定变量 a 为 10，变量 b 为 20:</p>\n<table>\n<thead>\n<tr>\n<th>运算符</th>\n<th>说明</th>\n<th>举例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>&amp;&amp;</td>\n<td>逻辑的 AND</td>\n<td><code>[[ $a -lt 100 &amp;&amp; $b -gt 100 ]]</code> 返回 false</td>\n</tr>\n<tr>\n<td>\\</td>\n<td>\\</td>\n<td></td>\n<td>逻辑的 OR</td>\n<td>`[[ $a -lt 100</td>\n<td></td>\n<td>$b -gt 100 ]]` 返回 true</td>\n</tr>\n</tbody>\n</table>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a=10</span><br><span class=\"line\">b=20</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"a=<span class=\"variable\">$a</span>, b=<span class=\"variable\">$b</span>\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> [[ <span class=\"variable\">$a</span> -lt 100 &amp;&amp; <span class=\"variable\">$b</span> -gt 100 ]]</span><br><span class=\"line\"><span class=\"keyword\">then</span></span><br><span class=\"line\">   <span class=\"built_in\">echo</span> <span class=\"string\">\"返回 true\"</span></span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">   <span class=\"built_in\">echo</span> <span class=\"string\">\"返回 false\"</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> [[ <span class=\"variable\">$a</span> -lt 100 || <span class=\"variable\">$b</span> -gt 100 ]]</span><br><span class=\"line\"><span class=\"keyword\">then</span></span><br><span class=\"line\">   <span class=\"built_in\">echo</span> <span class=\"string\">\"返回 true\"</span></span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">   <span class=\"built_in\">echo</span> <span class=\"string\">\"返回 false\"</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"字符串运算符\"><a href=\"#字符串运算符\" class=\"headerlink\" title=\"字符串运算符\"></a>字符串运算符</h4><p>下表列出了常用的字符串运算符，假定变量 a 为 “abc”，变量 b 为 “efg”：</p>\n<table>\n<thead>\n<tr>\n<th>运算符</th>\n<th>说明</th>\n<th>举例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>=</td>\n<td>检测两个字符串是否相等，相等返回 true。</td>\n<td><code>[ $a = $b ]</code> 返回 false。</td>\n</tr>\n<tr>\n<td>!=</td>\n<td>检测两个字符串是否相等，不相等返回 true。</td>\n<td><code>[ $a != $b ]</code> 返回 true。</td>\n</tr>\n<tr>\n<td>-z</td>\n<td>检测字符串长度是否为0，为0返回 true。</td>\n<td><code>[ -z $a ]</code> 返回 false。</td>\n</tr>\n<tr>\n<td>-n</td>\n<td>检测字符串长度是否为0，不为0返回 true。</td>\n<td><code>[ -n $a ]</code> 返回 true。</td>\n</tr>\n<tr>\n<td>str</td>\n<td>检测字符串是否为空，不为空返回 true。</td>\n<td><code>[ $a ]</code> 返回 true。</td>\n</tr>\n</tbody>\n</table>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a=<span class=\"string\">\"abc\"</span></span><br><span class=\"line\">b=<span class=\"string\">\"efg\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"a=<span class=\"variable\">$a</span>, b=<span class=\"variable\">$b</span>\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ <span class=\"variable\">$a</span> = <span class=\"variable\">$b</span> ]</span><br><span class=\"line\"><span class=\"keyword\">then</span></span><br><span class=\"line\">   <span class=\"built_in\">echo</span> <span class=\"string\">\"<span class=\"variable\">$a</span> = <span class=\"variable\">$b</span> : a 等于 b\"</span></span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">   <span class=\"built_in\">echo</span> <span class=\"string\">\"<span class=\"variable\">$a</span> = <span class=\"variable\">$b</span>: a 不等于 b\"</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ <span class=\"variable\">$a</span> != <span class=\"variable\">$b</span> ]</span><br><span class=\"line\"><span class=\"keyword\">then</span></span><br><span class=\"line\">   <span class=\"built_in\">echo</span> <span class=\"string\">\"<span class=\"variable\">$a</span> != <span class=\"variable\">$b</span> : a 不等于 b\"</span></span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">   <span class=\"built_in\">echo</span> <span class=\"string\">\"<span class=\"variable\">$a</span> != <span class=\"variable\">$b</span>: a 等于 b\"</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ -z <span class=\"variable\">$a</span> ]</span><br><span class=\"line\"><span class=\"keyword\">then</span></span><br><span class=\"line\">   <span class=\"built_in\">echo</span> <span class=\"string\">\"-z <span class=\"variable\">$a</span> : 字符串长度为 0\"</span></span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">   <span class=\"built_in\">echo</span> <span class=\"string\">\"-z <span class=\"variable\">$a</span> : 字符串长度不为 0\"</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ -n <span class=\"variable\">$a</span> ]</span><br><span class=\"line\"><span class=\"keyword\">then</span></span><br><span class=\"line\">   <span class=\"built_in\">echo</span> <span class=\"string\">\"-n <span class=\"variable\">$a</span> : 字符串长度不为 0\"</span></span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">   <span class=\"built_in\">echo</span> <span class=\"string\">\"-n <span class=\"variable\">$a</span> : 字符串长度为 0\"</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ <span class=\"variable\">$a</span> ]</span><br><span class=\"line\"><span class=\"keyword\">then</span></span><br><span class=\"line\">   <span class=\"built_in\">echo</span> <span class=\"string\">\"<span class=\"variable\">$a</span> : 字符串不为空\"</span></span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">   <span class=\"built_in\">echo</span> <span class=\"string\">\"<span class=\"variable\">$a</span> : 字符串为空\"</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"文件测试运算符\"><a href=\"#文件测试运算符\" class=\"headerlink\" title=\"文件测试运算符\"></a>文件测试运算符</h4><p>文件测试运算符用于检测 Unix 文件的各种属性。</p>\n<p>属性检测描述如下：</p>\n<table>\n<thead>\n<tr>\n<th>操作符</th>\n<th>说明</th>\n<th>举例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>-b file</td>\n<td>检测文件是否是块设备文件，如果是，则返回 true。</td>\n<td><code>[ -b $file ]</code> 返回 false。</td>\n</tr>\n<tr>\n<td>-c file</td>\n<td>检测文件是否是字符设备文件，如果是，则返回 true。</td>\n<td><code>[ -c $file ]</code> 返回 false。</td>\n</tr>\n<tr>\n<td>-d file</td>\n<td>检测文件是否是目录，如果是，则返回 true。</td>\n<td><code>[ -d $file ]</code> 返回 false。</td>\n</tr>\n<tr>\n<td>-f file</td>\n<td>检测文件是否是普通文件（既不是目录，也不是设备文件），如果是，则返回 true。</td>\n<td><code>[ -f $file ]</code> 返回 true。</td>\n</tr>\n<tr>\n<td>-g file</td>\n<td>检测文件是否设置了 SGID 位，如果是，则返回 true。</td>\n<td><code>[ -g $file ]</code> 返回 false。</td>\n</tr>\n<tr>\n<td>-k file</td>\n<td>检测文件是否设置了粘着位(Sticky Bit)，如果是，则返回 true。</td>\n<td><code>[ -k $file ]</code>返回 false。</td>\n</tr>\n<tr>\n<td>-p file</td>\n<td>检测文件是否是有名管道，如果是，则返回 true。</td>\n<td><code>[ -p $file ]</code> 返回 false。</td>\n</tr>\n<tr>\n<td>-u file</td>\n<td>检测文件是否设置了 SUID 位，如果是，则返回 true。</td>\n<td><code>[ -u $file ]</code> 返回 false。</td>\n</tr>\n<tr>\n<td>-r file</td>\n<td>检测文件是否可读，如果是，则返回 true。</td>\n<td><code>[ -r $file ]</code> 返回 true。</td>\n</tr>\n<tr>\n<td>-w file</td>\n<td>检测文件是否可写，如果是，则返回 true。</td>\n<td><code>[ -w $file ]</code> 返回 true。</td>\n</tr>\n<tr>\n<td>-x file</td>\n<td>检测文件是否可执行，如果是，则返回 true。</td>\n<td><code>[ -x $file ]</code> 返回 true。</td>\n</tr>\n<tr>\n<td>-s file</td>\n<td>检测文件是否为空（文件大小是否大于0），不为空返回 true。</td>\n<td><code>[ -s $file ]</code> 返回 true。</td>\n</tr>\n<tr>\n<td>-e file</td>\n<td>检测文件（包括目录）是否存在，如果是，则返回 true。</td>\n<td><code>[ -e $file ]</code> 返回 true。</td>\n</tr>\n</tbody>\n</table>\n<p><strong>示例：</strong></p>\n<p>变量 file 表示文件”/var/www/runoob/test.sh”，它的大小为100字节，具有 rwx 权限。下面的代码，将检测该文件的各种属性：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">file=<span class=\"string\">\"./operatorDemo.sh\"</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ -r <span class=\"variable\">$file</span> ]</span><br><span class=\"line\"><span class=\"keyword\">then</span></span><br><span class=\"line\">   <span class=\"built_in\">echo</span> <span class=\"string\">\"文件可读\"</span></span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">   <span class=\"built_in\">echo</span> <span class=\"string\">\"文件不可读\"</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ -w <span class=\"variable\">$file</span> ]</span><br><span class=\"line\"><span class=\"keyword\">then</span></span><br><span class=\"line\">   <span class=\"built_in\">echo</span> <span class=\"string\">\"文件可写\"</span></span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">   <span class=\"built_in\">echo</span> <span class=\"string\">\"文件不可写\"</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ -x <span class=\"variable\">$file</span> ]</span><br><span class=\"line\"><span class=\"keyword\">then</span></span><br><span class=\"line\">   <span class=\"built_in\">echo</span> <span class=\"string\">\"文件可执行\"</span></span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">   <span class=\"built_in\">echo</span> <span class=\"string\">\"文件不可执行\"</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ -f <span class=\"variable\">$file</span> ]</span><br><span class=\"line\"><span class=\"keyword\">then</span></span><br><span class=\"line\">   <span class=\"built_in\">echo</span> <span class=\"string\">\"文件为普通文件\"</span></span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">   <span class=\"built_in\">echo</span> <span class=\"string\">\"文件为特殊文件\"</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ -d <span class=\"variable\">$file</span> ]</span><br><span class=\"line\"><span class=\"keyword\">then</span></span><br><span class=\"line\">   <span class=\"built_in\">echo</span> <span class=\"string\">\"文件是个目录\"</span></span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">   <span class=\"built_in\">echo</span> <span class=\"string\">\"文件不是个目录\"</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ -s <span class=\"variable\">$file</span> ]</span><br><span class=\"line\"><span class=\"keyword\">then</span></span><br><span class=\"line\">   <span class=\"built_in\">echo</span> <span class=\"string\">\"文件不为空\"</span></span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">   <span class=\"built_in\">echo</span> <span class=\"string\">\"文件为空\"</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ -e <span class=\"variable\">$file</span> ]</span><br><span class=\"line\"><span class=\"keyword\">then</span></span><br><span class=\"line\">   <span class=\"built_in\">echo</span> <span class=\"string\">\"文件存在\"</span></span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">   <span class=\"built_in\">echo</span> <span class=\"string\">\"文件不存在\"</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"语句\"><a href=\"#语句\" class=\"headerlink\" title=\"语句\"></a>语句</h3><h4 id=\"条件语句\"><a href=\"#条件语句\" class=\"headerlink\" title=\"条件语句\"></a>条件语句</h4><p>跟其它程序设计语言一样，Bash中的条件语句让我们可以决定一个操作是否被执行。结果取决于一个包在<code>[[ ]]</code>里的表达式。</p>\n<p>条件表达式可以包含<code>&amp;&amp;</code>和<code>||</code>运算符，分别对应 <em>与</em> 和 <em>或</em> 。除此之外还有很多有用的<a href=\"https://github.com/denysdovhan/bash-handbook/blob/master/translations/zh-CN/README.md#%E5%9F%BA%E5%85%83%E5%92%8C%E7%BB%84%E5%90%88%E8%A1%A8%E8%BE%BE%E5%BC%8F\" target=\"_blank\" rel=\"noopener\">表达式</a>。</p>\n<p>共有两个不同的条件表达式：<code>if</code>和<code>case</code>。</p>\n<h5 id=\"基元和组合表达式\"><a href=\"#基元和组合表达式\" class=\"headerlink\" title=\"基元和组合表达式\"></a>基元和组合表达式</h5><p>由<code>[[ ]]</code>（<code>sh</code>中是<code>[ ]</code>）包起来的表达式被称作 <strong>检测命令</strong> 或 <strong>基元</strong>。这些表达式帮助我们检测一个条件的结果。在下面的表里，为了兼容<code>sh</code>，我们用的是<code>[ ]</code>。这里可以找到有关<a href=\"http://serverfault.com/a/52050\" target=\"_blank\" rel=\"noopener\">bash中单双中括号区别</a>的答案。</p>\n<h5 id=\"使用if\"><a href=\"#使用if\" class=\"headerlink\" title=\"使用if\"></a>使用<code>if</code></h5><p><code>if</code>在使用上跟其它语言相同。如果中括号里的表达式为真，那么<code>then</code>和<code>fi</code>之间的代码会被执行。<code>fi</code>标志着条件代码块的结束。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">### 写成一行</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> [[ 1 -eq 1 ]]; <span class=\"keyword\">then</span> <span class=\"built_in\">echo</span> <span class=\"string\">\"true\"</span>; <span class=\"keyword\">fi</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">### 写成多行</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> [[ 1 -eq 1 ]]; <span class=\"keyword\">then</span></span><br><span class=\"line\">  <span class=\"built_in\">echo</span> <span class=\"string\">\"true\"</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br></pre></td></tr></table></figure>\n<p>同样，我们可以使用<code>if..else</code>语句，例如：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">### 写成一行</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> [[ 2 -ne 1 ]]; <span class=\"keyword\">then</span> <span class=\"built_in\">echo</span> <span class=\"string\">\"true\"</span>; <span class=\"keyword\">else</span> <span class=\"built_in\">echo</span> <span class=\"string\">\"false\"</span>; <span class=\"keyword\">fi</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">### 写成多行</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> [[ 2 -ne 1 ]]; <span class=\"keyword\">then</span></span><br><span class=\"line\">  <span class=\"built_in\">echo</span> <span class=\"string\">\"true\"</span></span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">  <span class=\"built_in\">echo</span> <span class=\"string\">\"false\"</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br></pre></td></tr></table></figure>\n<p>有些时候，<code>if..else</code>不能满足我们的要求。别忘了<code>if..elif..else</code>，使用起来也很方便。</p>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> [[ `uname` == <span class=\"string\">\"Adam\"</span> ]]; <span class=\"keyword\">then</span></span><br><span class=\"line\">  <span class=\"built_in\">echo</span> <span class=\"string\">\"Do not eat an apple!\"</span></span><br><span class=\"line\"><span class=\"keyword\">elif</span> [[ `uname` == <span class=\"string\">\"Eva\"</span> ]]; <span class=\"keyword\">then</span></span><br><span class=\"line\">  <span class=\"built_in\">echo</span> <span class=\"string\">\"Do not take an apple!\"</span></span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">  <span class=\"built_in\">echo</span> <span class=\"string\">\"Apples are delicious!\"</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"使用case\"><a href=\"#使用case\" class=\"headerlink\" title=\"使用case\"></a>使用<code>case</code></h5><p>如果你需要面对很多情况，分别要采取不同的措施，那么使用<code>case</code>会比嵌套的<code>if</code>更有用。使用<code>case</code>来解决复杂的条件判断，看起来像下面这样：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"input param: \"</span> <span class=\"variable\">$1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"variable\">$1</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">  <span class=\"string\">\"jpg\"</span> | <span class=\"string\">\"jpeg\"</span>)</span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"It's image with jpeg extension.\"</span></span><br><span class=\"line\">  ;;</span><br><span class=\"line\">  <span class=\"string\">\"png\"</span>)</span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"It's image with png extension.\"</span></span><br><span class=\"line\">  ;;</span><br><span class=\"line\">  <span class=\"string\">\"gif\"</span>)</span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"Oh, it's a giphy!\"</span></span><br><span class=\"line\">  ;;</span><br><span class=\"line\">  *)</span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"Woops! It's not image!\"</span></span><br><span class=\"line\">  ;;</span><br><span class=\"line\"><span class=\"keyword\">esac</span></span><br></pre></td></tr></table></figure>\n<p>每种情况都是匹配了某个模式的表达式。<code>|</code>用来分割多个模式，<code>)</code>用来结束一个模式序列。第一个匹配上的模式对应的命令将会被执行。<code>*</code>代表任何不匹配以上给定模式的模式。命令块儿之间要用<code>;;</code>分隔。</p>\n<h4 id=\"循环语句\"><a href=\"#循环语句\" class=\"headerlink\" title=\"循环语句\"></a>循环语句</h4><p>循环其实不足为奇。跟其它程序设计语言一样，bash中的循环也是只要控制条件为真就一直迭代执行的代码块。</p>\n<p>Bash中有四种循环：<code>for</code>，<code>while</code>，<code>until</code>和<code>select</code>。</p>\n<h5 id=\"for循环\"><a href=\"#for循环\" class=\"headerlink\" title=\"for循环\"></a><code>for</code>循环</h5><p><code>for</code>与它在C语言中的姊妹非常像。看起来是这样：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> arg <span class=\"keyword\">in</span> elem1 elem2 ... elemN</span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\">  <span class=\"comment\">### 语句</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure>\n<p>在每次循环的过程中，<code>arg</code>依次被赋值为从<code>elem1</code>到<code>elemN</code>。这些值还可以是通配符或者<a href=\"https://github.com/denysdovhan/bash-handbook/blob/master/translations/zh-CN/README.md#%E5%A4%A7%E6%8B%AC%E5%8F%B7%E6%89%A9%E5%B1%95\" target=\"_blank\" rel=\"noopener\">大括号扩展</a>。</p>\n<p>当然，我们还可以把<code>for</code>循环写在一行，但这要求<code>do</code>之前要有一个分号，就像下面这样：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> &#123;1..5&#125;; <span class=\"keyword\">do</span> <span class=\"built_in\">echo</span> <span class=\"variable\">$i</span>; <span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure>\n<p>还有，如果你觉得<code>for..in..do</code>对你来说有点奇怪，那么你也可以像C语言那样使用<code>for</code>，比如：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (( i = 0; i &lt; 10; i++ )); <span class=\"keyword\">do</span></span><br><span class=\"line\">  <span class=\"built_in\">echo</span> <span class=\"variable\">$i</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure>\n<p>当我们想对一个目录下的所有文件做同样的操作时，<code>for</code>就很方便了。举个例子，如果我们想把所有的<code>.bash</code>文件移动到<code>script</code>文件夹中，并给它们可执行权限，我们的脚本可以这样写：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> FILE <span class=\"keyword\">in</span> <span class=\"variable\">$HOME</span>/*.bash; <span class=\"keyword\">do</span></span><br><span class=\"line\">  mv <span class=\"string\">\"<span class=\"variable\">$FILE</span>\"</span> <span class=\"string\">\"<span class=\"variable\">$&#123;HOME&#125;</span>/scripts\"</span></span><br><span class=\"line\">  chmod +x <span class=\"string\">\"<span class=\"variable\">$&#123;HOME&#125;</span>/scripts/<span class=\"variable\">$&#123;FILE&#125;</span>\"</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"while循环\"><a href=\"#while循环\" class=\"headerlink\" title=\"while循环\"></a><code>while</code>循环</h5><p><code>while</code>循环检测一个条件，只要这个条件为 <em>真</em>，就执行一段命令。被检测的条件跟<code>if..then</code>中使用的<a href=\"https://github.com/denysdovhan/bash-handbook/blob/master/translations/zh-CN/README.md#%E5%9F%BA%E5%85%83%E5%92%8C%E7%BB%84%E5%90%88%E8%A1%A8%E8%BE%BE%E5%BC%8F\" target=\"_blank\" rel=\"noopener\">基元</a>并无二异。因此一个<code>while</code>循环看起来会是这样：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span> [[ condition ]]</span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\">  <span class=\"comment\">### 语句</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure>\n<p>跟<code>for</code>循环一样，如果我们把<code>do</code>和被检测的条件写到一行，那么必须要在<code>do</code>之前加一个分号。</p>\n<p>比如下面这个例子：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">### 0到9之间每个数的平方</span></span><br><span class=\"line\">x=0</span><br><span class=\"line\"><span class=\"keyword\">while</span> [[ <span class=\"variable\">$x</span> -lt 10 ]]; <span class=\"keyword\">do</span> <span class=\"comment\">### x小于10</span></span><br><span class=\"line\">  <span class=\"built_in\">echo</span> $(( x * x ))</span><br><span class=\"line\">  x=$(( x + 1 )) <span class=\"comment\">### x加1</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"until循环\"><a href=\"#until循环\" class=\"headerlink\" title=\"until循环\"></a><code>until</code>循环</h5><p><code>until</code>循环跟<code>while</code>循环正好相反。它跟<code>while</code>一样也需要检测一个测试条件，但不同的是，只要该条件为 <em>假</em> 就一直执行循环：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">until [[ condition ]]; <span class=\"keyword\">do</span></span><br><span class=\"line\">  <span class=\"comment\">### 语句</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"select循环\"><a href=\"#select循环\" class=\"headerlink\" title=\"select循环\"></a><code>select</code>循环</h5><p><code>select</code>循环帮助我们组织一个用户菜单。它的语法几乎跟<code>for</code>循环一致：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select answer <span class=\"keyword\">in</span> elem1 elem2 ... elemN</span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\">  <span class=\"comment\">### 语句</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure>\n<p><code>select</code>会打印<code>elem1..elemN</code>以及它们的序列号到屏幕上，之后会提示用户输入。通常看到的是<code>$?</code>（<code>PS3</code>变量）。用户的选择结果会被保存到<code>answer</code>中。如果<code>answer</code>是一个在<code>1..N</code>之间的数字，那么<code>语句</code>会被执行，紧接着会进行下一次迭代 —— 如果不想这样的话我们可以使用<code>break</code>语句。</p>\n<p>一个可能的实例可能会是这样：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"></span><br><span class=\"line\">PS3=<span class=\"string\">\"Choose the package manager: \"</span></span><br><span class=\"line\">select ITEM <span class=\"keyword\">in</span> bower npm gem pip</span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\">  <span class=\"built_in\">echo</span> -n <span class=\"string\">\"Enter the package name: \"</span> &amp;&amp; <span class=\"built_in\">read</span> PACKAGE</span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"variable\">$ITEM</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">    bower) bower install <span class=\"variable\">$PACKAGE</span> ;;</span><br><span class=\"line\">    npm)   npm   install <span class=\"variable\">$PACKAGE</span> ;;</span><br><span class=\"line\">    gem)   gem   install <span class=\"variable\">$PACKAGE</span> ;;</span><br><span class=\"line\">    pip)   pip   install <span class=\"variable\">$PACKAGE</span> ;;</span><br><span class=\"line\">  <span class=\"keyword\">esac</span></span><br><span class=\"line\">  <span class=\"built_in\">break</span> <span class=\"comment\">### 避免无限循环</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure>\n<p>这个例子，先询问用户他想使用什么包管理器。接着，又询问了想安装什么包，最后执行安装操作。</p>\n<p>运行这个脚本，会得到如下输出：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ./my_script</span><br><span class=\"line\">1) bower</span><br><span class=\"line\">2) npm</span><br><span class=\"line\">3) gem</span><br><span class=\"line\">4) pip</span><br><span class=\"line\">Choose the package manager: 2</span><br><span class=\"line\">Enter the package name: bash-handbook</span><br><span class=\"line\">&lt;installing bash-handbook&gt;</span><br></pre></td></tr></table></figure>\n<h5 id=\"break-和-continue\"><a href=\"#break-和-continue\" class=\"headerlink\" title=\"break 和 continue\"></a>break 和 continue</h5><p>如果想提前结束一个循环或跳过某次循环执行，可以使用 shell 的<code>break</code>和<code>continue</code>语句来实现。它们可以在任何循环中使用。</p>\n<blockquote>\n<p><code>break</code>语句用来提前结束当前循环。</p>\n<p><code>continue</code>语句用来跳过某次迭代。</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (( i = 0; i &lt; 10; i++ )); <span class=\"keyword\">do</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> [[ $(( i % 2 )) -eq 0 ]]; <span class=\"keyword\">then</span> <span class=\"built_in\">continue</span>; <span class=\"keyword\">fi</span></span><br><span class=\"line\">  <span class=\"built_in\">echo</span> <span class=\"variable\">$i</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure>\n<p>运行上面的例子，会打印出所有0到9之间的奇数。</p>\n<h3 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h3><p>在脚本中，我们可以定义并调用函数。跟其它程序设计语言类似，函数是一个代码块，但有所不同。</p>\n<p>bash 中，函数是一个命令序列，这个命令序列组织在某个名字下面，即 <em>函数名</em> 。调用函数跟其它语言一样，写下函数名字，函数就会被 <em>调用</em> 。</p>\n<p>我们可以这样声明函数：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"title\">my_func</span></span> () &#123;</span><br><span class=\"line\">  <span class=\"comment\">### 语句</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">my_func <span class=\"comment\">### 调用 my_func</span></span><br></pre></td></tr></table></figure>\n<p>我们必须在调用前声明函数。</p>\n<p>函数可以接收参数并返回结果 —— 返回值。参数，在函数内部，跟<a href=\"https://github.com/denysdovhan/bash-handbook/blob/master/translations/zh-CN/README.md#%E9%9D%9E%E4%BA%A4%E4%BA%92%E6%A8%A1%E5%BC%8F\" target=\"_blank\" rel=\"noopener\">非交互式</a>下的脚本参数处理方式相同 —— 使用<a href=\"https://github.com/denysdovhan/bash-handbook/blob/master/translations/zh-CN/README.md#%E4%BD%8D%E7%BD%AE%E5%8F%82%E6%95%B0\" target=\"_blank\" rel=\"noopener\">位置参数</a>。返回值可以使用<code>return</code>命令 <em>返回</em> 。</p>\n<p>下面这个函数接收一个名字参数，返回<code>0</code>，表示成功执行。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">### 带参数的函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">greeting</span></span> () &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> [[ -n <span class=\"variable\">$1</span> ]]; <span class=\"keyword\">then</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"Hello, <span class=\"variable\">$1</span>!\"</span></span><br><span class=\"line\">  <span class=\"keyword\">else</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"Hello, unknown!\"</span></span><br><span class=\"line\">  <span class=\"keyword\">fi</span></span><br><span class=\"line\">  <span class=\"built_in\">return</span> 0</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">greeting Denys  <span class=\"comment\">### Hello, Denys!</span></span><br><span class=\"line\">greeting        <span class=\"comment\">### Hello, stranger!</span></span><br></pre></td></tr></table></figure>\n<p>我们之前已经介绍过<a href=\"https://github.com/denysdovhan/bash-handbook/blob/master/translations/zh-CN/README.md#%E8%BF%94%E5%9B%9E%E5%80%BC\" target=\"_blank\" rel=\"noopener\">返回值</a>。不带任何参数的<code>return</code>会返回最后一个执行的命令的返回值。上面的例子，<code>return 0</code>会返回一个成功表示执行的值，<code>0</code>。</p>\n<p>另外，还有几个特殊字符用来处理参数：</p>\n<table>\n<thead>\n<tr>\n<th>参数处理</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>$#</td>\n<td>传递到脚本的参数个数</td>\n</tr>\n<tr>\n<td>$*</td>\n<td>以一个单字符串显示所有向脚本传递的参数</td>\n</tr>\n<tr>\n<td>$$</td>\n<td>脚本运行的当前进程ID号</td>\n</tr>\n<tr>\n<td>$!</td>\n<td>后台运行的最后一个进程的ID号</td>\n</tr>\n<tr>\n<td>$@</td>\n<td>与$*相同，但是使用时加引号，并在引号中返回每个参数。</td>\n</tr>\n<tr>\n<td>$-</td>\n<td>显示Shell使用的当前选项，与set命令功能相同。</td>\n</tr>\n<tr>\n<td>$?</td>\n<td>显示最后命令的退出状态。0表示没有错误，其他任何值表明有错误。</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"流和重定向\"><a href=\"#流和重定向\" class=\"headerlink\" title=\"流和重定向\"></a>流和重定向</h3><p>Bash有很强大的工具来处理程序之间的协同工作。使用流，我们能将一个程序的输出发送到另一个程序或文件，因此，我们能方便地记录日志或做一些其它我们想做的事。</p>\n<p>管道给了我们创建传送带的机会，控制程序的执行成为可能。</p>\n<p>学习如何使用这些强大的、高级的工具是非常非常重要的。</p>\n<h4 id=\"输入、输出流\"><a href=\"#输入、输出流\" class=\"headerlink\" title=\"输入、输出流\"></a>输入、输出流</h4><p>Bash接收输入，并以字符序列或 <strong>字符流</strong> 的形式产生输出。这些流能被重定向到文件或另一个流中。</p>\n<p>有三个文件描述符：</p>\n<table>\n<thead>\n<tr>\n<th>代码</th>\n<th>描述符</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>0</code></td>\n<td><code>stdin</code></td>\n<td>标准输入</td>\n</tr>\n<tr>\n<td><code>1</code></td>\n<td><code>stdout</code></td>\n<td>标准输出</td>\n</tr>\n<tr>\n<td><code>2</code></td>\n<td><code>stderr</code></td>\n<td>标准错误输出</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"重定向\"><a href=\"#重定向\" class=\"headerlink\" title=\"重定向\"></a>重定向</h4><p>重定向让我们可以控制一个命令的输入来自哪里，输出结果到什么地方。这些运算符在控制流的重定向时会被用到：</p>\n<table>\n<thead>\n<tr>\n<th>Operator</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>&gt;</code></td>\n<td>重定向输出</td>\n</tr>\n<tr>\n<td><code>&amp;&gt;</code></td>\n<td>重定向输出和错误输出</td>\n</tr>\n<tr>\n<td><code>&amp;&gt;&gt;</code></td>\n<td>以附加的形式重定向输出和错误输出</td>\n</tr>\n<tr>\n<td><code>&lt;</code></td>\n<td>重定向输入</td>\n</tr>\n<tr>\n<td><code>&lt;&lt;</code></td>\n<td><a href=\"http://tldp.org/LDP/abs/html/here-docs.html\" target=\"_blank\" rel=\"noopener\">Here文档</a> 语法</td>\n</tr>\n<tr>\n<td><code>&lt;&lt;&lt;</code></td>\n<td><a href=\"http://www.tldp.org/LDP/abs/html/x17837.html\" target=\"_blank\" rel=\"noopener\">Here字符串</a></td>\n</tr>\n</tbody>\n</table>\n<p>以下是一些使用重定向的例子：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">### ls的结果将会被写到list.txt中</span></span><br><span class=\"line\">ls -l &gt; list.txt</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">### 将输出附加到list.txt中</span></span><br><span class=\"line\">ls -a &gt;&gt; list.txt</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">### 所有的错误信息会被写到errors.txt中</span></span><br><span class=\"line\">grep da * 2&gt; errors.txt</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">### 从errors.txt中读取输入</span></span><br><span class=\"line\">less &lt; errors.txt</span><br></pre></td></tr></table></figure>\n<h4 id=\"dev-null-文件\"><a href=\"#dev-null-文件\" class=\"headerlink\" title=\"/dev/null 文件\"></a><code>/dev/null</code> 文件</h4><p>如果希望执行某个命令，但又不希望在屏幕上显示输出结果，那么可以将输出重定向到 /dev/null：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ command &gt; /dev/null</span><br></pre></td></tr></table></figure>\n<p>/dev/null 是一个特殊的文件，写入到它的内容都会被丢弃；如果尝试从该文件读取内容，那么什么也读不到。但是 /dev/null 文件非常有用，将命令的输出重定向到它，会起到”禁止输出”的效果。</p>\n<p>如果希望屏蔽 stdout 和 stderr，可以这样写：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ command &gt; /dev/null 2&gt;&amp;1</span><br></pre></td></tr></table></figure>\n<h3 id=\"Debugging\"><a href=\"#Debugging\" class=\"headerlink\" title=\"Debugging\"></a>Debugging</h3><p>shell提供了用于debugging脚本的工具。如果我们想以debug模式运行某脚本，可以在其shebang中使用一个特殊的选项：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/bash options</span><br></pre></td></tr></table></figure>\n<p>options是一些可以改变shell行为的选项。下表是一些可能对你有用的选项：</p>\n<table>\n<thead>\n<tr>\n<th>Short</th>\n<th>Name</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>-f</code></td>\n<td>noglob</td>\n<td>禁止文件名展开（globbing）</td>\n</tr>\n<tr>\n<td><code>-i</code></td>\n<td>interactive</td>\n<td>让脚本以 <em>交互</em> 模式运行</td>\n</tr>\n<tr>\n<td><code>-n</code></td>\n<td>noexec</td>\n<td>读取命令，但不执行（语法检查）</td>\n</tr>\n<tr>\n<td><code>-t</code></td>\n<td>—</td>\n<td>执行完第一条命令后退出</td>\n</tr>\n<tr>\n<td><code>-v</code></td>\n<td>verbose</td>\n<td>在执行每条命令前，向<code>stderr</code>输出该命令</td>\n</tr>\n<tr>\n<td><code>-x</code></td>\n<td>xtrace</td>\n<td>在执行每条命令前，向<code>stderr</code>输出该命令以及该命令的扩展参数</td>\n</tr>\n</tbody>\n</table>\n<p>举个例子，如果我们在脚本中指定了<code>-x</code>例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/bash -x</span><br><span class=\"line\"></span><br><span class=\"line\">for (( i = 0; i &lt; 3; i++ )); do</span><br><span class=\"line\">  echo $i</span><br><span class=\"line\">done</span><br></pre></td></tr></table></figure>\n<p>这会向<code>stdout</code>打印出变量的值和一些其它有用的信息：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ./my_script</span><br><span class=\"line\">+ (( i = 0 ))</span><br><span class=\"line\">+ (( i &lt; 3 ))</span><br><span class=\"line\">+ <span class=\"built_in\">echo</span> 0</span><br><span class=\"line\">0</span><br><span class=\"line\">+ (( i++  ))</span><br><span class=\"line\">+ (( i &lt; 3 ))</span><br><span class=\"line\">+ <span class=\"built_in\">echo</span> 1</span><br><span class=\"line\">1</span><br><span class=\"line\">+ (( i++  ))</span><br><span class=\"line\">+ (( i &lt; 3 ))</span><br><span class=\"line\">+ <span class=\"built_in\">echo</span> 2</span><br><span class=\"line\">2</span><br><span class=\"line\">+ (( i++  ))</span><br><span class=\"line\">+ (( i &lt; 3 ))</span><br></pre></td></tr></table></figure>\n<p>有时我们需要debug脚本的一部分。这种情况下，使用<code>set</code>命令会很方便。这个命令可以启用或禁用选项。使用<code>-</code>启用选项，<code>+</code>禁用选项：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"xtrace is turned off\"</span></span><br><span class=\"line\"><span class=\"built_in\">set</span> -x</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"xtrace is enabled\"</span></span><br><span class=\"line\"><span class=\"built_in\">set</span> +x</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"xtrace is turned off again\"</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"资料\"><a href=\"#资料\" class=\"headerlink\" title=\"资料\"></a>资料</h3><ul>\n<li><a href=\"https://github.com/alebcay/awesome-shell\" target=\"_blank\" rel=\"noopener\">awesome-shell</a>，shell 资源列表</li>\n<li><a href=\"https://github.com/awesome-lists/awesome-bash\" target=\"_blank\" rel=\"noopener\">awesome-bash</a>，bash 资源列表</li>\n<li><a href=\"https://github.com/denysdovhan/bash-handbook\" target=\"_blank\" rel=\"noopener\">bash-handbook</a></li>\n<li><a href=\"https://github.com/vuuihc/bash-guide\" target=\"_blank\" rel=\"noopener\">bash-guide</a> ，bash 基本用法指南</li>\n<li><a href=\"https://github.com/Bash-it/bash-it\" target=\"_blank\" rel=\"noopener\">bash-it</a>，为你日常使用，开发以及维护 shell 脚本和自定义命令提供了一个可靠的框架</li>\n<li><a href=\"http://dotfiles.github.io/\" target=\"_blank\" rel=\"noopener\">dotfiles.github.io</a>，上面有bash和其它shell的各种dotfiles集合以及shell框架的链接</li>\n<li><a href=\"http://www.runoob.com/linux/linux-shell.html\" target=\"_blank\" rel=\"noopener\">Runoob Shell 教程</a></li>\n</ul>\n<p>最后，Stack Overflow上 <a href=\"https://stackoverflow.com/questions/tagged/bash\" target=\"_blank\" rel=\"noopener\">bash 标签下</a>有很多你可以学习的问题，当你遇到问题时，也是一个提问的好地方。</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"Shell-快速指南\"><a href=\"#Shell-快速指南\" class=\"headerlink\" title=\"Shell 快速指南\"></a>Shell 快速指南</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">███████╗██╗  ██╗███████╗██╗     ██╗                           </span><br><span class=\"line\">██╔════╝██║  ██║██╔════╝██║     ██║                           </span><br><span class=\"line\">███████╗███████║█████╗  ██║     ██║                           </span><br><span class=\"line\">╚════██║██╔══██║██╔══╝  ██║     ██║                           </span><br><span class=\"line\">███████║██║  ██║███████╗███████╗███████╗</span><br></pre></td></tr></table></figure>","more":"<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><h3 id=\"什么是-shell\"><a href=\"#什么是-shell\" class=\"headerlink\" title=\"什么是 shell\"></a>什么是 shell</h3><p>Shell 是一个用 C 语言编写的程序，它是用户使用 Linux 的桥梁。</p>\n<p>Shell 既是一种命令语言，又是一种程序设计语言。</p>\n<p>Shell 是指一种应用程序，这个应用程序提供了一个界面，用户通过这个界面访问 Linux 内核的服务。</p>\n<p>Ken Thompson 的 sh 是第一种 Unix Shell，Windows Explorer 是一个典型的图形界面 Shell。</p>\n<h3 id=\"什么是-shell-脚本\"><a href=\"#什么是-shell-脚本\" class=\"headerlink\" title=\"什么是 shell 脚本\"></a>什么是 shell 脚本</h3><p>Shell 脚本（shell script），是一种为 shell 编写的脚本程序，一般文件后缀为 <code>.sh</code>。</p>\n<p>业界所说的 shell 通常都是指 shell 脚本，但 shell 和 shell script 是两个不同的概念。</p>\n<h3 id=\"Shell-环境\"><a href=\"#Shell-环境\" class=\"headerlink\" title=\"Shell 环境\"></a>Shell 环境</h3><p>Shell 编程跟 java、php 编程一样，只要有一个能编写代码的文本编辑器和一个能解释执行的脚本解释器就可以了。</p>\n<p>Shell 的解释器种类众多，常见的有：</p>\n<ul>\n<li><a href=\"https://www.gnu.org/software/bash/\" target=\"_blank\" rel=\"noopener\">sh</a> - 即 Bourne Shell。sh 是 Unix 标准默认的 shell。</li>\n<li><a href=\"https://www.gnu.org/software/bash/\" target=\"_blank\" rel=\"noopener\">bash</a> - 即 Bourne Again Shell。bash 是 Linux 标准默认的 shell。</li>\n<li><a href=\"https://fishshell.com/\" target=\"_blank\" rel=\"noopener\">fish</a> - 智能和用户友好的命令行 shell。</li>\n<li><a href=\"http://xiki.org/\" target=\"_blank\" rel=\"noopener\">xiki</a> - 使 shell 控制台更友好，更强大。</li>\n<li><a href=\"http://www.zsh.org/\" target=\"_blank\" rel=\"noopener\">zsh</a> - 功能强大的 shell 与脚本语言。</li>\n</ul>\n<h4 id=\"指定脚本解释器\"><a href=\"#指定脚本解释器\" class=\"headerlink\" title=\"指定脚本解释器\"></a>指定脚本解释器</h4><p>在 shell 脚本，<code>#!</code> 告诉系统其后路径所指定的程序即是解释此脚本文件的 Shell 解释器。<code>#!</code> 被称作<a href=\"https://zh.wikipedia.org/wiki/Shebang\" target=\"_blank\" rel=\"noopener\">shebang（也称为 Hashbang ）</a>。</p>\n<p>所以，你应该会在 shell 中，见到诸如以下的注释：</p>\n<ul>\n<li>指定 sh 解释器</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/sh</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>指定 bash 解释器</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><strong>注意</strong></p>\n<p>上面的指定解释器的方式是比较常见的，但有时候，你可能也会看到下面的方式：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; <span class=\"comment\">#!/usr/bin/env bash</span></span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p>这样做的好处是，系统会自动在 <code>PATH</code> 环境变量中查找你指定的程序（本例中的<code>bash</code>）。相比第一种写法，你应该尽量用这种写法，因为程序的路径是不确定的。这样写还有一个好处，操作系统的<code>PATH</code>变量有可能被配置为指向程序的另一个版本。比如，安装完新版本的<code>bash</code>，我们可能将其路径添加到<code>PATH</code>中，来“隐藏”老版本。如果直接用<code>#!/bin/bash</code>，那么系统会选择老版本的<code>bash</code>来执行脚本，如果用<code>#!/usr/bin/env bash</code>，则会使用新版本。</p>\n</blockquote>\n<h3 id=\"模式\"><a href=\"#模式\" class=\"headerlink\" title=\"模式\"></a>模式</h3><p>shell 有交互和非交互两种模式。</p>\n<h4 id=\"交互模式\"><a href=\"#交互模式\" class=\"headerlink\" title=\"交互模式\"></a>交互模式</h4><blockquote>\n<p>简单来说，你可以将 shell 的交互模式理解为执行命令行。</p>\n</blockquote>\n<p>看到形如下面的东西，说明shell处于交互模式下：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">user@host:~$</span><br></pre></td></tr></table></figure>\n<p>接着，便可以输入一系列 Linux 命令，比如 <code>ls</code>，<code>grep</code>，<code>cd</code>，<code>mkdir</code>，<code>rm</code> 等等。</p>\n<h4 id=\"非交互模式\"><a href=\"#非交互模式\" class=\"headerlink\" title=\"非交互模式\"></a>非交互模式</h4><blockquote>\n<p>简单来说，你可以将 shell 的非交互模式理解为执行 shell 脚本。</p>\n</blockquote>\n<p>在非交互模式下，shell 从文件或者管道中读取命令并执行。</p>\n<p>当 shell 解释器执行完文件中的最后一个命令，shell 进程终止，并回到父进程。</p>\n<p>可以使用下面的命令让shell以非交互模式运行：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sh /path/to/script.sh</span><br><span class=\"line\">bash /path/to/script.sh</span><br></pre></td></tr></table></figure>\n<p>上面的例子中，<code>script.sh</code>是一个包含shell解释器可以识别并执行的命令的普通文本文件，<code>sh</code>和<code>bash</code>是shell解释器程序。你可以使用任何喜欢的编辑器创建<code>script.sh</code>（vim，nano，Sublime Text, Atom等等）。</p>\n<p>除此之外，你还可以通过<code>chmod</code>命令给文件添加可执行的权限，来直接执行脚本文件：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chmod +x /path/to/script.sh <span class=\"comment\">#使脚本具有执行权限</span></span><br><span class=\"line\">/path/to/test.sh</span><br></pre></td></tr></table></figure>\n<p>这种方式要求脚本文件的第一行必须指明运行该脚本的程序，比如：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"Hello, world!\"</span></span><br></pre></td></tr></table></figure>\n<p>上面的例子中，我们使用了一个很有用的命令<code>echo</code>来输出字符串到屏幕上。</p>\n<h2 id=\"Shell-编程\"><a href=\"#Shell-编程\" class=\"headerlink\" title=\"Shell 编程\"></a>Shell 编程</h2><blockquote>\n<p>由于 bash 是 Linux 标准默认的 shell，可以说  bash 是 shell 编程的基础。</p>\n<p>所以，下面将全部基于 bash 来讲解 shell 编程。</p>\n<p>此外，本篇章主要介绍的是 shell 编程的语法，对于 linux 指令不做任何介绍。</p>\n</blockquote>\n<h3 id=\"解释器\"><a href=\"#解释器\" class=\"headerlink\" title=\"解释器\"></a>解释器</h3><p>前面虽然两次提到了<code>#!</code> ，但是本着重要的事情说三遍的精神，这里再强调一遍：</p>\n<p>在 shell 脚本，<code>#!</code> 告诉系统其后路径所指定的程序即是解释此脚本文件的 Shell 解释器。<code>#!</code> 被称作<a href=\"https://zh.wikipedia.org/wiki/Shebang\" target=\"_blank\" rel=\"noopener\">shebang（也称为 Hashbang ）</a>。</p>\n<p><code>#!</code> 决定了脚本可以像一个独立的可执行文件一样执行，而不用在终端之前输入<code>sh</code>, <code>bash</code>, <code>python</code>, <code>php</code>等。</p>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 以下两种方式都可以指定 shell 解释器为 bash，第二种方式更好</span></span><br><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"><span class=\"meta\">#!/usr/bin/env bash</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"注释\"><a href=\"#注释\" class=\"headerlink\" title=\"注释\"></a>注释</h3><p>shell 语法支持注释。注释是特殊的语句，会被 shell 解释器忽略。它们以 <code>#</code> 开头，到行尾结束。</p>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"><span class=\"comment\">### This script will print your username.</span></span><br><span class=\"line\">whoami</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><strong>Tip</strong>: 用注释来说明你的脚本是干什么的，以及为什么这样写。</p>\n</blockquote>\n<h3 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h3><p>跟许多程序设计语言一样，你可以在 bash 中创建变量。</p>\n<p>Bash 中没有数据类型，bash 中的变量可以保存一个数字、一个字符、一个字符串等等。同时无需提前声明变量，给变量赋值会直接创建变量。</p>\n<p>你可以创建三种变量：<strong>局部变量</strong>，<strong>环境变量</strong>以及作为<strong>位置参数</strong>的变量。</p>\n<h4 id=\"局部变量\"><a href=\"#局部变量\" class=\"headerlink\" title=\"局部变量\"></a>局部变量</h4><blockquote>\n<p><strong>局部变量</strong>是仅在某个脚本内部有效的变量。它们不能被其他的程序和脚本访问。</p>\n<p>局部变量可以<strong>用 <code>=</code> 声明</strong>（作为一种约定，变量名、<code>=</code>、变量的值之间<strong>不应该</strong>有空格），其值可以<strong>用<code>$</code> 访问</strong>到。</p>\n</blockquote>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">username=<span class=\"string\">\"zhangpeng\"</span>  <span class=\"comment\">### 声明变量</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$username</span>          <span class=\"comment\">### 输出变量的值</span></span><br><span class=\"line\"><span class=\"built_in\">unset</span> username          <span class=\"comment\">### 删除变量</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>可以<strong>用 <code>local</code> 关键字声明属于某个函数的局部变量</strong>。这样声明的变量会在函数结束时消失。</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">local</span> local_var=<span class=\"string\">\"I'm a local value\"</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"环境变量\"><a href=\"#环境变量\" class=\"headerlink\" title=\"环境变量\"></a>环境变量</h4><blockquote>\n<p><strong>环境变量</strong>是对当前 shell 会话内所有的程序或脚本都可见的变量。</p>\n<p>创建它们跟创建局部变量类似，但使用的是 <code>export</code> 关键字。</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">export</span> global_var=<span class=\"string\">\"I'm a global value\"</span></span><br></pre></td></tr></table></figure>\n<p>常见的环境变量：</p>\n<table>\n<thead>\n<tr>\n<th>变量</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>$HOME</code></td>\n<td>当前用户的用户目录</td>\n</tr>\n<tr>\n<td><code>$PATH</code></td>\n<td>用分号分隔的目录列表，shell会到这些目录中查找命令</td>\n</tr>\n<tr>\n<td><code>$PWD</code></td>\n<td>当前工作目录</td>\n</tr>\n<tr>\n<td><code>$RANDOM</code></td>\n<td>0到32767之间的整数</td>\n</tr>\n<tr>\n<td><code>$UID</code></td>\n<td>数值类型，当前用户的用户ID</td>\n</tr>\n<tr>\n<td><code>$PS1</code></td>\n<td>主要系统输入提示符</td>\n</tr>\n<tr>\n<td><code>$PS2</code></td>\n<td>次要系统输入提示符</td>\n</tr>\n</tbody>\n</table>\n<p><a href=\"http://tldp.org/LDP/Bash-Beginners-Guide/html/sect_03_02.html###sect_03_02_04\" target=\"_blank\" rel=\"noopener\">这里</a> 有一张更全面的 Bash 环境变量列表。</p>\n<h4 id=\"位置参数\"><a href=\"#位置参数\" class=\"headerlink\" title=\"位置参数\"></a>位置参数</h4><blockquote>\n<p><strong>位置参数</strong>是在调用一个函数并传给它参数时创建的变量。</p>\n</blockquote>\n<p>位置参数变量表：</p>\n<table>\n<thead>\n<tr>\n<th>变量</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>$0</code></td>\n<td>脚本名称</td>\n</tr>\n<tr>\n<td><code>$1 … $9</code></td>\n<td>第1个到第9个参数列表</td>\n</tr>\n<tr>\n<td><code>${10} … ${N}</code></td>\n<td>第10个到N个参数列表</td>\n</tr>\n<tr>\n<td><code>$*</code> or <code>$@</code></td>\n<td>除了<code>$0</code>外的所有位置参数</td>\n</tr>\n<tr>\n<td><code>$#</code></td>\n<td>不包括<code>$0</code>在内的位置参数的个数</td>\n</tr>\n<tr>\n<td><code>$FUNCNAME</code></td>\n<td>函数名称（仅在函数内部有值）</td>\n</tr>\n</tbody>\n</table>\n<p><strong>示例：</strong></p>\n<p>在下面的例子中，位置参数为：<code>$0=&#39;./script.sh&#39;</code>，<code>$1=&#39;foo&#39;</code>，<code>$2=&#39;bar&#39;</code>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ./script.sh foo bar</span><br></pre></td></tr></table></figure>\n<p>变量可以有<strong>默认值</strong>。我们可以用如下语法来指定默认值：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">### 如果变量为空，赋给他们默认值</span></span><br><span class=\"line\">: <span class=\"variable\">$&#123;VAR:='default'&#125;</span></span><br><span class=\"line\">: <span class=\"variable\">$&#123;1:='first'&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"\\$1 : \"</span> <span class=\"variable\">$1</span></span><br><span class=\"line\">: <span class=\"variable\">$&#123;2:='second'&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"\\$2 : \"</span> <span class=\"variable\">$2</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">### 或者</span></span><br><span class=\"line\">FOO=<span class=\"variable\">$&#123;FOO:-'default'&#125;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"Shell扩展\"><a href=\"#Shell扩展\" class=\"headerlink\" title=\"Shell扩展\"></a>Shell扩展</h3><p><em>扩展</em> 发生在一行命令被分成一个个的 <em>记号（tokens）</em> 之后。换言之，扩展是一种执行数学运算的机制，还可以用来保存命令的执行结果，等等。</p>\n<p>感兴趣的话可以阅读<a href=\"https://www.gnu.org/software/bash/manual/bash.html###Shell-Expansions\" target=\"_blank\" rel=\"noopener\">关于shell扩展的更多细节</a>。</p>\n<h4 id=\"大括号扩展\"><a href=\"#大括号扩展\" class=\"headerlink\" title=\"大括号扩展\"></a>大括号扩展</h4><p>大括号扩展让生成任意的字符串成为可能。它跟 <em>文件名扩展</em> 很类似，举个例子：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> beg&#123;i,a,u&#125;n <span class=\"comment\">### begin began begun</span></span><br></pre></td></tr></table></figure>\n<p>大括号扩展还可以用来创建一个可被循环迭代的区间。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> &#123;0..5&#125; <span class=\"comment\">### 0 1 2 3 4 5</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> &#123;00..8..2&#125; <span class=\"comment\">### 00 02 04 06 08</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"命令置换\"><a href=\"#命令置换\" class=\"headerlink\" title=\"命令置换\"></a>命令置换</h4><p>命令置换允许我们对一个命令求值，并将其值置换到另一个命令或者变量赋值表达式中。当一个命令被<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">```bash</span><br><span class=\"line\">now=`date +%T`</span><br><span class=\"line\">### or</span><br><span class=\"line\">now=$(date +%T)</span><br><span class=\"line\"></span><br><span class=\"line\">echo $now ### 19:08:26</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"算数扩展\"><a href=\"#算数扩展\" class=\"headerlink\" title=\"算数扩展\"></a>算数扩展</h4><p>在bash中，执行算数运算是非常方便的。算数表达式必须包在<code>$(( ))</code>中。算数扩展的格式为：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">result=$(( ((10 + 5*3) - 7) / 2 ))</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$result</span> <span class=\"comment\">### 9</span></span><br></pre></td></tr></table></figure>\n<p>在算数表达式中，使用变量无需带上<code>$</code>前缀：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x=4</span><br><span class=\"line\">y=7</span><br><span class=\"line\"><span class=\"built_in\">echo</span> $(( x + y ))     <span class=\"comment\">### 11</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> $(( ++x + y++ )) <span class=\"comment\">### 12</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> $(( x + y ))     <span class=\"comment\">### 13</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"单引号和双引号\"><a href=\"#单引号和双引号\" class=\"headerlink\" title=\"单引号和双引号\"></a>单引号和双引号</h4><p>单引号和双引号之间有很重要的区别。在双引号中，变量引用或者命令置换是会被展开的。在单引号中是不会的。举个例子：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"Your home: <span class=\"variable\">$HOME</span>\"</span> <span class=\"comment\">### Your home: /Users/&lt;username&gt;</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'Your home: $HOME'</span> <span class=\"comment\">### Your home: $HOME</span></span><br></pre></td></tr></table></figure>\n<p>当局部变量和环境变量包含空格时，它们在引号中的扩展要格外注意。随便举个例子，假如我们用<code>echo</code>来输出用户的输入：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">INPUT=<span class=\"string\">\"A string  with   strange    whitespace.\"</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$INPUT</span>   <span class=\"comment\">### A string with strange whitespace.</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"<span class=\"variable\">$INPUT</span>\"</span> <span class=\"comment\">### A string  with   strange    whitespace.</span></span><br></pre></td></tr></table></figure>\n<p>调用第一个<code>echo</code>时给了它5个单独的参数 —— <code>$INPUT</code> 被分成了单独的词，<code>echo</code>在每个词之间打印了一个空格。第二种情况，调用<code>echo</code>时只给了它一个参数（整个$INPUT的值，包括其中的空格）。</p>\n<p>来看一个更严肃的例子：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FILE=<span class=\"string\">\"Favorite Things.txt\"</span></span><br><span class=\"line\">cat <span class=\"variable\">$FILE</span>   <span class=\"comment\">### 尝试输出两个文件: `Favorite` 和 `Things.txt`</span></span><br><span class=\"line\">cat <span class=\"string\">\"<span class=\"variable\">$FILE</span>\"</span> <span class=\"comment\">### 输出一个文件: `Favorite Things.txt`</span></span><br></pre></td></tr></table></figure>\n<p>尽管这个问题可以通过把FILE重命名成<code>Favorite-Things.txt</code>来解决，但是，假如这个值来自某个环境变量，来自一个位置参数，或者来自其它命令（<code>find</code>, <code>cat</code>, 等等）呢。因此，如果输入 <em>可能</em> 包含空格，务必要用引号把表达式包起来。</p>\n<h3 id=\"数组\"><a href=\"#数组\" class=\"headerlink\" title=\"数组\"></a>数组</h3><p>跟其它程序设计语言一样，bash中的数组变量给了你引用多个值的能力。在bash中，数组下标也是从0开始，也就是说，第一个元素的下标是0。</p>\n<p>跟数组打交道时，要注意一个特殊的环境变量<code>IFS</code>。<strong>IFS</strong>，全称 <strong>Input Field Separator</strong>，保存了数组中元素的分隔符。它的默认值是一个空格<code>IFS=&#39; &#39;</code>。</p>\n<h4 id=\"创建数组\"><a href=\"#创建数组\" class=\"headerlink\" title=\"创建数组\"></a>创建数组</h4><p>在 bash 中有好几种方法创建一个数组</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">array[0] = val</span><br><span class=\"line\">array[1] = val</span><br><span class=\"line\">array[2] = val</span><br><span class=\"line\">array=([2]=val [0]=val [1]=val)</span><br><span class=\"line\">array=(val val val)</span><br></pre></td></tr></table></figure>\n<h4 id=\"获取数组元素\"><a href=\"#获取数组元素\" class=\"headerlink\" title=\"获取数组元素\"></a>获取数组元素</h4><ul>\n<li><strong>获取数组的单个元素：</strong></li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$&#123;array[1]&#125;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><strong>获取数组的所有元素：</strong></li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$&#123;array[*]&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$&#123;array[@]&#125;</span></span><br></pre></td></tr></table></figure>\n<p>上面两行有很重要（也很微妙）的区别，假设某数组元素中包含空格：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">colors[0]=Red</span><br><span class=\"line\">colors[1]=<span class=\"string\">\"Dark Green\"</span></span><br><span class=\"line\">colors[2]=Blue</span><br></pre></td></tr></table></figure>\n<p>为了将数组中每个元素单独一行输出，我们用内建的<code>printf</code>命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">printf</span> <span class=\"string\">\"+ %s\\n\"</span> <span class=\"variable\">$&#123;colors[*]&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 输出：</span></span><br><span class=\"line\"><span class=\"comment\"># + Red</span></span><br><span class=\"line\"><span class=\"comment\"># + Dark</span></span><br><span class=\"line\"><span class=\"comment\"># + Green</span></span><br><span class=\"line\"><span class=\"comment\"># + Blue</span></span><br></pre></td></tr></table></figure>\n<p>为什么<code>Desert</code>和<code>fig</code>各占了一行？尝试用引号包起来：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">printf</span> <span class=\"string\">\"+ %s\\n\"</span> <span class=\"string\">\"<span class=\"variable\">$&#123;colors[*]&#125;</span>\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 输出：</span></span><br><span class=\"line\"><span class=\"comment\"># + Red Dark Green Blue</span></span><br></pre></td></tr></table></figure>\n<p>现在所有的元素都跑去了一行 —— 这不是我们想要的！为了解决这个痛点，<code>${colors[@]}</code>闪亮登场：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">printf</span> <span class=\"string\">\"+ %s\\n\"</span> <span class=\"string\">\"<span class=\"variable\">$&#123;colors[@]&#125;</span>\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 输出：</span></span><br><span class=\"line\">+ Red</span><br><span class=\"line\">+ Dark Green</span><br><span class=\"line\">+ Blue</span><br></pre></td></tr></table></figure>\n<p>在引号内，<code>${colors[@]}</code>将数组中的每个元素扩展为一个单独的参数；数组元素中的空格得以保留。</p>\n<ul>\n<li><strong>访问数组的部分元素：</strong></li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$&#123;array[@]:0:2&#125;</span></span><br></pre></td></tr></table></figure>\n<p>在上面的例子中，<code>${array[@]}</code> 扩展为整个数组，<code>:0:2</code>取出了数组中从0开始，长度为2的元素。</p>\n<h4 id=\"获取数组长度\"><a href=\"#获取数组长度\" class=\"headerlink\" title=\"获取数组长度\"></a>获取数组长度</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$&#123;#array[*]&#125;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"向数组中添加元素\"><a href=\"#向数组中添加元素\" class=\"headerlink\" title=\"向数组中添加元素\"></a>向数组中添加元素</h4><p>向数组中添加元素也非常简单：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">colors=(Yellow <span class=\"string\">\"<span class=\"variable\">$&#123;colors[@]&#125;</span>\"</span> Pink Black)</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$&#123;colors[@]&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 输出：</span></span><br><span class=\"line\"><span class=\"comment\"># Yellow Red Dark Green Blue Pink Black</span></span><br></pre></td></tr></table></figure>\n<p>上面的例子中，<code>${colors[@]}</code> 扩展为整个数组，并被置换到复合赋值语句中，接着，对数组<code>colors</code>的赋值覆盖了它原来的值。</p>\n<h4 id=\"从数组中删除元素\"><a href=\"#从数组中删除元素\" class=\"headerlink\" title=\"从数组中删除元素\"></a>从数组中删除元素</h4><p>用<code>unset</code>命令来从数组中删除一个元素：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">unset</span> colors[0]</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$&#123;colors[@]&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 输出：</span></span><br><span class=\"line\"><span class=\"comment\"># Red Dark Green Blue Pink Black</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"运算符\"><a href=\"#运算符\" class=\"headerlink\" title=\"运算符\"></a>运算符</h3><h4 id=\"算术运算符\"><a href=\"#算术运算符\" class=\"headerlink\" title=\"算术运算符\"></a>算术运算符</h4><p>下表列出了常用的算术运算符，假定变量 a 为 10，变量 b 为 20：</p>\n<table>\n<thead>\n<tr>\n<th>运算符</th>\n<th>说明</th>\n<th>举例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>+</td>\n<td>加法</td>\n<td><code>expr $a + $b</code> 结果为 30。</td>\n</tr>\n<tr>\n<td>-</td>\n<td>减法</td>\n<td><code>expr $a - $b</code> 结果为 -10。</td>\n</tr>\n<tr>\n<td>*</td>\n<td>乘法</td>\n<td><code>expr $a \\* $b</code> 结果为  200。</td>\n</tr>\n<tr>\n<td>/</td>\n<td>除法</td>\n<td><code>expr $b / $a</code> 结果为 2。</td>\n</tr>\n<tr>\n<td>%</td>\n<td>取余</td>\n<td><code>expr $b % $a</code> 结果为 0。</td>\n</tr>\n<tr>\n<td>=</td>\n<td>赋值</td>\n<td><code>a=$b</code> 将把变量 b 的值赋给 a。</td>\n</tr>\n<tr>\n<td>==</td>\n<td>相等。用于比较两个数字，相同则返回 true。</td>\n<td><code>[ $a == $b ]</code> 返回 false。</td>\n</tr>\n<tr>\n<td>!=</td>\n<td>不相等。用于比较两个数字，不相同则返回 true。</td>\n<td><code>[ $a != $b ]</code> 返回 true。</td>\n</tr>\n</tbody>\n</table>\n<p><strong>注意：</strong>条件表达式要放在方括号之间，并且要有空格，例如: <strong>[$a==$b]</strong> 是错误的，必须写成 <strong>[ $a == $b ]</strong>。</p>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a=10</span><br><span class=\"line\">b=20</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"a=<span class=\"variable\">$a</span>, b=<span class=\"variable\">$b</span>\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">val=`expr <span class=\"variable\">$a</span> + <span class=\"variable\">$b</span>`</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"a + b : <span class=\"variable\">$val</span>\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">val=`expr <span class=\"variable\">$a</span> - <span class=\"variable\">$b</span>`</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"a - b : <span class=\"variable\">$val</span>\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">val=`expr <span class=\"variable\">$a</span> \\* <span class=\"variable\">$b</span>`</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"a * b : <span class=\"variable\">$val</span>\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">val=`expr <span class=\"variable\">$b</span> / <span class=\"variable\">$a</span>`</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"b / a : <span class=\"variable\">$val</span>\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">val=`expr <span class=\"variable\">$b</span> % <span class=\"variable\">$a</span>`</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"b % a : <span class=\"variable\">$val</span>\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ <span class=\"variable\">$a</span> == <span class=\"variable\">$b</span> ]</span><br><span class=\"line\"><span class=\"keyword\">then</span></span><br><span class=\"line\">  <span class=\"built_in\">echo</span> <span class=\"string\">\"a 等于 b\"</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ <span class=\"variable\">$a</span> != <span class=\"variable\">$b</span> ]</span><br><span class=\"line\"><span class=\"keyword\">then</span></span><br><span class=\"line\">  <span class=\"built_in\">echo</span> <span class=\"string\">\"a 不等于 b\"</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"关系运算符\"><a href=\"#关系运算符\" class=\"headerlink\" title=\"关系运算符\"></a>关系运算符</h4><p>关系运算符只支持数字，不支持字符串，除非字符串的值是数字。</p>\n<p>下表列出了常用的关系运算符，假定变量 a 为 10，变量 b 为 20：</p>\n<table>\n<thead>\n<tr>\n<th>运算符</th>\n<th>说明</th>\n<th>举例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>-eq</td>\n<td>检测两个数是否相等，相等返回 true。</td>\n<td><code>[ $a -eq $b ]</code>返回 false。</td>\n</tr>\n<tr>\n<td>-ne</td>\n<td>检测两个数是否相等，不相等返回 true。</td>\n<td><code>[ $a -ne $b ]</code> 返回 true。</td>\n</tr>\n<tr>\n<td>-gt</td>\n<td>检测左边的数是否大于右边的，如果是，则返回 true。</td>\n<td><code>[ $a -gt $b ]</code> 返回 false。</td>\n</tr>\n<tr>\n<td>-lt</td>\n<td>检测左边的数是否小于右边的，如果是，则返回 true。</td>\n<td><code>[ $a -lt $b ]</code> 返回 true。</td>\n</tr>\n<tr>\n<td>-ge</td>\n<td>检测左边的数是否大于等于右边的，如果是，则返回 true。</td>\n<td><code>[ $a -ge $b ]</code> 返回 false。</td>\n</tr>\n<tr>\n<td>-le</td>\n<td>检测左边的数是否小于等于右边的，如果是，则返回 true。</td>\n<td><code>[ $a -le $b ]</code>返回 true。</td>\n</tr>\n</tbody>\n</table>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a=10</span><br><span class=\"line\">b=20</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ <span class=\"variable\">$a</span> -eq <span class=\"variable\">$b</span> ]</span><br><span class=\"line\"><span class=\"keyword\">then</span></span><br><span class=\"line\">   <span class=\"built_in\">echo</span> <span class=\"string\">\"<span class=\"variable\">$a</span> -eq <span class=\"variable\">$b</span> : a 等于 b\"</span></span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">   <span class=\"built_in\">echo</span> <span class=\"string\">\"<span class=\"variable\">$a</span> -eq <span class=\"variable\">$b</span>: a 不等于 b\"</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ <span class=\"variable\">$a</span> -ne <span class=\"variable\">$b</span> ]</span><br><span class=\"line\"><span class=\"keyword\">then</span></span><br><span class=\"line\">   <span class=\"built_in\">echo</span> <span class=\"string\">\"<span class=\"variable\">$a</span> -ne <span class=\"variable\">$b</span>: a 不等于 b\"</span></span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">   <span class=\"built_in\">echo</span> <span class=\"string\">\"<span class=\"variable\">$a</span> -ne <span class=\"variable\">$b</span> : a 等于 b\"</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ <span class=\"variable\">$a</span> -gt <span class=\"variable\">$b</span> ]</span><br><span class=\"line\"><span class=\"keyword\">then</span></span><br><span class=\"line\">   <span class=\"built_in\">echo</span> <span class=\"string\">\"<span class=\"variable\">$a</span> -gt <span class=\"variable\">$b</span>: a 大于 b\"</span></span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">   <span class=\"built_in\">echo</span> <span class=\"string\">\"<span class=\"variable\">$a</span> -gt <span class=\"variable\">$b</span>: a 不大于 b\"</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ <span class=\"variable\">$a</span> -lt <span class=\"variable\">$b</span> ]</span><br><span class=\"line\"><span class=\"keyword\">then</span></span><br><span class=\"line\">   <span class=\"built_in\">echo</span> <span class=\"string\">\"<span class=\"variable\">$a</span> -lt <span class=\"variable\">$b</span>: a 小于 b\"</span></span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">   <span class=\"built_in\">echo</span> <span class=\"string\">\"<span class=\"variable\">$a</span> -lt <span class=\"variable\">$b</span>: a 不小于 b\"</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ <span class=\"variable\">$a</span> -ge <span class=\"variable\">$b</span> ]</span><br><span class=\"line\"><span class=\"keyword\">then</span></span><br><span class=\"line\">   <span class=\"built_in\">echo</span> <span class=\"string\">\"<span class=\"variable\">$a</span> -ge <span class=\"variable\">$b</span>: a 大于或等于 b\"</span></span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">   <span class=\"built_in\">echo</span> <span class=\"string\">\"<span class=\"variable\">$a</span> -ge <span class=\"variable\">$b</span>: a 小于 b\"</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ <span class=\"variable\">$a</span> -le <span class=\"variable\">$b</span> ]</span><br><span class=\"line\"><span class=\"keyword\">then</span></span><br><span class=\"line\">   <span class=\"built_in\">echo</span> <span class=\"string\">\"<span class=\"variable\">$a</span> -le <span class=\"variable\">$b</span>: a 小于或等于 b\"</span></span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">   <span class=\"built_in\">echo</span> <span class=\"string\">\"<span class=\"variable\">$a</span> -le <span class=\"variable\">$b</span>: a 大于 b\"</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"布尔运算符\"><a href=\"#布尔运算符\" class=\"headerlink\" title=\"布尔运算符\"></a>布尔运算符</h4><p>下表列出了常用的布尔运算符，假定变量 a 为 10，变量 b 为 20：</p>\n<table>\n<thead>\n<tr>\n<th>运算符</th>\n<th>说明</th>\n<th>举例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>!</td>\n<td>非运算，表达式为 true 则返回 false，否则返回 true。</td>\n<td><code>[ ! false ]</code> 返回 true。</td>\n</tr>\n<tr>\n<td>-o</td>\n<td>或运算，有一个表达式为 true 则返回 true。</td>\n<td><code>[ $a -lt 20 -o $b -gt 100 ]</code> 返回 true。</td>\n</tr>\n<tr>\n<td>-a</td>\n<td>与运算，两个表达式都为 true 才返回 true。</td>\n<td><code>[ $a -lt 20 -a $b -gt 100 ]</code> 返回 false。</td>\n</tr>\n</tbody>\n</table>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a=10</span><br><span class=\"line\">b=20</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"a=<span class=\"variable\">$a</span>, b=<span class=\"variable\">$b</span>\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ <span class=\"variable\">$a</span> != <span class=\"variable\">$b</span> ]</span><br><span class=\"line\"><span class=\"keyword\">then</span></span><br><span class=\"line\">   <span class=\"built_in\">echo</span> <span class=\"string\">\"<span class=\"variable\">$a</span> != <span class=\"variable\">$b</span> : a 不等于 b\"</span></span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">   <span class=\"built_in\">echo</span> <span class=\"string\">\"<span class=\"variable\">$a</span> != <span class=\"variable\">$b</span>: a 等于 b\"</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ <span class=\"variable\">$a</span> -lt 100 -a <span class=\"variable\">$b</span> -gt 15 ]</span><br><span class=\"line\"><span class=\"keyword\">then</span></span><br><span class=\"line\">   <span class=\"built_in\">echo</span> <span class=\"string\">\"<span class=\"variable\">$a</span> 小于 100 且 <span class=\"variable\">$b</span> 大于 15 : 返回 true\"</span></span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">   <span class=\"built_in\">echo</span> <span class=\"string\">\"<span class=\"variable\">$a</span> 小于 100 且 <span class=\"variable\">$b</span> 大于 15 : 返回 false\"</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ <span class=\"variable\">$a</span> -lt 100 -o <span class=\"variable\">$b</span> -gt 100 ]</span><br><span class=\"line\"><span class=\"keyword\">then</span></span><br><span class=\"line\">   <span class=\"built_in\">echo</span> <span class=\"string\">\"<span class=\"variable\">$a</span> 小于 100 或 <span class=\"variable\">$b</span> 大于 100 : 返回 true\"</span></span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">   <span class=\"built_in\">echo</span> <span class=\"string\">\"<span class=\"variable\">$a</span> 小于 100 或 <span class=\"variable\">$b</span> 大于 100 : 返回 false\"</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ <span class=\"variable\">$a</span> -lt 5 -o <span class=\"variable\">$b</span> -gt 100 ]</span><br><span class=\"line\"><span class=\"keyword\">then</span></span><br><span class=\"line\">   <span class=\"built_in\">echo</span> <span class=\"string\">\"<span class=\"variable\">$a</span> 小于 5 或 <span class=\"variable\">$b</span> 大于 100 : 返回 true\"</span></span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">   <span class=\"built_in\">echo</span> <span class=\"string\">\"<span class=\"variable\">$a</span> 小于 5 或 <span class=\"variable\">$b</span> 大于 100 : 返回 false\"</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"逻辑运算符\"><a href=\"#逻辑运算符\" class=\"headerlink\" title=\"逻辑运算符\"></a>逻辑运算符</h4><p>以下介绍 Shell 的逻辑运算符，假定变量 a 为 10，变量 b 为 20:</p>\n<table>\n<thead>\n<tr>\n<th>运算符</th>\n<th>说明</th>\n<th>举例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>&amp;&amp;</td>\n<td>逻辑的 AND</td>\n<td><code>[[ $a -lt 100 &amp;&amp; $b -gt 100 ]]</code> 返回 false</td>\n</tr>\n<tr>\n<td>\\</td>\n<td>\\</td>\n<td></td>\n<td>逻辑的 OR</td>\n<td>`[[ $a -lt 100</td>\n<td></td>\n<td>$b -gt 100 ]]` 返回 true</td>\n</tr>\n</tbody>\n</table>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a=10</span><br><span class=\"line\">b=20</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"a=<span class=\"variable\">$a</span>, b=<span class=\"variable\">$b</span>\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> [[ <span class=\"variable\">$a</span> -lt 100 &amp;&amp; <span class=\"variable\">$b</span> -gt 100 ]]</span><br><span class=\"line\"><span class=\"keyword\">then</span></span><br><span class=\"line\">   <span class=\"built_in\">echo</span> <span class=\"string\">\"返回 true\"</span></span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">   <span class=\"built_in\">echo</span> <span class=\"string\">\"返回 false\"</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> [[ <span class=\"variable\">$a</span> -lt 100 || <span class=\"variable\">$b</span> -gt 100 ]]</span><br><span class=\"line\"><span class=\"keyword\">then</span></span><br><span class=\"line\">   <span class=\"built_in\">echo</span> <span class=\"string\">\"返回 true\"</span></span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">   <span class=\"built_in\">echo</span> <span class=\"string\">\"返回 false\"</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"字符串运算符\"><a href=\"#字符串运算符\" class=\"headerlink\" title=\"字符串运算符\"></a>字符串运算符</h4><p>下表列出了常用的字符串运算符，假定变量 a 为 “abc”，变量 b 为 “efg”：</p>\n<table>\n<thead>\n<tr>\n<th>运算符</th>\n<th>说明</th>\n<th>举例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>=</td>\n<td>检测两个字符串是否相等，相等返回 true。</td>\n<td><code>[ $a = $b ]</code> 返回 false。</td>\n</tr>\n<tr>\n<td>!=</td>\n<td>检测两个字符串是否相等，不相等返回 true。</td>\n<td><code>[ $a != $b ]</code> 返回 true。</td>\n</tr>\n<tr>\n<td>-z</td>\n<td>检测字符串长度是否为0，为0返回 true。</td>\n<td><code>[ -z $a ]</code> 返回 false。</td>\n</tr>\n<tr>\n<td>-n</td>\n<td>检测字符串长度是否为0，不为0返回 true。</td>\n<td><code>[ -n $a ]</code> 返回 true。</td>\n</tr>\n<tr>\n<td>str</td>\n<td>检测字符串是否为空，不为空返回 true。</td>\n<td><code>[ $a ]</code> 返回 true。</td>\n</tr>\n</tbody>\n</table>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a=<span class=\"string\">\"abc\"</span></span><br><span class=\"line\">b=<span class=\"string\">\"efg\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"a=<span class=\"variable\">$a</span>, b=<span class=\"variable\">$b</span>\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ <span class=\"variable\">$a</span> = <span class=\"variable\">$b</span> ]</span><br><span class=\"line\"><span class=\"keyword\">then</span></span><br><span class=\"line\">   <span class=\"built_in\">echo</span> <span class=\"string\">\"<span class=\"variable\">$a</span> = <span class=\"variable\">$b</span> : a 等于 b\"</span></span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">   <span class=\"built_in\">echo</span> <span class=\"string\">\"<span class=\"variable\">$a</span> = <span class=\"variable\">$b</span>: a 不等于 b\"</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ <span class=\"variable\">$a</span> != <span class=\"variable\">$b</span> ]</span><br><span class=\"line\"><span class=\"keyword\">then</span></span><br><span class=\"line\">   <span class=\"built_in\">echo</span> <span class=\"string\">\"<span class=\"variable\">$a</span> != <span class=\"variable\">$b</span> : a 不等于 b\"</span></span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">   <span class=\"built_in\">echo</span> <span class=\"string\">\"<span class=\"variable\">$a</span> != <span class=\"variable\">$b</span>: a 等于 b\"</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ -z <span class=\"variable\">$a</span> ]</span><br><span class=\"line\"><span class=\"keyword\">then</span></span><br><span class=\"line\">   <span class=\"built_in\">echo</span> <span class=\"string\">\"-z <span class=\"variable\">$a</span> : 字符串长度为 0\"</span></span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">   <span class=\"built_in\">echo</span> <span class=\"string\">\"-z <span class=\"variable\">$a</span> : 字符串长度不为 0\"</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ -n <span class=\"variable\">$a</span> ]</span><br><span class=\"line\"><span class=\"keyword\">then</span></span><br><span class=\"line\">   <span class=\"built_in\">echo</span> <span class=\"string\">\"-n <span class=\"variable\">$a</span> : 字符串长度不为 0\"</span></span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">   <span class=\"built_in\">echo</span> <span class=\"string\">\"-n <span class=\"variable\">$a</span> : 字符串长度为 0\"</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ <span class=\"variable\">$a</span> ]</span><br><span class=\"line\"><span class=\"keyword\">then</span></span><br><span class=\"line\">   <span class=\"built_in\">echo</span> <span class=\"string\">\"<span class=\"variable\">$a</span> : 字符串不为空\"</span></span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">   <span class=\"built_in\">echo</span> <span class=\"string\">\"<span class=\"variable\">$a</span> : 字符串为空\"</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"文件测试运算符\"><a href=\"#文件测试运算符\" class=\"headerlink\" title=\"文件测试运算符\"></a>文件测试运算符</h4><p>文件测试运算符用于检测 Unix 文件的各种属性。</p>\n<p>属性检测描述如下：</p>\n<table>\n<thead>\n<tr>\n<th>操作符</th>\n<th>说明</th>\n<th>举例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>-b file</td>\n<td>检测文件是否是块设备文件，如果是，则返回 true。</td>\n<td><code>[ -b $file ]</code> 返回 false。</td>\n</tr>\n<tr>\n<td>-c file</td>\n<td>检测文件是否是字符设备文件，如果是，则返回 true。</td>\n<td><code>[ -c $file ]</code> 返回 false。</td>\n</tr>\n<tr>\n<td>-d file</td>\n<td>检测文件是否是目录，如果是，则返回 true。</td>\n<td><code>[ -d $file ]</code> 返回 false。</td>\n</tr>\n<tr>\n<td>-f file</td>\n<td>检测文件是否是普通文件（既不是目录，也不是设备文件），如果是，则返回 true。</td>\n<td><code>[ -f $file ]</code> 返回 true。</td>\n</tr>\n<tr>\n<td>-g file</td>\n<td>检测文件是否设置了 SGID 位，如果是，则返回 true。</td>\n<td><code>[ -g $file ]</code> 返回 false。</td>\n</tr>\n<tr>\n<td>-k file</td>\n<td>检测文件是否设置了粘着位(Sticky Bit)，如果是，则返回 true。</td>\n<td><code>[ -k $file ]</code>返回 false。</td>\n</tr>\n<tr>\n<td>-p file</td>\n<td>检测文件是否是有名管道，如果是，则返回 true。</td>\n<td><code>[ -p $file ]</code> 返回 false。</td>\n</tr>\n<tr>\n<td>-u file</td>\n<td>检测文件是否设置了 SUID 位，如果是，则返回 true。</td>\n<td><code>[ -u $file ]</code> 返回 false。</td>\n</tr>\n<tr>\n<td>-r file</td>\n<td>检测文件是否可读，如果是，则返回 true。</td>\n<td><code>[ -r $file ]</code> 返回 true。</td>\n</tr>\n<tr>\n<td>-w file</td>\n<td>检测文件是否可写，如果是，则返回 true。</td>\n<td><code>[ -w $file ]</code> 返回 true。</td>\n</tr>\n<tr>\n<td>-x file</td>\n<td>检测文件是否可执行，如果是，则返回 true。</td>\n<td><code>[ -x $file ]</code> 返回 true。</td>\n</tr>\n<tr>\n<td>-s file</td>\n<td>检测文件是否为空（文件大小是否大于0），不为空返回 true。</td>\n<td><code>[ -s $file ]</code> 返回 true。</td>\n</tr>\n<tr>\n<td>-e file</td>\n<td>检测文件（包括目录）是否存在，如果是，则返回 true。</td>\n<td><code>[ -e $file ]</code> 返回 true。</td>\n</tr>\n</tbody>\n</table>\n<p><strong>示例：</strong></p>\n<p>变量 file 表示文件”/var/www/runoob/test.sh”，它的大小为100字节，具有 rwx 权限。下面的代码，将检测该文件的各种属性：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">file=<span class=\"string\">\"./operatorDemo.sh\"</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ -r <span class=\"variable\">$file</span> ]</span><br><span class=\"line\"><span class=\"keyword\">then</span></span><br><span class=\"line\">   <span class=\"built_in\">echo</span> <span class=\"string\">\"文件可读\"</span></span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">   <span class=\"built_in\">echo</span> <span class=\"string\">\"文件不可读\"</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ -w <span class=\"variable\">$file</span> ]</span><br><span class=\"line\"><span class=\"keyword\">then</span></span><br><span class=\"line\">   <span class=\"built_in\">echo</span> <span class=\"string\">\"文件可写\"</span></span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">   <span class=\"built_in\">echo</span> <span class=\"string\">\"文件不可写\"</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ -x <span class=\"variable\">$file</span> ]</span><br><span class=\"line\"><span class=\"keyword\">then</span></span><br><span class=\"line\">   <span class=\"built_in\">echo</span> <span class=\"string\">\"文件可执行\"</span></span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">   <span class=\"built_in\">echo</span> <span class=\"string\">\"文件不可执行\"</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ -f <span class=\"variable\">$file</span> ]</span><br><span class=\"line\"><span class=\"keyword\">then</span></span><br><span class=\"line\">   <span class=\"built_in\">echo</span> <span class=\"string\">\"文件为普通文件\"</span></span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">   <span class=\"built_in\">echo</span> <span class=\"string\">\"文件为特殊文件\"</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ -d <span class=\"variable\">$file</span> ]</span><br><span class=\"line\"><span class=\"keyword\">then</span></span><br><span class=\"line\">   <span class=\"built_in\">echo</span> <span class=\"string\">\"文件是个目录\"</span></span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">   <span class=\"built_in\">echo</span> <span class=\"string\">\"文件不是个目录\"</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ -s <span class=\"variable\">$file</span> ]</span><br><span class=\"line\"><span class=\"keyword\">then</span></span><br><span class=\"line\">   <span class=\"built_in\">echo</span> <span class=\"string\">\"文件不为空\"</span></span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">   <span class=\"built_in\">echo</span> <span class=\"string\">\"文件为空\"</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ -e <span class=\"variable\">$file</span> ]</span><br><span class=\"line\"><span class=\"keyword\">then</span></span><br><span class=\"line\">   <span class=\"built_in\">echo</span> <span class=\"string\">\"文件存在\"</span></span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">   <span class=\"built_in\">echo</span> <span class=\"string\">\"文件不存在\"</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"语句\"><a href=\"#语句\" class=\"headerlink\" title=\"语句\"></a>语句</h3><h4 id=\"条件语句\"><a href=\"#条件语句\" class=\"headerlink\" title=\"条件语句\"></a>条件语句</h4><p>跟其它程序设计语言一样，Bash中的条件语句让我们可以决定一个操作是否被执行。结果取决于一个包在<code>[[ ]]</code>里的表达式。</p>\n<p>条件表达式可以包含<code>&amp;&amp;</code>和<code>||</code>运算符，分别对应 <em>与</em> 和 <em>或</em> 。除此之外还有很多有用的<a href=\"https://github.com/denysdovhan/bash-handbook/blob/master/translations/zh-CN/README.md#%E5%9F%BA%E5%85%83%E5%92%8C%E7%BB%84%E5%90%88%E8%A1%A8%E8%BE%BE%E5%BC%8F\" target=\"_blank\" rel=\"noopener\">表达式</a>。</p>\n<p>共有两个不同的条件表达式：<code>if</code>和<code>case</code>。</p>\n<h5 id=\"基元和组合表达式\"><a href=\"#基元和组合表达式\" class=\"headerlink\" title=\"基元和组合表达式\"></a>基元和组合表达式</h5><p>由<code>[[ ]]</code>（<code>sh</code>中是<code>[ ]</code>）包起来的表达式被称作 <strong>检测命令</strong> 或 <strong>基元</strong>。这些表达式帮助我们检测一个条件的结果。在下面的表里，为了兼容<code>sh</code>，我们用的是<code>[ ]</code>。这里可以找到有关<a href=\"http://serverfault.com/a/52050\" target=\"_blank\" rel=\"noopener\">bash中单双中括号区别</a>的答案。</p>\n<h5 id=\"使用if\"><a href=\"#使用if\" class=\"headerlink\" title=\"使用if\"></a>使用<code>if</code></h5><p><code>if</code>在使用上跟其它语言相同。如果中括号里的表达式为真，那么<code>then</code>和<code>fi</code>之间的代码会被执行。<code>fi</code>标志着条件代码块的结束。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">### 写成一行</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> [[ 1 -eq 1 ]]; <span class=\"keyword\">then</span> <span class=\"built_in\">echo</span> <span class=\"string\">\"true\"</span>; <span class=\"keyword\">fi</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">### 写成多行</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> [[ 1 -eq 1 ]]; <span class=\"keyword\">then</span></span><br><span class=\"line\">  <span class=\"built_in\">echo</span> <span class=\"string\">\"true\"</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br></pre></td></tr></table></figure>\n<p>同样，我们可以使用<code>if..else</code>语句，例如：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">### 写成一行</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> [[ 2 -ne 1 ]]; <span class=\"keyword\">then</span> <span class=\"built_in\">echo</span> <span class=\"string\">\"true\"</span>; <span class=\"keyword\">else</span> <span class=\"built_in\">echo</span> <span class=\"string\">\"false\"</span>; <span class=\"keyword\">fi</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">### 写成多行</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> [[ 2 -ne 1 ]]; <span class=\"keyword\">then</span></span><br><span class=\"line\">  <span class=\"built_in\">echo</span> <span class=\"string\">\"true\"</span></span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">  <span class=\"built_in\">echo</span> <span class=\"string\">\"false\"</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br></pre></td></tr></table></figure>\n<p>有些时候，<code>if..else</code>不能满足我们的要求。别忘了<code>if..elif..else</code>，使用起来也很方便。</p>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> [[ `uname` == <span class=\"string\">\"Adam\"</span> ]]; <span class=\"keyword\">then</span></span><br><span class=\"line\">  <span class=\"built_in\">echo</span> <span class=\"string\">\"Do not eat an apple!\"</span></span><br><span class=\"line\"><span class=\"keyword\">elif</span> [[ `uname` == <span class=\"string\">\"Eva\"</span> ]]; <span class=\"keyword\">then</span></span><br><span class=\"line\">  <span class=\"built_in\">echo</span> <span class=\"string\">\"Do not take an apple!\"</span></span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">  <span class=\"built_in\">echo</span> <span class=\"string\">\"Apples are delicious!\"</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"使用case\"><a href=\"#使用case\" class=\"headerlink\" title=\"使用case\"></a>使用<code>case</code></h5><p>如果你需要面对很多情况，分别要采取不同的措施，那么使用<code>case</code>会比嵌套的<code>if</code>更有用。使用<code>case</code>来解决复杂的条件判断，看起来像下面这样：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"input param: \"</span> <span class=\"variable\">$1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"variable\">$1</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">  <span class=\"string\">\"jpg\"</span> | <span class=\"string\">\"jpeg\"</span>)</span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"It's image with jpeg extension.\"</span></span><br><span class=\"line\">  ;;</span><br><span class=\"line\">  <span class=\"string\">\"png\"</span>)</span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"It's image with png extension.\"</span></span><br><span class=\"line\">  ;;</span><br><span class=\"line\">  <span class=\"string\">\"gif\"</span>)</span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"Oh, it's a giphy!\"</span></span><br><span class=\"line\">  ;;</span><br><span class=\"line\">  *)</span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"Woops! It's not image!\"</span></span><br><span class=\"line\">  ;;</span><br><span class=\"line\"><span class=\"keyword\">esac</span></span><br></pre></td></tr></table></figure>\n<p>每种情况都是匹配了某个模式的表达式。<code>|</code>用来分割多个模式，<code>)</code>用来结束一个模式序列。第一个匹配上的模式对应的命令将会被执行。<code>*</code>代表任何不匹配以上给定模式的模式。命令块儿之间要用<code>;;</code>分隔。</p>\n<h4 id=\"循环语句\"><a href=\"#循环语句\" class=\"headerlink\" title=\"循环语句\"></a>循环语句</h4><p>循环其实不足为奇。跟其它程序设计语言一样，bash中的循环也是只要控制条件为真就一直迭代执行的代码块。</p>\n<p>Bash中有四种循环：<code>for</code>，<code>while</code>，<code>until</code>和<code>select</code>。</p>\n<h5 id=\"for循环\"><a href=\"#for循环\" class=\"headerlink\" title=\"for循环\"></a><code>for</code>循环</h5><p><code>for</code>与它在C语言中的姊妹非常像。看起来是这样：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> arg <span class=\"keyword\">in</span> elem1 elem2 ... elemN</span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\">  <span class=\"comment\">### 语句</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure>\n<p>在每次循环的过程中，<code>arg</code>依次被赋值为从<code>elem1</code>到<code>elemN</code>。这些值还可以是通配符或者<a href=\"https://github.com/denysdovhan/bash-handbook/blob/master/translations/zh-CN/README.md#%E5%A4%A7%E6%8B%AC%E5%8F%B7%E6%89%A9%E5%B1%95\" target=\"_blank\" rel=\"noopener\">大括号扩展</a>。</p>\n<p>当然，我们还可以把<code>for</code>循环写在一行，但这要求<code>do</code>之前要有一个分号，就像下面这样：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> &#123;1..5&#125;; <span class=\"keyword\">do</span> <span class=\"built_in\">echo</span> <span class=\"variable\">$i</span>; <span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure>\n<p>还有，如果你觉得<code>for..in..do</code>对你来说有点奇怪，那么你也可以像C语言那样使用<code>for</code>，比如：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (( i = 0; i &lt; 10; i++ )); <span class=\"keyword\">do</span></span><br><span class=\"line\">  <span class=\"built_in\">echo</span> <span class=\"variable\">$i</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure>\n<p>当我们想对一个目录下的所有文件做同样的操作时，<code>for</code>就很方便了。举个例子，如果我们想把所有的<code>.bash</code>文件移动到<code>script</code>文件夹中，并给它们可执行权限，我们的脚本可以这样写：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> FILE <span class=\"keyword\">in</span> <span class=\"variable\">$HOME</span>/*.bash; <span class=\"keyword\">do</span></span><br><span class=\"line\">  mv <span class=\"string\">\"<span class=\"variable\">$FILE</span>\"</span> <span class=\"string\">\"<span class=\"variable\">$&#123;HOME&#125;</span>/scripts\"</span></span><br><span class=\"line\">  chmod +x <span class=\"string\">\"<span class=\"variable\">$&#123;HOME&#125;</span>/scripts/<span class=\"variable\">$&#123;FILE&#125;</span>\"</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"while循环\"><a href=\"#while循环\" class=\"headerlink\" title=\"while循环\"></a><code>while</code>循环</h5><p><code>while</code>循环检测一个条件，只要这个条件为 <em>真</em>，就执行一段命令。被检测的条件跟<code>if..then</code>中使用的<a href=\"https://github.com/denysdovhan/bash-handbook/blob/master/translations/zh-CN/README.md#%E5%9F%BA%E5%85%83%E5%92%8C%E7%BB%84%E5%90%88%E8%A1%A8%E8%BE%BE%E5%BC%8F\" target=\"_blank\" rel=\"noopener\">基元</a>并无二异。因此一个<code>while</code>循环看起来会是这样：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span> [[ condition ]]</span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\">  <span class=\"comment\">### 语句</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure>\n<p>跟<code>for</code>循环一样，如果我们把<code>do</code>和被检测的条件写到一行，那么必须要在<code>do</code>之前加一个分号。</p>\n<p>比如下面这个例子：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">### 0到9之间每个数的平方</span></span><br><span class=\"line\">x=0</span><br><span class=\"line\"><span class=\"keyword\">while</span> [[ <span class=\"variable\">$x</span> -lt 10 ]]; <span class=\"keyword\">do</span> <span class=\"comment\">### x小于10</span></span><br><span class=\"line\">  <span class=\"built_in\">echo</span> $(( x * x ))</span><br><span class=\"line\">  x=$(( x + 1 )) <span class=\"comment\">### x加1</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"until循环\"><a href=\"#until循环\" class=\"headerlink\" title=\"until循环\"></a><code>until</code>循环</h5><p><code>until</code>循环跟<code>while</code>循环正好相反。它跟<code>while</code>一样也需要检测一个测试条件，但不同的是，只要该条件为 <em>假</em> 就一直执行循环：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">until [[ condition ]]; <span class=\"keyword\">do</span></span><br><span class=\"line\">  <span class=\"comment\">### 语句</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"select循环\"><a href=\"#select循环\" class=\"headerlink\" title=\"select循环\"></a><code>select</code>循环</h5><p><code>select</code>循环帮助我们组织一个用户菜单。它的语法几乎跟<code>for</code>循环一致：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select answer <span class=\"keyword\">in</span> elem1 elem2 ... elemN</span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\">  <span class=\"comment\">### 语句</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure>\n<p><code>select</code>会打印<code>elem1..elemN</code>以及它们的序列号到屏幕上，之后会提示用户输入。通常看到的是<code>$?</code>（<code>PS3</code>变量）。用户的选择结果会被保存到<code>answer</code>中。如果<code>answer</code>是一个在<code>1..N</code>之间的数字，那么<code>语句</code>会被执行，紧接着会进行下一次迭代 —— 如果不想这样的话我们可以使用<code>break</code>语句。</p>\n<p>一个可能的实例可能会是这样：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"></span><br><span class=\"line\">PS3=<span class=\"string\">\"Choose the package manager: \"</span></span><br><span class=\"line\">select ITEM <span class=\"keyword\">in</span> bower npm gem pip</span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\">  <span class=\"built_in\">echo</span> -n <span class=\"string\">\"Enter the package name: \"</span> &amp;&amp; <span class=\"built_in\">read</span> PACKAGE</span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"variable\">$ITEM</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">    bower) bower install <span class=\"variable\">$PACKAGE</span> ;;</span><br><span class=\"line\">    npm)   npm   install <span class=\"variable\">$PACKAGE</span> ;;</span><br><span class=\"line\">    gem)   gem   install <span class=\"variable\">$PACKAGE</span> ;;</span><br><span class=\"line\">    pip)   pip   install <span class=\"variable\">$PACKAGE</span> ;;</span><br><span class=\"line\">  <span class=\"keyword\">esac</span></span><br><span class=\"line\">  <span class=\"built_in\">break</span> <span class=\"comment\">### 避免无限循环</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure>\n<p>这个例子，先询问用户他想使用什么包管理器。接着，又询问了想安装什么包，最后执行安装操作。</p>\n<p>运行这个脚本，会得到如下输出：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ./my_script</span><br><span class=\"line\">1) bower</span><br><span class=\"line\">2) npm</span><br><span class=\"line\">3) gem</span><br><span class=\"line\">4) pip</span><br><span class=\"line\">Choose the package manager: 2</span><br><span class=\"line\">Enter the package name: bash-handbook</span><br><span class=\"line\">&lt;installing bash-handbook&gt;</span><br></pre></td></tr></table></figure>\n<h5 id=\"break-和-continue\"><a href=\"#break-和-continue\" class=\"headerlink\" title=\"break 和 continue\"></a>break 和 continue</h5><p>如果想提前结束一个循环或跳过某次循环执行，可以使用 shell 的<code>break</code>和<code>continue</code>语句来实现。它们可以在任何循环中使用。</p>\n<blockquote>\n<p><code>break</code>语句用来提前结束当前循环。</p>\n<p><code>continue</code>语句用来跳过某次迭代。</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (( i = 0; i &lt; 10; i++ )); <span class=\"keyword\">do</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> [[ $(( i % 2 )) -eq 0 ]]; <span class=\"keyword\">then</span> <span class=\"built_in\">continue</span>; <span class=\"keyword\">fi</span></span><br><span class=\"line\">  <span class=\"built_in\">echo</span> <span class=\"variable\">$i</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure>\n<p>运行上面的例子，会打印出所有0到9之间的奇数。</p>\n<h3 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h3><p>在脚本中，我们可以定义并调用函数。跟其它程序设计语言类似，函数是一个代码块，但有所不同。</p>\n<p>bash 中，函数是一个命令序列，这个命令序列组织在某个名字下面，即 <em>函数名</em> 。调用函数跟其它语言一样，写下函数名字，函数就会被 <em>调用</em> 。</p>\n<p>我们可以这样声明函数：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"title\">my_func</span></span> () &#123;</span><br><span class=\"line\">  <span class=\"comment\">### 语句</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">my_func <span class=\"comment\">### 调用 my_func</span></span><br></pre></td></tr></table></figure>\n<p>我们必须在调用前声明函数。</p>\n<p>函数可以接收参数并返回结果 —— 返回值。参数，在函数内部，跟<a href=\"https://github.com/denysdovhan/bash-handbook/blob/master/translations/zh-CN/README.md#%E9%9D%9E%E4%BA%A4%E4%BA%92%E6%A8%A1%E5%BC%8F\" target=\"_blank\" rel=\"noopener\">非交互式</a>下的脚本参数处理方式相同 —— 使用<a href=\"https://github.com/denysdovhan/bash-handbook/blob/master/translations/zh-CN/README.md#%E4%BD%8D%E7%BD%AE%E5%8F%82%E6%95%B0\" target=\"_blank\" rel=\"noopener\">位置参数</a>。返回值可以使用<code>return</code>命令 <em>返回</em> 。</p>\n<p>下面这个函数接收一个名字参数，返回<code>0</code>，表示成功执行。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">### 带参数的函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">greeting</span></span> () &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> [[ -n <span class=\"variable\">$1</span> ]]; <span class=\"keyword\">then</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"Hello, <span class=\"variable\">$1</span>!\"</span></span><br><span class=\"line\">  <span class=\"keyword\">else</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"Hello, unknown!\"</span></span><br><span class=\"line\">  <span class=\"keyword\">fi</span></span><br><span class=\"line\">  <span class=\"built_in\">return</span> 0</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">greeting Denys  <span class=\"comment\">### Hello, Denys!</span></span><br><span class=\"line\">greeting        <span class=\"comment\">### Hello, stranger!</span></span><br></pre></td></tr></table></figure>\n<p>我们之前已经介绍过<a href=\"https://github.com/denysdovhan/bash-handbook/blob/master/translations/zh-CN/README.md#%E8%BF%94%E5%9B%9E%E5%80%BC\" target=\"_blank\" rel=\"noopener\">返回值</a>。不带任何参数的<code>return</code>会返回最后一个执行的命令的返回值。上面的例子，<code>return 0</code>会返回一个成功表示执行的值，<code>0</code>。</p>\n<p>另外，还有几个特殊字符用来处理参数：</p>\n<table>\n<thead>\n<tr>\n<th>参数处理</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>$#</td>\n<td>传递到脚本的参数个数</td>\n</tr>\n<tr>\n<td>$*</td>\n<td>以一个单字符串显示所有向脚本传递的参数</td>\n</tr>\n<tr>\n<td>$$</td>\n<td>脚本运行的当前进程ID号</td>\n</tr>\n<tr>\n<td>$!</td>\n<td>后台运行的最后一个进程的ID号</td>\n</tr>\n<tr>\n<td>$@</td>\n<td>与$*相同，但是使用时加引号，并在引号中返回每个参数。</td>\n</tr>\n<tr>\n<td>$-</td>\n<td>显示Shell使用的当前选项，与set命令功能相同。</td>\n</tr>\n<tr>\n<td>$?</td>\n<td>显示最后命令的退出状态。0表示没有错误，其他任何值表明有错误。</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"流和重定向\"><a href=\"#流和重定向\" class=\"headerlink\" title=\"流和重定向\"></a>流和重定向</h3><p>Bash有很强大的工具来处理程序之间的协同工作。使用流，我们能将一个程序的输出发送到另一个程序或文件，因此，我们能方便地记录日志或做一些其它我们想做的事。</p>\n<p>管道给了我们创建传送带的机会，控制程序的执行成为可能。</p>\n<p>学习如何使用这些强大的、高级的工具是非常非常重要的。</p>\n<h4 id=\"输入、输出流\"><a href=\"#输入、输出流\" class=\"headerlink\" title=\"输入、输出流\"></a>输入、输出流</h4><p>Bash接收输入，并以字符序列或 <strong>字符流</strong> 的形式产生输出。这些流能被重定向到文件或另一个流中。</p>\n<p>有三个文件描述符：</p>\n<table>\n<thead>\n<tr>\n<th>代码</th>\n<th>描述符</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>0</code></td>\n<td><code>stdin</code></td>\n<td>标准输入</td>\n</tr>\n<tr>\n<td><code>1</code></td>\n<td><code>stdout</code></td>\n<td>标准输出</td>\n</tr>\n<tr>\n<td><code>2</code></td>\n<td><code>stderr</code></td>\n<td>标准错误输出</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"重定向\"><a href=\"#重定向\" class=\"headerlink\" title=\"重定向\"></a>重定向</h4><p>重定向让我们可以控制一个命令的输入来自哪里，输出结果到什么地方。这些运算符在控制流的重定向时会被用到：</p>\n<table>\n<thead>\n<tr>\n<th>Operator</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>&gt;</code></td>\n<td>重定向输出</td>\n</tr>\n<tr>\n<td><code>&amp;&gt;</code></td>\n<td>重定向输出和错误输出</td>\n</tr>\n<tr>\n<td><code>&amp;&gt;&gt;</code></td>\n<td>以附加的形式重定向输出和错误输出</td>\n</tr>\n<tr>\n<td><code>&lt;</code></td>\n<td>重定向输入</td>\n</tr>\n<tr>\n<td><code>&lt;&lt;</code></td>\n<td><a href=\"http://tldp.org/LDP/abs/html/here-docs.html\" target=\"_blank\" rel=\"noopener\">Here文档</a> 语法</td>\n</tr>\n<tr>\n<td><code>&lt;&lt;&lt;</code></td>\n<td><a href=\"http://www.tldp.org/LDP/abs/html/x17837.html\" target=\"_blank\" rel=\"noopener\">Here字符串</a></td>\n</tr>\n</tbody>\n</table>\n<p>以下是一些使用重定向的例子：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">### ls的结果将会被写到list.txt中</span></span><br><span class=\"line\">ls -l &gt; list.txt</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">### 将输出附加到list.txt中</span></span><br><span class=\"line\">ls -a &gt;&gt; list.txt</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">### 所有的错误信息会被写到errors.txt中</span></span><br><span class=\"line\">grep da * 2&gt; errors.txt</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">### 从errors.txt中读取输入</span></span><br><span class=\"line\">less &lt; errors.txt</span><br></pre></td></tr></table></figure>\n<h4 id=\"dev-null-文件\"><a href=\"#dev-null-文件\" class=\"headerlink\" title=\"/dev/null 文件\"></a><code>/dev/null</code> 文件</h4><p>如果希望执行某个命令，但又不希望在屏幕上显示输出结果，那么可以将输出重定向到 /dev/null：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ command &gt; /dev/null</span><br></pre></td></tr></table></figure>\n<p>/dev/null 是一个特殊的文件，写入到它的内容都会被丢弃；如果尝试从该文件读取内容，那么什么也读不到。但是 /dev/null 文件非常有用，将命令的输出重定向到它，会起到”禁止输出”的效果。</p>\n<p>如果希望屏蔽 stdout 和 stderr，可以这样写：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ command &gt; /dev/null 2&gt;&amp;1</span><br></pre></td></tr></table></figure>\n<h3 id=\"Debugging\"><a href=\"#Debugging\" class=\"headerlink\" title=\"Debugging\"></a>Debugging</h3><p>shell提供了用于debugging脚本的工具。如果我们想以debug模式运行某脚本，可以在其shebang中使用一个特殊的选项：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/bash options</span><br></pre></td></tr></table></figure>\n<p>options是一些可以改变shell行为的选项。下表是一些可能对你有用的选项：</p>\n<table>\n<thead>\n<tr>\n<th>Short</th>\n<th>Name</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>-f</code></td>\n<td>noglob</td>\n<td>禁止文件名展开（globbing）</td>\n</tr>\n<tr>\n<td><code>-i</code></td>\n<td>interactive</td>\n<td>让脚本以 <em>交互</em> 模式运行</td>\n</tr>\n<tr>\n<td><code>-n</code></td>\n<td>noexec</td>\n<td>读取命令，但不执行（语法检查）</td>\n</tr>\n<tr>\n<td><code>-t</code></td>\n<td>—</td>\n<td>执行完第一条命令后退出</td>\n</tr>\n<tr>\n<td><code>-v</code></td>\n<td>verbose</td>\n<td>在执行每条命令前，向<code>stderr</code>输出该命令</td>\n</tr>\n<tr>\n<td><code>-x</code></td>\n<td>xtrace</td>\n<td>在执行每条命令前，向<code>stderr</code>输出该命令以及该命令的扩展参数</td>\n</tr>\n</tbody>\n</table>\n<p>举个例子，如果我们在脚本中指定了<code>-x</code>例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/bash -x</span><br><span class=\"line\"></span><br><span class=\"line\">for (( i = 0; i &lt; 3; i++ )); do</span><br><span class=\"line\">  echo $i</span><br><span class=\"line\">done</span><br></pre></td></tr></table></figure>\n<p>这会向<code>stdout</code>打印出变量的值和一些其它有用的信息：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ./my_script</span><br><span class=\"line\">+ (( i = 0 ))</span><br><span class=\"line\">+ (( i &lt; 3 ))</span><br><span class=\"line\">+ <span class=\"built_in\">echo</span> 0</span><br><span class=\"line\">0</span><br><span class=\"line\">+ (( i++  ))</span><br><span class=\"line\">+ (( i &lt; 3 ))</span><br><span class=\"line\">+ <span class=\"built_in\">echo</span> 1</span><br><span class=\"line\">1</span><br><span class=\"line\">+ (( i++  ))</span><br><span class=\"line\">+ (( i &lt; 3 ))</span><br><span class=\"line\">+ <span class=\"built_in\">echo</span> 2</span><br><span class=\"line\">2</span><br><span class=\"line\">+ (( i++  ))</span><br><span class=\"line\">+ (( i &lt; 3 ))</span><br></pre></td></tr></table></figure>\n<p>有时我们需要debug脚本的一部分。这种情况下，使用<code>set</code>命令会很方便。这个命令可以启用或禁用选项。使用<code>-</code>启用选项，<code>+</code>禁用选项：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"xtrace is turned off\"</span></span><br><span class=\"line\"><span class=\"built_in\">set</span> -x</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"xtrace is enabled\"</span></span><br><span class=\"line\"><span class=\"built_in\">set</span> +x</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"xtrace is turned off again\"</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"资料\"><a href=\"#资料\" class=\"headerlink\" title=\"资料\"></a>资料</h3><ul>\n<li><a href=\"https://github.com/alebcay/awesome-shell\" target=\"_blank\" rel=\"noopener\">awesome-shell</a>，shell 资源列表</li>\n<li><a href=\"https://github.com/awesome-lists/awesome-bash\" target=\"_blank\" rel=\"noopener\">awesome-bash</a>，bash 资源列表</li>\n<li><a href=\"https://github.com/denysdovhan/bash-handbook\" target=\"_blank\" rel=\"noopener\">bash-handbook</a></li>\n<li><a href=\"https://github.com/vuuihc/bash-guide\" target=\"_blank\" rel=\"noopener\">bash-guide</a> ，bash 基本用法指南</li>\n<li><a href=\"https://github.com/Bash-it/bash-it\" target=\"_blank\" rel=\"noopener\">bash-it</a>，为你日常使用，开发以及维护 shell 脚本和自定义命令提供了一个可靠的框架</li>\n<li><a href=\"http://dotfiles.github.io/\" target=\"_blank\" rel=\"noopener\">dotfiles.github.io</a>，上面有bash和其它shell的各种dotfiles集合以及shell框架的链接</li>\n<li><a href=\"http://www.runoob.com/linux/linux-shell.html\" target=\"_blank\" rel=\"noopener\">Runoob Shell 教程</a></li>\n</ul>\n<p>最后，Stack Overflow上 <a href=\"https://stackoverflow.com/questions/tagged/bash\" target=\"_blank\" rel=\"noopener\">bash 标签下</a>有很多你可以学习的问题，当你遇到问题时，也是一个提问的好地方。</p>"},{"title":"使用一等函数实现设计模式","date":"2017-11-13T07:10:16.000Z","_content":"\n## 案例分析：重构“策略”模式\n\n### 经典的“策略”模式\n\n图中的UML类图指出了“策略”模式对类的编排。\n\n![](http://otl4ekdmf.bkt.clouddn.com/strategy.png)\n<!--more-->\n```python\n# classic_strategy.py\n# Strategy pattern -- classic implementation\n\n\"\"\"\n# BEGIN CLASSIC_STRATEGY_TESTS\n\n    >>> joe = Customer('John Doe', 0)  # <1>\n    >>> ann = Customer('Ann Smith', 1100)\n    >>> cart = [LineItem('banana', 4, .5),  # <2>\n    ...         LineItem('apple', 10, 1.5),\n    ...         LineItem('watermellon', 5, 5.0)]\n    >>> Order(joe, cart, FidelityPromo())  # <3>\n    <Order total: 42.00 due: 42.00>\n    >>> Order(ann, cart, FidelityPromo())  # <4>\n    <Order total: 42.00 due: 39.90>\n    >>> banana_cart = [LineItem('banana', 30, .5),  # <5>\n    ...                LineItem('apple', 10, 1.5)]\n    >>> Order(joe, banana_cart, BulkItemPromo())  # <6>\n    <Order total: 30.00 due: 28.50>\n    >>> long_order = [LineItem(str(item_code), 1, 1.0) # <7>\n    ...               for item_code in range(10)]\n    >>> Order(joe, long_order, LargeOrderPromo())  # <8>\n    <Order total: 10.00 due: 9.30>\n    >>> Order(joe, cart, LargeOrderPromo())\n    <Order total: 42.00 due: 42.00>\n\n# END CLASSIC_STRATEGY_TESTS\n\"\"\"\n# BEGIN CLASSIC_STRATEGY\n\nfrom abc import ABC, abstractmethod\nfrom collections import namedtuple\n\nCustomer = namedtuple('Customer', 'name fidelity')\n\n\nclass LineItem:\n\n    def __init__(self, product, quantity, price):\n        self.product = product\n        self.quantity = quantity\n        self.price = price\n\n    def total(self):\n        return self.price * self.quantity\n\n\nclass Order:  # the Context\n\n    def __init__(self, customer, cart, promotion=None):\n        self.customer = customer\n        self.cart = list(cart)\n        self.promotion = promotion\n\n    def total(self):\n        if not hasattr(self, '__total'):\n            self.__total = sum(item.total() for item in self.cart)\n        return self.__total\n\n    def due(self):\n        if self.promotion is None:\n            discount = 0\n        else:\n            discount = self.promotion.discount(self)\n        return self.total() - discount\n\n    def __repr__(self):\n        fmt = '<Order total: {:.2f} due: {:.2f}>'\n        return fmt.format(self.total(), self.due())\n\n\nclass Promotion(ABC):  # the Strategy: an Abstract Base Class\n\n    @abstractmethod\n    def discount(self, order):\n        \"\"\"Return discount as a positive dollar amount\"\"\"\n\n\nclass FidelityPromo(Promotion):  # first Concrete Strategy\n    \"\"\"5% discount for customers with 1000 or more fidelity points\"\"\"\n\n    def discount(self, order):\n        return order.total() * .05 if order.customer.fidelity >= 1000 else 0\n\n\nclass BulkItemPromo(Promotion):  # second Concrete Strategy\n    \"\"\"10% discount for each LineItem with 20 or more units\"\"\"\n\n    def discount(self, order):\n        discount = 0\n        for item in order.cart:\n            if item.quantity >= 20:\n                discount += item.total() * .1\n        return discount\n\n\nclass LargeOrderPromo(Promotion):  # third Concrete Strategy\n    \"\"\"7% discount for orders with 10 or more distinct items\"\"\"\n\n    def discount(self, order):\n        distinct_items = {item.product for item in order.cart}\n        if len(distinct_items) >= 10:\n            return order.total() * .07\n        return 0\n\n# END CLASSIC_STRATEGY\n```\n\n每个具体策略都是一个类，而且都只定义了一个方法，即discount。此外，策略实例没有状态（没有实例属性）。你可能会说，它们看起来像是普通的函数。以下示例是对以上示例的重构，把具体策略换成了简单的函数，而且去掉了Promo抽象类。\n\n### Order 类和使用函数实现的折扣策略\n\n\n```python\n# strategy.py\n# Strategy pattern -- function-based implementation\n\n\"\"\"\n# BEGIN STRATEGY_TESTS\n\n    >>> joe = Customer('John Doe', 0)  # <1>\n    >>> ann = Customer('Ann Smith', 1100)\n    >>> cart = [LineItem('banana', 4, .5),\n    ...         LineItem('apple', 10, 1.5),\n    ...         LineItem('watermellon', 5, 5.0)]\n    >>> Order(joe, cart, fidelity_promo)  # <2>\n    <Order total: 42.00 due: 42.00>\n    >>> Order(ann, cart, fidelity_promo)\n    <Order total: 42.00 due: 39.90>\n    >>> banana_cart = [LineItem('banana', 30, .5),\n    ...                LineItem('apple', 10, 1.5)]\n    >>> Order(joe, banana_cart, bulk_item_promo)  # <3>\n    <Order total: 30.00 due: 28.50>\n    >>> long_order = [LineItem(str(item_code), 1, 1.0)\n    ...               for item_code in range(10)]\n    >>> Order(joe, long_order, large_order_promo)\n    <Order total: 10.00 due: 9.30>\n    >>> Order(joe, cart, large_order_promo)\n    <Order total: 42.00 due: 42.00>\n\n# END STRATEGY_TESTS\n\"\"\"\n# BEGIN STRATEGY\n\nfrom collections import namedtuple\n\nCustomer = namedtuple('Customer', 'name fidelity')\n\n\nclass LineItem:\n\n    def __init__(self, product, quantity, price):\n        self.product = product\n        self.quantity = quantity\n        self.price = price\n\n    def total(self):\n        return self.price * self.quantity\n\n\nclass Order:  # the Context\n\n    def __init__(self, customer, cart, promotion=None):\n        self.customer = customer\n        self.cart = list(cart)\n        self.promotion = promotion\n\n    def total(self):\n        if not hasattr(self, '__total'):\n            self.__total = sum(item.total() for item in self.cart)\n        return self.__total\n\n    def due(self):\n        if self.promotion is None:\n            discount = 0\n        else:\n            discount = self.promotion(self)  # <1>\n        return self.total() - discount\n\n    def __repr__(self):\n        fmt = '<Order total: {:.2f} due: {:.2f}>'\n        return fmt.format(self.total(), self.due())\n\n# <2>\n\ndef fidelity_promo(order):  # <3>\n    \"\"\"5% discount for customers with 1000 or more fidelity points\"\"\"\n    return order.total() * .05 if order.customer.fidelity >= 1000 else 0\n\n\ndef bulk_item_promo(order):\n    \"\"\"10% discount for each LineItem with 20 or more units\"\"\"\n    discount = 0\n    for item in order.cart:\n        if item.quantity >= 20:\n            discount += item.total() * .1\n    return discount\n\n\ndef large_order_promo(order):\n    \"\"\"7% discount for orders with 10 or more distinct items\"\"\"\n    distinct_items = {item.product for item in order.cart}\n    if len(distinct_items) >= 10:\n        return order.total() * .07\n    return 0\n\n# END STRATEGY\n\n```\n\n### best_promo 函数计算所有折扣， 并返回额度最大的\n\n\n```python\n# strategy_best.py\n# Strategy pattern -- function-based implementation\n# selecting best promotion from static list of functions\n\n\"\"\"\n    >>> joe = Customer('John Doe', 0)\n    >>> ann = Customer('Ann Smith', 1100)\n    >>> cart = [LineItem('banana', 4, .5),\n    ...         LineItem('apple', 10, 1.5),\n    ...         LineItem('watermellon', 5, 5.0)]\n    >>> Order(joe, cart, fidelity_promo)\n    <Order total: 42.00 due: 42.00>\n    >>> Order(ann, cart, fidelity_promo)\n    <Order total: 42.00 due: 39.90>\n    >>> banana_cart = [LineItem('banana', 30, .5),\n    ...                LineItem('apple', 10, 1.5)]\n    >>> Order(joe, banana_cart, bulk_item_promo)\n    <Order total: 30.00 due: 28.50>\n    >>> long_order = [LineItem(str(item_code), 1, 1.0)\n    ...               for item_code in range(10)]\n    >>> Order(joe, long_order, large_order_promo)\n    <Order total: 10.00 due: 9.30>\n    >>> Order(joe, cart, large_order_promo)\n    <Order total: 42.00 due: 42.00>\n\n# BEGIN STRATEGY_BEST_TESTS\n\n    >>> Order(joe, long_order, best_promo)  # <1>\n    <Order total: 10.00 due: 9.30>\n    >>> Order(joe, banana_cart, best_promo)  # <2>\n    <Order total: 30.00 due: 28.50>\n    >>> Order(ann, cart, best_promo)  # <3>\n    <Order total: 42.00 due: 39.90>\n\n# END STRATEGY_BEST_TESTS\n\"\"\"\n\nfrom collections import namedtuple\n\nCustomer = namedtuple('Customer', 'name fidelity')\n\n\nclass LineItem:\n\n    def __init__(self, product, quantity, price):\n        self.product = product\n        self.quantity = quantity\n        self.price = price\n\n    def total(self):\n        return self.price * self.quantity\n\n\nclass Order:  # the Context\n\n    def __init__(self, customer, cart, promotion=None):\n        self.customer = customer\n        self.cart = list(cart)\n        self.promotion = promotion\n\n    def total(self):\n        if not hasattr(self, '__total'):\n            self.__total = sum(item.total() for item in self.cart)\n        return self.__total\n\n    def due(self):\n        if self.promotion is None:\n            discount = 0\n        else:\n            discount = self.promotion(self)\n        return self.total() - discount\n\n    def __repr__(self):\n        fmt = '<Order total: {:.2f} due: {:.2f}>'\n        return fmt.format(self.total(), self.due())\n\n\ndef fidelity_promo(order):\n    \"\"\"5% discount for customers with 1000 or more fidelity points\"\"\"\n    return order.total() * .05 if order.customer.fidelity >= 1000 else 0\n\n\ndef bulk_item_promo(order):\n    \"\"\"10% discount for each LineItem with 20 or more units\"\"\"\n    discount = 0\n    for item in order.cart:\n        if item.quantity >= 20:\n            discount += item.total() * .1\n    return discount\n\n\ndef large_order_promo(order):\n    \"\"\"7% discount for orders with 10 or more distinct items\"\"\"\n    distinct_items = {item.product for item in order.cart}\n    if len(distinct_items) >= 10:\n        return order.total() * .07\n    return 0\n\n# BEGIN STRATEGY_BEST\n\npromos = [fidelity_promo, bulk_item_promo, large_order_promo]  # <1>\n\ndef best_promo(order):  # <2>\n    \"\"\"Select best discount available\n    \"\"\"\n    return max(promo(order) for promo in promos)  # <3>\n\n# END STRATEGY_BEST\n\n```\n\n### 找出模块中的全部策略\n\n\n```python\n# strategy_best2.py\n# Strategy pattern -- function-based implementation\n# selecting best promotion from current module globals\n\n\"\"\"\n    >>> joe = Customer('John Doe', 0)\n    >>> ann = Customer('Ann Smith', 1100)\n    >>> cart = [LineItem('banana', 4, .5),\n    ...         LineItem('apple', 10, 1.5),\n    ...         LineItem('watermellon', 5, 5.0)]\n    >>> Order(joe, cart, fidelity_promo)\n    <Order total: 42.00 due: 42.00>\n    >>> Order(ann, cart, fidelity_promo)\n    <Order total: 42.00 due: 39.90>\n    >>> banana_cart = [LineItem('banana', 30, .5),\n    ...                LineItem('apple', 10, 1.5)]\n    >>> Order(joe, banana_cart, bulk_item_promo)\n    <Order total: 30.00 due: 28.50>\n    >>> long_order = [LineItem(str(item_code), 1, 1.0)\n    ...               for item_code in range(10)]\n    >>> Order(joe, long_order, large_order_promo)\n    <Order total: 10.00 due: 9.30>\n    >>> Order(joe, cart, large_order_promo)\n    <Order total: 42.00 due: 42.00>\n\n# BEGIN STRATEGY_BEST_TESTS\n\n    >>> Order(joe, long_order, best_promo)\n    <Order total: 10.00 due: 9.30>\n    >>> Order(joe, banana_cart, best_promo)\n    <Order total: 30.00 due: 28.50>\n    >>> Order(ann, cart, best_promo)\n    <Order total: 42.00 due: 39.90>\n\n# END STRATEGY_BEST_TESTS\n\"\"\"\n\nfrom collections import namedtuple\n\nCustomer = namedtuple('Customer', 'name fidelity')\n\n\nclass LineItem:\n\n    def __init__(self, product, quantity, price):\n        self.product = product\n        self.quantity = quantity\n        self.price = price\n\n    def total(self):\n        return self.price * self.quantity\n\n\nclass Order:  # the Context\n\n    def __init__(self, customer, cart, promotion=None):\n        self.customer = customer\n        self.cart = list(cart)\n        self.promotion = promotion\n\n    def total(self):\n        if not hasattr(self, '__total'):\n            self.__total = sum(item.total() for item in self.cart)\n        return self.__total\n\n    def due(self):\n        if self.promotion is None:\n            discount = 0\n        else:\n            discount = self.promotion(self)\n        return self.total() - discount\n\n    def __repr__(self):\n        fmt = '<Order total: {:.2f} due: {:.2f}>'\n        return fmt.format(self.total(), self.due())\n\n\ndef fidelity_promo(order):\n    \"\"\"5% discount for customers with 1000 or more fidelity points\"\"\"\n    return order.total() * .05 if order.customer.fidelity >= 1000 else 0\n\n\ndef bulk_item_promo(order):\n    \"\"\"10% discount for each LineItem with 20 or more units\"\"\"\n    discount = 0\n    for item in order.cart:\n        if item.quantity >= 20:\n            discount += item.total() * .1\n    return discount\n\n\ndef large_order_promo(order):\n    \"\"\"7% discount for orders with 10 or more distinct items\"\"\"\n    distinct_items = {item.product for item in order.cart}\n    if len(distinct_items) >= 10:\n        return order.total() * .07\n    return 0\n\n# BEGIN STRATEGY_BEST2\n\npromos = [globals()[name] for name in globals()  # <1>\n            if name.endswith('_promo')  # <2>\n            and name != 'best_promo']   # <3>\n# print(globals())\n# print([name for name in globals()])\n\ndef best_promo(order):\n    \"\"\"Select best discount available\n    \"\"\"\n    return max(promo(order) for promo in promos)  # <4>\n\n\n\"\"\"\n# BEGIN STRATEGY_BEST3\n\npromos = [func for name, func in\n                inspect.getmembers(promotions, inspect.isfunction)]\n\ndef best_promo(order):\n    \"\"\"Select best discount available\n    \"\"\"\n    return max(promo(order) for promo in promos)\n\n# END STRATEGY_BEST3\n\"\"\"\n# END STRATEGY_BEST2\n\n```","source":"_posts/strategy.md","raw":"---\ntitle: 使用一等函数实现设计模式\ndate: 2017-11-13 15:10:16\ntags: python\ncategories: python学习\n---\n\n## 案例分析：重构“策略”模式\n\n### 经典的“策略”模式\n\n图中的UML类图指出了“策略”模式对类的编排。\n\n![](http://otl4ekdmf.bkt.clouddn.com/strategy.png)\n<!--more-->\n```python\n# classic_strategy.py\n# Strategy pattern -- classic implementation\n\n\"\"\"\n# BEGIN CLASSIC_STRATEGY_TESTS\n\n    >>> joe = Customer('John Doe', 0)  # <1>\n    >>> ann = Customer('Ann Smith', 1100)\n    >>> cart = [LineItem('banana', 4, .5),  # <2>\n    ...         LineItem('apple', 10, 1.5),\n    ...         LineItem('watermellon', 5, 5.0)]\n    >>> Order(joe, cart, FidelityPromo())  # <3>\n    <Order total: 42.00 due: 42.00>\n    >>> Order(ann, cart, FidelityPromo())  # <4>\n    <Order total: 42.00 due: 39.90>\n    >>> banana_cart = [LineItem('banana', 30, .5),  # <5>\n    ...                LineItem('apple', 10, 1.5)]\n    >>> Order(joe, banana_cart, BulkItemPromo())  # <6>\n    <Order total: 30.00 due: 28.50>\n    >>> long_order = [LineItem(str(item_code), 1, 1.0) # <7>\n    ...               for item_code in range(10)]\n    >>> Order(joe, long_order, LargeOrderPromo())  # <8>\n    <Order total: 10.00 due: 9.30>\n    >>> Order(joe, cart, LargeOrderPromo())\n    <Order total: 42.00 due: 42.00>\n\n# END CLASSIC_STRATEGY_TESTS\n\"\"\"\n# BEGIN CLASSIC_STRATEGY\n\nfrom abc import ABC, abstractmethod\nfrom collections import namedtuple\n\nCustomer = namedtuple('Customer', 'name fidelity')\n\n\nclass LineItem:\n\n    def __init__(self, product, quantity, price):\n        self.product = product\n        self.quantity = quantity\n        self.price = price\n\n    def total(self):\n        return self.price * self.quantity\n\n\nclass Order:  # the Context\n\n    def __init__(self, customer, cart, promotion=None):\n        self.customer = customer\n        self.cart = list(cart)\n        self.promotion = promotion\n\n    def total(self):\n        if not hasattr(self, '__total'):\n            self.__total = sum(item.total() for item in self.cart)\n        return self.__total\n\n    def due(self):\n        if self.promotion is None:\n            discount = 0\n        else:\n            discount = self.promotion.discount(self)\n        return self.total() - discount\n\n    def __repr__(self):\n        fmt = '<Order total: {:.2f} due: {:.2f}>'\n        return fmt.format(self.total(), self.due())\n\n\nclass Promotion(ABC):  # the Strategy: an Abstract Base Class\n\n    @abstractmethod\n    def discount(self, order):\n        \"\"\"Return discount as a positive dollar amount\"\"\"\n\n\nclass FidelityPromo(Promotion):  # first Concrete Strategy\n    \"\"\"5% discount for customers with 1000 or more fidelity points\"\"\"\n\n    def discount(self, order):\n        return order.total() * .05 if order.customer.fidelity >= 1000 else 0\n\n\nclass BulkItemPromo(Promotion):  # second Concrete Strategy\n    \"\"\"10% discount for each LineItem with 20 or more units\"\"\"\n\n    def discount(self, order):\n        discount = 0\n        for item in order.cart:\n            if item.quantity >= 20:\n                discount += item.total() * .1\n        return discount\n\n\nclass LargeOrderPromo(Promotion):  # third Concrete Strategy\n    \"\"\"7% discount for orders with 10 or more distinct items\"\"\"\n\n    def discount(self, order):\n        distinct_items = {item.product for item in order.cart}\n        if len(distinct_items) >= 10:\n            return order.total() * .07\n        return 0\n\n# END CLASSIC_STRATEGY\n```\n\n每个具体策略都是一个类，而且都只定义了一个方法，即discount。此外，策略实例没有状态（没有实例属性）。你可能会说，它们看起来像是普通的函数。以下示例是对以上示例的重构，把具体策略换成了简单的函数，而且去掉了Promo抽象类。\n\n### Order 类和使用函数实现的折扣策略\n\n\n```python\n# strategy.py\n# Strategy pattern -- function-based implementation\n\n\"\"\"\n# BEGIN STRATEGY_TESTS\n\n    >>> joe = Customer('John Doe', 0)  # <1>\n    >>> ann = Customer('Ann Smith', 1100)\n    >>> cart = [LineItem('banana', 4, .5),\n    ...         LineItem('apple', 10, 1.5),\n    ...         LineItem('watermellon', 5, 5.0)]\n    >>> Order(joe, cart, fidelity_promo)  # <2>\n    <Order total: 42.00 due: 42.00>\n    >>> Order(ann, cart, fidelity_promo)\n    <Order total: 42.00 due: 39.90>\n    >>> banana_cart = [LineItem('banana', 30, .5),\n    ...                LineItem('apple', 10, 1.5)]\n    >>> Order(joe, banana_cart, bulk_item_promo)  # <3>\n    <Order total: 30.00 due: 28.50>\n    >>> long_order = [LineItem(str(item_code), 1, 1.0)\n    ...               for item_code in range(10)]\n    >>> Order(joe, long_order, large_order_promo)\n    <Order total: 10.00 due: 9.30>\n    >>> Order(joe, cart, large_order_promo)\n    <Order total: 42.00 due: 42.00>\n\n# END STRATEGY_TESTS\n\"\"\"\n# BEGIN STRATEGY\n\nfrom collections import namedtuple\n\nCustomer = namedtuple('Customer', 'name fidelity')\n\n\nclass LineItem:\n\n    def __init__(self, product, quantity, price):\n        self.product = product\n        self.quantity = quantity\n        self.price = price\n\n    def total(self):\n        return self.price * self.quantity\n\n\nclass Order:  # the Context\n\n    def __init__(self, customer, cart, promotion=None):\n        self.customer = customer\n        self.cart = list(cart)\n        self.promotion = promotion\n\n    def total(self):\n        if not hasattr(self, '__total'):\n            self.__total = sum(item.total() for item in self.cart)\n        return self.__total\n\n    def due(self):\n        if self.promotion is None:\n            discount = 0\n        else:\n            discount = self.promotion(self)  # <1>\n        return self.total() - discount\n\n    def __repr__(self):\n        fmt = '<Order total: {:.2f} due: {:.2f}>'\n        return fmt.format(self.total(), self.due())\n\n# <2>\n\ndef fidelity_promo(order):  # <3>\n    \"\"\"5% discount for customers with 1000 or more fidelity points\"\"\"\n    return order.total() * .05 if order.customer.fidelity >= 1000 else 0\n\n\ndef bulk_item_promo(order):\n    \"\"\"10% discount for each LineItem with 20 or more units\"\"\"\n    discount = 0\n    for item in order.cart:\n        if item.quantity >= 20:\n            discount += item.total() * .1\n    return discount\n\n\ndef large_order_promo(order):\n    \"\"\"7% discount for orders with 10 or more distinct items\"\"\"\n    distinct_items = {item.product for item in order.cart}\n    if len(distinct_items) >= 10:\n        return order.total() * .07\n    return 0\n\n# END STRATEGY\n\n```\n\n### best_promo 函数计算所有折扣， 并返回额度最大的\n\n\n```python\n# strategy_best.py\n# Strategy pattern -- function-based implementation\n# selecting best promotion from static list of functions\n\n\"\"\"\n    >>> joe = Customer('John Doe', 0)\n    >>> ann = Customer('Ann Smith', 1100)\n    >>> cart = [LineItem('banana', 4, .5),\n    ...         LineItem('apple', 10, 1.5),\n    ...         LineItem('watermellon', 5, 5.0)]\n    >>> Order(joe, cart, fidelity_promo)\n    <Order total: 42.00 due: 42.00>\n    >>> Order(ann, cart, fidelity_promo)\n    <Order total: 42.00 due: 39.90>\n    >>> banana_cart = [LineItem('banana', 30, .5),\n    ...                LineItem('apple', 10, 1.5)]\n    >>> Order(joe, banana_cart, bulk_item_promo)\n    <Order total: 30.00 due: 28.50>\n    >>> long_order = [LineItem(str(item_code), 1, 1.0)\n    ...               for item_code in range(10)]\n    >>> Order(joe, long_order, large_order_promo)\n    <Order total: 10.00 due: 9.30>\n    >>> Order(joe, cart, large_order_promo)\n    <Order total: 42.00 due: 42.00>\n\n# BEGIN STRATEGY_BEST_TESTS\n\n    >>> Order(joe, long_order, best_promo)  # <1>\n    <Order total: 10.00 due: 9.30>\n    >>> Order(joe, banana_cart, best_promo)  # <2>\n    <Order total: 30.00 due: 28.50>\n    >>> Order(ann, cart, best_promo)  # <3>\n    <Order total: 42.00 due: 39.90>\n\n# END STRATEGY_BEST_TESTS\n\"\"\"\n\nfrom collections import namedtuple\n\nCustomer = namedtuple('Customer', 'name fidelity')\n\n\nclass LineItem:\n\n    def __init__(self, product, quantity, price):\n        self.product = product\n        self.quantity = quantity\n        self.price = price\n\n    def total(self):\n        return self.price * self.quantity\n\n\nclass Order:  # the Context\n\n    def __init__(self, customer, cart, promotion=None):\n        self.customer = customer\n        self.cart = list(cart)\n        self.promotion = promotion\n\n    def total(self):\n        if not hasattr(self, '__total'):\n            self.__total = sum(item.total() for item in self.cart)\n        return self.__total\n\n    def due(self):\n        if self.promotion is None:\n            discount = 0\n        else:\n            discount = self.promotion(self)\n        return self.total() - discount\n\n    def __repr__(self):\n        fmt = '<Order total: {:.2f} due: {:.2f}>'\n        return fmt.format(self.total(), self.due())\n\n\ndef fidelity_promo(order):\n    \"\"\"5% discount for customers with 1000 or more fidelity points\"\"\"\n    return order.total() * .05 if order.customer.fidelity >= 1000 else 0\n\n\ndef bulk_item_promo(order):\n    \"\"\"10% discount for each LineItem with 20 or more units\"\"\"\n    discount = 0\n    for item in order.cart:\n        if item.quantity >= 20:\n            discount += item.total() * .1\n    return discount\n\n\ndef large_order_promo(order):\n    \"\"\"7% discount for orders with 10 or more distinct items\"\"\"\n    distinct_items = {item.product for item in order.cart}\n    if len(distinct_items) >= 10:\n        return order.total() * .07\n    return 0\n\n# BEGIN STRATEGY_BEST\n\npromos = [fidelity_promo, bulk_item_promo, large_order_promo]  # <1>\n\ndef best_promo(order):  # <2>\n    \"\"\"Select best discount available\n    \"\"\"\n    return max(promo(order) for promo in promos)  # <3>\n\n# END STRATEGY_BEST\n\n```\n\n### 找出模块中的全部策略\n\n\n```python\n# strategy_best2.py\n# Strategy pattern -- function-based implementation\n# selecting best promotion from current module globals\n\n\"\"\"\n    >>> joe = Customer('John Doe', 0)\n    >>> ann = Customer('Ann Smith', 1100)\n    >>> cart = [LineItem('banana', 4, .5),\n    ...         LineItem('apple', 10, 1.5),\n    ...         LineItem('watermellon', 5, 5.0)]\n    >>> Order(joe, cart, fidelity_promo)\n    <Order total: 42.00 due: 42.00>\n    >>> Order(ann, cart, fidelity_promo)\n    <Order total: 42.00 due: 39.90>\n    >>> banana_cart = [LineItem('banana', 30, .5),\n    ...                LineItem('apple', 10, 1.5)]\n    >>> Order(joe, banana_cart, bulk_item_promo)\n    <Order total: 30.00 due: 28.50>\n    >>> long_order = [LineItem(str(item_code), 1, 1.0)\n    ...               for item_code in range(10)]\n    >>> Order(joe, long_order, large_order_promo)\n    <Order total: 10.00 due: 9.30>\n    >>> Order(joe, cart, large_order_promo)\n    <Order total: 42.00 due: 42.00>\n\n# BEGIN STRATEGY_BEST_TESTS\n\n    >>> Order(joe, long_order, best_promo)\n    <Order total: 10.00 due: 9.30>\n    >>> Order(joe, banana_cart, best_promo)\n    <Order total: 30.00 due: 28.50>\n    >>> Order(ann, cart, best_promo)\n    <Order total: 42.00 due: 39.90>\n\n# END STRATEGY_BEST_TESTS\n\"\"\"\n\nfrom collections import namedtuple\n\nCustomer = namedtuple('Customer', 'name fidelity')\n\n\nclass LineItem:\n\n    def __init__(self, product, quantity, price):\n        self.product = product\n        self.quantity = quantity\n        self.price = price\n\n    def total(self):\n        return self.price * self.quantity\n\n\nclass Order:  # the Context\n\n    def __init__(self, customer, cart, promotion=None):\n        self.customer = customer\n        self.cart = list(cart)\n        self.promotion = promotion\n\n    def total(self):\n        if not hasattr(self, '__total'):\n            self.__total = sum(item.total() for item in self.cart)\n        return self.__total\n\n    def due(self):\n        if self.promotion is None:\n            discount = 0\n        else:\n            discount = self.promotion(self)\n        return self.total() - discount\n\n    def __repr__(self):\n        fmt = '<Order total: {:.2f} due: {:.2f}>'\n        return fmt.format(self.total(), self.due())\n\n\ndef fidelity_promo(order):\n    \"\"\"5% discount for customers with 1000 or more fidelity points\"\"\"\n    return order.total() * .05 if order.customer.fidelity >= 1000 else 0\n\n\ndef bulk_item_promo(order):\n    \"\"\"10% discount for each LineItem with 20 or more units\"\"\"\n    discount = 0\n    for item in order.cart:\n        if item.quantity >= 20:\n            discount += item.total() * .1\n    return discount\n\n\ndef large_order_promo(order):\n    \"\"\"7% discount for orders with 10 or more distinct items\"\"\"\n    distinct_items = {item.product for item in order.cart}\n    if len(distinct_items) >= 10:\n        return order.total() * .07\n    return 0\n\n# BEGIN STRATEGY_BEST2\n\npromos = [globals()[name] for name in globals()  # <1>\n            if name.endswith('_promo')  # <2>\n            and name != 'best_promo']   # <3>\n# print(globals())\n# print([name for name in globals()])\n\ndef best_promo(order):\n    \"\"\"Select best discount available\n    \"\"\"\n    return max(promo(order) for promo in promos)  # <4>\n\n\n\"\"\"\n# BEGIN STRATEGY_BEST3\n\npromos = [func for name, func in\n                inspect.getmembers(promotions, inspect.isfunction)]\n\ndef best_promo(order):\n    \"\"\"Select best discount available\n    \"\"\"\n    return max(promo(order) for promo in promos)\n\n# END STRATEGY_BEST3\n\"\"\"\n# END STRATEGY_BEST2\n\n```","slug":"strategy","published":1,"updated":"2018-01-02T00:50:36.835Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjbwxj1040017h0voxegzaogw","content":"<h2 id=\"案例分析：重构“策略”模式\"><a href=\"#案例分析：重构“策略”模式\" class=\"headerlink\" title=\"案例分析：重构“策略”模式\"></a>案例分析：重构“策略”模式</h2><h3 id=\"经典的“策略”模式\"><a href=\"#经典的“策略”模式\" class=\"headerlink\" title=\"经典的“策略”模式\"></a>经典的“策略”模式</h3><p>图中的UML类图指出了“策略”模式对类的编排。</p>\n<p><img src=\"http://otl4ekdmf.bkt.clouddn.com/strategy.png\" alt=\"\"><br><a id=\"more\"></a><br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># classic_strategy.py</span></span><br><span class=\"line\"><span class=\"comment\"># Strategy pattern -- classic implementation</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\"># BEGIN CLASSIC_STRATEGY_TESTS</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    &gt;&gt;&gt; joe = Customer('John Doe', 0)  # &lt;1&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &gt;&gt;&gt; ann = Customer('Ann Smith', 1100)</span></span><br><span class=\"line\"><span class=\"string\">    &gt;&gt;&gt; cart = [LineItem('banana', 4, .5),  # &lt;2&gt;</span></span><br><span class=\"line\"><span class=\"string\">    ...         LineItem('apple', 10, 1.5),</span></span><br><span class=\"line\"><span class=\"string\">    ...         LineItem('watermellon', 5, 5.0)]</span></span><br><span class=\"line\"><span class=\"string\">    &gt;&gt;&gt; Order(joe, cart, FidelityPromo())  # &lt;3&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;Order total: 42.00 due: 42.00&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &gt;&gt;&gt; Order(ann, cart, FidelityPromo())  # &lt;4&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;Order total: 42.00 due: 39.90&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &gt;&gt;&gt; banana_cart = [LineItem('banana', 30, .5),  # &lt;5&gt;</span></span><br><span class=\"line\"><span class=\"string\">    ...                LineItem('apple', 10, 1.5)]</span></span><br><span class=\"line\"><span class=\"string\">    &gt;&gt;&gt; Order(joe, banana_cart, BulkItemPromo())  # &lt;6&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;Order total: 30.00 due: 28.50&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &gt;&gt;&gt; long_order = [LineItem(str(item_code), 1, 1.0) # &lt;7&gt;</span></span><br><span class=\"line\"><span class=\"string\">    ...               for item_code in range(10)]</span></span><br><span class=\"line\"><span class=\"string\">    &gt;&gt;&gt; Order(joe, long_order, LargeOrderPromo())  # &lt;8&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;Order total: 10.00 due: 9.30&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &gt;&gt;&gt; Order(joe, cart, LargeOrderPromo())</span></span><br><span class=\"line\"><span class=\"string\">    &lt;Order total: 42.00 due: 42.00&gt;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\"># END CLASSIC_STRATEGY_TESTS</span></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"comment\"># BEGIN CLASSIC_STRATEGY</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> abc <span class=\"keyword\">import</span> ABC, abstractmethod</span><br><span class=\"line\"><span class=\"keyword\">from</span> collections <span class=\"keyword\">import</span> namedtuple</span><br><span class=\"line\"></span><br><span class=\"line\">Customer = namedtuple(<span class=\"string\">'Customer'</span>, <span class=\"string\">'name fidelity'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LineItem</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, product, quantity, price)</span>:</span></span><br><span class=\"line\">        self.product = product</span><br><span class=\"line\">        self.quantity = quantity</span><br><span class=\"line\">        self.price = price</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">total</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.price * self.quantity</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Order</span>:</span>  <span class=\"comment\"># the Context</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, customer, cart, promotion=None)</span>:</span></span><br><span class=\"line\">        self.customer = customer</span><br><span class=\"line\">        self.cart = list(cart)</span><br><span class=\"line\">        self.promotion = promotion</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">total</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> hasattr(self, <span class=\"string\">'__total'</span>):</span><br><span class=\"line\">            self.__total = sum(item.total() <span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> self.cart)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.__total</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">due</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> self.promotion <span class=\"keyword\">is</span> <span class=\"keyword\">None</span>:</span><br><span class=\"line\">            discount = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            discount = self.promotion.discount(self)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.total() - discount</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__repr__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        fmt = <span class=\"string\">'&lt;Order total: &#123;:.2f&#125; due: &#123;:.2f&#125;&gt;'</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> fmt.format(self.total(), self.due())</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Promotion</span><span class=\"params\">(ABC)</span>:</span>  <span class=\"comment\"># the Strategy: an Abstract Base Class</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @abstractmethod</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">discount</span><span class=\"params\">(self, order)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"Return discount as a positive dollar amount\"\"\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FidelityPromo</span><span class=\"params\">(Promotion)</span>:</span>  <span class=\"comment\"># first Concrete Strategy</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"5% discount for customers with 1000 or more fidelity points\"\"\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">discount</span><span class=\"params\">(self, order)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> order.total() * <span class=\"number\">.05</span> <span class=\"keyword\">if</span> order.customer.fidelity &gt;= <span class=\"number\">1000</span> <span class=\"keyword\">else</span> <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BulkItemPromo</span><span class=\"params\">(Promotion)</span>:</span>  <span class=\"comment\"># second Concrete Strategy</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"10% discount for each LineItem with 20 or more units\"\"\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">discount</span><span class=\"params\">(self, order)</span>:</span></span><br><span class=\"line\">        discount = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> order.cart:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> item.quantity &gt;= <span class=\"number\">20</span>:</span><br><span class=\"line\">                discount += item.total() * <span class=\"number\">.1</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> discount</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LargeOrderPromo</span><span class=\"params\">(Promotion)</span>:</span>  <span class=\"comment\"># third Concrete Strategy</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"7% discount for orders with 10 or more distinct items\"\"\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">discount</span><span class=\"params\">(self, order)</span>:</span></span><br><span class=\"line\">        distinct_items = &#123;item.product <span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> order.cart&#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> len(distinct_items) &gt;= <span class=\"number\">10</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> order.total() * <span class=\"number\">.07</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># END CLASSIC_STRATEGY</span></span><br></pre></td></tr></table></figure></p>\n<p>每个具体策略都是一个类，而且都只定义了一个方法，即discount。此外，策略实例没有状态（没有实例属性）。你可能会说，它们看起来像是普通的函数。以下示例是对以上示例的重构，把具体策略换成了简单的函数，而且去掉了Promo抽象类。</p>\n<h3 id=\"Order-类和使用函数实现的折扣策略\"><a href=\"#Order-类和使用函数实现的折扣策略\" class=\"headerlink\" title=\"Order 类和使用函数实现的折扣策略\"></a>Order 类和使用函数实现的折扣策略</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># strategy.py</span></span><br><span class=\"line\"><span class=\"comment\"># Strategy pattern -- function-based implementation</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\"># BEGIN STRATEGY_TESTS</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    &gt;&gt;&gt; joe = Customer('John Doe', 0)  # &lt;1&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &gt;&gt;&gt; ann = Customer('Ann Smith', 1100)</span></span><br><span class=\"line\"><span class=\"string\">    &gt;&gt;&gt; cart = [LineItem('banana', 4, .5),</span></span><br><span class=\"line\"><span class=\"string\">    ...         LineItem('apple', 10, 1.5),</span></span><br><span class=\"line\"><span class=\"string\">    ...         LineItem('watermellon', 5, 5.0)]</span></span><br><span class=\"line\"><span class=\"string\">    &gt;&gt;&gt; Order(joe, cart, fidelity_promo)  # &lt;2&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;Order total: 42.00 due: 42.00&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &gt;&gt;&gt; Order(ann, cart, fidelity_promo)</span></span><br><span class=\"line\"><span class=\"string\">    &lt;Order total: 42.00 due: 39.90&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &gt;&gt;&gt; banana_cart = [LineItem('banana', 30, .5),</span></span><br><span class=\"line\"><span class=\"string\">    ...                LineItem('apple', 10, 1.5)]</span></span><br><span class=\"line\"><span class=\"string\">    &gt;&gt;&gt; Order(joe, banana_cart, bulk_item_promo)  # &lt;3&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;Order total: 30.00 due: 28.50&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &gt;&gt;&gt; long_order = [LineItem(str(item_code), 1, 1.0)</span></span><br><span class=\"line\"><span class=\"string\">    ...               for item_code in range(10)]</span></span><br><span class=\"line\"><span class=\"string\">    &gt;&gt;&gt; Order(joe, long_order, large_order_promo)</span></span><br><span class=\"line\"><span class=\"string\">    &lt;Order total: 10.00 due: 9.30&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &gt;&gt;&gt; Order(joe, cart, large_order_promo)</span></span><br><span class=\"line\"><span class=\"string\">    &lt;Order total: 42.00 due: 42.00&gt;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\"># END STRATEGY_TESTS</span></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"comment\"># BEGIN STRATEGY</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> collections <span class=\"keyword\">import</span> namedtuple</span><br><span class=\"line\"></span><br><span class=\"line\">Customer = namedtuple(<span class=\"string\">'Customer'</span>, <span class=\"string\">'name fidelity'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LineItem</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, product, quantity, price)</span>:</span></span><br><span class=\"line\">        self.product = product</span><br><span class=\"line\">        self.quantity = quantity</span><br><span class=\"line\">        self.price = price</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">total</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.price * self.quantity</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Order</span>:</span>  <span class=\"comment\"># the Context</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, customer, cart, promotion=None)</span>:</span></span><br><span class=\"line\">        self.customer = customer</span><br><span class=\"line\">        self.cart = list(cart)</span><br><span class=\"line\">        self.promotion = promotion</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">total</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> hasattr(self, <span class=\"string\">'__total'</span>):</span><br><span class=\"line\">            self.__total = sum(item.total() <span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> self.cart)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.__total</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">due</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> self.promotion <span class=\"keyword\">is</span> <span class=\"keyword\">None</span>:</span><br><span class=\"line\">            discount = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            discount = self.promotion(self)  <span class=\"comment\"># &lt;1&gt;</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.total() - discount</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__repr__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        fmt = <span class=\"string\">'&lt;Order total: &#123;:.2f&#125; due: &#123;:.2f&#125;&gt;'</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> fmt.format(self.total(), self.due())</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># &lt;2&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">fidelity_promo</span><span class=\"params\">(order)</span>:</span>  <span class=\"comment\"># &lt;3&gt;</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"5% discount for customers with 1000 or more fidelity points\"\"\"</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> order.total() * <span class=\"number\">.05</span> <span class=\"keyword\">if</span> order.customer.fidelity &gt;= <span class=\"number\">1000</span> <span class=\"keyword\">else</span> <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">bulk_item_promo</span><span class=\"params\">(order)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"10% discount for each LineItem with 20 or more units\"\"\"</span></span><br><span class=\"line\">    discount = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> order.cart:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> item.quantity &gt;= <span class=\"number\">20</span>:</span><br><span class=\"line\">            discount += item.total() * <span class=\"number\">.1</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> discount</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">large_order_promo</span><span class=\"params\">(order)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"7% discount for orders with 10 or more distinct items\"\"\"</span></span><br><span class=\"line\">    distinct_items = &#123;item.product <span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> order.cart&#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> len(distinct_items) &gt;= <span class=\"number\">10</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> order.total() * <span class=\"number\">.07</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># END STRATEGY</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"best-promo-函数计算所有折扣，-并返回额度最大的\"><a href=\"#best-promo-函数计算所有折扣，-并返回额度最大的\" class=\"headerlink\" title=\"best_promo 函数计算所有折扣， 并返回额度最大的\"></a>best_promo 函数计算所有折扣， 并返回额度最大的</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># strategy_best.py</span></span><br><span class=\"line\"><span class=\"comment\"># Strategy pattern -- function-based implementation</span></span><br><span class=\"line\"><span class=\"comment\"># selecting best promotion from static list of functions</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">    &gt;&gt;&gt; joe = Customer('John Doe', 0)</span></span><br><span class=\"line\"><span class=\"string\">    &gt;&gt;&gt; ann = Customer('Ann Smith', 1100)</span></span><br><span class=\"line\"><span class=\"string\">    &gt;&gt;&gt; cart = [LineItem('banana', 4, .5),</span></span><br><span class=\"line\"><span class=\"string\">    ...         LineItem('apple', 10, 1.5),</span></span><br><span class=\"line\"><span class=\"string\">    ...         LineItem('watermellon', 5, 5.0)]</span></span><br><span class=\"line\"><span class=\"string\">    &gt;&gt;&gt; Order(joe, cart, fidelity_promo)</span></span><br><span class=\"line\"><span class=\"string\">    &lt;Order total: 42.00 due: 42.00&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &gt;&gt;&gt; Order(ann, cart, fidelity_promo)</span></span><br><span class=\"line\"><span class=\"string\">    &lt;Order total: 42.00 due: 39.90&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &gt;&gt;&gt; banana_cart = [LineItem('banana', 30, .5),</span></span><br><span class=\"line\"><span class=\"string\">    ...                LineItem('apple', 10, 1.5)]</span></span><br><span class=\"line\"><span class=\"string\">    &gt;&gt;&gt; Order(joe, banana_cart, bulk_item_promo)</span></span><br><span class=\"line\"><span class=\"string\">    &lt;Order total: 30.00 due: 28.50&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &gt;&gt;&gt; long_order = [LineItem(str(item_code), 1, 1.0)</span></span><br><span class=\"line\"><span class=\"string\">    ...               for item_code in range(10)]</span></span><br><span class=\"line\"><span class=\"string\">    &gt;&gt;&gt; Order(joe, long_order, large_order_promo)</span></span><br><span class=\"line\"><span class=\"string\">    &lt;Order total: 10.00 due: 9.30&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &gt;&gt;&gt; Order(joe, cart, large_order_promo)</span></span><br><span class=\"line\"><span class=\"string\">    &lt;Order total: 42.00 due: 42.00&gt;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\"># BEGIN STRATEGY_BEST_TESTS</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    &gt;&gt;&gt; Order(joe, long_order, best_promo)  # &lt;1&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;Order total: 10.00 due: 9.30&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &gt;&gt;&gt; Order(joe, banana_cart, best_promo)  # &lt;2&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;Order total: 30.00 due: 28.50&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &gt;&gt;&gt; Order(ann, cart, best_promo)  # &lt;3&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;Order total: 42.00 due: 39.90&gt;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\"># END STRATEGY_BEST_TESTS</span></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> collections <span class=\"keyword\">import</span> namedtuple</span><br><span class=\"line\"></span><br><span class=\"line\">Customer = namedtuple(<span class=\"string\">'Customer'</span>, <span class=\"string\">'name fidelity'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LineItem</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, product, quantity, price)</span>:</span></span><br><span class=\"line\">        self.product = product</span><br><span class=\"line\">        self.quantity = quantity</span><br><span class=\"line\">        self.price = price</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">total</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.price * self.quantity</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Order</span>:</span>  <span class=\"comment\"># the Context</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, customer, cart, promotion=None)</span>:</span></span><br><span class=\"line\">        self.customer = customer</span><br><span class=\"line\">        self.cart = list(cart)</span><br><span class=\"line\">        self.promotion = promotion</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">total</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> hasattr(self, <span class=\"string\">'__total'</span>):</span><br><span class=\"line\">            self.__total = sum(item.total() <span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> self.cart)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.__total</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">due</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> self.promotion <span class=\"keyword\">is</span> <span class=\"keyword\">None</span>:</span><br><span class=\"line\">            discount = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            discount = self.promotion(self)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.total() - discount</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__repr__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        fmt = <span class=\"string\">'&lt;Order total: &#123;:.2f&#125; due: &#123;:.2f&#125;&gt;'</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> fmt.format(self.total(), self.due())</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">fidelity_promo</span><span class=\"params\">(order)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"5% discount for customers with 1000 or more fidelity points\"\"\"</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> order.total() * <span class=\"number\">.05</span> <span class=\"keyword\">if</span> order.customer.fidelity &gt;= <span class=\"number\">1000</span> <span class=\"keyword\">else</span> <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">bulk_item_promo</span><span class=\"params\">(order)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"10% discount for each LineItem with 20 or more units\"\"\"</span></span><br><span class=\"line\">    discount = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> order.cart:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> item.quantity &gt;= <span class=\"number\">20</span>:</span><br><span class=\"line\">            discount += item.total() * <span class=\"number\">.1</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> discount</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">large_order_promo</span><span class=\"params\">(order)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"7% discount for orders with 10 or more distinct items\"\"\"</span></span><br><span class=\"line\">    distinct_items = &#123;item.product <span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> order.cart&#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> len(distinct_items) &gt;= <span class=\"number\">10</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> order.total() * <span class=\"number\">.07</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># BEGIN STRATEGY_BEST</span></span><br><span class=\"line\"></span><br><span class=\"line\">promos = [fidelity_promo, bulk_item_promo, large_order_promo]  <span class=\"comment\"># &lt;1&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">best_promo</span><span class=\"params\">(order)</span>:</span>  <span class=\"comment\"># &lt;2&gt;</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"Select best discount available</span></span><br><span class=\"line\"><span class=\"string\">    \"\"\"</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> max(promo(order) <span class=\"keyword\">for</span> promo <span class=\"keyword\">in</span> promos)  <span class=\"comment\"># &lt;3&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># END STRATEGY_BEST</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"找出模块中的全部策略\"><a href=\"#找出模块中的全部策略\" class=\"headerlink\" title=\"找出模块中的全部策略\"></a>找出模块中的全部策略</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># strategy_best2.py</span></span><br><span class=\"line\"><span class=\"comment\"># Strategy pattern -- function-based implementation</span></span><br><span class=\"line\"><span class=\"comment\"># selecting best promotion from current module globals</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">    &gt;&gt;&gt; joe = Customer('John Doe', 0)</span></span><br><span class=\"line\"><span class=\"string\">    &gt;&gt;&gt; ann = Customer('Ann Smith', 1100)</span></span><br><span class=\"line\"><span class=\"string\">    &gt;&gt;&gt; cart = [LineItem('banana', 4, .5),</span></span><br><span class=\"line\"><span class=\"string\">    ...         LineItem('apple', 10, 1.5),</span></span><br><span class=\"line\"><span class=\"string\">    ...         LineItem('watermellon', 5, 5.0)]</span></span><br><span class=\"line\"><span class=\"string\">    &gt;&gt;&gt; Order(joe, cart, fidelity_promo)</span></span><br><span class=\"line\"><span class=\"string\">    &lt;Order total: 42.00 due: 42.00&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &gt;&gt;&gt; Order(ann, cart, fidelity_promo)</span></span><br><span class=\"line\"><span class=\"string\">    &lt;Order total: 42.00 due: 39.90&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &gt;&gt;&gt; banana_cart = [LineItem('banana', 30, .5),</span></span><br><span class=\"line\"><span class=\"string\">    ...                LineItem('apple', 10, 1.5)]</span></span><br><span class=\"line\"><span class=\"string\">    &gt;&gt;&gt; Order(joe, banana_cart, bulk_item_promo)</span></span><br><span class=\"line\"><span class=\"string\">    &lt;Order total: 30.00 due: 28.50&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &gt;&gt;&gt; long_order = [LineItem(str(item_code), 1, 1.0)</span></span><br><span class=\"line\"><span class=\"string\">    ...               for item_code in range(10)]</span></span><br><span class=\"line\"><span class=\"string\">    &gt;&gt;&gt; Order(joe, long_order, large_order_promo)</span></span><br><span class=\"line\"><span class=\"string\">    &lt;Order total: 10.00 due: 9.30&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &gt;&gt;&gt; Order(joe, cart, large_order_promo)</span></span><br><span class=\"line\"><span class=\"string\">    &lt;Order total: 42.00 due: 42.00&gt;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\"># BEGIN STRATEGY_BEST_TESTS</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    &gt;&gt;&gt; Order(joe, long_order, best_promo)</span></span><br><span class=\"line\"><span class=\"string\">    &lt;Order total: 10.00 due: 9.30&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &gt;&gt;&gt; Order(joe, banana_cart, best_promo)</span></span><br><span class=\"line\"><span class=\"string\">    &lt;Order total: 30.00 due: 28.50&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &gt;&gt;&gt; Order(ann, cart, best_promo)</span></span><br><span class=\"line\"><span class=\"string\">    &lt;Order total: 42.00 due: 39.90&gt;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\"># END STRATEGY_BEST_TESTS</span></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> collections <span class=\"keyword\">import</span> namedtuple</span><br><span class=\"line\"></span><br><span class=\"line\">Customer = namedtuple(<span class=\"string\">'Customer'</span>, <span class=\"string\">'name fidelity'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LineItem</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, product, quantity, price)</span>:</span></span><br><span class=\"line\">        self.product = product</span><br><span class=\"line\">        self.quantity = quantity</span><br><span class=\"line\">        self.price = price</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">total</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.price * self.quantity</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Order</span>:</span>  <span class=\"comment\"># the Context</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, customer, cart, promotion=None)</span>:</span></span><br><span class=\"line\">        self.customer = customer</span><br><span class=\"line\">        self.cart = list(cart)</span><br><span class=\"line\">        self.promotion = promotion</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">total</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> hasattr(self, <span class=\"string\">'__total'</span>):</span><br><span class=\"line\">            self.__total = sum(item.total() <span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> self.cart)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.__total</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">due</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> self.promotion <span class=\"keyword\">is</span> <span class=\"keyword\">None</span>:</span><br><span class=\"line\">            discount = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            discount = self.promotion(self)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.total() - discount</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__repr__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        fmt = <span class=\"string\">'&lt;Order total: &#123;:.2f&#125; due: &#123;:.2f&#125;&gt;'</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> fmt.format(self.total(), self.due())</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">fidelity_promo</span><span class=\"params\">(order)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"5% discount for customers with 1000 or more fidelity points\"\"\"</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> order.total() * <span class=\"number\">.05</span> <span class=\"keyword\">if</span> order.customer.fidelity &gt;= <span class=\"number\">1000</span> <span class=\"keyword\">else</span> <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">bulk_item_promo</span><span class=\"params\">(order)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"10% discount for each LineItem with 20 or more units\"\"\"</span></span><br><span class=\"line\">    discount = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> order.cart:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> item.quantity &gt;= <span class=\"number\">20</span>:</span><br><span class=\"line\">            discount += item.total() * <span class=\"number\">.1</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> discount</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">large_order_promo</span><span class=\"params\">(order)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"7% discount for orders with 10 or more distinct items\"\"\"</span></span><br><span class=\"line\">    distinct_items = &#123;item.product <span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> order.cart&#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> len(distinct_items) &gt;= <span class=\"number\">10</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> order.total() * <span class=\"number\">.07</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># BEGIN STRATEGY_BEST2</span></span><br><span class=\"line\"></span><br><span class=\"line\">promos = [globals()[name] <span class=\"keyword\">for</span> name <span class=\"keyword\">in</span> globals()  <span class=\"comment\"># &lt;1&gt;</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> name.endswith(<span class=\"string\">'_promo'</span>)  <span class=\"comment\"># &lt;2&gt;</span></span><br><span class=\"line\">            <span class=\"keyword\">and</span> name != <span class=\"string\">'best_promo'</span>]   <span class=\"comment\"># &lt;3&gt;</span></span><br><span class=\"line\"><span class=\"comment\"># print(globals())</span></span><br><span class=\"line\"><span class=\"comment\"># print([name for name in globals()])</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">best_promo</span><span class=\"params\">(order)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"Select best discount available</span></span><br><span class=\"line\"><span class=\"string\">    \"\"\"</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> max(promo(order) <span class=\"keyword\">for</span> promo <span class=\"keyword\">in</span> promos)  <span class=\"comment\"># &lt;4&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\"># BEGIN STRATEGY_BEST3</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">promos = [func for name, func in</span></span><br><span class=\"line\"><span class=\"string\">                inspect.getmembers(promotions, inspect.isfunction)]</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">def best_promo(order):</span></span><br><span class=\"line\"><span class=\"string\">    \"\"\"</span>Select best discount available</span><br><span class=\"line\">    <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">    return max(promo(order) for promo in promos)</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\"># END STRATEGY_BEST3</span></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"comment\"># END STRATEGY_BEST2</span></span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<h2 id=\"案例分析：重构“策略”模式\"><a href=\"#案例分析：重构“策略”模式\" class=\"headerlink\" title=\"案例分析：重构“策略”模式\"></a>案例分析：重构“策略”模式</h2><h3 id=\"经典的“策略”模式\"><a href=\"#经典的“策略”模式\" class=\"headerlink\" title=\"经典的“策略”模式\"></a>经典的“策略”模式</h3><p>图中的UML类图指出了“策略”模式对类的编排。</p>\n<p><img src=\"http://otl4ekdmf.bkt.clouddn.com/strategy.png\" alt=\"\"><br>","more":"<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># classic_strategy.py</span></span><br><span class=\"line\"><span class=\"comment\"># Strategy pattern -- classic implementation</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\"># BEGIN CLASSIC_STRATEGY_TESTS</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    &gt;&gt;&gt; joe = Customer('John Doe', 0)  # &lt;1&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &gt;&gt;&gt; ann = Customer('Ann Smith', 1100)</span></span><br><span class=\"line\"><span class=\"string\">    &gt;&gt;&gt; cart = [LineItem('banana', 4, .5),  # &lt;2&gt;</span></span><br><span class=\"line\"><span class=\"string\">    ...         LineItem('apple', 10, 1.5),</span></span><br><span class=\"line\"><span class=\"string\">    ...         LineItem('watermellon', 5, 5.0)]</span></span><br><span class=\"line\"><span class=\"string\">    &gt;&gt;&gt; Order(joe, cart, FidelityPromo())  # &lt;3&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;Order total: 42.00 due: 42.00&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &gt;&gt;&gt; Order(ann, cart, FidelityPromo())  # &lt;4&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;Order total: 42.00 due: 39.90&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &gt;&gt;&gt; banana_cart = [LineItem('banana', 30, .5),  # &lt;5&gt;</span></span><br><span class=\"line\"><span class=\"string\">    ...                LineItem('apple', 10, 1.5)]</span></span><br><span class=\"line\"><span class=\"string\">    &gt;&gt;&gt; Order(joe, banana_cart, BulkItemPromo())  # &lt;6&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;Order total: 30.00 due: 28.50&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &gt;&gt;&gt; long_order = [LineItem(str(item_code), 1, 1.0) # &lt;7&gt;</span></span><br><span class=\"line\"><span class=\"string\">    ...               for item_code in range(10)]</span></span><br><span class=\"line\"><span class=\"string\">    &gt;&gt;&gt; Order(joe, long_order, LargeOrderPromo())  # &lt;8&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;Order total: 10.00 due: 9.30&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &gt;&gt;&gt; Order(joe, cart, LargeOrderPromo())</span></span><br><span class=\"line\"><span class=\"string\">    &lt;Order total: 42.00 due: 42.00&gt;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\"># END CLASSIC_STRATEGY_TESTS</span></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"comment\"># BEGIN CLASSIC_STRATEGY</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> abc <span class=\"keyword\">import</span> ABC, abstractmethod</span><br><span class=\"line\"><span class=\"keyword\">from</span> collections <span class=\"keyword\">import</span> namedtuple</span><br><span class=\"line\"></span><br><span class=\"line\">Customer = namedtuple(<span class=\"string\">'Customer'</span>, <span class=\"string\">'name fidelity'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LineItem</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, product, quantity, price)</span>:</span></span><br><span class=\"line\">        self.product = product</span><br><span class=\"line\">        self.quantity = quantity</span><br><span class=\"line\">        self.price = price</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">total</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.price * self.quantity</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Order</span>:</span>  <span class=\"comment\"># the Context</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, customer, cart, promotion=None)</span>:</span></span><br><span class=\"line\">        self.customer = customer</span><br><span class=\"line\">        self.cart = list(cart)</span><br><span class=\"line\">        self.promotion = promotion</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">total</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> hasattr(self, <span class=\"string\">'__total'</span>):</span><br><span class=\"line\">            self.__total = sum(item.total() <span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> self.cart)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.__total</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">due</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> self.promotion <span class=\"keyword\">is</span> <span class=\"keyword\">None</span>:</span><br><span class=\"line\">            discount = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            discount = self.promotion.discount(self)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.total() - discount</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__repr__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        fmt = <span class=\"string\">'&lt;Order total: &#123;:.2f&#125; due: &#123;:.2f&#125;&gt;'</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> fmt.format(self.total(), self.due())</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Promotion</span><span class=\"params\">(ABC)</span>:</span>  <span class=\"comment\"># the Strategy: an Abstract Base Class</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @abstractmethod</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">discount</span><span class=\"params\">(self, order)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"Return discount as a positive dollar amount\"\"\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FidelityPromo</span><span class=\"params\">(Promotion)</span>:</span>  <span class=\"comment\"># first Concrete Strategy</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"5% discount for customers with 1000 or more fidelity points\"\"\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">discount</span><span class=\"params\">(self, order)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> order.total() * <span class=\"number\">.05</span> <span class=\"keyword\">if</span> order.customer.fidelity &gt;= <span class=\"number\">1000</span> <span class=\"keyword\">else</span> <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BulkItemPromo</span><span class=\"params\">(Promotion)</span>:</span>  <span class=\"comment\"># second Concrete Strategy</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"10% discount for each LineItem with 20 or more units\"\"\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">discount</span><span class=\"params\">(self, order)</span>:</span></span><br><span class=\"line\">        discount = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> order.cart:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> item.quantity &gt;= <span class=\"number\">20</span>:</span><br><span class=\"line\">                discount += item.total() * <span class=\"number\">.1</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> discount</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LargeOrderPromo</span><span class=\"params\">(Promotion)</span>:</span>  <span class=\"comment\"># third Concrete Strategy</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"7% discount for orders with 10 or more distinct items\"\"\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">discount</span><span class=\"params\">(self, order)</span>:</span></span><br><span class=\"line\">        distinct_items = &#123;item.product <span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> order.cart&#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> len(distinct_items) &gt;= <span class=\"number\">10</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> order.total() * <span class=\"number\">.07</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># END CLASSIC_STRATEGY</span></span><br></pre></td></tr></table></figure></p>\n<p>每个具体策略都是一个类，而且都只定义了一个方法，即discount。此外，策略实例没有状态（没有实例属性）。你可能会说，它们看起来像是普通的函数。以下示例是对以上示例的重构，把具体策略换成了简单的函数，而且去掉了Promo抽象类。</p>\n<h3 id=\"Order-类和使用函数实现的折扣策略\"><a href=\"#Order-类和使用函数实现的折扣策略\" class=\"headerlink\" title=\"Order 类和使用函数实现的折扣策略\"></a>Order 类和使用函数实现的折扣策略</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># strategy.py</span></span><br><span class=\"line\"><span class=\"comment\"># Strategy pattern -- function-based implementation</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\"># BEGIN STRATEGY_TESTS</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    &gt;&gt;&gt; joe = Customer('John Doe', 0)  # &lt;1&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &gt;&gt;&gt; ann = Customer('Ann Smith', 1100)</span></span><br><span class=\"line\"><span class=\"string\">    &gt;&gt;&gt; cart = [LineItem('banana', 4, .5),</span></span><br><span class=\"line\"><span class=\"string\">    ...         LineItem('apple', 10, 1.5),</span></span><br><span class=\"line\"><span class=\"string\">    ...         LineItem('watermellon', 5, 5.0)]</span></span><br><span class=\"line\"><span class=\"string\">    &gt;&gt;&gt; Order(joe, cart, fidelity_promo)  # &lt;2&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;Order total: 42.00 due: 42.00&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &gt;&gt;&gt; Order(ann, cart, fidelity_promo)</span></span><br><span class=\"line\"><span class=\"string\">    &lt;Order total: 42.00 due: 39.90&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &gt;&gt;&gt; banana_cart = [LineItem('banana', 30, .5),</span></span><br><span class=\"line\"><span class=\"string\">    ...                LineItem('apple', 10, 1.5)]</span></span><br><span class=\"line\"><span class=\"string\">    &gt;&gt;&gt; Order(joe, banana_cart, bulk_item_promo)  # &lt;3&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;Order total: 30.00 due: 28.50&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &gt;&gt;&gt; long_order = [LineItem(str(item_code), 1, 1.0)</span></span><br><span class=\"line\"><span class=\"string\">    ...               for item_code in range(10)]</span></span><br><span class=\"line\"><span class=\"string\">    &gt;&gt;&gt; Order(joe, long_order, large_order_promo)</span></span><br><span class=\"line\"><span class=\"string\">    &lt;Order total: 10.00 due: 9.30&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &gt;&gt;&gt; Order(joe, cart, large_order_promo)</span></span><br><span class=\"line\"><span class=\"string\">    &lt;Order total: 42.00 due: 42.00&gt;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\"># END STRATEGY_TESTS</span></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"comment\"># BEGIN STRATEGY</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> collections <span class=\"keyword\">import</span> namedtuple</span><br><span class=\"line\"></span><br><span class=\"line\">Customer = namedtuple(<span class=\"string\">'Customer'</span>, <span class=\"string\">'name fidelity'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LineItem</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, product, quantity, price)</span>:</span></span><br><span class=\"line\">        self.product = product</span><br><span class=\"line\">        self.quantity = quantity</span><br><span class=\"line\">        self.price = price</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">total</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.price * self.quantity</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Order</span>:</span>  <span class=\"comment\"># the Context</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, customer, cart, promotion=None)</span>:</span></span><br><span class=\"line\">        self.customer = customer</span><br><span class=\"line\">        self.cart = list(cart)</span><br><span class=\"line\">        self.promotion = promotion</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">total</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> hasattr(self, <span class=\"string\">'__total'</span>):</span><br><span class=\"line\">            self.__total = sum(item.total() <span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> self.cart)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.__total</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">due</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> self.promotion <span class=\"keyword\">is</span> <span class=\"keyword\">None</span>:</span><br><span class=\"line\">            discount = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            discount = self.promotion(self)  <span class=\"comment\"># &lt;1&gt;</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.total() - discount</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__repr__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        fmt = <span class=\"string\">'&lt;Order total: &#123;:.2f&#125; due: &#123;:.2f&#125;&gt;'</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> fmt.format(self.total(), self.due())</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># &lt;2&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">fidelity_promo</span><span class=\"params\">(order)</span>:</span>  <span class=\"comment\"># &lt;3&gt;</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"5% discount for customers with 1000 or more fidelity points\"\"\"</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> order.total() * <span class=\"number\">.05</span> <span class=\"keyword\">if</span> order.customer.fidelity &gt;= <span class=\"number\">1000</span> <span class=\"keyword\">else</span> <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">bulk_item_promo</span><span class=\"params\">(order)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"10% discount for each LineItem with 20 or more units\"\"\"</span></span><br><span class=\"line\">    discount = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> order.cart:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> item.quantity &gt;= <span class=\"number\">20</span>:</span><br><span class=\"line\">            discount += item.total() * <span class=\"number\">.1</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> discount</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">large_order_promo</span><span class=\"params\">(order)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"7% discount for orders with 10 or more distinct items\"\"\"</span></span><br><span class=\"line\">    distinct_items = &#123;item.product <span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> order.cart&#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> len(distinct_items) &gt;= <span class=\"number\">10</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> order.total() * <span class=\"number\">.07</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># END STRATEGY</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"best-promo-函数计算所有折扣，-并返回额度最大的\"><a href=\"#best-promo-函数计算所有折扣，-并返回额度最大的\" class=\"headerlink\" title=\"best_promo 函数计算所有折扣， 并返回额度最大的\"></a>best_promo 函数计算所有折扣， 并返回额度最大的</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># strategy_best.py</span></span><br><span class=\"line\"><span class=\"comment\"># Strategy pattern -- function-based implementation</span></span><br><span class=\"line\"><span class=\"comment\"># selecting best promotion from static list of functions</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">    &gt;&gt;&gt; joe = Customer('John Doe', 0)</span></span><br><span class=\"line\"><span class=\"string\">    &gt;&gt;&gt; ann = Customer('Ann Smith', 1100)</span></span><br><span class=\"line\"><span class=\"string\">    &gt;&gt;&gt; cart = [LineItem('banana', 4, .5),</span></span><br><span class=\"line\"><span class=\"string\">    ...         LineItem('apple', 10, 1.5),</span></span><br><span class=\"line\"><span class=\"string\">    ...         LineItem('watermellon', 5, 5.0)]</span></span><br><span class=\"line\"><span class=\"string\">    &gt;&gt;&gt; Order(joe, cart, fidelity_promo)</span></span><br><span class=\"line\"><span class=\"string\">    &lt;Order total: 42.00 due: 42.00&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &gt;&gt;&gt; Order(ann, cart, fidelity_promo)</span></span><br><span class=\"line\"><span class=\"string\">    &lt;Order total: 42.00 due: 39.90&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &gt;&gt;&gt; banana_cart = [LineItem('banana', 30, .5),</span></span><br><span class=\"line\"><span class=\"string\">    ...                LineItem('apple', 10, 1.5)]</span></span><br><span class=\"line\"><span class=\"string\">    &gt;&gt;&gt; Order(joe, banana_cart, bulk_item_promo)</span></span><br><span class=\"line\"><span class=\"string\">    &lt;Order total: 30.00 due: 28.50&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &gt;&gt;&gt; long_order = [LineItem(str(item_code), 1, 1.0)</span></span><br><span class=\"line\"><span class=\"string\">    ...               for item_code in range(10)]</span></span><br><span class=\"line\"><span class=\"string\">    &gt;&gt;&gt; Order(joe, long_order, large_order_promo)</span></span><br><span class=\"line\"><span class=\"string\">    &lt;Order total: 10.00 due: 9.30&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &gt;&gt;&gt; Order(joe, cart, large_order_promo)</span></span><br><span class=\"line\"><span class=\"string\">    &lt;Order total: 42.00 due: 42.00&gt;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\"># BEGIN STRATEGY_BEST_TESTS</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    &gt;&gt;&gt; Order(joe, long_order, best_promo)  # &lt;1&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;Order total: 10.00 due: 9.30&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &gt;&gt;&gt; Order(joe, banana_cart, best_promo)  # &lt;2&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;Order total: 30.00 due: 28.50&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &gt;&gt;&gt; Order(ann, cart, best_promo)  # &lt;3&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;Order total: 42.00 due: 39.90&gt;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\"># END STRATEGY_BEST_TESTS</span></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> collections <span class=\"keyword\">import</span> namedtuple</span><br><span class=\"line\"></span><br><span class=\"line\">Customer = namedtuple(<span class=\"string\">'Customer'</span>, <span class=\"string\">'name fidelity'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LineItem</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, product, quantity, price)</span>:</span></span><br><span class=\"line\">        self.product = product</span><br><span class=\"line\">        self.quantity = quantity</span><br><span class=\"line\">        self.price = price</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">total</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.price * self.quantity</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Order</span>:</span>  <span class=\"comment\"># the Context</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, customer, cart, promotion=None)</span>:</span></span><br><span class=\"line\">        self.customer = customer</span><br><span class=\"line\">        self.cart = list(cart)</span><br><span class=\"line\">        self.promotion = promotion</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">total</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> hasattr(self, <span class=\"string\">'__total'</span>):</span><br><span class=\"line\">            self.__total = sum(item.total() <span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> self.cart)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.__total</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">due</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> self.promotion <span class=\"keyword\">is</span> <span class=\"keyword\">None</span>:</span><br><span class=\"line\">            discount = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            discount = self.promotion(self)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.total() - discount</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__repr__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        fmt = <span class=\"string\">'&lt;Order total: &#123;:.2f&#125; due: &#123;:.2f&#125;&gt;'</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> fmt.format(self.total(), self.due())</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">fidelity_promo</span><span class=\"params\">(order)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"5% discount for customers with 1000 or more fidelity points\"\"\"</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> order.total() * <span class=\"number\">.05</span> <span class=\"keyword\">if</span> order.customer.fidelity &gt;= <span class=\"number\">1000</span> <span class=\"keyword\">else</span> <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">bulk_item_promo</span><span class=\"params\">(order)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"10% discount for each LineItem with 20 or more units\"\"\"</span></span><br><span class=\"line\">    discount = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> order.cart:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> item.quantity &gt;= <span class=\"number\">20</span>:</span><br><span class=\"line\">            discount += item.total() * <span class=\"number\">.1</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> discount</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">large_order_promo</span><span class=\"params\">(order)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"7% discount for orders with 10 or more distinct items\"\"\"</span></span><br><span class=\"line\">    distinct_items = &#123;item.product <span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> order.cart&#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> len(distinct_items) &gt;= <span class=\"number\">10</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> order.total() * <span class=\"number\">.07</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># BEGIN STRATEGY_BEST</span></span><br><span class=\"line\"></span><br><span class=\"line\">promos = [fidelity_promo, bulk_item_promo, large_order_promo]  <span class=\"comment\"># &lt;1&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">best_promo</span><span class=\"params\">(order)</span>:</span>  <span class=\"comment\"># &lt;2&gt;</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"Select best discount available</span></span><br><span class=\"line\"><span class=\"string\">    \"\"\"</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> max(promo(order) <span class=\"keyword\">for</span> promo <span class=\"keyword\">in</span> promos)  <span class=\"comment\"># &lt;3&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># END STRATEGY_BEST</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"找出模块中的全部策略\"><a href=\"#找出模块中的全部策略\" class=\"headerlink\" title=\"找出模块中的全部策略\"></a>找出模块中的全部策略</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># strategy_best2.py</span></span><br><span class=\"line\"><span class=\"comment\"># Strategy pattern -- function-based implementation</span></span><br><span class=\"line\"><span class=\"comment\"># selecting best promotion from current module globals</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">    &gt;&gt;&gt; joe = Customer('John Doe', 0)</span></span><br><span class=\"line\"><span class=\"string\">    &gt;&gt;&gt; ann = Customer('Ann Smith', 1100)</span></span><br><span class=\"line\"><span class=\"string\">    &gt;&gt;&gt; cart = [LineItem('banana', 4, .5),</span></span><br><span class=\"line\"><span class=\"string\">    ...         LineItem('apple', 10, 1.5),</span></span><br><span class=\"line\"><span class=\"string\">    ...         LineItem('watermellon', 5, 5.0)]</span></span><br><span class=\"line\"><span class=\"string\">    &gt;&gt;&gt; Order(joe, cart, fidelity_promo)</span></span><br><span class=\"line\"><span class=\"string\">    &lt;Order total: 42.00 due: 42.00&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &gt;&gt;&gt; Order(ann, cart, fidelity_promo)</span></span><br><span class=\"line\"><span class=\"string\">    &lt;Order total: 42.00 due: 39.90&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &gt;&gt;&gt; banana_cart = [LineItem('banana', 30, .5),</span></span><br><span class=\"line\"><span class=\"string\">    ...                LineItem('apple', 10, 1.5)]</span></span><br><span class=\"line\"><span class=\"string\">    &gt;&gt;&gt; Order(joe, banana_cart, bulk_item_promo)</span></span><br><span class=\"line\"><span class=\"string\">    &lt;Order total: 30.00 due: 28.50&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &gt;&gt;&gt; long_order = [LineItem(str(item_code), 1, 1.0)</span></span><br><span class=\"line\"><span class=\"string\">    ...               for item_code in range(10)]</span></span><br><span class=\"line\"><span class=\"string\">    &gt;&gt;&gt; Order(joe, long_order, large_order_promo)</span></span><br><span class=\"line\"><span class=\"string\">    &lt;Order total: 10.00 due: 9.30&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &gt;&gt;&gt; Order(joe, cart, large_order_promo)</span></span><br><span class=\"line\"><span class=\"string\">    &lt;Order total: 42.00 due: 42.00&gt;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\"># BEGIN STRATEGY_BEST_TESTS</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    &gt;&gt;&gt; Order(joe, long_order, best_promo)</span></span><br><span class=\"line\"><span class=\"string\">    &lt;Order total: 10.00 due: 9.30&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &gt;&gt;&gt; Order(joe, banana_cart, best_promo)</span></span><br><span class=\"line\"><span class=\"string\">    &lt;Order total: 30.00 due: 28.50&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &gt;&gt;&gt; Order(ann, cart, best_promo)</span></span><br><span class=\"line\"><span class=\"string\">    &lt;Order total: 42.00 due: 39.90&gt;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\"># END STRATEGY_BEST_TESTS</span></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> collections <span class=\"keyword\">import</span> namedtuple</span><br><span class=\"line\"></span><br><span class=\"line\">Customer = namedtuple(<span class=\"string\">'Customer'</span>, <span class=\"string\">'name fidelity'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LineItem</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, product, quantity, price)</span>:</span></span><br><span class=\"line\">        self.product = product</span><br><span class=\"line\">        self.quantity = quantity</span><br><span class=\"line\">        self.price = price</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">total</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.price * self.quantity</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Order</span>:</span>  <span class=\"comment\"># the Context</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, customer, cart, promotion=None)</span>:</span></span><br><span class=\"line\">        self.customer = customer</span><br><span class=\"line\">        self.cart = list(cart)</span><br><span class=\"line\">        self.promotion = promotion</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">total</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> hasattr(self, <span class=\"string\">'__total'</span>):</span><br><span class=\"line\">            self.__total = sum(item.total() <span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> self.cart)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.__total</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">due</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> self.promotion <span class=\"keyword\">is</span> <span class=\"keyword\">None</span>:</span><br><span class=\"line\">            discount = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            discount = self.promotion(self)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.total() - discount</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__repr__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        fmt = <span class=\"string\">'&lt;Order total: &#123;:.2f&#125; due: &#123;:.2f&#125;&gt;'</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> fmt.format(self.total(), self.due())</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">fidelity_promo</span><span class=\"params\">(order)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"5% discount for customers with 1000 or more fidelity points\"\"\"</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> order.total() * <span class=\"number\">.05</span> <span class=\"keyword\">if</span> order.customer.fidelity &gt;= <span class=\"number\">1000</span> <span class=\"keyword\">else</span> <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">bulk_item_promo</span><span class=\"params\">(order)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"10% discount for each LineItem with 20 or more units\"\"\"</span></span><br><span class=\"line\">    discount = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> order.cart:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> item.quantity &gt;= <span class=\"number\">20</span>:</span><br><span class=\"line\">            discount += item.total() * <span class=\"number\">.1</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> discount</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">large_order_promo</span><span class=\"params\">(order)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"7% discount for orders with 10 or more distinct items\"\"\"</span></span><br><span class=\"line\">    distinct_items = &#123;item.product <span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> order.cart&#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> len(distinct_items) &gt;= <span class=\"number\">10</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> order.total() * <span class=\"number\">.07</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># BEGIN STRATEGY_BEST2</span></span><br><span class=\"line\"></span><br><span class=\"line\">promos = [globals()[name] <span class=\"keyword\">for</span> name <span class=\"keyword\">in</span> globals()  <span class=\"comment\"># &lt;1&gt;</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> name.endswith(<span class=\"string\">'_promo'</span>)  <span class=\"comment\"># &lt;2&gt;</span></span><br><span class=\"line\">            <span class=\"keyword\">and</span> name != <span class=\"string\">'best_promo'</span>]   <span class=\"comment\"># &lt;3&gt;</span></span><br><span class=\"line\"><span class=\"comment\"># print(globals())</span></span><br><span class=\"line\"><span class=\"comment\"># print([name for name in globals()])</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">best_promo</span><span class=\"params\">(order)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"Select best discount available</span></span><br><span class=\"line\"><span class=\"string\">    \"\"\"</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> max(promo(order) <span class=\"keyword\">for</span> promo <span class=\"keyword\">in</span> promos)  <span class=\"comment\"># &lt;4&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\"># BEGIN STRATEGY_BEST3</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">promos = [func for name, func in</span></span><br><span class=\"line\"><span class=\"string\">                inspect.getmembers(promotions, inspect.isfunction)]</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">def best_promo(order):</span></span><br><span class=\"line\"><span class=\"string\">    \"\"\"</span>Select best discount available</span><br><span class=\"line\">    <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">    return max(promo(order) for promo in promos)</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\"># END STRATEGY_BEST3</span></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"comment\"># END STRATEGY_BEST2</span></span><br></pre></td></tr></table></figure>"},{"title":"Vim 学习笔记","date":"2017-12-04T00:59:15.000Z","_content":"\n# Vim 学习笔记\n\n## 概念\n\n### 什么是 vim\n\n> Vim是从 vi 发展出来的一个文本编辑器。代码补完、编译及错误跳转等方便编程的功能特别丰富，在程序员中被广泛使用。和Emacs并列成为类Unix系统用户最喜欢的编辑器。\n\n<!--more-->\n### Vim 的模式\n\n基本上 vi/vim 共分为三种模式，分别是**命令模式（Command mode）**，**插入模式（Insert mode）**和**底线命令模式（Last line mode）**。\n\n#### 命令模式\n\n**用户刚刚启动 vi/vim，便进入了命令模式。**\n\n此状态下敲击键盘动作会被 Vim 识别为命令，而非输入字符。\n\n#### 插入模式\n\n**在命令模式下按下 `i` 就进入了输入模式。**\n\n在输入模式下，你可以输入文本内容。\n\n#### 底线命令模式\n\n**在命令模式下按下 `:`（英文冒号）就进入了底线命令模式。**\n\n底线命令模式可以输入单个或多个字符的命令，可用的命令非常多。\n\n## Vim 渐进学习\n\n### 第一级 – 存活\n\n1. 安装 [vim](http://www.vim.org/)\n2. 启动 vim\n3. **什么也别干！**请先阅读\n\n当你安装好一个编辑器后，你一定会想在其中输入点什么东西，然后看看这个编辑器是什么样子。但vim不是这样的，请按照下面的命令操作：\n\n- 启 动Vim后，vim在 *Normal* 模式下。\n- 让我们进入 *Insert* 模式，请按下键 i 。(注：你会看到vim左下角有一个–insert–字样，表示，你可以以插入的方式输入了）\n- 此时，你可以输入文本了，就像你用“记事本”一样。\n- 如果你想返回 *Normal* 模式，请按 `ESC` 键。\n\n现在，你知道如何在 *Insert* 和 *Normal* 模式下切换了。下面是一些命令，可以让你在 *Normal* 模式下幸存下来：\n\n> - `i` → *Insert* 模式，按 `ESC` 回到 *Normal* 模式.\n> - `x` → 删当前光标所在的一个字符。\n> - `:wq` → 存盘 + 退出 (`:w` 存盘, `:q` 退出)   （注：:w 后可以跟文件名）\n> - `dd` → 删除当前行，并把删除的行存到剪贴板里\n> - `p` → 粘贴剪贴板\n>\n> **推荐**\n>\n> - `hjkl` (强例推荐使用其移动光标，但不必需) →你也可以使用光标键 (←↓↑→). 注: `j` 就像下箭头。\n> - `:help <command>` → 显示相关命令的帮助。你也可以就输入 `:help` 而不跟命令。（注：退出帮助需要输入:q）\n\n你能在vim幸存下来只需要上述的那5个命令，你就可以编辑文本了，你一定要把这些命令练成一种下意识的状态。于是你就可以开始进阶到第二级了。\n\n当是，在你进入第二级时，需要再说一下 *Normal* 模式。在一般的编辑器下，当你需要 copy 一段文字的时候，你需要使用 `Ctrl` 键，比如：`Ctrl-C`。也就是说，`Ctrl` 键就好像功能键一样，当你按下了功能键 `Ctrl` 后，C 就不在是 C 了，而且就是一个命令或是一个快键键了，**在 vim 的 Normal 模式下，所有的键都是功能键**。这个你需要知道。\n\n> **标记**\n>\n> - 下面的文字中，如果是 `Ctrl-λ`我会写成 `<C-λ>`.\n> - 以 `:` 开始的命令你需要输入 `<enter>`回车，例如 — 如果我写成 `:q` 也就是说你要输入 `:q<enter>`.\n>\n\n### 第二级 – 感觉良好\n\n上面的那些命令只能让你存活下来，现在是时候学习一些更多的命令了，下面是我的建议：（注：所有的命令都需要在 Normal 模式下使用，如果你不知道现在在什么样的模式，你就狂按几次ESC键）\n\n1. 各种插入模式\n\n   > - `a` → 在光标后插入\n   > - `o` → 在当前行后插入一个新行\n   > - `O` → 在当前行前插入一个新行\n   > - `cw` → 替换从光标所在位置后到一个单词结尾的字符\n\n2. 简单的移动光标\n\n   > - `0` → 数字零，到行头\n   > - `^` → 到本行第一个不是blank字符的位置（所谓blank字符就是空格，tab，换行，回车等）\n   > - `$` → 到本行行尾\n   > - `g_` → 到本行最后一个不是blank字符的位置。\n   > - `/pattern` → 搜索 `pattern` 的字符串（注：如果搜索出多个匹配，可按n键到下一个）\n\n3. 拷贝/粘贴\n\n   （注：p/P都可以，p是表示在当前位置之后，P表示在当前位置之前）\n\n   > - `P` → 粘贴\n   > - `yy` → 拷贝当前行当行于 `ddP`\n\n4. Undo/Redo\n\n   > - `u` → undo\n   > - `<C-r>` → redo\n\n5. 打开/保存/退出/改变文件\n\n   (Buffer)\n\n   > - `:e <path/to/file>` → 打开一个文件\n   > - `:w` → 存盘\n   > - `:saveas <path/to/file>` → 另存为 `<path/to/file>`\n   > - `:x`， `ZZ` 或 `:wq` → 保存并退出 (`:x` 表示仅在需要时保存，ZZ不需要输入冒号并回车)\n   > - `:q!` → 退出不保存 `:qa!` 强行退出所有的正在编辑的文件，就算别的文件有更改。\n   > - `:bn` 和 `:bp` → 你可以同时打开很多文件，使用这两个命令来切换下一个或上一个文件。（注：我喜欢使用:n到下一个文件）\n\n花点时间熟悉一下上面的命令，一旦你掌握他们了，你就几乎可以干其它编辑器都能干的事了。但是到现在为止，你还是觉得使用vim还是有点笨拙，不过没关系，你可以进阶到第三级了。\n\n### 第三级 – 更好，更强，更快\n\n先恭喜你！你干的很不错。我们可以开始一些更为有趣的事了。在第三级，我们只谈那些和vi可以兼容的命令。\n\n#### 更好\n\n下面，让我们看一下vim是怎么重复自己的：1515G\n\n1. `.` → (小数点) 可以重复上一次的命令\n2. `N<command>` → 重复某个命令N次\n\n下面是一个示例，找开一个文件你可以试试下面的命令：\n\n> - `2dd` → 删除2行\n> - `3p` → 粘贴文本3次\n> - `100idesu [ESC]` → 会写下 “desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu “\n> - `.` → 重复上一个命令—— 100 “desu “.\n> - `3.` → 重复 3 次 “desu” (注意：不是 300，你看，VIM多聪明啊).\n\n#### 更强\n\n你要让你的光标移动更有效率，你一定要了解下面的这些命令，**千万别跳过**。\n\n1. N`G` → 到第 N 行 （注：注意命令中的G是大写的，另我一般使用 : N 到第N行，如 :137 到第137行）\n\n2. `gg` → 到第一行。（注：相当于1G，或 :1）\n\n3. `G` → 到最后一行。\n\n4. 按单词移动：\n\n   > 1. `w` → 到下一个单词的开头。\n   > 2. `e` → 到下一个单词的结尾。\n   >\n   > \\> 如果你认为单词是由默认方式，那么就用小写的e和w。默认上来说，一个单词由字母，数字和下划线组成（注：程序变量）\n   >\n   > \\> 如果你认为单词是由blank字符分隔符，那么你需要使用大写的E和W。（注：程序语句）\n   >\n   > ![Word moves example](http://upload-images.jianshu.io/upload_images/3101171-46f752c581d79057.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n下面，让我来说说最强的光标移动：\n\n> - `%` : 匹配括号移动，包括 `(`, `{`, `[`. （注：你需要把光标先移到括号上）\n> - `*` 和 `#`:  匹配光标当前所在的单词，移动光标到下一个（或上一个）匹配单词（*是下一个，#是上一个）\n\n相信我，上面这三个命令对程序员来说是相当强大的。\n\n#### 更快\n\n你一定要记住光标的移动，因为很多命令都可以和这些移动光标的命令连动。很多命令都可以如下来干：\n\n`<start position><command><end position>`\n\n例如 `0y$` 命令意味着：\n\n- `0` → 先到行头\n- `y` → 从这里开始拷贝\n- `$` → 拷贝到本行最后一个字符\n\n你可可以输入 `ye`，从当前位置拷贝到本单词的最后一个字符。\n\n你也可以输入 `y2/foo` 来拷贝2个 “foo” 之间的字符串。\n\n还有很多时间并不一定你就一定要按y才会拷贝，下面的命令也会被拷贝：\n\n- `d` (删除 )\n- `v` (可视化的选择)\n- `gU` (变大写)\n- `gu` (变小写)\n- 等等\n\n（注：可视化选择是一个很有意思的命令，你可以先按v，然后移动光标，你就会看到文本被选择，然后，你可能d，也可y，也可以变大写等）\n\n### 第四级 – Vim 超能力\n\n你只需要掌握前面的命令，你就可以很舒服的使用VIM了。但是，现在，我们向你介绍的是VIM杀手级的功能。下面这些功能是我只用vim的原因。\n\n#### 在当前行上移动光标: `0` `^` `####  `f` `F` `t` `T` `,` `;`\n\n> - `0` → 到行头\n> - `^` → 到本行的第一个非blank字符\n> - `$` → 到行尾\n> - `g_` → 到本行最后一个不是blank字符的位置。\n> - `fa` → 到下一个为a的字符处，你也可以fs到下一个为s的字符。\n> - `t,` → 到逗号前的第一个字符。逗号可以变成其它字符。\n> - `3fa` → 在当前行查找第三个出现的a。\n> - `F` 和 `T` → 和 `f` 和 `t` 一样，只不过是相反方向。\n>   ![Line moves](http://upload-images.jianshu.io/upload_images/3101171-00835b8316330c58.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n还有一个很有用的命令是 `dt\"` → 删除所有的内容，直到遇到双引号—— `\"。`\n\n#### 区域选择 `<action>a<object>` 或 `<action>i<object>`\n\n在visual 模式下，这些命令很强大，其命令格式为\n\n`<action>a<object>` 和 `<action>i<object>`\n\n- action可以是任何的命令，如 `d` (删除), `y` (拷贝), `v` (可以视模式选择)。\n- object 可能是： `w` 一个单词， `W` 一个以空格为分隔的单词， `s` 一个句字， `p` 一个段落。也可以是一个特别的字符：`\"、` `'、` `)、` `}、` `]。`\n\n假设你有一个字符串 `(map (+) (\"foo\"))`.而光标键在第一个 `o `的位置。\n\n> - `vi\"` → 会选择 `foo`.\n> - `va\"` → 会选择 `\"foo\"`.\n> - `vi)` → 会选择 `\"foo\"`.\n> - `va)` → 会选择`(\"foo\")`.\n> - `v2i)` → 会选择 `map (+) (\"foo\")`\n> - `v2a)` → 会选择 `(map (+) (\"foo\"))`\n\n![Text objects selection](http://upload-images.jianshu.io/upload_images/3101171-0b109d66a6111c83.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n#### 块操作: `<C-v>`\n\n块操作，典型的操作： `0 <C-v> <C-d> I-- [ESC]`\n\n- `^` → 到行头\n- `<C-v>` → 开始块操作\n- `<C-d>` → 向下移动 (你也可以使用hjkl来移动光标，或是使用%，或是别的)\n- `I-- [ESC]` → I是插入，插入“`--`”，按ESC键来为每一行生效。\n\n![Rectangular blocks](http://upload-images.jianshu.io/upload_images/3101171-8b093a0f65707949.gif?imageMogr2/auto-orient/strip)\n\n在Windows下的vim，你需要使用 `<C-q>` 而不是 `<C-v>` ，`<C-v>` 是拷贝剪贴板。\n\n#### 自动提示： `<C-n>` 和 `<C-p>`\n\n在 Insert 模式下，你可以输入一个词的开头，然后按 `<C-p>或是<C-n>，自动补齐功能就出现了……`\n\n``![Completion](http://upload-images.jianshu.io/upload_images/3101171-e2ae877e67880ff7.gif?imageMogr2/auto-orient/strip)\n\n#### 宏录制： `qa` 操作序列 `q`, `@a`, `@@`\n\n- `qa` 把你的操作记录在寄存器 `a。`\n- 于是 `@a` 会replay被录制的宏。\n- `@@` 是一个快捷键用来replay最新录制的宏。\n\n> **示例**\n>\n> 在一个只有一行且这一行只有“1”的文本中，键入如下命令：\n>\n> - ```\n>   qaYp<C-a>q\n>   ```\n>\n>   →\n>\n>   - `qa` 开始录制\n>   - `Yp` 复制行.\n>   - `<C-a>` 增加1.\n>   - `q` 停止录制.\n>\n> - `@a` → 在1下面写下 2\n>\n> - `@@` → 在2 正面写下3\n>\n> - 现在做 `100@@` 会创建新的100行，并把数据增加到 103.\n\n![Macros](http://upload-images.jianshu.io/upload_images/3101171-f1889f8bca723964.gif?imageMogr2/auto-orient/strip)\n\n#### 可视化选择： `v`,`V`,`<C-v>`\n\n前面，我们看到了 `<C-v>`的示例 （在Windows下应该是<C-q>），我们可以使用 `v` 和 `V`。一但被选好了，你可以做下面的事：\n\n- `J` → 把所有的行连接起来（变成一行）\n- `<` 或 `>` → 左右缩进\n- `=` → 自动给缩进 （注：这个功能相当强大，我太喜欢了）\n\n![Autoindent](http://upload-images.jianshu.io/upload_images/3101171-fe1e19983fca213f.gif?imageMogr2/auto-orient/strip)\n\n在所有被选择的行后加上点东西：\n\n- `<C-v>`\n- 选中相关的行 (可使用 `j` 或 `<C-d>` 或是 `/pattern` 或是 `%` 等……)\n- `$` 到行最后\n- `A`, 输入字符串，按 `ESC。`\n\n![Append to many lines](http://upload-images.jianshu.io/upload_images/3101171-b192601247334c4e.gif?imageMogr2/auto-orient/strip)\n\n#### 分屏: `:split` 和 `vsplit`.\n\n下面是主要的命令，你可以使用VIM的帮助 `:help split`. 你可以参考本站以前的一篇文章[VIM分屏](https://coolshell.cn/articles/1679.html)。\n\n> - `:split` → 创建分屏 (`:vsplit`创建垂直分屏)\n> - `<C-w><dir>` : dir就是方向，可以是 `hjkl` 或是 ←↓↑→ 中的一个，其用来切换分屏。\n> - `<C-w>_` (或 `<C-w>|`) : 最大化尺寸 (<C-w>| 垂直分屏)\n> - `<C-w>+` (或 `<C-w>-`) : 增加尺寸\n\n![Split](http://upload-images.jianshu.io/upload_images/3101171-f329d01e299cb366.gif?imageMogr2/auto-orient/strip)\n\n## Vim 命令\n\n![image.png](http://upload-images.jianshu.io/upload_images/3101171-d11e01e8ebb89308.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n## 资料\n\n- [简明 VIM 练级攻略](https://coolshell.cn/articles/5426.html) ，Vim 渐进学习内容来源于这篇文章，作为 Vim 新手，我觉得入门效果很好。\n","source":"_posts/vim.md","raw":"---\ntitle: Vim 学习笔记\ndate: 2017-12-04 08:59:15\ncategories:\n- linux\ntags:\n- linux\n- vim\n---\n\n# Vim 学习笔记\n\n## 概念\n\n### 什么是 vim\n\n> Vim是从 vi 发展出来的一个文本编辑器。代码补完、编译及错误跳转等方便编程的功能特别丰富，在程序员中被广泛使用。和Emacs并列成为类Unix系统用户最喜欢的编辑器。\n\n<!--more-->\n### Vim 的模式\n\n基本上 vi/vim 共分为三种模式，分别是**命令模式（Command mode）**，**插入模式（Insert mode）**和**底线命令模式（Last line mode）**。\n\n#### 命令模式\n\n**用户刚刚启动 vi/vim，便进入了命令模式。**\n\n此状态下敲击键盘动作会被 Vim 识别为命令，而非输入字符。\n\n#### 插入模式\n\n**在命令模式下按下 `i` 就进入了输入模式。**\n\n在输入模式下，你可以输入文本内容。\n\n#### 底线命令模式\n\n**在命令模式下按下 `:`（英文冒号）就进入了底线命令模式。**\n\n底线命令模式可以输入单个或多个字符的命令，可用的命令非常多。\n\n## Vim 渐进学习\n\n### 第一级 – 存活\n\n1. 安装 [vim](http://www.vim.org/)\n2. 启动 vim\n3. **什么也别干！**请先阅读\n\n当你安装好一个编辑器后，你一定会想在其中输入点什么东西，然后看看这个编辑器是什么样子。但vim不是这样的，请按照下面的命令操作：\n\n- 启 动Vim后，vim在 *Normal* 模式下。\n- 让我们进入 *Insert* 模式，请按下键 i 。(注：你会看到vim左下角有一个–insert–字样，表示，你可以以插入的方式输入了）\n- 此时，你可以输入文本了，就像你用“记事本”一样。\n- 如果你想返回 *Normal* 模式，请按 `ESC` 键。\n\n现在，你知道如何在 *Insert* 和 *Normal* 模式下切换了。下面是一些命令，可以让你在 *Normal* 模式下幸存下来：\n\n> - `i` → *Insert* 模式，按 `ESC` 回到 *Normal* 模式.\n> - `x` → 删当前光标所在的一个字符。\n> - `:wq` → 存盘 + 退出 (`:w` 存盘, `:q` 退出)   （注：:w 后可以跟文件名）\n> - `dd` → 删除当前行，并把删除的行存到剪贴板里\n> - `p` → 粘贴剪贴板\n>\n> **推荐**\n>\n> - `hjkl` (强例推荐使用其移动光标，但不必需) →你也可以使用光标键 (←↓↑→). 注: `j` 就像下箭头。\n> - `:help <command>` → 显示相关命令的帮助。你也可以就输入 `:help` 而不跟命令。（注：退出帮助需要输入:q）\n\n你能在vim幸存下来只需要上述的那5个命令，你就可以编辑文本了，你一定要把这些命令练成一种下意识的状态。于是你就可以开始进阶到第二级了。\n\n当是，在你进入第二级时，需要再说一下 *Normal* 模式。在一般的编辑器下，当你需要 copy 一段文字的时候，你需要使用 `Ctrl` 键，比如：`Ctrl-C`。也就是说，`Ctrl` 键就好像功能键一样，当你按下了功能键 `Ctrl` 后，C 就不在是 C 了，而且就是一个命令或是一个快键键了，**在 vim 的 Normal 模式下，所有的键都是功能键**。这个你需要知道。\n\n> **标记**\n>\n> - 下面的文字中，如果是 `Ctrl-λ`我会写成 `<C-λ>`.\n> - 以 `:` 开始的命令你需要输入 `<enter>`回车，例如 — 如果我写成 `:q` 也就是说你要输入 `:q<enter>`.\n>\n\n### 第二级 – 感觉良好\n\n上面的那些命令只能让你存活下来，现在是时候学习一些更多的命令了，下面是我的建议：（注：所有的命令都需要在 Normal 模式下使用，如果你不知道现在在什么样的模式，你就狂按几次ESC键）\n\n1. 各种插入模式\n\n   > - `a` → 在光标后插入\n   > - `o` → 在当前行后插入一个新行\n   > - `O` → 在当前行前插入一个新行\n   > - `cw` → 替换从光标所在位置后到一个单词结尾的字符\n\n2. 简单的移动光标\n\n   > - `0` → 数字零，到行头\n   > - `^` → 到本行第一个不是blank字符的位置（所谓blank字符就是空格，tab，换行，回车等）\n   > - `$` → 到本行行尾\n   > - `g_` → 到本行最后一个不是blank字符的位置。\n   > - `/pattern` → 搜索 `pattern` 的字符串（注：如果搜索出多个匹配，可按n键到下一个）\n\n3. 拷贝/粘贴\n\n   （注：p/P都可以，p是表示在当前位置之后，P表示在当前位置之前）\n\n   > - `P` → 粘贴\n   > - `yy` → 拷贝当前行当行于 `ddP`\n\n4. Undo/Redo\n\n   > - `u` → undo\n   > - `<C-r>` → redo\n\n5. 打开/保存/退出/改变文件\n\n   (Buffer)\n\n   > - `:e <path/to/file>` → 打开一个文件\n   > - `:w` → 存盘\n   > - `:saveas <path/to/file>` → 另存为 `<path/to/file>`\n   > - `:x`， `ZZ` 或 `:wq` → 保存并退出 (`:x` 表示仅在需要时保存，ZZ不需要输入冒号并回车)\n   > - `:q!` → 退出不保存 `:qa!` 强行退出所有的正在编辑的文件，就算别的文件有更改。\n   > - `:bn` 和 `:bp` → 你可以同时打开很多文件，使用这两个命令来切换下一个或上一个文件。（注：我喜欢使用:n到下一个文件）\n\n花点时间熟悉一下上面的命令，一旦你掌握他们了，你就几乎可以干其它编辑器都能干的事了。但是到现在为止，你还是觉得使用vim还是有点笨拙，不过没关系，你可以进阶到第三级了。\n\n### 第三级 – 更好，更强，更快\n\n先恭喜你！你干的很不错。我们可以开始一些更为有趣的事了。在第三级，我们只谈那些和vi可以兼容的命令。\n\n#### 更好\n\n下面，让我们看一下vim是怎么重复自己的：1515G\n\n1. `.` → (小数点) 可以重复上一次的命令\n2. `N<command>` → 重复某个命令N次\n\n下面是一个示例，找开一个文件你可以试试下面的命令：\n\n> - `2dd` → 删除2行\n> - `3p` → 粘贴文本3次\n> - `100idesu [ESC]` → 会写下 “desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu “\n> - `.` → 重复上一个命令—— 100 “desu “.\n> - `3.` → 重复 3 次 “desu” (注意：不是 300，你看，VIM多聪明啊).\n\n#### 更强\n\n你要让你的光标移动更有效率，你一定要了解下面的这些命令，**千万别跳过**。\n\n1. N`G` → 到第 N 行 （注：注意命令中的G是大写的，另我一般使用 : N 到第N行，如 :137 到第137行）\n\n2. `gg` → 到第一行。（注：相当于1G，或 :1）\n\n3. `G` → 到最后一行。\n\n4. 按单词移动：\n\n   > 1. `w` → 到下一个单词的开头。\n   > 2. `e` → 到下一个单词的结尾。\n   >\n   > \\> 如果你认为单词是由默认方式，那么就用小写的e和w。默认上来说，一个单词由字母，数字和下划线组成（注：程序变量）\n   >\n   > \\> 如果你认为单词是由blank字符分隔符，那么你需要使用大写的E和W。（注：程序语句）\n   >\n   > ![Word moves example](http://upload-images.jianshu.io/upload_images/3101171-46f752c581d79057.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n下面，让我来说说最强的光标移动：\n\n> - `%` : 匹配括号移动，包括 `(`, `{`, `[`. （注：你需要把光标先移到括号上）\n> - `*` 和 `#`:  匹配光标当前所在的单词，移动光标到下一个（或上一个）匹配单词（*是下一个，#是上一个）\n\n相信我，上面这三个命令对程序员来说是相当强大的。\n\n#### 更快\n\n你一定要记住光标的移动，因为很多命令都可以和这些移动光标的命令连动。很多命令都可以如下来干：\n\n`<start position><command><end position>`\n\n例如 `0y$` 命令意味着：\n\n- `0` → 先到行头\n- `y` → 从这里开始拷贝\n- `$` → 拷贝到本行最后一个字符\n\n你可可以输入 `ye`，从当前位置拷贝到本单词的最后一个字符。\n\n你也可以输入 `y2/foo` 来拷贝2个 “foo” 之间的字符串。\n\n还有很多时间并不一定你就一定要按y才会拷贝，下面的命令也会被拷贝：\n\n- `d` (删除 )\n- `v` (可视化的选择)\n- `gU` (变大写)\n- `gu` (变小写)\n- 等等\n\n（注：可视化选择是一个很有意思的命令，你可以先按v，然后移动光标，你就会看到文本被选择，然后，你可能d，也可y，也可以变大写等）\n\n### 第四级 – Vim 超能力\n\n你只需要掌握前面的命令，你就可以很舒服的使用VIM了。但是，现在，我们向你介绍的是VIM杀手级的功能。下面这些功能是我只用vim的原因。\n\n#### 在当前行上移动光标: `0` `^` `####  `f` `F` `t` `T` `,` `;`\n\n> - `0` → 到行头\n> - `^` → 到本行的第一个非blank字符\n> - `$` → 到行尾\n> - `g_` → 到本行最后一个不是blank字符的位置。\n> - `fa` → 到下一个为a的字符处，你也可以fs到下一个为s的字符。\n> - `t,` → 到逗号前的第一个字符。逗号可以变成其它字符。\n> - `3fa` → 在当前行查找第三个出现的a。\n> - `F` 和 `T` → 和 `f` 和 `t` 一样，只不过是相反方向。\n>   ![Line moves](http://upload-images.jianshu.io/upload_images/3101171-00835b8316330c58.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n还有一个很有用的命令是 `dt\"` → 删除所有的内容，直到遇到双引号—— `\"。`\n\n#### 区域选择 `<action>a<object>` 或 `<action>i<object>`\n\n在visual 模式下，这些命令很强大，其命令格式为\n\n`<action>a<object>` 和 `<action>i<object>`\n\n- action可以是任何的命令，如 `d` (删除), `y` (拷贝), `v` (可以视模式选择)。\n- object 可能是： `w` 一个单词， `W` 一个以空格为分隔的单词， `s` 一个句字， `p` 一个段落。也可以是一个特别的字符：`\"、` `'、` `)、` `}、` `]。`\n\n假设你有一个字符串 `(map (+) (\"foo\"))`.而光标键在第一个 `o `的位置。\n\n> - `vi\"` → 会选择 `foo`.\n> - `va\"` → 会选择 `\"foo\"`.\n> - `vi)` → 会选择 `\"foo\"`.\n> - `va)` → 会选择`(\"foo\")`.\n> - `v2i)` → 会选择 `map (+) (\"foo\")`\n> - `v2a)` → 会选择 `(map (+) (\"foo\"))`\n\n![Text objects selection](http://upload-images.jianshu.io/upload_images/3101171-0b109d66a6111c83.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n#### 块操作: `<C-v>`\n\n块操作，典型的操作： `0 <C-v> <C-d> I-- [ESC]`\n\n- `^` → 到行头\n- `<C-v>` → 开始块操作\n- `<C-d>` → 向下移动 (你也可以使用hjkl来移动光标，或是使用%，或是别的)\n- `I-- [ESC]` → I是插入，插入“`--`”，按ESC键来为每一行生效。\n\n![Rectangular blocks](http://upload-images.jianshu.io/upload_images/3101171-8b093a0f65707949.gif?imageMogr2/auto-orient/strip)\n\n在Windows下的vim，你需要使用 `<C-q>` 而不是 `<C-v>` ，`<C-v>` 是拷贝剪贴板。\n\n#### 自动提示： `<C-n>` 和 `<C-p>`\n\n在 Insert 模式下，你可以输入一个词的开头，然后按 `<C-p>或是<C-n>，自动补齐功能就出现了……`\n\n``![Completion](http://upload-images.jianshu.io/upload_images/3101171-e2ae877e67880ff7.gif?imageMogr2/auto-orient/strip)\n\n#### 宏录制： `qa` 操作序列 `q`, `@a`, `@@`\n\n- `qa` 把你的操作记录在寄存器 `a。`\n- 于是 `@a` 会replay被录制的宏。\n- `@@` 是一个快捷键用来replay最新录制的宏。\n\n> **示例**\n>\n> 在一个只有一行且这一行只有“1”的文本中，键入如下命令：\n>\n> - ```\n>   qaYp<C-a>q\n>   ```\n>\n>   →\n>\n>   - `qa` 开始录制\n>   - `Yp` 复制行.\n>   - `<C-a>` 增加1.\n>   - `q` 停止录制.\n>\n> - `@a` → 在1下面写下 2\n>\n> - `@@` → 在2 正面写下3\n>\n> - 现在做 `100@@` 会创建新的100行，并把数据增加到 103.\n\n![Macros](http://upload-images.jianshu.io/upload_images/3101171-f1889f8bca723964.gif?imageMogr2/auto-orient/strip)\n\n#### 可视化选择： `v`,`V`,`<C-v>`\n\n前面，我们看到了 `<C-v>`的示例 （在Windows下应该是<C-q>），我们可以使用 `v` 和 `V`。一但被选好了，你可以做下面的事：\n\n- `J` → 把所有的行连接起来（变成一行）\n- `<` 或 `>` → 左右缩进\n- `=` → 自动给缩进 （注：这个功能相当强大，我太喜欢了）\n\n![Autoindent](http://upload-images.jianshu.io/upload_images/3101171-fe1e19983fca213f.gif?imageMogr2/auto-orient/strip)\n\n在所有被选择的行后加上点东西：\n\n- `<C-v>`\n- 选中相关的行 (可使用 `j` 或 `<C-d>` 或是 `/pattern` 或是 `%` 等……)\n- `$` 到行最后\n- `A`, 输入字符串，按 `ESC。`\n\n![Append to many lines](http://upload-images.jianshu.io/upload_images/3101171-b192601247334c4e.gif?imageMogr2/auto-orient/strip)\n\n#### 分屏: `:split` 和 `vsplit`.\n\n下面是主要的命令，你可以使用VIM的帮助 `:help split`. 你可以参考本站以前的一篇文章[VIM分屏](https://coolshell.cn/articles/1679.html)。\n\n> - `:split` → 创建分屏 (`:vsplit`创建垂直分屏)\n> - `<C-w><dir>` : dir就是方向，可以是 `hjkl` 或是 ←↓↑→ 中的一个，其用来切换分屏。\n> - `<C-w>_` (或 `<C-w>|`) : 最大化尺寸 (<C-w>| 垂直分屏)\n> - `<C-w>+` (或 `<C-w>-`) : 增加尺寸\n\n![Split](http://upload-images.jianshu.io/upload_images/3101171-f329d01e299cb366.gif?imageMogr2/auto-orient/strip)\n\n## Vim 命令\n\n![image.png](http://upload-images.jianshu.io/upload_images/3101171-d11e01e8ebb89308.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n## 资料\n\n- [简明 VIM 练级攻略](https://coolshell.cn/articles/5426.html) ，Vim 渐进学习内容来源于这篇文章，作为 Vim 新手，我觉得入门效果很好。\n","slug":"vim","published":1,"updated":"2018-01-02T00:50:36.835Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjbwxj104001ah0vo88x9k1np","content":"<h1 id=\"Vim-学习笔记\"><a href=\"#Vim-学习笔记\" class=\"headerlink\" title=\"Vim 学习笔记\"></a>Vim 学习笔记</h1><h2 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h2><h3 id=\"什么是-vim\"><a href=\"#什么是-vim\" class=\"headerlink\" title=\"什么是 vim\"></a>什么是 vim</h3><blockquote>\n<p>Vim是从 vi 发展出来的一个文本编辑器。代码补完、编译及错误跳转等方便编程的功能特别丰富，在程序员中被广泛使用。和Emacs并列成为类Unix系统用户最喜欢的编辑器。</p>\n</blockquote>\n<a id=\"more\"></a>\n<h3 id=\"Vim-的模式\"><a href=\"#Vim-的模式\" class=\"headerlink\" title=\"Vim 的模式\"></a>Vim 的模式</h3><p>基本上 vi/vim 共分为三种模式，分别是<strong>命令模式（Command mode）</strong>，<strong>插入模式（Insert mode）</strong>和<strong>底线命令模式（Last line mode）</strong>。</p>\n<h4 id=\"命令模式\"><a href=\"#命令模式\" class=\"headerlink\" title=\"命令模式\"></a>命令模式</h4><p><strong>用户刚刚启动 vi/vim，便进入了命令模式。</strong></p>\n<p>此状态下敲击键盘动作会被 Vim 识别为命令，而非输入字符。</p>\n<h4 id=\"插入模式\"><a href=\"#插入模式\" class=\"headerlink\" title=\"插入模式\"></a>插入模式</h4><p><strong>在命令模式下按下 <code>i</code> 就进入了输入模式。</strong></p>\n<p>在输入模式下，你可以输入文本内容。</p>\n<h4 id=\"底线命令模式\"><a href=\"#底线命令模式\" class=\"headerlink\" title=\"底线命令模式\"></a>底线命令模式</h4><p><strong>在命令模式下按下 <code>:</code>（英文冒号）就进入了底线命令模式。</strong></p>\n<p>底线命令模式可以输入单个或多个字符的命令，可用的命令非常多。</p>\n<h2 id=\"Vim-渐进学习\"><a href=\"#Vim-渐进学习\" class=\"headerlink\" title=\"Vim 渐进学习\"></a>Vim 渐进学习</h2><h3 id=\"第一级-–-存活\"><a href=\"#第一级-–-存活\" class=\"headerlink\" title=\"第一级 – 存活\"></a>第一级 – 存活</h3><ol>\n<li>安装 <a href=\"http://www.vim.org/\" target=\"_blank\" rel=\"noopener\">vim</a></li>\n<li>启动 vim</li>\n<li><strong>什么也别干！</strong>请先阅读</li>\n</ol>\n<p>当你安装好一个编辑器后，你一定会想在其中输入点什么东西，然后看看这个编辑器是什么样子。但vim不是这样的，请按照下面的命令操作：</p>\n<ul>\n<li>启 动Vim后，vim在 <em>Normal</em> 模式下。</li>\n<li>让我们进入 <em>Insert</em> 模式，请按下键 i 。(注：你会看到vim左下角有一个–insert–字样，表示，你可以以插入的方式输入了）</li>\n<li>此时，你可以输入文本了，就像你用“记事本”一样。</li>\n<li>如果你想返回 <em>Normal</em> 模式，请按 <code>ESC</code> 键。</li>\n</ul>\n<p>现在，你知道如何在 <em>Insert</em> 和 <em>Normal</em> 模式下切换了。下面是一些命令，可以让你在 <em>Normal</em> 模式下幸存下来：</p>\n<blockquote>\n<ul>\n<li><code>i</code> → <em>Insert</em> 模式，按 <code>ESC</code> 回到 <em>Normal</em> 模式.</li>\n<li><code>x</code> → 删当前光标所在的一个字符。</li>\n<li><code>:wq</code> → 存盘 + 退出 (<code>:w</code> 存盘, <code>:q</code> 退出)   （注：:w 后可以跟文件名）</li>\n<li><code>dd</code> → 删除当前行，并把删除的行存到剪贴板里</li>\n<li><code>p</code> → 粘贴剪贴板</li>\n</ul>\n<p><strong>推荐</strong></p>\n<ul>\n<li><code>hjkl</code> (强例推荐使用其移动光标，但不必需) →你也可以使用光标键 (←↓↑→). 注: <code>j</code> 就像下箭头。</li>\n<li><code>:help &lt;command&gt;</code> → 显示相关命令的帮助。你也可以就输入 <code>:help</code> 而不跟命令。（注：退出帮助需要输入:q）</li>\n</ul>\n</blockquote>\n<p>你能在vim幸存下来只需要上述的那5个命令，你就可以编辑文本了，你一定要把这些命令练成一种下意识的状态。于是你就可以开始进阶到第二级了。</p>\n<p>当是，在你进入第二级时，需要再说一下 <em>Normal</em> 模式。在一般的编辑器下，当你需要 copy 一段文字的时候，你需要使用 <code>Ctrl</code> 键，比如：<code>Ctrl-C</code>。也就是说，<code>Ctrl</code> 键就好像功能键一样，当你按下了功能键 <code>Ctrl</code> 后，C 就不在是 C 了，而且就是一个命令或是一个快键键了，<strong>在 vim 的 Normal 模式下，所有的键都是功能键</strong>。这个你需要知道。</p>\n<blockquote>\n<p><strong>标记</strong></p>\n<ul>\n<li>下面的文字中，如果是 <code>Ctrl-λ</code>我会写成 <code>&lt;C-λ&gt;</code>.</li>\n<li>以 <code>:</code> 开始的命令你需要输入 <code>&lt;enter&gt;</code>回车，例如 — 如果我写成 <code>:q</code> 也就是说你要输入 <code>:q&lt;enter&gt;</code>.</li>\n</ul>\n</blockquote>\n<h3 id=\"第二级-–-感觉良好\"><a href=\"#第二级-–-感觉良好\" class=\"headerlink\" title=\"第二级 – 感觉良好\"></a>第二级 – 感觉良好</h3><p>上面的那些命令只能让你存活下来，现在是时候学习一些更多的命令了，下面是我的建议：（注：所有的命令都需要在 Normal 模式下使用，如果你不知道现在在什么样的模式，你就狂按几次ESC键）</p>\n<ol>\n<li><p>各种插入模式</p>\n<blockquote>\n<ul>\n<li><code>a</code> → 在光标后插入</li>\n<li><code>o</code> → 在当前行后插入一个新行</li>\n<li><code>O</code> → 在当前行前插入一个新行</li>\n<li><code>cw</code> → 替换从光标所在位置后到一个单词结尾的字符</li>\n</ul>\n</blockquote>\n</li>\n<li><p>简单的移动光标</p>\n<blockquote>\n<ul>\n<li><code>0</code> → 数字零，到行头</li>\n<li><code>^</code> → 到本行第一个不是blank字符的位置（所谓blank字符就是空格，tab，换行，回车等）</li>\n<li><code>$</code> → 到本行行尾</li>\n<li><code>g_</code> → 到本行最后一个不是blank字符的位置。</li>\n<li><code>/pattern</code> → 搜索 <code>pattern</code> 的字符串（注：如果搜索出多个匹配，可按n键到下一个）</li>\n</ul>\n</blockquote>\n</li>\n<li><p>拷贝/粘贴</p>\n<p>（注：p/P都可以，p是表示在当前位置之后，P表示在当前位置之前）</p>\n<blockquote>\n<ul>\n<li><code>P</code> → 粘贴</li>\n<li><code>yy</code> → 拷贝当前行当行于 <code>ddP</code></li>\n</ul>\n</blockquote>\n</li>\n<li><p>Undo/Redo</p>\n<blockquote>\n<ul>\n<li><code>u</code> → undo</li>\n<li><code>&lt;C-r&gt;</code> → redo</li>\n</ul>\n</blockquote>\n</li>\n<li><p>打开/保存/退出/改变文件</p>\n<p>(Buffer)</p>\n<blockquote>\n<ul>\n<li><code>:e &lt;path/to/file&gt;</code> → 打开一个文件</li>\n<li><code>:w</code> → 存盘</li>\n<li><code>:saveas &lt;path/to/file&gt;</code> → 另存为 <code>&lt;path/to/file&gt;</code></li>\n<li><code>:x</code>， <code>ZZ</code> 或 <code>:wq</code> → 保存并退出 (<code>:x</code> 表示仅在需要时保存，ZZ不需要输入冒号并回车)</li>\n<li><code>:q!</code> → 退出不保存 <code>:qa!</code> 强行退出所有的正在编辑的文件，就算别的文件有更改。</li>\n<li><code>:bn</code> 和 <code>:bp</code> → 你可以同时打开很多文件，使用这两个命令来切换下一个或上一个文件。（注：我喜欢使用:n到下一个文件）</li>\n</ul>\n</blockquote>\n</li>\n</ol>\n<p>花点时间熟悉一下上面的命令，一旦你掌握他们了，你就几乎可以干其它编辑器都能干的事了。但是到现在为止，你还是觉得使用vim还是有点笨拙，不过没关系，你可以进阶到第三级了。</p>\n<h3 id=\"第三级-–-更好，更强，更快\"><a href=\"#第三级-–-更好，更强，更快\" class=\"headerlink\" title=\"第三级 – 更好，更强，更快\"></a>第三级 – 更好，更强，更快</h3><p>先恭喜你！你干的很不错。我们可以开始一些更为有趣的事了。在第三级，我们只谈那些和vi可以兼容的命令。</p>\n<h4 id=\"更好\"><a href=\"#更好\" class=\"headerlink\" title=\"更好\"></a>更好</h4><p>下面，让我们看一下vim是怎么重复自己的：1515G</p>\n<ol>\n<li><code>.</code> → (小数点) 可以重复上一次的命令</li>\n<li><code>N&lt;command&gt;</code> → 重复某个命令N次</li>\n</ol>\n<p>下面是一个示例，找开一个文件你可以试试下面的命令：</p>\n<blockquote>\n<ul>\n<li><code>2dd</code> → 删除2行</li>\n<li><code>3p</code> → 粘贴文本3次</li>\n<li><code>100idesu [ESC]</code> → 会写下 “desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu “</li>\n<li><code>.</code> → 重复上一个命令—— 100 “desu “.</li>\n<li><code>3.</code> → 重复 3 次 “desu” (注意：不是 300，你看，VIM多聪明啊).</li>\n</ul>\n</blockquote>\n<h4 id=\"更强\"><a href=\"#更强\" class=\"headerlink\" title=\"更强\"></a>更强</h4><p>你要让你的光标移动更有效率，你一定要了解下面的这些命令，<strong>千万别跳过</strong>。</p>\n<ol>\n<li><p>N<code>G</code> → 到第 N 行 （注：注意命令中的G是大写的，另我一般使用 : N 到第N行，如 :137 到第137行）</p>\n</li>\n<li><p><code>gg</code> → 到第一行。（注：相当于1G，或 :1）</p>\n</li>\n<li><p><code>G</code> → 到最后一行。</p>\n</li>\n<li><p>按单词移动：</p>\n<blockquote>\n<ol>\n<li><code>w</code> → 到下一个单词的开头。</li>\n<li><code>e</code> → 到下一个单词的结尾。</li>\n</ol>\n<p>> 如果你认为单词是由默认方式，那么就用小写的e和w。默认上来说，一个单词由字母，数字和下划线组成（注：程序变量）</p>\n<p>> 如果你认为单词是由blank字符分隔符，那么你需要使用大写的E和W。（注：程序语句）</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/3101171-46f752c581d79057.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Word moves example\"></p>\n</blockquote>\n</li>\n</ol>\n<p>下面，让我来说说最强的光标移动：</p>\n<blockquote>\n<ul>\n<li><code>%</code> : 匹配括号移动，包括 <code>(</code>, <code>{</code>, <code>[</code>. （注：你需要把光标先移到括号上）</li>\n<li><code>*</code> 和 <code>#</code>:  匹配光标当前所在的单词，移动光标到下一个（或上一个）匹配单词（*是下一个，#是上一个）</li>\n</ul>\n</blockquote>\n<p>相信我，上面这三个命令对程序员来说是相当强大的。</p>\n<h4 id=\"更快\"><a href=\"#更快\" class=\"headerlink\" title=\"更快\"></a>更快</h4><p>你一定要记住光标的移动，因为很多命令都可以和这些移动光标的命令连动。很多命令都可以如下来干：</p>\n<p><code>&lt;start position&gt;&lt;command&gt;&lt;end position&gt;</code></p>\n<p>例如 <code>0y$</code> 命令意味着：</p>\n<ul>\n<li><code>0</code> → 先到行头</li>\n<li><code>y</code> → 从这里开始拷贝</li>\n<li><code>$</code> → 拷贝到本行最后一个字符</li>\n</ul>\n<p>你可可以输入 <code>ye</code>，从当前位置拷贝到本单词的最后一个字符。</p>\n<p>你也可以输入 <code>y2/foo</code> 来拷贝2个 “foo” 之间的字符串。</p>\n<p>还有很多时间并不一定你就一定要按y才会拷贝，下面的命令也会被拷贝：</p>\n<ul>\n<li><code>d</code> (删除 )</li>\n<li><code>v</code> (可视化的选择)</li>\n<li><code>gU</code> (变大写)</li>\n<li><code>gu</code> (变小写)</li>\n<li>等等</li>\n</ul>\n<p>（注：可视化选择是一个很有意思的命令，你可以先按v，然后移动光标，你就会看到文本被选择，然后，你可能d，也可y，也可以变大写等）</p>\n<h3 id=\"第四级-–-Vim-超能力\"><a href=\"#第四级-–-Vim-超能力\" class=\"headerlink\" title=\"第四级 – Vim 超能力\"></a>第四级 – Vim 超能力</h3><p>你只需要掌握前面的命令，你就可以很舒服的使用VIM了。但是，现在，我们向你介绍的是VIM杀手级的功能。下面这些功能是我只用vim的原因。</p>\n<h4 id=\"在当前行上移动光标-0-fFtT\"><a href=\"#在当前行上移动光标-0-fFtT\" class=\"headerlink\" title=\"在当前行上移动光标: 0 ^ ####fFtT,;`\"></a>在当前行上移动光标: <code>0</code> <code>^</code> <code>####</code>f<code></code>F<code></code>t<code></code>T<code></code>,<code></code>;`</h4><blockquote>\n<ul>\n<li><code>0</code> → 到行头</li>\n<li><code>^</code> → 到本行的第一个非blank字符</li>\n<li><code>$</code> → 到行尾</li>\n<li><code>g_</code> → 到本行最后一个不是blank字符的位置。</li>\n<li><code>fa</code> → 到下一个为a的字符处，你也可以fs到下一个为s的字符。</li>\n<li><code>t,</code> → 到逗号前的第一个字符。逗号可以变成其它字符。</li>\n<li><code>3fa</code> → 在当前行查找第三个出现的a。</li>\n<li><code>F</code> 和 <code>T</code> → 和 <code>f</code> 和 <code>t</code> 一样，只不过是相反方向。<br><img src=\"http://upload-images.jianshu.io/upload_images/3101171-00835b8316330c58.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Line moves\"></li>\n</ul>\n</blockquote>\n<p>还有一个很有用的命令是 <code>dt&quot;</code> → 删除所有的内容，直到遇到双引号—— <code>&quot;。</code></p>\n<h4 id=\"区域选择-lt-action-gt-a-lt-object-gt-或-lt-action-gt-i-lt-object-gt\"><a href=\"#区域选择-lt-action-gt-a-lt-object-gt-或-lt-action-gt-i-lt-object-gt\" class=\"headerlink\" title=\"区域选择 &lt;action&gt;a&lt;object&gt; 或 &lt;action&gt;i&lt;object&gt;\"></a>区域选择 <code>&lt;action&gt;a&lt;object&gt;</code> 或 <code>&lt;action&gt;i&lt;object&gt;</code></h4><p>在visual 模式下，这些命令很强大，其命令格式为</p>\n<p><code>&lt;action&gt;a&lt;object&gt;</code> 和 <code>&lt;action&gt;i&lt;object&gt;</code></p>\n<ul>\n<li>action可以是任何的命令，如 <code>d</code> (删除), <code>y</code> (拷贝), <code>v</code> (可以视模式选择)。</li>\n<li>object 可能是： <code>w</code> 一个单词， <code>W</code> 一个以空格为分隔的单词， <code>s</code> 一个句字， <code>p</code> 一个段落。也可以是一个特别的字符：<code>&quot;、</code> <code>&#39;、</code> <code>)、</code> <code>}、</code> <code>]。</code></li>\n</ul>\n<p>假设你有一个字符串 <code>(map (+) (&quot;foo&quot;))</code>.而光标键在第一个 <code>o</code>的位置。</p>\n<blockquote>\n<ul>\n<li><code>vi&quot;</code> → 会选择 <code>foo</code>.</li>\n<li><code>va&quot;</code> → 会选择 <code>&quot;foo&quot;</code>.</li>\n<li><code>vi)</code> → 会选择 <code>&quot;foo&quot;</code>.</li>\n<li><code>va)</code> → 会选择<code>(&quot;foo&quot;)</code>.</li>\n<li><code>v2i)</code> → 会选择 <code>map (+) (&quot;foo&quot;)</code></li>\n<li><code>v2a)</code> → 会选择 <code>(map (+) (&quot;foo&quot;))</code></li>\n</ul>\n</blockquote>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/3101171-0b109d66a6111c83.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Text objects selection\"></p>\n<h4 id=\"块操作-lt-C-v-gt\"><a href=\"#块操作-lt-C-v-gt\" class=\"headerlink\" title=\"块操作: &lt;C-v&gt;\"></a>块操作: <code>&lt;C-v&gt;</code></h4><p>块操作，典型的操作： <code>0 &lt;C-v&gt; &lt;C-d&gt; I-- [ESC]</code></p>\n<ul>\n<li><code>^</code> → 到行头</li>\n<li><code>&lt;C-v&gt;</code> → 开始块操作</li>\n<li><code>&lt;C-d&gt;</code> → 向下移动 (你也可以使用hjkl来移动光标，或是使用%，或是别的)</li>\n<li><code>I-- [ESC]</code> → I是插入，插入“<code>--</code>”，按ESC键来为每一行生效。</li>\n</ul>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/3101171-8b093a0f65707949.gif?imageMogr2/auto-orient/strip\" alt=\"Rectangular blocks\"></p>\n<p>在Windows下的vim，你需要使用 <code>&lt;C-q&gt;</code> 而不是 <code>&lt;C-v&gt;</code> ，<code>&lt;C-v&gt;</code> 是拷贝剪贴板。</p>\n<h4 id=\"自动提示：-lt-C-n-gt-和-lt-C-p-gt\"><a href=\"#自动提示：-lt-C-n-gt-和-lt-C-p-gt\" class=\"headerlink\" title=\"自动提示： &lt;C-n&gt; 和 &lt;C-p&gt;\"></a>自动提示： <code>&lt;C-n&gt;</code> 和 <code>&lt;C-p&gt;</code></h4><p>在 Insert 模式下，你可以输入一个词的开头，然后按 <code>&lt;C-p&gt;或是&lt;C-n&gt;，自动补齐功能就出现了……</code></p>\n<p>``<img src=\"http://upload-images.jianshu.io/upload_images/3101171-e2ae877e67880ff7.gif?imageMogr2/auto-orient/strip\" alt=\"Completion\"></p>\n<h4 id=\"宏录制：-qa-操作序列-q-a\"><a href=\"#宏录制：-qa-操作序列-q-a\" class=\"headerlink\" title=\"宏录制： qa 操作序列 q, @a, @@\"></a>宏录制： <code>qa</code> 操作序列 <code>q</code>, <code>@a</code>, <code>@@</code></h4><ul>\n<li><code>qa</code> 把你的操作记录在寄存器 <code>a。</code></li>\n<li>于是 <code>@a</code> 会replay被录制的宏。</li>\n<li><code>@@</code> 是一个快捷键用来replay最新录制的宏。</li>\n</ul>\n<blockquote>\n<p><strong>示例</strong></p>\n<p>在一个只有一行且这一行只有“1”的文本中，键入如下命令：</p>\n<ul>\n<li><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;   qaYp&lt;C-a&gt;q</span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p>  →</p>\n<ul>\n<li><code>qa</code> 开始录制</li>\n<li><code>Yp</code> 复制行.</li>\n<li><code>&lt;C-a&gt;</code> 增加1.</li>\n<li><code>q</code> 停止录制.</li>\n</ul>\n<ul>\n<li><p><code>@a</code> → 在1下面写下 2</p>\n</li>\n<li><p><code>@@</code> → 在2 正面写下3</p>\n</li>\n<li><p>现在做 <code>100@@</code> 会创建新的100行，并把数据增加到 103.</p>\n</li>\n</ul>\n</blockquote>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/3101171-f1889f8bca723964.gif?imageMogr2/auto-orient/strip\" alt=\"Macros\"></p>\n<h4 id=\"可视化选择：-v-V-lt-C-v-gt\"><a href=\"#可视化选择：-v-V-lt-C-v-gt\" class=\"headerlink\" title=\"可视化选择： v,V,&lt;C-v&gt;\"></a>可视化选择： <code>v</code>,<code>V</code>,<code>&lt;C-v&gt;</code></h4><p>前面，我们看到了 <code>&lt;C-v&gt;</code>的示例 （在Windows下应该是<c-q>），我们可以使用 <code>v</code> 和 <code>V</code>。一但被选好了，你可以做下面的事：</c-q></p>\n<ul>\n<li><code>J</code> → 把所有的行连接起来（变成一行）</li>\n<li><code>&lt;</code> 或 <code>&gt;</code> → 左右缩进</li>\n<li><code>=</code> → 自动给缩进 （注：这个功能相当强大，我太喜欢了）</li>\n</ul>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/3101171-fe1e19983fca213f.gif?imageMogr2/auto-orient/strip\" alt=\"Autoindent\"></p>\n<p>在所有被选择的行后加上点东西：</p>\n<ul>\n<li><code>&lt;C-v&gt;</code></li>\n<li>选中相关的行 (可使用 <code>j</code> 或 <code>&lt;C-d&gt;</code> 或是 <code>/pattern</code> 或是 <code>%</code> 等……)</li>\n<li><code>$</code> 到行最后</li>\n<li><code>A</code>, 输入字符串，按 <code>ESC。</code></li>\n</ul>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/3101171-b192601247334c4e.gif?imageMogr2/auto-orient/strip\" alt=\"Append to many lines\"></p>\n<h4 id=\"分屏-split-和-vsplit\"><a href=\"#分屏-split-和-vsplit\" class=\"headerlink\" title=\"分屏: :split 和 vsplit.\"></a>分屏: <code>:split</code> 和 <code>vsplit</code>.</h4><p>下面是主要的命令，你可以使用VIM的帮助 <code>:help split</code>. 你可以参考本站以前的一篇文章<a href=\"https://coolshell.cn/articles/1679.html\" target=\"_blank\" rel=\"noopener\">VIM分屏</a>。</p>\n<blockquote>\n<ul>\n<li><code>:split</code> → 创建分屏 (<code>:vsplit</code>创建垂直分屏)</li>\n<li><code>&lt;C-w&gt;&lt;dir&gt;</code> : dir就是方向，可以是 <code>hjkl</code> 或是 ←↓↑→ 中的一个，其用来切换分屏。</li>\n<li><code>&lt;C-w&gt;_</code> (或 <code>&lt;C-w&gt;|</code>) : 最大化尺寸 (<c-w>| 垂直分屏)</c-w></li>\n<li><code>&lt;C-w&gt;+</code> (或 <code>&lt;C-w&gt;-</code>) : 增加尺寸</li>\n</ul>\n</blockquote>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/3101171-f329d01e299cb366.gif?imageMogr2/auto-orient/strip\" alt=\"Split\"></p>\n<h2 id=\"Vim-命令\"><a href=\"#Vim-命令\" class=\"headerlink\" title=\"Vim 命令\"></a>Vim 命令</h2><p><img src=\"http://upload-images.jianshu.io/upload_images/3101171-d11e01e8ebb89308.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<h2 id=\"资料\"><a href=\"#资料\" class=\"headerlink\" title=\"资料\"></a>资料</h2><ul>\n<li><a href=\"https://coolshell.cn/articles/5426.html\" target=\"_blank\" rel=\"noopener\">简明 VIM 练级攻略</a> ，Vim 渐进学习内容来源于这篇文章，作为 Vim 新手，我觉得入门效果很好。</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h1 id=\"Vim-学习笔记\"><a href=\"#Vim-学习笔记\" class=\"headerlink\" title=\"Vim 学习笔记\"></a>Vim 学习笔记</h1><h2 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h2><h3 id=\"什么是-vim\"><a href=\"#什么是-vim\" class=\"headerlink\" title=\"什么是 vim\"></a>什么是 vim</h3><blockquote>\n<p>Vim是从 vi 发展出来的一个文本编辑器。代码补完、编译及错误跳转等方便编程的功能特别丰富，在程序员中被广泛使用。和Emacs并列成为类Unix系统用户最喜欢的编辑器。</p>\n</blockquote>","more":"<h3 id=\"Vim-的模式\"><a href=\"#Vim-的模式\" class=\"headerlink\" title=\"Vim 的模式\"></a>Vim 的模式</h3><p>基本上 vi/vim 共分为三种模式，分别是<strong>命令模式（Command mode）</strong>，<strong>插入模式（Insert mode）</strong>和<strong>底线命令模式（Last line mode）</strong>。</p>\n<h4 id=\"命令模式\"><a href=\"#命令模式\" class=\"headerlink\" title=\"命令模式\"></a>命令模式</h4><p><strong>用户刚刚启动 vi/vim，便进入了命令模式。</strong></p>\n<p>此状态下敲击键盘动作会被 Vim 识别为命令，而非输入字符。</p>\n<h4 id=\"插入模式\"><a href=\"#插入模式\" class=\"headerlink\" title=\"插入模式\"></a>插入模式</h4><p><strong>在命令模式下按下 <code>i</code> 就进入了输入模式。</strong></p>\n<p>在输入模式下，你可以输入文本内容。</p>\n<h4 id=\"底线命令模式\"><a href=\"#底线命令模式\" class=\"headerlink\" title=\"底线命令模式\"></a>底线命令模式</h4><p><strong>在命令模式下按下 <code>:</code>（英文冒号）就进入了底线命令模式。</strong></p>\n<p>底线命令模式可以输入单个或多个字符的命令，可用的命令非常多。</p>\n<h2 id=\"Vim-渐进学习\"><a href=\"#Vim-渐进学习\" class=\"headerlink\" title=\"Vim 渐进学习\"></a>Vim 渐进学习</h2><h3 id=\"第一级-–-存活\"><a href=\"#第一级-–-存活\" class=\"headerlink\" title=\"第一级 – 存活\"></a>第一级 – 存活</h3><ol>\n<li>安装 <a href=\"http://www.vim.org/\" target=\"_blank\" rel=\"noopener\">vim</a></li>\n<li>启动 vim</li>\n<li><strong>什么也别干！</strong>请先阅读</li>\n</ol>\n<p>当你安装好一个编辑器后，你一定会想在其中输入点什么东西，然后看看这个编辑器是什么样子。但vim不是这样的，请按照下面的命令操作：</p>\n<ul>\n<li>启 动Vim后，vim在 <em>Normal</em> 模式下。</li>\n<li>让我们进入 <em>Insert</em> 模式，请按下键 i 。(注：你会看到vim左下角有一个–insert–字样，表示，你可以以插入的方式输入了）</li>\n<li>此时，你可以输入文本了，就像你用“记事本”一样。</li>\n<li>如果你想返回 <em>Normal</em> 模式，请按 <code>ESC</code> 键。</li>\n</ul>\n<p>现在，你知道如何在 <em>Insert</em> 和 <em>Normal</em> 模式下切换了。下面是一些命令，可以让你在 <em>Normal</em> 模式下幸存下来：</p>\n<blockquote>\n<ul>\n<li><code>i</code> → <em>Insert</em> 模式，按 <code>ESC</code> 回到 <em>Normal</em> 模式.</li>\n<li><code>x</code> → 删当前光标所在的一个字符。</li>\n<li><code>:wq</code> → 存盘 + 退出 (<code>:w</code> 存盘, <code>:q</code> 退出)   （注：:w 后可以跟文件名）</li>\n<li><code>dd</code> → 删除当前行，并把删除的行存到剪贴板里</li>\n<li><code>p</code> → 粘贴剪贴板</li>\n</ul>\n<p><strong>推荐</strong></p>\n<ul>\n<li><code>hjkl</code> (强例推荐使用其移动光标，但不必需) →你也可以使用光标键 (←↓↑→). 注: <code>j</code> 就像下箭头。</li>\n<li><code>:help &lt;command&gt;</code> → 显示相关命令的帮助。你也可以就输入 <code>:help</code> 而不跟命令。（注：退出帮助需要输入:q）</li>\n</ul>\n</blockquote>\n<p>你能在vim幸存下来只需要上述的那5个命令，你就可以编辑文本了，你一定要把这些命令练成一种下意识的状态。于是你就可以开始进阶到第二级了。</p>\n<p>当是，在你进入第二级时，需要再说一下 <em>Normal</em> 模式。在一般的编辑器下，当你需要 copy 一段文字的时候，你需要使用 <code>Ctrl</code> 键，比如：<code>Ctrl-C</code>。也就是说，<code>Ctrl</code> 键就好像功能键一样，当你按下了功能键 <code>Ctrl</code> 后，C 就不在是 C 了，而且就是一个命令或是一个快键键了，<strong>在 vim 的 Normal 模式下，所有的键都是功能键</strong>。这个你需要知道。</p>\n<blockquote>\n<p><strong>标记</strong></p>\n<ul>\n<li>下面的文字中，如果是 <code>Ctrl-λ</code>我会写成 <code>&lt;C-λ&gt;</code>.</li>\n<li>以 <code>:</code> 开始的命令你需要输入 <code>&lt;enter&gt;</code>回车，例如 — 如果我写成 <code>:q</code> 也就是说你要输入 <code>:q&lt;enter&gt;</code>.</li>\n</ul>\n</blockquote>\n<h3 id=\"第二级-–-感觉良好\"><a href=\"#第二级-–-感觉良好\" class=\"headerlink\" title=\"第二级 – 感觉良好\"></a>第二级 – 感觉良好</h3><p>上面的那些命令只能让你存活下来，现在是时候学习一些更多的命令了，下面是我的建议：（注：所有的命令都需要在 Normal 模式下使用，如果你不知道现在在什么样的模式，你就狂按几次ESC键）</p>\n<ol>\n<li><p>各种插入模式</p>\n<blockquote>\n<ul>\n<li><code>a</code> → 在光标后插入</li>\n<li><code>o</code> → 在当前行后插入一个新行</li>\n<li><code>O</code> → 在当前行前插入一个新行</li>\n<li><code>cw</code> → 替换从光标所在位置后到一个单词结尾的字符</li>\n</ul>\n</blockquote>\n</li>\n<li><p>简单的移动光标</p>\n<blockquote>\n<ul>\n<li><code>0</code> → 数字零，到行头</li>\n<li><code>^</code> → 到本行第一个不是blank字符的位置（所谓blank字符就是空格，tab，换行，回车等）</li>\n<li><code>$</code> → 到本行行尾</li>\n<li><code>g_</code> → 到本行最后一个不是blank字符的位置。</li>\n<li><code>/pattern</code> → 搜索 <code>pattern</code> 的字符串（注：如果搜索出多个匹配，可按n键到下一个）</li>\n</ul>\n</blockquote>\n</li>\n<li><p>拷贝/粘贴</p>\n<p>（注：p/P都可以，p是表示在当前位置之后，P表示在当前位置之前）</p>\n<blockquote>\n<ul>\n<li><code>P</code> → 粘贴</li>\n<li><code>yy</code> → 拷贝当前行当行于 <code>ddP</code></li>\n</ul>\n</blockquote>\n</li>\n<li><p>Undo/Redo</p>\n<blockquote>\n<ul>\n<li><code>u</code> → undo</li>\n<li><code>&lt;C-r&gt;</code> → redo</li>\n</ul>\n</blockquote>\n</li>\n<li><p>打开/保存/退出/改变文件</p>\n<p>(Buffer)</p>\n<blockquote>\n<ul>\n<li><code>:e &lt;path/to/file&gt;</code> → 打开一个文件</li>\n<li><code>:w</code> → 存盘</li>\n<li><code>:saveas &lt;path/to/file&gt;</code> → 另存为 <code>&lt;path/to/file&gt;</code></li>\n<li><code>:x</code>， <code>ZZ</code> 或 <code>:wq</code> → 保存并退出 (<code>:x</code> 表示仅在需要时保存，ZZ不需要输入冒号并回车)</li>\n<li><code>:q!</code> → 退出不保存 <code>:qa!</code> 强行退出所有的正在编辑的文件，就算别的文件有更改。</li>\n<li><code>:bn</code> 和 <code>:bp</code> → 你可以同时打开很多文件，使用这两个命令来切换下一个或上一个文件。（注：我喜欢使用:n到下一个文件）</li>\n</ul>\n</blockquote>\n</li>\n</ol>\n<p>花点时间熟悉一下上面的命令，一旦你掌握他们了，你就几乎可以干其它编辑器都能干的事了。但是到现在为止，你还是觉得使用vim还是有点笨拙，不过没关系，你可以进阶到第三级了。</p>\n<h3 id=\"第三级-–-更好，更强，更快\"><a href=\"#第三级-–-更好，更强，更快\" class=\"headerlink\" title=\"第三级 – 更好，更强，更快\"></a>第三级 – 更好，更强，更快</h3><p>先恭喜你！你干的很不错。我们可以开始一些更为有趣的事了。在第三级，我们只谈那些和vi可以兼容的命令。</p>\n<h4 id=\"更好\"><a href=\"#更好\" class=\"headerlink\" title=\"更好\"></a>更好</h4><p>下面，让我们看一下vim是怎么重复自己的：1515G</p>\n<ol>\n<li><code>.</code> → (小数点) 可以重复上一次的命令</li>\n<li><code>N&lt;command&gt;</code> → 重复某个命令N次</li>\n</ol>\n<p>下面是一个示例，找开一个文件你可以试试下面的命令：</p>\n<blockquote>\n<ul>\n<li><code>2dd</code> → 删除2行</li>\n<li><code>3p</code> → 粘贴文本3次</li>\n<li><code>100idesu [ESC]</code> → 会写下 “desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu “</li>\n<li><code>.</code> → 重复上一个命令—— 100 “desu “.</li>\n<li><code>3.</code> → 重复 3 次 “desu” (注意：不是 300，你看，VIM多聪明啊).</li>\n</ul>\n</blockquote>\n<h4 id=\"更强\"><a href=\"#更强\" class=\"headerlink\" title=\"更强\"></a>更强</h4><p>你要让你的光标移动更有效率，你一定要了解下面的这些命令，<strong>千万别跳过</strong>。</p>\n<ol>\n<li><p>N<code>G</code> → 到第 N 行 （注：注意命令中的G是大写的，另我一般使用 : N 到第N行，如 :137 到第137行）</p>\n</li>\n<li><p><code>gg</code> → 到第一行。（注：相当于1G，或 :1）</p>\n</li>\n<li><p><code>G</code> → 到最后一行。</p>\n</li>\n<li><p>按单词移动：</p>\n<blockquote>\n<ol>\n<li><code>w</code> → 到下一个单词的开头。</li>\n<li><code>e</code> → 到下一个单词的结尾。</li>\n</ol>\n<p>> 如果你认为单词是由默认方式，那么就用小写的e和w。默认上来说，一个单词由字母，数字和下划线组成（注：程序变量）</p>\n<p>> 如果你认为单词是由blank字符分隔符，那么你需要使用大写的E和W。（注：程序语句）</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/3101171-46f752c581d79057.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Word moves example\"></p>\n</blockquote>\n</li>\n</ol>\n<p>下面，让我来说说最强的光标移动：</p>\n<blockquote>\n<ul>\n<li><code>%</code> : 匹配括号移动，包括 <code>(</code>, <code>{</code>, <code>[</code>. （注：你需要把光标先移到括号上）</li>\n<li><code>*</code> 和 <code>#</code>:  匹配光标当前所在的单词，移动光标到下一个（或上一个）匹配单词（*是下一个，#是上一个）</li>\n</ul>\n</blockquote>\n<p>相信我，上面这三个命令对程序员来说是相当强大的。</p>\n<h4 id=\"更快\"><a href=\"#更快\" class=\"headerlink\" title=\"更快\"></a>更快</h4><p>你一定要记住光标的移动，因为很多命令都可以和这些移动光标的命令连动。很多命令都可以如下来干：</p>\n<p><code>&lt;start position&gt;&lt;command&gt;&lt;end position&gt;</code></p>\n<p>例如 <code>0y$</code> 命令意味着：</p>\n<ul>\n<li><code>0</code> → 先到行头</li>\n<li><code>y</code> → 从这里开始拷贝</li>\n<li><code>$</code> → 拷贝到本行最后一个字符</li>\n</ul>\n<p>你可可以输入 <code>ye</code>，从当前位置拷贝到本单词的最后一个字符。</p>\n<p>你也可以输入 <code>y2/foo</code> 来拷贝2个 “foo” 之间的字符串。</p>\n<p>还有很多时间并不一定你就一定要按y才会拷贝，下面的命令也会被拷贝：</p>\n<ul>\n<li><code>d</code> (删除 )</li>\n<li><code>v</code> (可视化的选择)</li>\n<li><code>gU</code> (变大写)</li>\n<li><code>gu</code> (变小写)</li>\n<li>等等</li>\n</ul>\n<p>（注：可视化选择是一个很有意思的命令，你可以先按v，然后移动光标，你就会看到文本被选择，然后，你可能d，也可y，也可以变大写等）</p>\n<h3 id=\"第四级-–-Vim-超能力\"><a href=\"#第四级-–-Vim-超能力\" class=\"headerlink\" title=\"第四级 – Vim 超能力\"></a>第四级 – Vim 超能力</h3><p>你只需要掌握前面的命令，你就可以很舒服的使用VIM了。但是，现在，我们向你介绍的是VIM杀手级的功能。下面这些功能是我只用vim的原因。</p>\n<h4 id=\"在当前行上移动光标-0-fFtT\"><a href=\"#在当前行上移动光标-0-fFtT\" class=\"headerlink\" title=\"在当前行上移动光标: 0 ^ ####fFtT,;`\"></a>在当前行上移动光标: <code>0</code> <code>^</code> <code>####</code>f<code></code>F<code></code>t<code></code>T<code></code>,<code></code>;`</h4><blockquote>\n<ul>\n<li><code>0</code> → 到行头</li>\n<li><code>^</code> → 到本行的第一个非blank字符</li>\n<li><code>$</code> → 到行尾</li>\n<li><code>g_</code> → 到本行最后一个不是blank字符的位置。</li>\n<li><code>fa</code> → 到下一个为a的字符处，你也可以fs到下一个为s的字符。</li>\n<li><code>t,</code> → 到逗号前的第一个字符。逗号可以变成其它字符。</li>\n<li><code>3fa</code> → 在当前行查找第三个出现的a。</li>\n<li><code>F</code> 和 <code>T</code> → 和 <code>f</code> 和 <code>t</code> 一样，只不过是相反方向。<br><img src=\"http://upload-images.jianshu.io/upload_images/3101171-00835b8316330c58.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Line moves\"></li>\n</ul>\n</blockquote>\n<p>还有一个很有用的命令是 <code>dt&quot;</code> → 删除所有的内容，直到遇到双引号—— <code>&quot;。</code></p>\n<h4 id=\"区域选择-lt-action-gt-a-lt-object-gt-或-lt-action-gt-i-lt-object-gt\"><a href=\"#区域选择-lt-action-gt-a-lt-object-gt-或-lt-action-gt-i-lt-object-gt\" class=\"headerlink\" title=\"区域选择 &lt;action&gt;a&lt;object&gt; 或 &lt;action&gt;i&lt;object&gt;\"></a>区域选择 <code>&lt;action&gt;a&lt;object&gt;</code> 或 <code>&lt;action&gt;i&lt;object&gt;</code></h4><p>在visual 模式下，这些命令很强大，其命令格式为</p>\n<p><code>&lt;action&gt;a&lt;object&gt;</code> 和 <code>&lt;action&gt;i&lt;object&gt;</code></p>\n<ul>\n<li>action可以是任何的命令，如 <code>d</code> (删除), <code>y</code> (拷贝), <code>v</code> (可以视模式选择)。</li>\n<li>object 可能是： <code>w</code> 一个单词， <code>W</code> 一个以空格为分隔的单词， <code>s</code> 一个句字， <code>p</code> 一个段落。也可以是一个特别的字符：<code>&quot;、</code> <code>&#39;、</code> <code>)、</code> <code>}、</code> <code>]。</code></li>\n</ul>\n<p>假设你有一个字符串 <code>(map (+) (&quot;foo&quot;))</code>.而光标键在第一个 <code>o</code>的位置。</p>\n<blockquote>\n<ul>\n<li><code>vi&quot;</code> → 会选择 <code>foo</code>.</li>\n<li><code>va&quot;</code> → 会选择 <code>&quot;foo&quot;</code>.</li>\n<li><code>vi)</code> → 会选择 <code>&quot;foo&quot;</code>.</li>\n<li><code>va)</code> → 会选择<code>(&quot;foo&quot;)</code>.</li>\n<li><code>v2i)</code> → 会选择 <code>map (+) (&quot;foo&quot;)</code></li>\n<li><code>v2a)</code> → 会选择 <code>(map (+) (&quot;foo&quot;))</code></li>\n</ul>\n</blockquote>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/3101171-0b109d66a6111c83.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Text objects selection\"></p>\n<h4 id=\"块操作-lt-C-v-gt\"><a href=\"#块操作-lt-C-v-gt\" class=\"headerlink\" title=\"块操作: &lt;C-v&gt;\"></a>块操作: <code>&lt;C-v&gt;</code></h4><p>块操作，典型的操作： <code>0 &lt;C-v&gt; &lt;C-d&gt; I-- [ESC]</code></p>\n<ul>\n<li><code>^</code> → 到行头</li>\n<li><code>&lt;C-v&gt;</code> → 开始块操作</li>\n<li><code>&lt;C-d&gt;</code> → 向下移动 (你也可以使用hjkl来移动光标，或是使用%，或是别的)</li>\n<li><code>I-- [ESC]</code> → I是插入，插入“<code>--</code>”，按ESC键来为每一行生效。</li>\n</ul>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/3101171-8b093a0f65707949.gif?imageMogr2/auto-orient/strip\" alt=\"Rectangular blocks\"></p>\n<p>在Windows下的vim，你需要使用 <code>&lt;C-q&gt;</code> 而不是 <code>&lt;C-v&gt;</code> ，<code>&lt;C-v&gt;</code> 是拷贝剪贴板。</p>\n<h4 id=\"自动提示：-lt-C-n-gt-和-lt-C-p-gt\"><a href=\"#自动提示：-lt-C-n-gt-和-lt-C-p-gt\" class=\"headerlink\" title=\"自动提示： &lt;C-n&gt; 和 &lt;C-p&gt;\"></a>自动提示： <code>&lt;C-n&gt;</code> 和 <code>&lt;C-p&gt;</code></h4><p>在 Insert 模式下，你可以输入一个词的开头，然后按 <code>&lt;C-p&gt;或是&lt;C-n&gt;，自动补齐功能就出现了……</code></p>\n<p>``<img src=\"http://upload-images.jianshu.io/upload_images/3101171-e2ae877e67880ff7.gif?imageMogr2/auto-orient/strip\" alt=\"Completion\"></p>\n<h4 id=\"宏录制：-qa-操作序列-q-a\"><a href=\"#宏录制：-qa-操作序列-q-a\" class=\"headerlink\" title=\"宏录制： qa 操作序列 q, @a, @@\"></a>宏录制： <code>qa</code> 操作序列 <code>q</code>, <code>@a</code>, <code>@@</code></h4><ul>\n<li><code>qa</code> 把你的操作记录在寄存器 <code>a。</code></li>\n<li>于是 <code>@a</code> 会replay被录制的宏。</li>\n<li><code>@@</code> 是一个快捷键用来replay最新录制的宏。</li>\n</ul>\n<blockquote>\n<p><strong>示例</strong></p>\n<p>在一个只有一行且这一行只有“1”的文本中，键入如下命令：</p>\n<ul>\n<li><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;   qaYp&lt;C-a&gt;q</span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p>  →</p>\n<ul>\n<li><code>qa</code> 开始录制</li>\n<li><code>Yp</code> 复制行.</li>\n<li><code>&lt;C-a&gt;</code> 增加1.</li>\n<li><code>q</code> 停止录制.</li>\n</ul>\n<ul>\n<li><p><code>@a</code> → 在1下面写下 2</p>\n</li>\n<li><p><code>@@</code> → 在2 正面写下3</p>\n</li>\n<li><p>现在做 <code>100@@</code> 会创建新的100行，并把数据增加到 103.</p>\n</li>\n</ul>\n</blockquote>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/3101171-f1889f8bca723964.gif?imageMogr2/auto-orient/strip\" alt=\"Macros\"></p>\n<h4 id=\"可视化选择：-v-V-lt-C-v-gt\"><a href=\"#可视化选择：-v-V-lt-C-v-gt\" class=\"headerlink\" title=\"可视化选择： v,V,&lt;C-v&gt;\"></a>可视化选择： <code>v</code>,<code>V</code>,<code>&lt;C-v&gt;</code></h4><p>前面，我们看到了 <code>&lt;C-v&gt;</code>的示例 （在Windows下应该是<c-q>），我们可以使用 <code>v</code> 和 <code>V</code>。一但被选好了，你可以做下面的事：</c-q></p>\n<ul>\n<li><code>J</code> → 把所有的行连接起来（变成一行）</li>\n<li><code>&lt;</code> 或 <code>&gt;</code> → 左右缩进</li>\n<li><code>=</code> → 自动给缩进 （注：这个功能相当强大，我太喜欢了）</li>\n</ul>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/3101171-fe1e19983fca213f.gif?imageMogr2/auto-orient/strip\" alt=\"Autoindent\"></p>\n<p>在所有被选择的行后加上点东西：</p>\n<ul>\n<li><code>&lt;C-v&gt;</code></li>\n<li>选中相关的行 (可使用 <code>j</code> 或 <code>&lt;C-d&gt;</code> 或是 <code>/pattern</code> 或是 <code>%</code> 等……)</li>\n<li><code>$</code> 到行最后</li>\n<li><code>A</code>, 输入字符串，按 <code>ESC。</code></li>\n</ul>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/3101171-b192601247334c4e.gif?imageMogr2/auto-orient/strip\" alt=\"Append to many lines\"></p>\n<h4 id=\"分屏-split-和-vsplit\"><a href=\"#分屏-split-和-vsplit\" class=\"headerlink\" title=\"分屏: :split 和 vsplit.\"></a>分屏: <code>:split</code> 和 <code>vsplit</code>.</h4><p>下面是主要的命令，你可以使用VIM的帮助 <code>:help split</code>. 你可以参考本站以前的一篇文章<a href=\"https://coolshell.cn/articles/1679.html\" target=\"_blank\" rel=\"noopener\">VIM分屏</a>。</p>\n<blockquote>\n<ul>\n<li><code>:split</code> → 创建分屏 (<code>:vsplit</code>创建垂直分屏)</li>\n<li><code>&lt;C-w&gt;&lt;dir&gt;</code> : dir就是方向，可以是 <code>hjkl</code> 或是 ←↓↑→ 中的一个，其用来切换分屏。</li>\n<li><code>&lt;C-w&gt;_</code> (或 <code>&lt;C-w&gt;|</code>) : 最大化尺寸 (<c-w>| 垂直分屏)</c-w></li>\n<li><code>&lt;C-w&gt;+</code> (或 <code>&lt;C-w&gt;-</code>) : 增加尺寸</li>\n</ul>\n</blockquote>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/3101171-f329d01e299cb366.gif?imageMogr2/auto-orient/strip\" alt=\"Split\"></p>\n<h2 id=\"Vim-命令\"><a href=\"#Vim-命令\" class=\"headerlink\" title=\"Vim 命令\"></a>Vim 命令</h2><p><img src=\"http://upload-images.jianshu.io/upload_images/3101171-d11e01e8ebb89308.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<h2 id=\"资料\"><a href=\"#资料\" class=\"headerlink\" title=\"资料\"></a>资料</h2><ul>\n<li><a href=\"https://coolshell.cn/articles/5426.html\" target=\"_blank\" rel=\"noopener\">简明 VIM 练级攻略</a> ，Vim 渐进学习内容来源于这篇文章，作为 Vim 新手，我觉得入门效果很好。</li>\n</ul>"}],"PostAsset":[],"PostCategory":[{"post_id":"cjbwxj0xi0000h0vomytam622","category_id":"cjbwxj0xy0004h0voi67tuset","_id":"cjbwxj0yt000gh0vogor1wm4i"},{"post_id":"cjbwxj0xi0002h0vofi46kbqk","category_id":"cjbwxj0xy0004h0voi67tuset","_id":"cjbwxj0z8000lh0vortnpxped"},{"post_id":"cjbwxj0xy0006h0vomatgtb4u","category_id":"cjbwxj0yt000fh0vo43slj6bd","_id":"cjbwxj0z8000rh0voabi4je0l"},{"post_id":"cjbwxj0yd0008h0vo2nutw1mu","category_id":"cjbwxj0z8000mh0vo9jiqi61p","_id":"cjbwxj0zo000yh0voht7dng1q"},{"post_id":"cjbwxj0yd0009h0vo4vfsmetx","category_id":"cjbwxj0z8000mh0vo9jiqi61p","_id":"cjbwxj1040015h0voy0dip3l5"},{"post_id":"cjbwxj0zo000wh0vogvb6mepl","category_id":"cjbwxj0yt000fh0vo43slj6bd","_id":"cjbwxj1040019h0vod3h9etlf"},{"post_id":"cjbwxj0yt000dh0vonziuhl2x","category_id":"cjbwxj0z8000mh0vo9jiqi61p","_id":"cjbwxj10j001bh0voqje7laur"},{"post_id":"cjbwxj1040017h0voxegzaogw","category_id":"cjbwxj1040014h0vok5bxdcn4","_id":"cjbwxj10j001gh0voi9931ilv"},{"post_id":"cjbwxj0yt000eh0vo3nshfkrz","category_id":"cjbwxj1040014h0vok5bxdcn4","_id":"cjbwxj10j001hh0vo4wjec15s"},{"post_id":"cjbwxj0yt000jh0vob869tz87","category_id":"cjbwxj10j001dh0vogkedm7fq","_id":"cjbwxj10j001mh0votsulhv5f"},{"post_id":"cjbwxj0yt000kh0vowosdvt8e","category_id":"cjbwxj10j001dh0vogkedm7fq","_id":"cjbwxj10j001qh0vobmmssl92"},{"post_id":"cjbwxj0z8000oh0voe23z1g3y","category_id":"cjbwxj10j001dh0vogkedm7fq","_id":"cjbwxj10j001th0von20xhd0a"},{"post_id":"cjbwxj0z8000qh0vo9099jlih","category_id":"cjbwxj10j001ph0vokeept9vm","_id":"cjbwxj10z001xh0vocu40uh28"},{"post_id":"cjbwxj0z8000uh0voirhic654","category_id":"cjbwxj10j001uh0voe1bg6hdt","_id":"cjbwxj10z0022h0vo25r38pku"},{"post_id":"cjbwxj1040010h0vokoii3lhg","category_id":"cjbwxj10j001ph0vokeept9vm","_id":"cjbwxj10z0025h0vo118sffh0"},{"post_id":"cjbwxj1040012h0vock39xxh8","category_id":"cjbwxj10z0021h0vo1bcxr95q","_id":"cjbwxj10z0028h0vov06xdp8n"},{"post_id":"cjbwxj104001ah0vo88x9k1np","category_id":"cjbwxj10z0021h0vo1bcxr95q","_id":"cjbwxj10z002ah0voyhpdz4qp"}],"PostTag":[{"post_id":"cjbwxj0xi0000h0vomytam622","tag_id":"cjbwxj0xy0005h0volf478dm6","_id":"cjbwxj0yt000ch0vodms9obza"},{"post_id":"cjbwxj0xi0002h0vofi46kbqk","tag_id":"cjbwxj0xy0005h0volf478dm6","_id":"cjbwxj0yt000ih0vonhnl1gtx"},{"post_id":"cjbwxj0xy0006h0vomatgtb4u","tag_id":"cjbwxj0yt000hh0vo75zi1qha","_id":"cjbwxj0z8000ph0vo9gajsjae"},{"post_id":"cjbwxj0yd0008h0vo2nutw1mu","tag_id":"cjbwxj0z8000nh0vo4wk8xics","_id":"cjbwxj0zo000vh0vokv9dq663"},{"post_id":"cjbwxj0yd0009h0vo4vfsmetx","tag_id":"cjbwxj0z8000nh0vo4wk8xics","_id":"cjbwxj1040011h0voje5y4r9i"},{"post_id":"cjbwxj0zo000wh0vogvb6mepl","tag_id":"cjbwxj0yt000hh0vo75zi1qha","_id":"cjbwxj1040013h0vo8h6i544x"},{"post_id":"cjbwxj0yt000dh0vonziuhl2x","tag_id":"cjbwxj0z8000nh0vo4wk8xics","_id":"cjbwxj1040018h0vovkhxqr4p"},{"post_id":"cjbwxj1040017h0voxegzaogw","tag_id":"cjbwxj1040016h0voy4vtadq2","_id":"cjbwxj10j001ch0vo6jkuzzc7"},{"post_id":"cjbwxj0yt000eh0vo3nshfkrz","tag_id":"cjbwxj1040016h0voy4vtadq2","_id":"cjbwxj10j001fh0vodus4rdtc"},{"post_id":"cjbwxj0yt000jh0vob869tz87","tag_id":"cjbwxj10j001eh0vo9r94y2zq","_id":"cjbwxj10j001kh0vooodwqwd9"},{"post_id":"cjbwxj0yt000kh0vowosdvt8e","tag_id":"cjbwxj10j001eh0vo9r94y2zq","_id":"cjbwxj10j001oh0voe1xkmpto"},{"post_id":"cjbwxj0z8000oh0voe23z1g3y","tag_id":"cjbwxj10j001eh0vo9r94y2zq","_id":"cjbwxj10j001sh0vo70r0ji41"},{"post_id":"cjbwxj0z8000qh0vo9099jlih","tag_id":"cjbwxj10j001rh0voewdu3bdx","_id":"cjbwxj10j001wh0vo0nyknebh"},{"post_id":"cjbwxj0z8000uh0voirhic654","tag_id":"cjbwxj10j001vh0vo7sg36ukt","_id":"cjbwxj10z0020h0vo5lndjl2x"},{"post_id":"cjbwxj1040010h0vokoii3lhg","tag_id":"cjbwxj10j001rh0voewdu3bdx","_id":"cjbwxj10z0024h0vog87tgpig"},{"post_id":"cjbwxj1040012h0vock39xxh8","tag_id":"cjbwxj10z0023h0vos7jbj7o8","_id":"cjbwxj10z002ch0vowqpw6oav"},{"post_id":"cjbwxj1040012h0vock39xxh8","tag_id":"cjbwxj10z0027h0voih3lw9j8","_id":"cjbwxj10z002dh0voqs35bqxa"},{"post_id":"cjbwxj1040012h0vock39xxh8","tag_id":"cjbwxj10z0029h0vop2sdt2yw","_id":"cjbwxj10z002fh0vokeqonp5v"},{"post_id":"cjbwxj104001ah0vo88x9k1np","tag_id":"cjbwxj10z0023h0vos7jbj7o8","_id":"cjbwxj10z002gh0vohbe0c26k"},{"post_id":"cjbwxj104001ah0vo88x9k1np","tag_id":"cjbwxj10z002eh0votomwb8ws","_id":"cjbwxj10z002hh0vovu2q88c6"}],"Tag":[{"name":"心灵救赎","_id":"cjbwxj0xy0005h0volf478dm6"},{"name":"那些年，那些事","_id":"cjbwxj0yt000hh0vo75zi1qha"},{"name":"算法","_id":"cjbwxj0z8000nh0vo4wk8xics"},{"name":"python","_id":"cjbwxj1040016h0voy4vtadq2"},{"name":"go语言基础","_id":"cjbwxj10j001eh0vo9r94y2zq"},{"name":"dashborad","_id":"cjbwxj10j001rh0voewdu3bdx"},{"name":"markdown","_id":"cjbwxj10j001vh0vo7sg36ukt"},{"name":"linux","_id":"cjbwxj10z0023h0vos7jbj7o8"},{"name":"shell","_id":"cjbwxj10z0027h0voih3lw9j8"},{"name":"bash","_id":"cjbwxj10z0029h0vop2sdt2yw"},{"name":"vim","_id":"cjbwxj10z002eh0votomwb8ws"}]}}